/****** Object:  Synonym [dbo].[NODE_RCRA_CA_AREA]    Script Date: 6/12/2019 2:50:52 PM ******/
CREATE SYNONYM [dbo].[NODE_RCRA_CA_AREA] FOR [NODE_FLOW_RCRA].[dbo].[RCRA_CA_AREA]
GO
/****** Object:  Synonym [dbo].[NODE_RCRA_CA_AREA_REL_EVENT]    Script Date: 6/12/2019 2:50:52 PM ******/
CREATE SYNONYM [dbo].[NODE_RCRA_CA_AREA_REL_EVENT] FOR [NODE_FLOW_RCRA].[dbo].[RCRA_CA_AREA_REL_EVENT]
GO
/****** Object:  Synonym [dbo].[NODE_RCRA_CA_AUTH_REL_EVENT]    Script Date: 6/12/2019 2:50:52 PM ******/
CREATE SYNONYM [dbo].[NODE_RCRA_CA_AUTH_REL_EVENT] FOR [NODE_FLOW_RCRA].[dbo].[RCRA_CA_AUTH_REL_EVENT]
GO
/****** Object:  Synonym [dbo].[NODE_RCRA_CA_AUTHORITY]    Script Date: 6/12/2019 2:50:52 PM ******/
CREATE SYNONYM [dbo].[NODE_RCRA_CA_AUTHORITY] FOR [NODE_FLOW_RCRA].[dbo].[RCRA_CA_AUTHORITY]
GO
/****** Object:  Synonym [dbo].[NODE_RCRA_CA_EVENT]    Script Date: 6/12/2019 2:50:52 PM ******/
CREATE SYNONYM [dbo].[NODE_RCRA_CA_EVENT] FOR [NODE_FLOW_RCRA].[dbo].[RCRA_CA_EVENT]
GO
/****** Object:  Synonym [dbo].[NODE_RCRA_CA_EVENT_COMMITMENT]    Script Date: 6/12/2019 2:50:52 PM ******/
CREATE SYNONYM [dbo].[NODE_RCRA_CA_EVENT_COMMITMENT] FOR [NODE_FLOW_RCRA].[dbo].[RCRA_CA_EVENT_COMMITMENT]
GO
/****** Object:  Synonym [dbo].[NODE_RCRA_CA_FAC_SUBM]    Script Date: 6/12/2019 2:50:52 PM ******/
CREATE SYNONYM [dbo].[NODE_RCRA_CA_FAC_SUBM] FOR [NODE_FLOW_RCRA].[dbo].[RCRA_CA_FAC_SUBM]
GO
/****** Object:  Synonym [dbo].[NODE_RCRA_CA_REL_PERMIT_UNIT]    Script Date: 6/12/2019 2:50:52 PM ******/
CREATE SYNONYM [dbo].[NODE_RCRA_CA_REL_PERMIT_UNIT] FOR [NODE_FLOW_RCRA].[dbo].[RCRA_CA_REL_PERMIT_UNIT]
GO
/****** Object:  Synonym [dbo].[NODE_RCRA_CA_STATUTORY_CITATION]    Script Date: 6/12/2019 2:50:52 PM ******/
CREATE SYNONYM [dbo].[NODE_RCRA_CA_STATUTORY_CITATION] FOR [NODE_FLOW_RCRA].[dbo].[RCRA_CA_STATUTORY_CITATION]
GO
/****** Object:  Synonym [dbo].[NODE_RCRA_CA_SUBM]    Script Date: 6/12/2019 2:50:52 PM ******/
CREATE SYNONYM [dbo].[NODE_RCRA_CA_SUBM] FOR [NODE_FLOW_RCRA].[dbo].[RCRA_CA_SUBM]
GO
/****** Object:  Synonym [dbo].[NODE_RCRA_CME_CITATION]    Script Date: 6/12/2019 2:50:52 PM ******/
CREATE SYNONYM [dbo].[NODE_RCRA_CME_CITATION] FOR [NODE_FLOW_RCRA].[dbo].[RCRA_CME_CITATION]
GO
/****** Object:  Synonym [dbo].[NODE_RCRA_CME_CSNY_DATE]    Script Date: 6/12/2019 2:50:52 PM ******/
CREATE SYNONYM [dbo].[NODE_RCRA_CME_CSNY_DATE] FOR [NODE_FLOW_RCRA].[dbo].[RCRA_CME_CSNY_DATE]
GO
/****** Object:  Synonym [dbo].[NODE_RCRA_CME_ENFRC_ACT]    Script Date: 6/12/2019 2:50:52 PM ******/
CREATE SYNONYM [dbo].[NODE_RCRA_CME_ENFRC_ACT] FOR [NODE_FLOW_RCRA].[dbo].[RCRA_CME_ENFRC_ACT]
GO
/****** Object:  Synonym [dbo].[NODE_RCRA_CME_EVAL]    Script Date: 6/12/2019 2:50:52 PM ******/
CREATE SYNONYM [dbo].[NODE_RCRA_CME_EVAL] FOR [NODE_FLOW_RCRA].[dbo].[RCRA_CME_EVAL]
GO
/****** Object:  Synonym [dbo].[NODE_RCRA_CME_EVAL_COMMIT]    Script Date: 6/12/2019 2:50:52 PM ******/
CREATE SYNONYM [dbo].[NODE_RCRA_CME_EVAL_COMMIT] FOR [NODE_FLOW_RCRA].[dbo].[RCRA_CME_EVAL_COMMIT]
GO
/****** Object:  Synonym [dbo].[NODE_RCRA_CME_EVAL_VIOL]    Script Date: 6/12/2019 2:50:52 PM ******/
CREATE SYNONYM [dbo].[NODE_RCRA_CME_EVAL_VIOL] FOR [NODE_FLOW_RCRA].[dbo].[RCRA_CME_EVAL_VIOL]
GO
/****** Object:  Synonym [dbo].[NODE_RCRA_CME_FAC_SUBM]    Script Date: 6/12/2019 2:50:53 PM ******/
CREATE SYNONYM [dbo].[NODE_RCRA_CME_FAC_SUBM] FOR [NODE_FLOW_RCRA].[dbo].[RCRA_CME_FAC_SUBM]
GO
/****** Object:  Synonym [dbo].[NODE_RCRA_CME_MEDIA]    Script Date: 6/12/2019 2:50:53 PM ******/
CREATE SYNONYM [dbo].[NODE_RCRA_CME_MEDIA] FOR [NODE_FLOW_RCRA].[dbo].[RCRA_CME_MEDIA]
GO
/****** Object:  Synonym [dbo].[NODE_RCRA_CME_MILESTONE]    Script Date: 6/12/2019 2:50:53 PM ******/
CREATE SYNONYM [dbo].[NODE_RCRA_CME_MILESTONE] FOR [NODE_FLOW_RCRA].[dbo].[RCRA_CME_MILESTONE]
GO
/****** Object:  Synonym [dbo].[NODE_RCRA_CME_PNLTY]    Script Date: 6/12/2019 2:50:53 PM ******/
CREATE SYNONYM [dbo].[NODE_RCRA_CME_PNLTY] FOR [NODE_FLOW_RCRA].[dbo].[RCRA_CME_PNLTY]
GO
/****** Object:  Synonym [dbo].[NODE_RCRA_CME_PYMT]    Script Date: 6/12/2019 2:50:53 PM ******/
CREATE SYNONYM [dbo].[NODE_RCRA_CME_PYMT] FOR [NODE_FLOW_RCRA].[dbo].[RCRA_CME_PYMT]
GO
/****** Object:  Synonym [dbo].[NODE_RCRA_CME_RQST]    Script Date: 6/12/2019 2:50:53 PM ******/
CREATE SYNONYM [dbo].[NODE_RCRA_CME_RQST] FOR [NODE_FLOW_RCRA].[dbo].[RCRA_CME_RQST]
GO
/****** Object:  Synonym [dbo].[NODE_RCRA_CME_SUBM]    Script Date: 6/12/2019 2:50:53 PM ******/
CREATE SYNONYM [dbo].[NODE_RCRA_CME_SUBM] FOR [NODE_FLOW_RCRA].[dbo].[RCRA_CME_SUBM]
GO
/****** Object:  Synonym [dbo].[NODE_RCRA_CME_SUPP_ENVR_PRJT]    Script Date: 6/12/2019 2:50:53 PM ******/
CREATE SYNONYM [dbo].[NODE_RCRA_CME_SUPP_ENVR_PRJT] FOR [NODE_FLOW_RCRA].[dbo].[RCRA_CME_SUPP_ENVR_PRJT]
GO
/****** Object:  Synonym [dbo].[NODE_RCRA_CME_VIOL]    Script Date: 6/12/2019 2:50:53 PM ******/
CREATE SYNONYM [dbo].[NODE_RCRA_CME_VIOL] FOR [NODE_FLOW_RCRA].[dbo].[RCRA_CME_VIOL]
GO
/****** Object:  Synonym [dbo].[NODE_RCRA_CME_VIOL_ENFRC]    Script Date: 6/12/2019 2:50:53 PM ******/
CREATE SYNONYM [dbo].[NODE_RCRA_CME_VIOL_ENFRC] FOR [NODE_FLOW_RCRA].[dbo].[RCRA_CME_VIOL_ENFRC]
GO
/****** Object:  Synonym [dbo].[NODE_RCRA_EM_EMANIFEST]    Script Date: 6/12/2019 2:50:53 PM ******/
CREATE SYNONYM [dbo].[NODE_RCRA_EM_EMANIFEST] FOR [NODE_FLOW_RCRA].[dbo].[RCRA_EM_EMANIFEST]
GO
/****** Object:  Synonym [dbo].[NODE_RCRA_EM_EMANIFEST_COMMENT]    Script Date: 6/12/2019 2:50:53 PM ******/
CREATE SYNONYM [dbo].[NODE_RCRA_EM_EMANIFEST_COMMENT] FOR [NODE_FLOW_RCRA].[dbo].[RCRA_EM_EMANIFEST_COMMENT]
GO
/****** Object:  Synonym [dbo].[NODE_RCRA_EM_HANDLER]    Script Date: 6/12/2019 2:50:53 PM ******/
CREATE SYNONYM [dbo].[NODE_RCRA_EM_HANDLER] FOR [NODE_FLOW_RCRA].[dbo].[RCRA_EM_HANDLER]
GO
/****** Object:  Synonym [dbo].[NODE_RCRA_EM_SUBM]    Script Date: 6/12/2019 2:50:53 PM ******/
CREATE SYNONYM [dbo].[NODE_RCRA_EM_SUBM] FOR [NODE_FLOW_RCRA].[dbo].[RCRA_EM_SUBM]
GO
/****** Object:  Synonym [dbo].[NODE_RCRA_EM_TR_NUM_ORIG]    Script Date: 6/12/2019 2:50:53 PM ******/
CREATE SYNONYM [dbo].[NODE_RCRA_EM_TR_NUM_ORIG] FOR [NODE_FLOW_RCRA].[dbo].[RCRA_EM_TR_NUM_ORIG]
GO
/****** Object:  Synonym [dbo].[NODE_RCRA_EM_TR_NUM_REJ]    Script Date: 6/12/2019 2:50:53 PM ******/
CREATE SYNONYM [dbo].[NODE_RCRA_EM_TR_NUM_REJ] FOR [NODE_FLOW_RCRA].[dbo].[RCRA_EM_TR_NUM_REJ]
GO
/****** Object:  Synonym [dbo].[NODE_RCRA_EM_TR_NUM_RESIDUE_NEW]    Script Date: 6/12/2019 2:50:53 PM ******/
CREATE SYNONYM [dbo].[NODE_RCRA_EM_TR_NUM_RESIDUE_NEW] FOR [NODE_FLOW_RCRA].[dbo].[RCRA_EM_TR_NUM_RESIDUE_NEW]
GO
/****** Object:  Synonym [dbo].[NODE_RCRA_EM_TR_NUM_WASTE]    Script Date: 6/12/2019 2:50:53 PM ******/
CREATE SYNONYM [dbo].[NODE_RCRA_EM_TR_NUM_WASTE] FOR [NODE_FLOW_RCRA].[dbo].[RCRA_EM_TR_NUM_WASTE]
GO
/****** Object:  Synonym [dbo].[NODE_RCRA_EM_WASTE]    Script Date: 6/12/2019 2:50:53 PM ******/
CREATE SYNONYM [dbo].[NODE_RCRA_EM_WASTE] FOR [NODE_FLOW_RCRA].[dbo].[RCRA_EM_WASTE]
GO
/****** Object:  Synonym [dbo].[NODE_RCRA_EM_WASTE_CD_FED]    Script Date: 6/12/2019 2:50:53 PM ******/
CREATE SYNONYM [dbo].[NODE_RCRA_EM_WASTE_CD_FED] FOR [NODE_FLOW_RCRA].[dbo].[RCRA_EM_WASTE_CD_FED]
GO
/****** Object:  Synonym [dbo].[NODE_RCRA_EM_WASTE_CD_GEN]    Script Date: 6/12/2019 2:50:53 PM ******/
CREATE SYNONYM [dbo].[NODE_RCRA_EM_WASTE_CD_GEN] FOR [NODE_FLOW_RCRA].[dbo].[RCRA_EM_WASTE_CD_GEN]
GO
/****** Object:  Synonym [dbo].[NODE_RCRA_EM_WASTE_CD_TRANS]    Script Date: 6/12/2019 2:50:53 PM ******/
CREATE SYNONYM [dbo].[NODE_RCRA_EM_WASTE_CD_TRANS] FOR [NODE_FLOW_RCRA].[dbo].[RCRA_EM_WASTE_CD_TRANS]
GO
/****** Object:  Synonym [dbo].[NODE_RCRA_EM_WASTE_CD_TSDF]    Script Date: 6/12/2019 2:50:53 PM ******/
CREATE SYNONYM [dbo].[NODE_RCRA_EM_WASTE_CD_TSDF] FOR [NODE_FLOW_RCRA].[dbo].[RCRA_EM_WASTE_CD_TSDF]
GO
/****** Object:  Synonym [dbo].[NODE_RCRA_EM_WASTE_COMMENT]    Script Date: 6/12/2019 2:50:53 PM ******/
CREATE SYNONYM [dbo].[NODE_RCRA_EM_WASTE_COMMENT] FOR [NODE_FLOW_RCRA].[dbo].[RCRA_EM_WASTE_COMMENT]
GO
/****** Object:  Synonym [dbo].[NODE_RCRA_EM_WASTE_PCB]    Script Date: 6/12/2019 2:50:53 PM ******/
CREATE SYNONYM [dbo].[NODE_RCRA_EM_WASTE_PCB] FOR [NODE_FLOW_RCRA].[dbo].[RCRA_EM_WASTE_PCB]
GO
/****** Object:  Synonym [dbo].[NODE_RCRA_FA_COST_EST]    Script Date: 6/12/2019 2:50:53 PM ******/
CREATE SYNONYM [dbo].[NODE_RCRA_FA_COST_EST] FOR [NODE_FLOW_RCRA].[dbo].[RCRA_FA_COST_EST]
GO
/****** Object:  Synonym [dbo].[NODE_RCRA_FA_COST_EST_REL_MECHANISM]    Script Date: 6/12/2019 2:50:53 PM ******/
CREATE SYNONYM [dbo].[NODE_RCRA_FA_COST_EST_REL_MECHANISM] FOR [NODE_FLOW_RCRA].[dbo].[RCRA_FA_COST_EST_REL_MECHANISM]
GO
/****** Object:  Synonym [dbo].[NODE_RCRA_FA_FAC_SUBM]    Script Date: 6/12/2019 2:50:53 PM ******/
CREATE SYNONYM [dbo].[NODE_RCRA_FA_FAC_SUBM] FOR [NODE_FLOW_RCRA].[dbo].[RCRA_FA_FAC_SUBM]
GO
/****** Object:  Synonym [dbo].[NODE_RCRA_FA_MECHANISM]    Script Date: 6/12/2019 2:50:53 PM ******/
CREATE SYNONYM [dbo].[NODE_RCRA_FA_MECHANISM] FOR [NODE_FLOW_RCRA].[dbo].[RCRA_FA_MECHANISM]
GO
/****** Object:  Synonym [dbo].[NODE_RCRA_FA_MECHANISM_DETAIL]    Script Date: 6/12/2019 2:50:53 PM ******/
CREATE SYNONYM [dbo].[NODE_RCRA_FA_MECHANISM_DETAIL] FOR [NODE_FLOW_RCRA].[dbo].[RCRA_FA_MECHANISM_DETAIL]
GO
/****** Object:  Synonym [dbo].[NODE_RCRA_FA_SUBM]    Script Date: 6/12/2019 2:50:53 PM ******/
CREATE SYNONYM [dbo].[NODE_RCRA_FA_SUBM] FOR [NODE_FLOW_RCRA].[dbo].[RCRA_FA_SUBM]
GO
/****** Object:  Synonym [dbo].[NODE_RCRA_GIS_FAC_SUBM]    Script Date: 6/12/2019 2:50:53 PM ******/
CREATE SYNONYM [dbo].[NODE_RCRA_GIS_FAC_SUBM] FOR [NODE_FLOW_RCRA].[dbo].[RCRA_GIS_FAC_SUBM]
GO
/****** Object:  Synonym [dbo].[NODE_RCRA_GIS_GEO_INFORMATION]    Script Date: 6/12/2019 2:50:53 PM ******/
CREATE SYNONYM [dbo].[NODE_RCRA_GIS_GEO_INFORMATION] FOR [NODE_FLOW_RCRA].[dbo].[RCRA_GIS_GEO_INFORMATION]
GO
/****** Object:  Synonym [dbo].[NODE_RCRA_GIS_SUBM]    Script Date: 6/12/2019 2:50:53 PM ******/
CREATE SYNONYM [dbo].[NODE_RCRA_GIS_SUBM] FOR [NODE_FLOW_RCRA].[dbo].[RCRA_GIS_SUBM]
GO
/****** Object:  Synonym [dbo].[NODE_RCRA_HD_CERTIFICATION]    Script Date: 6/12/2019 2:50:53 PM ******/
CREATE SYNONYM [dbo].[NODE_RCRA_HD_CERTIFICATION] FOR [NODE_FLOW_RCRA].[dbo].[RCRA_HD_CERTIFICATION]
GO
/****** Object:  Synonym [dbo].[NODE_RCRA_HD_ENV_PERMIT]    Script Date: 6/12/2019 2:50:53 PM ******/
CREATE SYNONYM [dbo].[NODE_RCRA_HD_ENV_PERMIT] FOR [NODE_FLOW_RCRA].[dbo].[RCRA_HD_ENV_PERMIT]
GO
/****** Object:  Synonym [dbo].[NODE_RCRA_HD_EPISODIC_EVENT]    Script Date: 6/12/2019 2:50:53 PM ******/
CREATE SYNONYM [dbo].[NODE_RCRA_HD_EPISODIC_EVENT] FOR [NODE_FLOW_RCRA].[dbo].[RCRA_HD_EPISODIC_EVENT]
GO
/****** Object:  Synonym [dbo].[NODE_RCRA_HD_EPISODIC_WASTE]    Script Date: 6/12/2019 2:50:53 PM ******/
CREATE SYNONYM [dbo].[NODE_RCRA_HD_EPISODIC_WASTE] FOR [NODE_FLOW_RCRA].[dbo].[RCRA_HD_EPISODIC_WASTE]
GO
/****** Object:  Synonym [dbo].[NODE_RCRA_HD_EPISODIC_WASTE_CODE]    Script Date: 6/12/2019 2:50:53 PM ******/
CREATE SYNONYM [dbo].[NODE_RCRA_HD_EPISODIC_WASTE_CODE] FOR [NODE_FLOW_RCRA].[dbo].[RCRA_HD_EPISODIC_WASTE_CODE]
GO
/****** Object:  Synonym [dbo].[NODE_RCRA_HD_HANDLER]    Script Date: 6/12/2019 2:50:53 PM ******/
CREATE SYNONYM [dbo].[NODE_RCRA_HD_HANDLER] FOR [NODE_FLOW_RCRA].[dbo].[RCRA_HD_HANDLER]
GO
/****** Object:  Synonym [dbo].[NODE_RCRA_HD_HBASIC]    Script Date: 6/12/2019 2:50:53 PM ******/
CREATE SYNONYM [dbo].[NODE_RCRA_HD_HBASIC] FOR [NODE_FLOW_RCRA].[dbo].[RCRA_HD_HBASIC]
GO
/****** Object:  Synonym [dbo].[NODE_RCRA_HD_LQG_CLOSURE]    Script Date: 6/12/2019 2:50:53 PM ******/
CREATE SYNONYM [dbo].[NODE_RCRA_HD_LQG_CLOSURE] FOR [NODE_FLOW_RCRA].[dbo].[RCRA_HD_LQG_CLOSURE]
GO
/****** Object:  Synonym [dbo].[NODE_RCRA_HD_LQG_CONSOLIDATION]    Script Date: 6/12/2019 2:50:53 PM ******/
CREATE SYNONYM [dbo].[NODE_RCRA_HD_LQG_CONSOLIDATION] FOR [NODE_FLOW_RCRA].[dbo].[RCRA_HD_LQG_CONSOLIDATION]
GO
/****** Object:  Synonym [dbo].[NODE_RCRA_HD_NAICS]    Script Date: 6/12/2019 2:50:53 PM ******/
CREATE SYNONYM [dbo].[NODE_RCRA_HD_NAICS] FOR [NODE_FLOW_RCRA].[dbo].[RCRA_HD_NAICS]
GO
/****** Object:  Synonym [dbo].[NODE_RCRA_HD_OTHER_ID]    Script Date: 6/12/2019 2:50:53 PM ******/
CREATE SYNONYM [dbo].[NODE_RCRA_HD_OTHER_ID] FOR [NODE_FLOW_RCRA].[dbo].[RCRA_HD_OTHER_ID]
GO
/****** Object:  Synonym [dbo].[NODE_RCRA_HD_OWNEROP]    Script Date: 6/12/2019 2:50:53 PM ******/
CREATE SYNONYM [dbo].[NODE_RCRA_HD_OWNEROP] FOR [NODE_FLOW_RCRA].[dbo].[RCRA_HD_OWNEROP]
GO
/****** Object:  Synonym [dbo].[NODE_RCRA_HD_SEC_MATERIAL_ACTIVITY]    Script Date: 6/12/2019 2:50:53 PM ******/
CREATE SYNONYM [dbo].[NODE_RCRA_HD_SEC_MATERIAL_ACTIVITY] FOR [NODE_FLOW_RCRA].[dbo].[RCRA_HD_SEC_MATERIAL_ACTIVITY]
GO
/****** Object:  Synonym [dbo].[NODE_RCRA_HD_SEC_WASTE_CODE]    Script Date: 6/12/2019 2:50:53 PM ******/
CREATE SYNONYM [dbo].[NODE_RCRA_HD_SEC_WASTE_CODE] FOR [NODE_FLOW_RCRA].[dbo].[RCRA_HD_SEC_WASTE_CODE]
GO
/****** Object:  Synonym [dbo].[NODE_RCRA_HD_STATE_ACTIVITY]    Script Date: 6/12/2019 2:50:53 PM ******/
CREATE SYNONYM [dbo].[NODE_RCRA_HD_STATE_ACTIVITY] FOR [NODE_FLOW_RCRA].[dbo].[RCRA_HD_STATE_ACTIVITY]
GO
/****** Object:  Synonym [dbo].[NODE_RCRA_HD_SUBM]    Script Date: 6/12/2019 2:50:53 PM ******/
CREATE SYNONYM [dbo].[NODE_RCRA_HD_SUBM] FOR [NODE_FLOW_RCRA].[dbo].[RCRA_HD_SUBM]
GO
/****** Object:  Synonym [dbo].[NODE_RCRA_HD_UNIVERSAL_WASTE]    Script Date: 6/12/2019 2:50:53 PM ******/
CREATE SYNONYM [dbo].[NODE_RCRA_HD_UNIVERSAL_WASTE] FOR [NODE_FLOW_RCRA].[dbo].[RCRA_HD_UNIVERSAL_WASTE]
GO
/****** Object:  Synonym [dbo].[NODE_RCRA_HD_WASTE_CODE]    Script Date: 6/12/2019 2:50:53 PM ******/
CREATE SYNONYM [dbo].[NODE_RCRA_HD_WASTE_CODE] FOR [NODE_FLOW_RCRA].[dbo].[RCRA_HD_WASTE_CODE]
GO
/****** Object:  Synonym [dbo].[NODE_RCRA_PRM_EVENT]    Script Date: 6/12/2019 2:50:53 PM ******/
CREATE SYNONYM [dbo].[NODE_RCRA_PRM_EVENT] FOR [NODE_FLOW_RCRA].[dbo].[RCRA_PRM_EVENT]
GO
/****** Object:  Synonym [dbo].[NODE_RCRA_PRM_EVENT_COMMITMENT]    Script Date: 6/12/2019 2:50:53 PM ******/
CREATE SYNONYM [dbo].[NODE_RCRA_PRM_EVENT_COMMITMENT] FOR [NODE_FLOW_RCRA].[dbo].[RCRA_PRM_EVENT_COMMITMENT]
GO
/****** Object:  Synonym [dbo].[NODE_RCRA_PRM_FAC_SUBM]    Script Date: 6/12/2019 2:50:53 PM ******/
CREATE SYNONYM [dbo].[NODE_RCRA_PRM_FAC_SUBM] FOR [NODE_FLOW_RCRA].[dbo].[RCRA_PRM_FAC_SUBM]
GO
/****** Object:  Synonym [dbo].[NODE_RCRA_PRM_RELATED_EVENT]    Script Date: 6/12/2019 2:50:53 PM ******/
CREATE SYNONYM [dbo].[NODE_RCRA_PRM_RELATED_EVENT] FOR [NODE_FLOW_RCRA].[dbo].[RCRA_PRM_RELATED_EVENT]
GO
/****** Object:  Synonym [dbo].[NODE_RCRA_PRM_SERIES]    Script Date: 6/12/2019 2:50:53 PM ******/
CREATE SYNONYM [dbo].[NODE_RCRA_PRM_SERIES] FOR [NODE_FLOW_RCRA].[dbo].[RCRA_PRM_SERIES]
GO
/****** Object:  Synonym [dbo].[NODE_RCRA_PRM_SUBM]    Script Date: 6/12/2019 2:50:53 PM ******/
CREATE SYNONYM [dbo].[NODE_RCRA_PRM_SUBM] FOR [NODE_FLOW_RCRA].[dbo].[RCRA_PRM_SUBM]
GO
/****** Object:  Synonym [dbo].[NODE_RCRA_PRM_UNIT]    Script Date: 6/12/2019 2:50:53 PM ******/
CREATE SYNONYM [dbo].[NODE_RCRA_PRM_UNIT] FOR [NODE_FLOW_RCRA].[dbo].[RCRA_PRM_UNIT]
GO
/****** Object:  Synonym [dbo].[NODE_RCRA_PRM_UNIT_DETAIL]    Script Date: 6/12/2019 2:50:53 PM ******/
CREATE SYNONYM [dbo].[NODE_RCRA_PRM_UNIT_DETAIL] FOR [NODE_FLOW_RCRA].[dbo].[RCRA_PRM_UNIT_DETAIL]
GO
/****** Object:  Synonym [dbo].[NODE_RCRA_PRM_WASTE_CODE]    Script Date: 6/12/2019 2:50:53 PM ******/
CREATE SYNONYM [dbo].[NODE_RCRA_PRM_WASTE_CODE] FOR [NODE_FLOW_RCRA].[dbo].[RCRA_PRM_WASTE_CODE]
GO
/****** Object:  Synonym [dbo].[NODE_RCRA_RU_REPORT_UNIV]    Script Date: 6/12/2019 2:50:53 PM ******/
CREATE SYNONYM [dbo].[NODE_RCRA_RU_REPORT_UNIV] FOR [NODE_FLOW_RCRA].[dbo].[RCRA_RU_REPORT_UNIV]
GO
/****** Object:  Synonym [dbo].[NODE_RCRA_RU_REPORT_UNIV_SUBM]    Script Date: 6/12/2019 2:50:53 PM ******/
CREATE SYNONYM [dbo].[NODE_RCRA_RU_REPORT_UNIV_SUBM] FOR [NODE_FLOW_RCRA].[dbo].[RCRA_RU_REPORT_UNIV_SUBM]
GO
/****** Object:  Synonym [dbo].[NODE_RCRA_RU_SUBM]    Script Date: 6/12/2019 2:50:53 PM ******/
CREATE SYNONYM [dbo].[NODE_RCRA_RU_SUBM] FOR [NODE_FLOW_RCRA].[dbo].[RCRA_RU_SUBM]
GO
/****** Object:  Synonym [dbo].[NODE_RCRA_SUBMISSIONHISTORY]    Script Date: 6/12/2019 2:50:53 PM ******/
CREATE SYNONYM [dbo].[NODE_RCRA_SUBMISSIONHISTORY] FOR [NODE_FLOW_RCRA].[dbo].[RCRA_SUBMISSIONHISTORY]
GO
/****** Object:  Table [dbo].[RCRA_HD_SEC_WASTE_CODE]    Script Date: 6/12/2019 2:50:53 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RCRA_HD_SEC_WASTE_CODE](
	[HD_SEC_WASTE_CODE_ID] [int] IDENTITY(1,1) NOT NULL,
	[HD_SEC_MATERIAL_ACTIVITY_ID] [int] NOT NULL,
	[TRANSACTION_CODE] [char](1) NULL,
	[WASTE_CODE_OWNER] [char](2) NULL,
	[WASTE_CODE_TYPE] [varchar](6) NULL,
 CONSTRAINT [PK_HD_SEC_WAST_COD] PRIMARY KEY CLUSTERED 
(
	[HD_SEC_WASTE_CODE_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RCRA_HD_SEC_MATERIAL_ACTIVITY]    Script Date: 6/12/2019 2:50:53 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RCRA_HD_SEC_MATERIAL_ACTIVITY](
	[HD_SEC_MATERIAL_ACTIVITY_ID] [int] IDENTITY(1,1) NOT NULL,
	[HD_HANDLER_ID] [int] NOT NULL,
	[TRANS_CODE] [char](1) NULL,
	[HSM_SEQ_NUM] [varchar](4) NOT NULL,
	[FAC_CODE_OWNER_NAME] [char](2) NULL,
	[FAC_TYPE_CODE] [char](2) NULL,
	[ESTIMATED_SHORT_TONS_QNTY] [int] NULL,
	[ACTL_SHORT_TONS_QNTY] [int] NULL,
	[LAND_BASED_UNIT_IND] [char](2) NULL,
	[LAND_BASED_UNIT_IND_TEXT] [varchar](255) NULL,
 CONSTRAINT [PK_HD_SEC_MATE_ACT] PRIMARY KEY CLUSTERED 
(
	[HD_SEC_MATERIAL_ACTIVITY_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RCRA_HD_HANDLER]    Script Date: 6/12/2019 2:50:53 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RCRA_HD_HANDLER](
	[HD_HANDLER_ID] [int] IDENTITY(1,1) NOT NULL,
	[HD_HBASIC_ID] [int] NOT NULL,
	[TRANSACTION_CODE] [char](1) NULL,
	[ACTIVITY_LOCATION] [char](2) NOT NULL,
	[SOURCE_TYPE] [char](1) NOT NULL,
	[SEQ_NUMBER] [int] NOT NULL,
	[RECEIVE_DATE] [varchar](10) NULL,
	[HANDLER_NAME] [varchar](80) NULL,
	[ACKNOWLEDGE_DATE] [varchar](10) NULL,
	[NON_NOTIFIER] [char](1) NULL,
	[TSD_DATE] [varchar](10) NULL,
	[OFF_SITE_RECEIPT] [char](1) NULL,
	[ACCESSIBILITY] [char](1) NULL,
	[COUNTY_CODE_OWNER] [char](2) NULL,
	[COUNTY_CODE] [varchar](5) NULL,
	[NOTES] [varchar](4000) NULL,
	[ACKNOWLEDGE_FLAG] [char](1) NULL,
	[LOCATION_STREET1] [varchar](50) NULL,
	[LOCATION_STREET2] [varchar](50) NULL,
	[LOCATION_CITY] [varchar](25) NULL,
	[LOCATION_STATE] [char](2) NULL,
	[LOCATION_COUNTRY] [char](2) NULL,
	[LOCATION_ZIP] [varchar](14) NULL,
	[MAIL_STREET1] [varchar](50) NULL,
	[MAIL_STREET2] [varchar](50) NULL,
	[MAIL_CITY] [varchar](25) NULL,
	[MAIL_STATE] [char](2) NULL,
	[MAIL_COUNTRY] [char](2) NULL,
	[MAIL_ZIP] [varchar](14) NULL,
	[CONTACT_FIRST_NAME] [varchar](38) NULL,
	[CONTACT_MIDDLE_INITIAL] [char](1) NULL,
	[CONTACT_LAST_NAME] [varchar](38) NULL,
	[CONTACT_ORG_NAME] [varchar](80) NULL,
	[CONTACT_TITLE] [varchar](80) NULL,
	[CONTACT_EMAIL_ADDRESS] [varchar](80) NULL,
	[CONTACT_PHONE] [varchar](15) NULL,
	[CONTACT_PHONE_EXT] [varchar](6) NULL,
	[CONTACT_FAX] [varchar](15) NULL,
	[CONTACT_STREET_NUMBER] [varchar](12) NULL,
	[CONTACT_STREET1] [varchar](50) NULL,
	[CONTACT_STREET2] [varchar](50) NULL,
	[CONTACT_CITY] [varchar](25) NULL,
	[CONTACT_STATE] [char](2) NULL,
	[CONTACT_COUNTRY] [char](2) NULL,
	[CONTACT_ZIP] [varchar](14) NULL,
	[PCONTACT_FIRST_NAME] [varchar](38) NULL,
	[PCONTACT_MIDDLE_NAME] [char](1) NULL,
	[PCONTACT_LAST_NAME] [varchar](38) NULL,
	[PCONTACT_ORG_NAME] [varchar](80) NULL,
	[PCONTACT_TITLE] [varchar](80) NULL,
	[PCONTACT_EMAIL_ADDRESS] [varchar](80) NULL,
	[PCONTACT_PHONE] [varchar](15) NULL,
	[PCONTACT_PHONE_EXT] [varchar](6) NULL,
	[PCONTACT_FAX] [varchar](15) NULL,
	[PCONTACT_STREET_NUMBER] [varchar](12) NULL,
	[PCONTACT_STREET1] [varchar](50) NULL,
	[PCONTACT_STREET2] [varchar](50) NULL,
	[PCONTACT_CITY] [varchar](25) NULL,
	[PCONTACT_STATE] [char](2) NULL,
	[PCONTACT_COUNTRY] [char](2) NULL,
	[PCONTACT_ZIP] [varchar](14) NULL,
	[USED_OIL_BURNER] [char](1) NULL,
	[USED_OIL_PROCESSOR] [char](1) NULL,
	[USED_OIL_REFINER] [char](1) NULL,
	[USED_OIL_MARKET_BURNER] [char](1) NULL,
	[USED_OIL_SPEC_MARKETER] [char](1) NULL,
	[USED_OIL_TRANSFER_FACILITY] [char](1) NULL,
	[USED_OIL_TRANSPORTER] [char](1) NULL,
	[LAND_TYPE] [char](1) NULL,
	[STATE_DISTRICT_OWNER] [char](2) NULL,
	[STATE_DISTRICT] [varchar](10) NULL,
	[IMPORTER_ACTIVITY] [char](1) NULL,
	[MIXED_WASTE_GENERATOR] [char](1) NULL,
	[RECYCLER_ACTIVITY] [char](1) NULL,
	[TRANSPORTER_ACTIVITY] [char](1) NULL,
	[TSD_ACTIVITY] [char](1) NULL,
	[UNDERGROUND_INJECTION_ACTIVITY] [char](1) NULL,
	[UNIVERSAL_WASTE_DEST_FACILITY] [char](1) NULL,
	[ONSITE_BURNER_EXEMPTION] [char](1) NULL,
	[FURNACE_EXEMPTION] [char](1) NULL,
	[SHORT_TERM_GEN_IND] [char](1) NULL,
	[TRANSFER_FACILITY_IND] [char](1) NULL,
	[STATE_WASTE_GENERATOR_OWNER] [char](2) NULL,
	[STATE_WASTE_GENERATOR] [char](1) NULL,
	[FED_WASTE_GENERATOR_OWNER] [char](2) NULL,
	[FED_WASTE_GENERATOR] [char](1) NULL,
	[COLLEGE_IND] [char](1) NULL,
	[HOSPITAL_IND] [char](1) NULL,
	[NON_PROFIT_IND] [char](1) NULL,
	[WITHDRAWAL_IND] [char](1) NULL,
	[TRANS_CODE] [char](1) NULL,
	[NOTIFICATION_RSN_CODE] [char](1) NULL,
	[EFFC_DATE] [datetime] NULL,
	[FINANCIAL_ASSURANCE_IND] [char](1) NULL,
	[RECYCLING_IND] [char](1) NULL,
	[MAIL_STREET_NUMBER] [varchar](12) NULL,
	[LOCATION_STREET_NUMBER] [varchar](12) NULL,
	[NON_NOTIFIER_TEXT] [varchar](255) NULL,
	[ACCESSIBILITY_TEXT] [varchar](255) NULL,
	[STATE_DISTRICT_TEXT] [varchar](255) NULL,
	[INTRNL_NOTES] [varchar](4000) NULL,
	[SHORT_TERM_INTRNL_NOTES] [varchar](4000) NULL,
	[NATURE_OF_BUSINESS_TEXT] [varchar](4000) NULL,
	[RECOGNIZED_TRADER_IMPORTER_IND] [char](1) NULL,
	[RECOGNIZED_TRADER_EXPORTER_IND] [char](1) NULL,
	[SLAB_IMPORTER_IND] [char](1) NULL,
	[SLAB_EXPORTER_IND] [char](1) NULL,
	[RECYCLER_ACT_NONSTORAGE] [char](1) NULL,
	[MANIFEST_BROKER] [char](1) NULL,
	[RECYCLER_NOTES] [varchar](4000) NULL,
	[ACKNOWLEDGE_FLAG_IND] [char](1) NULL,
	[INCLUDE_IN_NATIONAL_REPORT_IND] [char](1) NULL,
	[LQHUW_IND] [char](1) NULL,
	[HD_REPORT_CYCLE_YEAR] [int] NULL,
	[HEALTHCARE_FAC] [char](1) NULL,
	[REVERSE_DISTRIBUTOR] [char](1) NULL,
	[SUBPART_P_WITHDRAWAL] [char](1) NULL,
	[RECYCLER_IND] [char](1) NULL,
 CONSTRAINT [PK_HD_HANDLER] PRIMARY KEY CLUSTERED 
(
	[HD_HANDLER_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RCRA_HD_HBASIC]    Script Date: 6/12/2019 2:50:53 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RCRA_HD_HBASIC](
	[HD_HBASIC_ID] [int] IDENTITY(1,1) NOT NULL,
	[TRANSACTION_CODE] [char](1) NULL,
	[HANDLER_ID] [varchar](12) NULL,
	[EXTRACT_FLAG] [char](1) NULL,
	[FACILITY_IDENTIFIER] [varchar](12) NULL,
 CONSTRAINT [PK_HD_HBASIC] PRIMARY KEY CLUSTERED 
(
	[HD_HBASIC_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [UNIQ_HD_HBASIC_HANDLER_ID] UNIQUE NONCLUSTERED 
(
	[HANDLER_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[ETL_HD_BASIC_VW]    Script Date: 6/12/2019 2:50:53 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- HD views --

CREATE VIEW [dbo].[ETL_HD_BASIC_VW] AS (
    SELECT
        WH.HD_HBASIC_ID WH_HD_HBASIC_ID,
        NODE.*
    FROM NODE_RCRA_HD_HBASIC NODE
             LEFT OUTER JOIN RCRA_HD_HBASIC WH ON WH.HANDLER_ID = NODE.HANDLER_ID
)
GO
/****** Object:  View [dbo].[ETL_HD_HANDLER_ID_VW]    Script Date: 6/12/2019 2:50:53 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[ETL_HD_HANDLER_ID_VW] AS (
    SELECT
        WH.HD_HANDLER_ID    WH_HD_HANDLER_ID,
        ETL.WH_HD_HBASIC_ID WH_HD_HBASIC_ID,
        ETL.HD_SUBM_ID,
        NODE.*
    FROM NODE_RCRA_HD_HANDLER NODE
             JOIN ETL_HD_BASIC_VW ETL ON ETL.HD_HBASIC_ID = NODE.HD_HBASIC_ID
             LEFT OUTER JOIN RCRA_HD_HANDLER WH ON WH.HD_HBASIC_ID = ETL.WH_HD_HBASIC_ID
        AND WH.SEQ_NUMBER = NODE.SEQ_NUMBER
        AND WH.SOURCE_TYPE = NODE.SOURCE_TYPE
)
GO
/****** Object:  View [dbo].[ETL_HD_SEC_MAT_ACT_VW]    Script Date: 6/12/2019 2:50:53 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[ETL_HD_SEC_MAT_ACT_VW] AS (
    SELECT
        WH.HD_SEC_MATERIAL_ACTIVITY_ID WH_HD_SEC_MATERIAL_ACTIVITY_ID,
        ETL.WH_HD_HANDLER_ID,
        ETL.HD_SUBM_ID,
        NODE.*
    FROM NODE_RCRA_HD_SEC_MATERIAL_ACTIVITY NODE
             INNER JOIN ETL_HD_HANDLER_ID_VW ETL ON ETL.HD_HANDLER_ID = NODE.HD_HANDLER_ID
             LEFT OUTER JOIN RCRA_HD_SEC_MATERIAL_ACTIVITY WH ON WH.HD_HANDLER_ID = ETL.WH_HD_HANDLER_ID
        AND WH.HSM_SEQ_NUM = NODE.HSM_SEQ_NUM
)
GO
/****** Object:  View [dbo].[ETL_HD_SEC_WASTE_CD_VW]    Script Date: 6/12/2019 2:50:53 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[ETL_HD_SEC_WASTE_CD_VW] AS (
    SELECT
        WH.HD_SEC_WASTE_CODE_ID WH_HD_SEC_WASTE_CODE_ID,
        ETL.WH_HD_SEC_MATERIAL_ACTIVITY_ID,
        ETL.HD_SUBM_ID,
        NODE.*
    FROM NODE_RCRA_HD_SEC_WASTE_CODE NODE
             INNER JOIN ETL_HD_SEC_MAT_ACT_VW ETL ON ETL.HD_SEC_MATERIAL_ACTIVITY_ID = NODE.HD_SEC_MATERIAL_ACTIVITY_ID
             LEFT OUTER JOIN RCRA_HD_SEC_WASTE_CODE WH ON WH.HD_SEC_MATERIAL_ACTIVITY_ID = ETL.WH_HD_SEC_MATERIAL_ACTIVITY_ID
        AND WH.WASTE_CODE_OWNER = NODE.WASTE_CODE_OWNER
        AND WH.WASTE_CODE_TYPE = NODE.WASTE_CODE_TYPE
)
GO
/****** Object:  View [dbo].[ETL_HD_HANDLER_VW]    Script Date: 6/12/2019 2:50:53 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[ETL_HD_HANDLER_VW] AS (
    SELECT
        WH.HD_HANDLER_ID WH_HD_HANDLER_ID,
        ETL.WH_HD_HBASIC_ID,
        ETL.HD_SUBM_ID,
        NODE.*
    FROM NODE_RCRA_HD_HANDLER NODE
             INNER JOIN ETL_HD_BASIC_VW ETL ON ETL.HD_HBASIC_ID = NODE.HD_HBASIC_ID
             LEFT OUTER JOIN RCRA_HD_HANDLER WH ON WH.HD_HBASIC_ID = ETL.WH_HD_HBASIC_ID
        AND WH.ACTIVITY_LOCATION = NODE.ACTIVITY_LOCATION
        AND WH.SEQ_NUMBER = NODE.SEQ_NUMBER
        AND WH.SOURCE_TYPE = NODE.SOURCE_TYPE
)
GO
/****** Object:  Table [dbo].[RCRA_HD_OWNEROP]    Script Date: 6/12/2019 2:50:53 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RCRA_HD_OWNEROP](
	[HD_OWNEROP_ID] [int] IDENTITY(1,1) NOT NULL,
	[HD_HANDLER_ID] [int] NOT NULL,
	[TRANSACTION_CODE] [char](1) NULL,
	[OWNER_OP_SEQ] [int] NOT NULL,
	[OWNER_OP_IND] [char](2) NULL,
	[OWNER_OP_TYPE] [char](1) NULL,
	[DATE_BECAME_CURRENT] [varchar](10) NULL,
	[DATE_ENDED_CURRENT] [varchar](10) NULL,
	[NOTES] [varchar](4000) NULL,
	[FIRST_NAME] [varchar](38) NULL,
	[MIDDLE_INITIAL] [char](1) NULL,
	[LAST_NAME] [varchar](38) NULL,
	[ORG_NAME] [varchar](80) NULL,
	[TITLE] [varchar](80) NULL,
	[EMAIL_ADDRESS] [varchar](80) NULL,
	[PHONE] [varchar](15) NULL,
	[PHONE_EXT] [varchar](6) NULL,
	[FAX] [varchar](15) NULL,
	[MAIL_ADDR_NUM_TXT] [varchar](12) NULL,
	[STREET1] [varchar](50) NULL,
	[STREET2] [varchar](50) NULL,
	[CITY] [varchar](25) NULL,
	[STATE] [char](2) NULL,
	[COUNTRY] [char](2) NULL,
	[ZIP] [varchar](14) NULL,
 CONSTRAINT [PK_HD_OWNEROP] PRIMARY KEY CLUSTERED 
(
	[HD_OWNEROP_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[ETL_HD_OWNEROP_VW]    Script Date: 6/12/2019 2:50:53 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[ETL_HD_OWNEROP_VW] AS (
    SELECT
        WH.HD_OWNEROP_ID WH_HD_OWNEROP_ID,
        ETL.WH_HD_HANDLER_ID,
        ETL.HD_SUBM_ID,
        NODE.*
    FROM NODE_RCRA_HD_OWNEROP NODE
             INNER JOIN ETL_HD_HANDLER_VW ETL ON ETL.HD_HANDLER_ID = NODE.HD_HANDLER_ID
             LEFT OUTER JOIN RCRA_HD_OWNEROP WH ON WH.HD_HANDLER_ID = ETL.WH_HD_HANDLER_ID
        AND WH.OWNER_OP_SEQ = NODE.OWNER_OP_SEQ
)
GO
/****** Object:  Table [dbo].[RCRA_HD_STATE_ACTIVITY]    Script Date: 6/12/2019 2:50:53 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RCRA_HD_STATE_ACTIVITY](
	[HD_STATE_ACTIVITY_ID] [int] IDENTITY(1,1) NOT NULL,
	[HD_HANDLER_ID] [int] NOT NULL,
	[TRANSACTION_CODE] [char](1) NULL,
	[STATE_ACTIVITY_OWNER] [char](2) NOT NULL,
	[STATE_ACTIVITY_TYPE] [varchar](5) NOT NULL,
 CONSTRAINT [PK_HD_STATE_ACTIVI] PRIMARY KEY CLUSTERED 
(
	[HD_STATE_ACTIVITY_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[ETL_HD_STATE_ACT_VW]    Script Date: 6/12/2019 2:50:53 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[ETL_HD_STATE_ACT_VW] AS (
    SELECT
        WH.HD_STATE_ACTIVITY_ID WH_HD_STATE_ACTIVITY_ID,
        ETL.WH_HD_HANDLER_ID,
        ETL.HD_SUBM_ID,
        NODE.*
    FROM NODE_RCRA_HD_STATE_ACTIVITY NODE
             INNER JOIN ETL_HD_HANDLER_ID_VW ETL ON ETL.HD_HANDLER_ID = NODE.HD_HANDLER_ID
             LEFT OUTER JOIN RCRA_HD_STATE_ACTIVITY WH ON WH.HD_HANDLER_ID = ETL.WH_HD_HANDLER_ID
        AND WH.STATE_ACTIVITY_OWNER = NODE.STATE_ACTIVITY_OWNER
        AND WH.STATE_ACTIVITY_TYPE = NODE.STATE_ACTIVITY_TYPE
)
GO
/****** Object:  Table [dbo].[RCRA_HD_UNIVERSAL_WASTE]    Script Date: 6/12/2019 2:50:53 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RCRA_HD_UNIVERSAL_WASTE](
	[HD_UNIVERSAL_WASTE_ID] [int] IDENTITY(1,1) NOT NULL,
	[HD_HANDLER_ID] [int] NOT NULL,
	[TRANSACTION_CODE] [char](1) NULL,
	[UNIVERSAL_WASTE_OWNER] [char](2) NULL,
	[UNIVERSAL_WASTE_TYPE] [char](1) NULL,
	[ACCUMULATED] [char](1) NULL,
	[GENERATED] [char](1) NULL,
 CONSTRAINT [PK_HD_UNIVER_WASTE] PRIMARY KEY CLUSTERED 
(
	[HD_UNIVERSAL_WASTE_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[ETL_HD_UNIV_WASTE_VW]    Script Date: 6/12/2019 2:50:54 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[ETL_HD_UNIV_WASTE_VW] AS (
    SELECT
        WH.HD_UNIVERSAL_WASTE_ID WH_HD_UNIVERSAL_WASTE_ID,
        ETL.WH_HD_HANDLER_ID,
        ETL.HD_SUBM_ID,
        NODE.*
    FROM NODE_RCRA_HD_UNIVERSAL_WASTE NODE
             INNER JOIN ETL_HD_HANDLER_ID_VW ETL ON ETL.HD_HANDLER_ID = NODE.HD_HANDLER_ID
             LEFT OUTER JOIN RCRA_HD_UNIVERSAL_WASTE WH
                             ON WH.HD_HANDLER_ID = ETL.WH_HD_HANDLER_ID
                                 AND WH.UNIVERSAL_WASTE_OWNER = NODE.UNIVERSAL_WASTE_OWNER
                                 AND WH.UNIVERSAL_WASTE_TYPE = NODE.UNIVERSAL_WASTE_TYPE
)
GO
/****** Object:  Table [dbo].[RCRA_HD_WASTE_CODE]    Script Date: 6/12/2019 2:50:54 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RCRA_HD_WASTE_CODE](
	[HD_WASTE_CODE_ID] [int] IDENTITY(1,1) NOT NULL,
	[HD_HANDLER_ID] [int] NOT NULL,
	[TRANSACTION_CODE] [char](1) NULL,
	[WASTE_CODE_OWNER] [char](2) NULL,
	[WASTE_CODE_TYPE] [varchar](6) NULL,
 CONSTRAINT [PK_HD_WASTE_CODE] PRIMARY KEY CLUSTERED 
(
	[HD_WASTE_CODE_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[ETL_HD_WASTE_CODE_VW]    Script Date: 6/12/2019 2:50:54 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[ETL_HD_WASTE_CODE_VW] AS (
    SELECT
        WH.HD_WASTE_CODE_ID WH_HD_WASTE_CODE_ID,
        ETL.WH_HD_HANDLER_ID,
        ETL.HD_SUBM_ID,
        NODE.*
    FROM NODE_RCRA_HD_WASTE_CODE NODE
             INNER JOIN ETL_HD_HANDLER_ID_VW ETL ON ETL.HD_HANDLER_ID = NODE.HD_HANDLER_ID
             LEFT OUTER JOIN RCRA_HD_WASTE_CODE WH ON WH.HD_HANDLER_ID = ETL.WH_HD_HANDLER_ID
        AND WH.WASTE_CODE_OWNER = NODE.WASTE_CODE_OWNER
        AND WH.WASTE_CODE_TYPE = NODE.WASTE_CODE_TYPE
)
GO
/****** Object:  Table [dbo].[RCRA_HD_ENV_PERMIT]    Script Date: 6/12/2019 2:50:54 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RCRA_HD_ENV_PERMIT](
	[HD_ENV_PERMIT_ID] [int] IDENTITY(1,1) NOT NULL,
	[HD_HANDLER_ID] [int] NOT NULL,
	[TRANSACTION_CODE] [char](1) NULL,
	[ENV_PERMIT_NUMBER] [varchar](13) NOT NULL,
	[ENV_PERMIT_OWNER] [char](2) NULL,
	[ENV_PERMIT_TYPE] [char](1) NULL,
	[ENV_PERMIT_DESC] [varchar](80) NOT NULL,
 CONSTRAINT [PK_HD_ENV_PERMIT] PRIMARY KEY CLUSTERED 
(
	[HD_ENV_PERMIT_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[ETL_HD_ENV_PERMIT_VW]    Script Date: 6/12/2019 2:50:54 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[ETL_HD_ENV_PERMIT_VW] AS (
    SELECT
        WH.HD_ENV_PERMIT_ID WH_HD_ENV_PERMIT_ID,
        ETL.WH_HD_HANDLER_ID,
        ETL.HD_SUBM_ID,
        NODE.*
    FROM NODE_RCRA_HD_ENV_PERMIT NODE
             INNER JOIN ETL_HD_HANDLER_ID_VW ETL ON ETL.HD_HANDLER_ID = NODE.HD_HANDLER_ID
             LEFT OUTER JOIN RCRA_HD_ENV_PERMIT WH ON WH.HD_HANDLER_ID = ETL.WH_HD_HANDLER_ID
        AND WH.ENV_PERMIT_NUMBER = NODE.ENV_PERMIT_NUMBER
)
GO
/****** Object:  Table [dbo].[RCRA_HD_NAICS]    Script Date: 6/12/2019 2:50:54 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RCRA_HD_NAICS](
	[HD_NAICS_ID] [int] IDENTITY(1,1) NOT NULL,
	[HD_HANDLER_ID] [int] NOT NULL,
	[TRANSACTION_CODE] [char](1) NULL,
	[NAICS_SEQ] [varchar](4) NOT NULL,
	[NAICS_OWNER] [char](2) NULL,
	[NAICS_CODE] [varchar](6) NULL,
 CONSTRAINT [PK_HD_NAICS] PRIMARY KEY CLUSTERED 
(
	[HD_NAICS_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[ETL_HD_NAICS_VW]    Script Date: 6/12/2019 2:50:54 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[ETL_HD_NAICS_VW] AS (
    SELECT
        WH.HD_NAICS_ID WH_HD_NAICS_ID,
        ETL.WH_HD_HANDLER_ID,
        ETL.HD_SUBM_ID,
        NODE.*
    FROM NODE_RCRA_HD_NAICS NODE
             INNER JOIN ETL_HD_HANDLER_ID_VW ETL ON ETL.HD_HANDLER_ID = NODE.HD_HANDLER_ID
             LEFT OUTER JOIN RCRA_HD_NAICS WH ON WH.HD_HANDLER_ID = ETL.WH_HD_HANDLER_ID
        AND WH.NAICS_SEQ = NODE.NAICS_SEQ
)
GO
/****** Object:  Table [dbo].[RCRA_HD_CERTIFICATION]    Script Date: 6/12/2019 2:50:54 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RCRA_HD_CERTIFICATION](
	[HD_CERTIFICATION_ID] [int] IDENTITY(1,1) NOT NULL,
	[HD_HANDLER_ID] [int] NOT NULL,
	[TRANSACTION_CODE] [char](1) NULL,
	[CERT_SEQ] [int] NOT NULL,
	[CERT_SIGNED_DATE] [varchar](10) NULL,
	[CERT_TITLE] [varchar](45) NULL,
	[CERT_FIRST_NAME] [varchar](38) NULL,
	[CERT_MIDDLE_INITIAL] [char](1) NULL,
	[CERT_LAST_NAME] [varchar](38) NULL,
	[CERT_EMAIL_TEXT] [varchar](80) NULL,
 CONSTRAINT [PK_HD_CERTIFICATIO] PRIMARY KEY CLUSTERED 
(
	[HD_CERTIFICATION_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[ETL_HD_CERT_VW]    Script Date: 6/12/2019 2:50:54 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[ETL_HD_CERT_VW] AS (
    SELECT
        WH.HD_CERTIFICATION_ID WH_HD_CERTIFICATION_ID,
        ETL.WH_HD_HANDLER_ID,
        ETL.HD_SUBM_ID,
        NODE.*
    FROM NODE_RCRA_HD_CERTIFICATION NODE
             INNER JOIN ETL_HD_HANDLER_ID_VW ETL ON ETL.HD_HANDLER_ID = NODE.HD_HANDLER_ID
             LEFT OUTER JOIN RCRA_HD_CERTIFICATION WH ON WH.HD_HANDLER_ID = ETL.WH_HD_HANDLER_ID
        AND WH.CERT_SEQ = NODE.CERT_SEQ
)
GO
/****** Object:  Table [dbo].[RCRA_HD_LQG_CONSOLIDATION]    Script Date: 6/12/2019 2:50:54 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RCRA_HD_LQG_CONSOLIDATION](
	[HD_LQG_CONSOLIDATION_ID] [int] IDENTITY(1,1) NOT NULL,
	[HD_HANDLER_ID] [int] NOT NULL,
	[TRANSACTION_CODE] [char](1) NULL,
	[SEQ_NUMBER] [int] NOT NULL,
	[HANDLER_ID] [varchar](12) NULL,
	[HANDLER_NAME] [varchar](80) NULL,
	[MAIL_STREET_NUMBER] [varchar](12) NULL,
	[MAIL_STREET1] [varchar](50) NULL,
	[MAIL_STREET2] [varchar](50) NULL,
	[MAIL_CITY] [varchar](25) NULL,
	[MAIL_STATE] [char](2) NULL,
	[MAIL_COUNTRY] [char](2) NULL,
	[MAIL_ZIP] [varchar](14) NULL,
	[CONTACT_FIRST_NAME] [varchar](38) NULL,
	[CONTACT_MIDDLE_INITIAL] [char](1) NULL,
	[CONTACT_LAST_NAME] [varchar](38) NULL,
	[CONTACT_ORG_NAME] [varchar](80) NULL,
	[CONTACT_TITLE] [varchar](80) NULL,
	[CONTACT_EMAIL_ADDRESS] [varchar](80) NULL,
	[CONTACT_PHONE] [varchar](15) NULL,
	[CONTACT_PHONE_EXT] [varchar](6) NULL,
	[CONTACT_FAX] [varchar](15) NULL,
 CONSTRAINT [PK_HD_LQG_CONSOLIDATION] PRIMARY KEY CLUSTERED 
(
	[HD_LQG_CONSOLIDATION_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[ETL_HD_LQG_CONSOLIDATION_VW]    Script Date: 6/12/2019 2:50:54 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[ETL_HD_LQG_CONSOLIDATION_VW] AS (
    SELECT
        WH.HD_LQG_CONSOLIDATION_ID WH_HD_LQG_CONSOLIDATION_ID,
        ETL.WH_HD_HANDLER_ID,
        ETL.HD_SUBM_ID,
        NODE.*
    FROM NODE_RCRA_HD_LQG_CONSOLIDATION NODE
             INNER JOIN ETL_HD_HANDLER_ID_VW ETL ON ETL.HD_HANDLER_ID = NODE.HD_HANDLER_ID
             LEFT OUTER JOIN RCRA_HD_LQG_CONSOLIDATION WH ON WH.HD_HANDLER_ID = ETL.WH_HD_HANDLER_ID
        AND WH.SEQ_NUMBER = ETL.SEQ_NUMBER
)
GO
/****** Object:  Table [dbo].[RCRA_HD_LQG_CLOSURE]    Script Date: 6/12/2019 2:50:54 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RCRA_HD_LQG_CLOSURE](
	[HD_LQG_CLOSURE_ID] [int] IDENTITY(1,1) NOT NULL,
	[HD_HANDLER_ID] [int] NOT NULL,
	[TRANSACTION_CODE] [char](1) NULL,
	[CLOSURE_TYPE] [char](1) NULL,
	[EXPECTED_CLOSURE_DATE] [datetime] NULL,
	[NEW_CLOSURE_DATE] [datetime] NULL,
	[DATE_CLOSED] [datetime] NULL,
	[IN_COMPLIANCE_IND] [char](1) NULL,
 CONSTRAINT [PK_HD_LQG_CLOSURE] PRIMARY KEY CLUSTERED 
(
	[HD_LQG_CLOSURE_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[ETL_HD_LQG_CLOSURE]    Script Date: 6/12/2019 2:50:54 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[ETL_HD_LQG_CLOSURE] AS (
    SELECT
        WH.HD_LQG_CLOSURE_ID WH_HD_LQG_CLOSURE_ID,
        ETL.WH_HD_HANDLER_ID,
        ETL.HD_SUBM_ID,
        NODE.*
    FROM NODE_RCRA_HD_LQG_CLOSURE NODE
             INNER JOIN ETL_HD_HANDLER_ID_VW ETL ON ETL.HD_HANDLER_ID = NODE.HD_HANDLER_ID
             LEFT OUTER JOIN RCRA_HD_LQG_CLOSURE WH ON WH.HD_HANDLER_ID = ETL.WH_HD_HANDLER_ID
)
GO
/****** Object:  Table [dbo].[RCRA_HD_EPISODIC_EVENT]    Script Date: 6/12/2019 2:50:54 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RCRA_HD_EPISODIC_EVENT](
	[HD_EPISODIC_EVENT_ID] [int] IDENTITY(1,1) NOT NULL,
	[HD_HANDLER_ID] [int] NOT NULL,
	[TRANSACTION_CODE] [char](1) NULL,
	[EVENT_OWNER] [char](2) NULL,
	[EVENT_TYPE] [varchar](3) NULL,
	[EVENT_OTHER_DESC] [varchar](80) NULL,
	[CONTACT_FIRST_NAME] [varchar](38) NULL,
	[CONTACT_MIDDLE_INITIAL] [char](1) NULL,
	[CONTACT_LAST_NAME] [varchar](38) NULL,
	[CONTACT_ORG_NAME] [varchar](80) NULL,
	[CONTACT_TITLE] [varchar](80) NULL,
	[CONTACT_EMAIL_ADDRESS] [varchar](80) NULL,
	[CONTACT_PHONE] [varchar](15) NULL,
	[CONTACT_PHONE_EXT] [varchar](6) NULL,
	[CONTACT_FAX] [varchar](15) NULL,
	[START_DATE] [datetime] NULL,
	[END_DATE] [datetime] NULL,
 CONSTRAINT [PK_HD_EPISODIC_EVENT] PRIMARY KEY CLUSTERED 
(
	[HD_EPISODIC_EVENT_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[ETL_HD_EPISODIC_EVENT]    Script Date: 6/12/2019 2:50:54 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[ETL_HD_EPISODIC_EVENT] AS (
    SELECT
        WH.HD_EPISODIC_EVENT_ID WH_HD_EPISODIC_EVENT_ID,
        ETL.WH_HD_HANDLER_ID,
        ETL.HD_SUBM_ID,
        NODE.*
    FROM NODE_RCRA_HD_EPISODIC_EVENT NODE
             INNER JOIN ETL_HD_HANDLER_ID_VW ETL ON ETL.HD_HANDLER_ID = NODE.HD_HANDLER_ID
             LEFT OUTER JOIN RCRA_HD_EPISODIC_EVENT WH ON WH.HD_HANDLER_ID = ETL.WH_HD_HANDLER_ID
)
GO
/****** Object:  Table [dbo].[RCRA_HD_EPISODIC_WASTE]    Script Date: 6/12/2019 2:50:54 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RCRA_HD_EPISODIC_WASTE](
	[HD_EPISODIC_WASTE_ID] [int] IDENTITY(1,1) NOT NULL,
	[HD_EPISODIC_EVENT_ID] [int] NOT NULL,
	[TRANSACTION_CODE] [char](1) NULL,
	[SEQ_NUMBER] [int] NOT NULL,
	[WASTE_DESC] [varchar](4000) NULL,
	[EST_QNTY] [int] NULL,
 CONSTRAINT [PK_HD_EPISODIC_WASTE] PRIMARY KEY CLUSTERED 
(
	[HD_EPISODIC_WASTE_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[ETL_HD_EPISODIC_WASTE]    Script Date: 6/12/2019 2:50:54 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[ETL_HD_EPISODIC_WASTE] AS (
    SELECT
        WH.HD_EPISODIC_WASTE_ID WH_HD_EPISODIC_WASTE_ID,
        ETL.WH_HD_EPISODIC_EVENT_ID,
        ETL.HD_SUBM_ID,
        NODE.*
    FROM NODE_RCRA_HD_EPISODIC_WASTE NODE
             INNER JOIN ETL_HD_EPISODIC_EVENT ETL ON ETL.HD_EPISODIC_EVENT_ID = NODE.HD_EPISODIC_EVENT_ID
             LEFT OUTER JOIN RCRA_HD_EPISODIC_WASTE WH ON WH.HD_EPISODIC_EVENT_ID = ETL.WH_HD_EPISODIC_EVENT_ID
        AND WH.SEQ_NUMBER = NODE.SEQ_NUMBER
)
GO
/****** Object:  Table [dbo].[RCRA_HD_EPISODIC_WASTE_CODE]    Script Date: 6/12/2019 2:50:54 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RCRA_HD_EPISODIC_WASTE_CODE](
	[HD_EPISODIC_WASTE_CODE_ID] [int] IDENTITY(1,1) NOT NULL,
	[HD_EPISODIC_WASTE_ID] [int] NOT NULL,
	[TRANSACTION_CODE] [char](1) NULL,
	[WASTE_CODE_OWNER] [char](2) NULL,
	[WASTE_CODE] [varchar](6) NULL,
	[WASTE_CODE_TEXT] [varchar](4000) NULL,
 CONSTRAINT [PK_HD_EPISODIC_WASTE_CODE] PRIMARY KEY CLUSTERED 
(
	[HD_EPISODIC_WASTE_CODE_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[ETL_HD_EPISODIC_WASTE_CODE]    Script Date: 6/12/2019 2:50:54 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[ETL_HD_EPISODIC_WASTE_CODE] AS (
    SELECT
        WH.HD_EPISODIC_WASTE_CODE_ID WH_HD_EPISODIC_WASTE_CODE_ID,
        ETL.WH_HD_EPISODIC_WASTE_ID,
        ETL.HD_SUBM_ID,
        NODE.*
    FROM NODE_RCRA_HD_EPISODIC_WASTE_CODE NODE
             INNER JOIN ETL_HD_EPISODIC_WASTE ETL ON ETL.HD_EPISODIC_WASTE_ID = NODE.HD_EPISODIC_WASTE_ID
             LEFT OUTER JOIN RCRA_HD_EPISODIC_WASTE_CODE WH ON WH.HD_EPISODIC_WASTE_ID = ETL.WH_HD_EPISODIC_WASTE_ID
        AND WH.WASTE_CODE_OWNER = NODE.WASTE_CODE_OWNER
        AND WH.WASTE_CODE = NODE.WASTE_CODE
)
GO
/****** Object:  Table [dbo].[RCRA_EM_EMANIFEST]    Script Date: 6/12/2019 2:50:54 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RCRA_EM_EMANIFEST](
	[EM_EMANIFEST_ID] [int] IDENTITY(1,1) NOT NULL,
	[EM_SUBM_ID] [int] NULL,
	[CREATED_DATE] [datetime] NOT NULL,
	[UPDATED_DATE] [datetime] NULL,
	[MAN_TRACKING_NUM] [varchar](12) NOT NULL,
	[STATUS] [varchar](17) NOT NULL,
	[PUBLIC_IND] [char](1) NULL,
	[SUBM_TYPE] [varchar](14) NULL,
	[SIGN_STATUS_IND] [char](1) NULL,
	[ORIGIN_TYPE] [varchar](7) NOT NULL,
	[SHIPPED_DATE] [datetime] NULL,
	[RECEIVED_DATE] [datetime] NULL,
	[CERT_DATE] [datetime] NULL,
	[REJ_IND] [char](1) NOT NULL,
	[DISCREPANCY_IND] [char](1) NOT NULL,
	[RESIDUE_IND] [char](1) NOT NULL,
	[IMP_IND] [char](1) NOT NULL,
	[CONT_PREV_REJ_RES_IND] [char](1) NULL,
	[CERT_BY_FIRST_NAME] [varchar](38) NULL,
	[CERT_BY_LAST_NAME] [varchar](38) NULL,
	[CERT_BY_USER_ID] [varchar](255) NULL,
	[REJ_TRANS_ON_SITE_IND] [char](1) NULL,
	[REJ_TYPE] [varchar](13) NULL,
	[REJ_ALT_DES_FAC_TYPE] [varchar](9) NULL,
	[REJ_COMMENTS] [varchar](255) NULL,
	[REJ_GEN_PS_NAME] [varchar](80) NULL,
	[REJ_GEN_PS_DATE] [datetime] NULL,
	[REJ_GEN_ES_SIGN_DATE] [datetime] NULL,
	[REJ_GEN_ES_CROMERR_ACT_ID] [varchar](50) NULL,
	[REJ_GEN_ES_CROMERR_DOC_ID] [varchar](50) NULL,
	[REJ_GEN_ES_SIGNER_FIRST_NAME] [varchar](38) NULL,
	[REJ_GEN_ES_SIGNER_LAST_NAME] [varchar](38) NULL,
	[REJ_GEN_ES_SIGNER_USER_ID] [varchar](255) NULL,
	[REJ_GEN_ES_DOC_NAME] [varchar](255) NULL,
	[REJ_GEN_ES_DOC_SIZE] [int] NULL,
	[REJ_GEN_ES_DOC_MIME_TYPE] [varchar](50) NULL,
	[IMP_GEN_NAME] [varchar](80) NULL,
	[IMP_GEN_ADDRESS] [varchar](50) NULL,
	[IMP_GEN_CITY] [varchar](25) NULL,
	[IMP_GEN_POSTAL_CODE] [varchar](25) NULL,
	[IMP_GEN_PROVINCE] [varchar](50) NULL,
	[IMP_GEN_CNTRY_CODE] [char](2) NULL,
	[IMP_GEN_CNTRY_NAME] [varchar](100) NULL,
	[IMP_PORT_CITY] [varchar](25) NULL,
	[IMP_PORT_STATE_CODE] [char](2) NULL,
	[IMP_PORT_STATE_NAME] [varchar](100) NULL,
	[PRINTED_DOC_NAME] [varchar](255) NULL,
	[PRINTED_DOC_SIZE] [int] NULL,
	[PRINTED_DOC_MIME_TYPE] [varchar](50) NULL,
	[FORM_DOC_NAME] [varchar](255) NULL,
	[FORM_DOC_SIZE] [int] NULL,
	[FORM_DOC_MIME_TYPE] [varchar](50) NULL,
	[ADD_INFO_NEW_MAN_DEST] [varchar](255) NULL,
	[ADD_INFO_CONSENT_NUM] [varchar](255) NULL,
	[ADD_INFO_HAND_INSTR] [varchar](4000) NULL,
	[CORR_VERSION_NUM] [int] NULL,
	[CORR_ACTIVE_IND] [char](1) NULL,
	[CORR_EPA_SITE_ID] [varchar](15) NULL,
	[CORR_ES_SIGN_DATE] [datetime] NULL,
	[CORR_ES_CROMERR_ACT_ID] [varchar](50) NULL,
	[CORR_ES_CROMERR_DOC_ID] [varchar](50) NULL,
	[CORR_ES_SIGNER_FIRST_NAME] [varchar](38) NULL,
	[CORR_ES_SIGNER_LAST_NAME] [varchar](38) NULL,
	[CORR_ES_SIGNER_USER_ID] [varchar](255) NULL,
	[CORR_ES_DOC_NAME] [varchar](255) NULL,
	[CORR_ES_DOC_SIZE] [int] NULL,
	[CORR_ES_DOC_MIME_TYPE] [varchar](50) NULL,
 CONSTRAINT [PK_EM_EMANIFEST] PRIMARY KEY CLUSTERED 
(
	[EM_EMANIFEST_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[ETL_EM_EMANIFEST_VW]    Script Date: 6/12/2019 2:50:54 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[ETL_EM_EMANIFEST_VW] AS (
    SELECT WH.EM_EMANIFEST_ID WH_EM_EMANIFEST_ID,
           NODE.*
    FROM NODE_RCRA_EM_EMANIFEST NODE
             LEFT OUTER JOIN RCRA_EM_EMANIFEST WH ON WH.MAN_TRACKING_NUM = NODE.MAN_TRACKING_NUM
        AND ((WH.CORR_VERSION_NUM = NODE.CORR_VERSION_NUM) OR (WH.CORR_VERSION_NUM IS NULL AND NODE.CORR_VERSION_NUM IS NULL))
)
GO
/****** Object:  Table [dbo].[RCRA_RU_REPORT_UNIV]    Script Date: 6/12/2019 2:50:54 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RCRA_RU_REPORT_UNIV](
	[RU_REPORT_UNIV_ID] [int] IDENTITY(1,1) NOT NULL,
	[HANDLER_ID] [varchar](12) NOT NULL,
	[ACTIVITY_LOCATION] [char](2) NOT NULL,
	[SOURCE_TYPE] [char](1) NULL,
	[SEQ_NUMBER] [int] NULL,
	[RECEIVE_DATE] [datetime] NULL,
	[HANDLER_NAME] [varchar](80) NULL,
	[NON_NOTIFIER_IND] [char](1) NULL,
	[ACCESSIBILITY] [char](1) NULL,
	[REPORT_CYCLE] [int] NULL,
	[REGION] [char](2) NULL,
	[STATE] [char](2) NULL,
	[EXTRACT_FLAG] [char](1) NULL,
	[ACTIVE_SITE] [varchar](5) NULL,
	[COUNTY_CODE] [varchar](5) NULL,
	[COUNTY_NAME] [varchar](80) NULL,
	[LOCATION_STREET_NUMBER] [varchar](12) NULL,
	[LOCATION_STREET1] [varchar](50) NULL,
	[LOCATION_STREET2] [varchar](50) NULL,
	[LOCATION_CITY] [varchar](25) NULL,
	[LOCATION_STATE] [char](2) NULL,
	[LOCATION_COUNTRY] [char](2) NULL,
	[LOCATION_ZIP] [varchar](14) NULL,
	[MAIL_STREET_NUMBER] [varchar](12) NULL,
	[MAIL_STREET1] [varchar](50) NULL,
	[MAIL_STREET2] [varchar](50) NULL,
	[MAIL_CITY] [varchar](25) NULL,
	[MAIL_STATE] [char](2) NULL,
	[MAIL_COUNTRY] [char](2) NULL,
	[MAIL_ZIP] [varchar](14) NULL,
	[CONTACT_STREET_NUMBER] [varchar](12) NULL,
	[CONTACT_STREET1] [varchar](50) NULL,
	[CONTACT_STREET2] [varchar](50) NULL,
	[CONTACT_CITY] [varchar](25) NULL,
	[CONTACT_STATE] [char](2) NULL,
	[CONTACT_COUNTRY] [char](2) NULL,
	[CONTACT_ZIP] [varchar](14) NULL,
	[CONTACT_NAME] [varchar](80) NULL,
	[CONTACT_PHONE] [varchar](22) NULL,
	[CONTACT_FAX] [varchar](15) NULL,
	[CONTACT_EMAIL] [varchar](80) NULL,
	[CONTACT_TITLE] [varchar](45) NULL,
	[OWNER_NAME] [varchar](80) NULL,
	[OWNER_TYPE] [char](1) NULL,
	[OWNER_SEQ_NUM] [int] NULL,
	[OPER_NAME] [varchar](80) NULL,
	[OPER_TYPE] [char](1) NULL,
	[OPER_SEQ_NUM] [int] NULL,
	[NAIC1_CODE] [varchar](6) NULL,
	[NAIC2_CODE] [varchar](6) NULL,
	[NAIC3_CODE] [varchar](6) NULL,
	[NAIC4_CODE] [varchar](6) NULL,
	[IN_HANDLER_UNIVERSE] [char](1) NULL,
	[IN_A_UNIVERSE] [char](1) NULL,
	[FED_WASTE_GENERATOR_OWNER] [char](2) NULL,
	[FED_WASTE_GENERATOR] [char](1) NULL,
	[STATE_WASTE_GENERATOR_OWNER] [char](2) NULL,
	[STATE_WASTE_GENERATOR] [char](1) NULL,
	[GEN_STATUS] [varchar](3) NULL,
	[UNIV_WASTE] [char](1) NULL,
	[LAND_TYPE] [char](1) NULL,
	[STATE_DISTRICT_OWNER] [char](2) NULL,
	[STATE_DISTRICT] [varchar](10) NULL,
	[SHORT_TERM_GEN_IND] [char](1) NULL,
	[IMPORTER_ACTIVITY] [char](1) NULL,
	[MIXED_WASTE_GENERATOR] [char](1) NULL,
	[TRANSPORTER_ACTIVITY] [char](1) NULL,
	[TRANSFER_FACILITY_IND] [char](1) NULL,
	[RECYCLER_ACTIVITY] [char](1) NULL,
	[ONSITE_BURNER_EXEMPTION] [char](1) NULL,
	[FURNACE_EXEMPTION] [char](1) NULL,
	[UNDERGROUND_INJECTION_ACTIVITY] [char](1) NULL,
	[UNIVERSAL_WASTE_DEST_FACILITY] [char](1) NULL,
	[OFFSITE_WASTE_RECEIPT] [char](1) NULL,
	[USED_OIL] [varchar](7) NULL,
	[FEDERAL_UNIVERSAL_WASTE] [char](1) NULL,
	[AS_FEDERAL_REGULATED_TSDF] [varchar](6) NULL,
	[AS_CONVERTED_TSDF] [varchar](6) NULL,
	[AS_STATE_REGULATED_TSDF] [varchar](9) NULL,
	[FEDERAL_IND] [varchar](3) NULL,
	[HSM] [char](2) NULL,
	[SUBPART_K] [varchar](4) NULL,
	[COMMERCIAL_TSD] [char](1) NULL,
	[TSD] [varchar](5) NULL,
	[GPRA_PERMIT] [char](1) NULL,
	[GPRA_RENEWAL] [char](1) NULL,
	[PERMIT_RENEWAL_WRKLD] [varchar](6) NULL,
	[PERM_WRKLD] [varchar](6) NULL,
	[PERM_PROG] [varchar](6) NULL,
	[PC_WRKLD] [varchar](6) NULL,
	[CLOS_WRKLD] [varchar](6) NULL,
	[GPRACA] [char](1) NULL,
	[CA_WRKLD] [char](1) NULL,
	[SUBJ_CA] [char](1) NULL,
	[SUBJ_CA_NON_TSD] [char](1) NULL,
	[SUBJ_CA_TSD_3004] [char](1) NULL,
	[SUBJ_CA_DISCRETION] [char](1) NULL,
	[NCAPS] [char](1) NULL,
	[EC_IND] [char](1) NULL,
	[IC_IND] [char](1) NULL,
	[CA_725_IND] [char](1) NULL,
	[CA_750_IND] [char](1) NULL,
	[OPERATING_TSDF] [varchar](6) NULL,
	[FULL_ENFORCEMENT] [varchar](6) NULL,
	[SNC] [char](1) NULL,
	[BOY_SNC] [char](1) NULL,
	[BOY_STATE_UNADDRESSED_SNC] [char](1) NULL,
	[STATE_UNADDRESSED] [char](1) NULL,
	[STATE_ADDRESSED] [char](1) NULL,
	[BOY_STATE_ADDRESSED] [char](1) NULL,
	[STATE_SNC_WITH_COMP_SCHED] [char](1) NULL,
	[BOY_STATE_SNC_WITH_COMP_SCHED] [char](1) NULL,
	[EPA_UNADDRESSED] [char](1) NULL,
	[BOY_EPA_UNADDRESSED] [char](1) NULL,
	[EPA_ADDRESSED] [char](1) NULL,
	[BOY_EPA_ADDRESSED] [char](1) NULL,
	[EPA_SNC_WITH_COMP_SCHED] [char](1) NULL,
	[BOY_EPA_SNC_WITH_COMP_SCHED] [char](1) NULL,
	[FA_REQUIRED] [varchar](5) NULL,
	[HHANDLER_LAST_CHANGE_DATE] [datetime] NULL,
	[PUBLIC_NOTES] [varchar](4000) NULL,
	[NOTES] [varchar](4000) NULL,
	[RECOGNIZED_TRADER_IMPORTER_IND] [char](1) NULL,
	[RECOGNIZED_TRADER_EXPORTER_IND] [char](1) NULL,
	[SLAB_IMPORTER_IND] [char](1) NULL,
	[SLAB_EXPORTER_IND] [char](1) NULL,
	[RECYCLER_NON_STORAGE_IND] [char](1) NULL,
	[MANIFEST_BROKER_IND] [char](1) NULL,
 CONSTRAINT [PK_RU_REPORT_UNIV] PRIMARY KEY CLUSTERED 
(
	[RU_REPORT_UNIV_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[ETL_RU_REPORT_UNIV_VW]    Script Date: 6/12/2019 2:50:54 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

    CREATE VIEW [dbo].[ETL_RU_REPORT_UNIV_VW] AS (
    SELECT
        NODE2.RU_SUBM_ID RU_SUBM_ID,
        WH.RU_REPORT_UNIV_ID WH_RU_REPORT_UNIV_ID,
        NODE.*
    FROM NODE_RCRA_RU_REPORT_UNIV NODE
             JOIN NODE_RCRA_RU_REPORT_UNIV_SUBM NODE2 ON NODE2.RU_REPORT_UNIV_SUBM_ID = NODE.RU_REPORT_UNIV_SUBM_ID
             LEFT OUTER JOIN RCRA_RU_REPORT_UNIV WH ON WH.HANDLER_ID = NODE.HANDLER_ID
)
GO
/****** Object:  View [dbo].[ETL_EM_EMANIFEST_COMMENT_VW]    Script Date: 6/12/2019 2:50:54 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[ETL_EM_EMANIFEST_COMMENT_VW] AS (
    SELECT ETL.WH_EM_EMANIFEST_ID,
           ETL.EM_SUBM_ID,
           NODE.*
    FROM NODE_RCRA_EM_EMANIFEST_COMMENT NODE
             INNER JOIN ETL_EM_EMANIFEST_VW ETL ON ETL.EM_EMANIFEST_ID = NODE.EM_EMANIFEST_ID
)
GO
/****** Object:  View [dbo].[ETL_EM_HANDLER_VW]    Script Date: 6/12/2019 2:50:54 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[ETL_EM_HANDLER_VW] AS (
    SELECT ETL.WH_EM_EMANIFEST_ID,
           ETL.EM_SUBM_ID,
           NODE.*
    FROM NODE_RCRA_EM_HANDLER NODE
             INNER JOIN ETL_EM_EMANIFEST_VW ETL ON ETL.EM_EMANIFEST_ID = NODE.EM_EMANIFEST_ID
)
GO
/****** Object:  Table [dbo].[RCRA_CME_EVAL]    Script Date: 6/12/2019 2:50:54 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RCRA_CME_EVAL](
	[CME_EVAL_ID] [int] IDENTITY(1,1) NOT NULL,
	[CME_FAC_SUBM_ID] [int] NOT NULL,
	[TRANS_CODE] [char](1) NULL,
	[EVAL_ACT_LOC] [char](2) NOT NULL,
	[EVAL_IDEN] [varchar](3) NOT NULL,
	[EVAL_START_DATE] [datetime] NOT NULL,
	[EVAL_RESP_AGN] [char](1) NOT NULL,
	[DAY_ZERO] [datetime] NULL,
	[FOUND_VIOL] [char](1) NULL,
	[CTZN_CPLT_IND] [char](1) NULL,
	[MULTIMEDIA_IND] [char](1) NULL,
	[SAMPL_IND] [char](1) NULL,
	[NOT_SUBTL_C_IND] [char](1) NULL,
	[EVAL_TYPE_OWNER] [char](2) NULL,
	[EVAL_TYPE] [varchar](3) NULL,
	[FOCUS_AREA_OWNER] [char](2) NULL,
	[FOCUS_AREA] [varchar](3) NULL,
	[EVAL_RESP_PERSON_IDEN_OWNER] [char](2) NULL,
	[EVAL_RESP_PERSON_IDEN] [varchar](5) NULL,
	[EVAL_RESP_SUBORG_OWNER] [char](2) NULL,
	[EVAL_RESP_SUBORG] [varchar](10) NULL,
	[NOTES] [varchar](4000) NULL,
	[NOC_DATE] [datetime] NULL,
 CONSTRAINT [PK_CME_EVAL] PRIMARY KEY CLUSTERED 
(
	[CME_EVAL_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RCRA_EM_WASTE_CD_TRANS]    Script Date: 6/12/2019 2:50:54 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RCRA_EM_WASTE_CD_TRANS](
	[EM_WASTE_CD_TRANS_ID] [int] IDENTITY(1,1) NOT NULL,
	[EM_WASTE_ID] [int] NOT NULL,
	[WASTE_CODE] [varchar](12) NOT NULL,
 CONSTRAINT [PK_RCRA_EM_WASTE_CD_TRANS] PRIMARY KEY CLUSTERED 
(
	[EM_WASTE_CD_TRANS_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RCRA_CME_ENFRC_ACT]    Script Date: 6/12/2019 2:50:54 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RCRA_CME_ENFRC_ACT](
	[CME_ENFRC_ACT_ID] [int] IDENTITY(1,1) NOT NULL,
	[CME_FAC_SUBM_ID] [int] NOT NULL,
	[TRANS_CODE] [char](1) NULL,
	[ENFRC_AGN_LOC_NAME] [char](2) NOT NULL,
	[ENFRC_ACT_IDEN] [varchar](3) NOT NULL,
	[ENFRC_ACT_DATE] [datetime] NOT NULL,
	[ENFRC_AGN_NAME] [char](1) NOT NULL,
	[ENFRC_DOCKET_NUM] [varchar](15) NULL,
	[ENFRC_ATTRY] [varchar](5) NULL,
	[CORCT_ACT_COMPT] [char](1) NULL,
	[CNST_AGMT_FINAL_ORDER_SEQ_NUM] [int] NULL,
	[APPEAL_INIT_DATE] [datetime] NULL,
	[APPEAL_RSLN_DATE] [datetime] NULL,
	[DISP_STAT_DATE] [datetime] NULL,
	[DISP_STAT_OWNER] [char](2) NULL,
	[DISP_STAT] [char](2) NULL,
	[ENFRC_OWNER] [char](2) NULL,
	[ENFRC_TYPE] [char](3) NULL,
	[ENFRC_RESP_PERSON_OWNER] [char](2) NULL,
	[ENFRC_RESP_PERSON_IDEN] [varchar](5) NULL,
	[ENFRC_RESP_SUBORG_OWNER] [char](2) NULL,
	[ENFRC_RESP_SUBORG] [varchar](10) NULL,
	[NOTES] [varchar](4000) NULL,
	[FA_REQUIRED] [char](1) NULL,
 CONSTRAINT [PK_CME_ENFRC_ACT] PRIMARY KEY CLUSTERED 
(
	[CME_ENFRC_ACT_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RCRA_EM_WASTE_CD_TSDF]    Script Date: 6/12/2019 2:50:54 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RCRA_EM_WASTE_CD_TSDF](
	[EM_WASTE_CD_TSDF_ID] [int] IDENTITY(1,1) NOT NULL,
	[EM_WASTE_ID] [int] NOT NULL,
	[WASTE_CODE] [varchar](6) NOT NULL,
	[WASTE_DESC] [varchar](2000) NULL,
 CONSTRAINT [PK_RCRA_EM_WASTE_CD_TSDF] PRIMARY KEY CLUSTERED 
(
	[EM_WASTE_CD_TSDF_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RCRA_CME_CSNY_DATE]    Script Date: 6/12/2019 2:50:54 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RCRA_CME_CSNY_DATE](
	[CME_CSNY_DATE_ID] [int] IDENTITY(1,1) NOT NULL,
	[CME_ENFRC_ACT_ID] [int] NOT NULL,
	[TRANS_CODE] [char](1) NULL,
	[SNY_DATE] [datetime] NOT NULL,
 CONSTRAINT [PK_CME_CSNY_DATE] PRIMARY KEY CLUSTERED 
(
	[CME_CSNY_DATE_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RCRA_CME_CITATION]    Script Date: 6/12/2019 2:50:54 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RCRA_CME_CITATION](
	[CME_CITATION_ID] [int] IDENTITY(1,1) NOT NULL,
	[CME_VIOL_ID] [int] NOT NULL,
	[TRANS_CODE] [char](1) NULL,
	[CITATION_NAME_SEQ_NUM] [int] NOT NULL,
	[CITATION_NAME] [varchar](80) NULL,
	[CITATION_NAME_OWNER] [char](2) NULL,
	[CITATION_NAME_TYPE] [char](2) NULL,
	[NOTES] [varchar](4000) NULL,
 CONSTRAINT [PK_CME_CITATION] PRIMARY KEY CLUSTERED 
(
	[CME_CITATION_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RCRA_EM_WASTE_COMMENT]    Script Date: 6/12/2019 2:50:54 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RCRA_EM_WASTE_COMMENT](
	[EM_WASTE_COMMENT_ID] [int] IDENTITY(1,1) NOT NULL,
	[EM_WASTE_ID] [int] NOT NULL,
	[COMMENT_DESC] [varchar](4000) NULL,
	[HANDLER_ID] [varchar](15) NULL,
	[COMMENT_LABEL] [varchar](255) NULL,
 CONSTRAINT [PK_RCRA_EM_WASTE_COMMENT] PRIMARY KEY CLUSTERED 
(
	[EM_WASTE_COMMENT_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RCRA_CA_EVENT_COMMITMENT]    Script Date: 6/12/2019 2:50:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RCRA_CA_EVENT_COMMITMENT](
	[CA_EVENT_COMMITMENT_ID] [int] IDENTITY(1,1) NOT NULL,
	[CA_EVENT_ID] [int] NOT NULL,
	[TRANS_CODE] [char](1) NULL,
	[COMMIT_LEAD] [char](2) NOT NULL,
	[COMMIT_SEQ_NUM] [int] NOT NULL,
 CONSTRAINT [PK_CA_EVNT_CMMTMNT] PRIMARY KEY CLUSTERED 
(
	[CA_EVENT_COMMITMENT_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RCRA_EM_WASTE_PCB]    Script Date: 6/12/2019 2:50:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RCRA_EM_WASTE_PCB](
	[EM_WASTE_PCB_ID] [int] IDENTITY(1,1) NOT NULL,
	[EM_WASTE_ID] [int] NOT NULL,
	[PCB_LOAD_TYPE_CODE] [varchar](255) NULL,
	[PCB_ARTICLE_CONT_ID] [varchar](255) NULL,
	[PCB_REMOVAL_DATE] [datetime] NULL,
	[PCB_WEIGHT] [decimal](14, 6) NULL,
	[PCB_WASTE_TYPE] [varchar](255) NULL,
	[PCB_BULK_IDENTITY] [varchar](255) NULL,
 CONSTRAINT [PK_RCRA_EM_WASTE_PCB] PRIMARY KEY CLUSTERED 
(
	[EM_WASTE_PCB_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RCRA_CA_AUTH_REL_EVENT]    Script Date: 6/12/2019 2:50:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RCRA_CA_AUTH_REL_EVENT](
	[CA_AUTH_REL_EVENT_ID] [int] IDENTITY(1,1) NOT NULL,
	[CA_AUTHORITY_ID] [int] NOT NULL,
	[TRANS_CODE] [char](1) NULL,
	[ACT_LOC_CODE] [char](2) NOT NULL,
	[CORCT_ACT_EVENT_DATA_OWNER_CDE] [char](2) NOT NULL,
	[CORCT_ACT_EVENT_CODE] [varchar](7) NOT NULL,
	[EVENT_AGN_CODE] [char](1) NOT NULL,
	[EVENT_SEQ_NUM] [int] NOT NULL,
 CONSTRAINT [PK_CA_AUTH_RL_EVNT] PRIMARY KEY CLUSTERED 
(
	[CA_AUTH_REL_EVENT_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RCRA_CA_AREA_REL_EVENT]    Script Date: 6/12/2019 2:50:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RCRA_CA_AREA_REL_EVENT](
	[CA_AREA_REL_EVENT_ID] [int] IDENTITY(1,1) NOT NULL,
	[CA_AREA_ID] [int] NOT NULL,
	[TRANS_CODE] [char](1) NULL,
	[ACT_LOC_CODE] [char](2) NOT NULL,
	[CORCT_ACT_EVENT_DATA_OWNER_CDE] [char](2) NOT NULL,
	[CORCT_ACT_EVENT_CODE] [varchar](7) NOT NULL,
	[EVENT_AGN_CODE] [char](1) NOT NULL,
	[EVENT_SEQ_NUM] [int] NOT NULL,
 CONSTRAINT [PK_CA_AREA_RL_EVNT] PRIMARY KEY CLUSTERED 
(
	[CA_AREA_REL_EVENT_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RCRA_CME_EVAL_VIOL]    Script Date: 6/12/2019 2:50:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RCRA_CME_EVAL_VIOL](
	[CME_EVAL_VIOL_ID] [int] IDENTITY(1,1) NOT NULL,
	[CME_EVAL_ID] [int] NOT NULL,
	[TRANS_CODE] [char](1) NULL,
	[VIOL_ACT_LOC] [char](2) NOT NULL,
	[VIOL_SEQ_NUM] [int] NOT NULL,
	[AGN_WHICH_DTRM_VIOL] [char](1) NOT NULL,
 CONSTRAINT [PK_CME_EVAL_VIOL] PRIMARY KEY CLUSTERED 
(
	[CME_EVAL_VIOL_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RCRA_CME_EVAL_COMMIT]    Script Date: 6/12/2019 2:50:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RCRA_CME_EVAL_COMMIT](
	[CME_EVAL_COMMIT_ID] [int] IDENTITY(1,1) NOT NULL,
	[CME_EVAL_ID] [int] NOT NULL,
	[TRANS_CODE] [char](1) NULL,
	[COMMIT_LEAD] [char](2) NOT NULL,
	[COMMIT_SEQ_NUM] [int] NOT NULL,
 CONSTRAINT [PK_CME_EVAL_COMMIT] PRIMARY KEY CLUSTERED 
(
	[CME_EVAL_COMMIT_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RCRA_CA_STATUTORY_CITATION]    Script Date: 6/12/2019 2:50:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RCRA_CA_STATUTORY_CITATION](
	[CA_STATUTORY_CITATION_ID] [int] IDENTITY(1,1) NOT NULL,
	[CA_AUTHORITY_ID] [int] NOT NULL,
	[TRANS_CODE] [char](1) NULL,
	[STATUTORY_CITTION_DTA_OWNR_CDE] [char](2) NOT NULL,
	[STATUTORY_CITATION_IDEN] [char](1) NOT NULL,
 CONSTRAINT [PK_CA_STTTRY_CTTON] PRIMARY KEY CLUSTERED 
(
	[CA_STATUTORY_CITATION_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RCRA_CA_REL_PERMIT_UNIT]    Script Date: 6/12/2019 2:50:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RCRA_CA_REL_PERMIT_UNIT](
	[CA_REL_PERMIT_UNIT_ID] [int] IDENTITY(1,1) NOT NULL,
	[CA_AREA_ID] [int] NOT NULL,
	[TRANS_CODE] [char](1) NULL,
	[PERMIT_UNIT_SEQ_NUM] [int] NOT NULL,
 CONSTRAINT [PK_CA_RL_PRMIT_UNT] PRIMARY KEY CLUSTERED 
(
	[CA_REL_PERMIT_UNIT_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RCRA_CME_PNLTY]    Script Date: 6/12/2019 2:50:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RCRA_CME_PNLTY](
	[CME_PNLTY_ID] [int] IDENTITY(1,1) NOT NULL,
	[CME_ENFRC_ACT_ID] [int] NOT NULL,
	[TRANS_CODE] [char](1) NULL,
	[PNLTY_TYPE_OWNER] [char](2) NOT NULL,
	[PNLTY_TYPE] [varchar](3) NOT NULL,
	[CASH_CIVIL_PNLTY_SOUGHT_AMOUNT] [decimal](13, 2) NULL,
	[NOTES] [varchar](4000) NULL,
 CONSTRAINT [PK_CME_PNLTY] PRIMARY KEY CLUSTERED 
(
	[CME_PNLTY_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RCRA_CME_MILESTONE]    Script Date: 6/12/2019 2:50:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RCRA_CME_MILESTONE](
	[CME_MILESTONE_ID] [int] IDENTITY(1,1) NOT NULL,
	[CME_ENFRC_ACT_ID] [int] NOT NULL,
	[TRANS_CODE] [char](1) NULL,
	[MILESTONE_SEQ_NUM] [int] NOT NULL,
	[TECH_RQMT_IDEN] [varchar](50) NULL,
	[TECH_RQMT_DESC] [varchar](200) NULL,
	[MILESTONE_SCHD_COMP_DATE] [datetime] NULL,
	[MILESTONE_ACTL_COMP_DATE] [datetime] NULL,
	[MILESTONE_DFLT_DATE] [datetime] NULL,
	[NOTES] [varchar](4000) NULL,
 CONSTRAINT [PK_CME_MILESTONE] PRIMARY KEY CLUSTERED 
(
	[CME_MILESTONE_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RCRA_CME_MEDIA]    Script Date: 6/12/2019 2:50:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RCRA_CME_MEDIA](
	[CME_MEDIA_ID] [int] IDENTITY(1,1) NOT NULL,
	[CME_ENFRC_ACT_ID] [int] NOT NULL,
	[TRANS_CODE] [char](1) NULL,
	[MULTIMEDIA_CODE_OWNER] [char](2) NOT NULL,
	[MULTIMEDIA_CODE] [varchar](3) NOT NULL,
	[NOTES] [varchar](4000) NULL,
 CONSTRAINT [PK_CME_MEDIA] PRIMARY KEY CLUSTERED 
(
	[CME_MEDIA_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RCRA_CME_RQST]    Script Date: 6/12/2019 2:50:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RCRA_CME_RQST](
	[CME_RQST_ID] [int] IDENTITY(1,1) NOT NULL,
	[CME_EVAL_ID] [int] NOT NULL,
	[TRANS_CODE] [char](1) NULL,
	[RQST_SEQ_NUM] [int] NOT NULL,
	[DATE_OF_RQST] [datetime] NULL,
	[DATE_RESP_RCVD] [datetime] NULL,
	[RQST_AGN] [char](1) NULL,
	[NOTES] [varchar](4000) NULL,
 CONSTRAINT [PK_CME_RQST] PRIMARY KEY CLUSTERED 
(
	[CME_RQST_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RCRA_FA_MECHANISM_DETAIL]    Script Date: 6/12/2019 2:50:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RCRA_FA_MECHANISM_DETAIL](
	[FA_MECHANISM_DETAIL_ID] [int] IDENTITY(1,1) NOT NULL,
	[FA_MECHANISM_ID] [int] NOT NULL,
	[TRANS_CODE] [char](1) NULL,
	[MECHANISM_DETAIL_SEQ_NUM] [int] NOT NULL,
	[MECHANISM_IDEN_TXT] [varchar](40) NULL,
	[FACE_VAL_AMOUNT] [decimal](13, 2) NULL,
	[EFFC_DATE] [datetime] NULL,
	[EXPIRATION_DATE] [datetime] NULL,
	[SUPP_INFO_TXT] [varchar](2000) NULL,
 CONSTRAINT [PK_FA_MCHNISM_DTIL] PRIMARY KEY CLUSTERED 
(
	[FA_MECHANISM_DETAIL_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RCRA_CME_VIOL_ENFRC]    Script Date: 6/12/2019 2:50:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RCRA_CME_VIOL_ENFRC](
	[CME_VIOL_ENFRC_ID] [int] IDENTITY(1,1) NOT NULL,
	[CME_ENFRC_ACT_ID] [int] NOT NULL,
	[TRANS_CODE] [char](1) NULL,
	[VIOL_SEQ_NUM] [int] NOT NULL,
	[AGN_WHICH_DTRM_VIOL] [char](1) NOT NULL,
	[RTN_COMPL_SCHD_DATE] [datetime] NULL,
 CONSTRAINT [PK_CME_VIOL_ENFRC] PRIMARY KEY CLUSTERED 
(
	[CME_VIOL_ENFRC_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RCRA_FA_COST_EST_REL_MECHANISM]    Script Date: 6/12/2019 2:50:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RCRA_FA_COST_EST_REL_MECHANISM](
	[FA_COST_EST_REL_MECHANISM_ID] [int] IDENTITY(1,1) NOT NULL,
	[FA_COST_EST_ID] [int] NOT NULL,
	[TRANS_CODE] [char](1) NULL,
	[ACT_LOC_CODE] [char](2) NOT NULL,
	[MECHANISM_AGN_CODE] [char](1) NOT NULL,
	[MECHANISM_SEQ_NUM] [int] NOT NULL,
	[MECHANISM_DETAIL_SEQ_NUM] [int] NOT NULL,
 CONSTRAINT [PK_FA_CST_ES_RL_MC] PRIMARY KEY CLUSTERED 
(
	[FA_COST_EST_REL_MECHANISM_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RCRA_CME_SUPP_ENVR_PRJT]    Script Date: 6/12/2019 2:50:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RCRA_CME_SUPP_ENVR_PRJT](
	[CME_SUPP_ENVR_PRJT_ID] [int] IDENTITY(1,1) NOT NULL,
	[CME_ENFRC_ACT_ID] [int] NOT NULL,
	[TRANS_CODE] [char](1) NULL,
	[SEP_SEQ_NUM] [int] NOT NULL,
	[SEP_EXPND_AMOUNT] [decimal](13, 2) NULL,
	[SEP_SCHD_COMP_DATE] [datetime] NULL,
	[SEP_ACTL_DATE] [datetime] NULL,
	[SEP_DFLT_DATE] [datetime] NULL,
	[SEP_CODE_OWNER] [char](2) NULL,
	[SEP_DESC_TXT] [varchar](3) NULL,
	[NOTES] [varchar](4000) NULL,
 CONSTRAINT [PK_CME_SPP_ENV_PRJ] PRIMARY KEY CLUSTERED 
(
	[CME_SUPP_ENVR_PRJT_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RCRA_PRM_EVENT]    Script Date: 6/12/2019 2:50:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RCRA_PRM_EVENT](
	[PRM_EVENT_ID] [int] IDENTITY(1,1) NOT NULL,
	[PRM_SERIES_ID] [int] NOT NULL,
	[TRANS_CODE] [char](1) NULL,
	[ACT_LOC_CODE] [char](2) NOT NULL,
	[PERMIT_EVENT_DATA_OWNER_CODE] [char](2) NOT NULL,
	[PERMIT_EVENT_CODE] [varchar](7) NOT NULL,
	[EVENT_AGN_CODE] [char](1) NOT NULL,
	[EVENT_SEQ_NUM] [int] NOT NULL,
	[ACTL_DATE] [datetime] NULL,
	[ORIGINAL_SCHEDULE_DATE] [datetime] NULL,
	[NEW_SCHEDULE_DATE] [datetime] NULL,
	[RESP_PERSON_DATA_OWNER_CODE] [char](2) NULL,
	[RESP_PERSON_ID] [varchar](5) NULL,
	[EVENT_SUBORG_DATA_OWNER_CODE] [char](2) NULL,
	[EVENT_SUBORG_CODE] [varchar](10) NULL,
	[SUPP_INFO_TXT] [varchar](2000) NULL,
 CONSTRAINT [PK_PRM_EVENT] PRIMARY KEY CLUSTERED 
(
	[PRM_EVENT_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RCRA_PRM_UNIT_DETAIL]    Script Date: 6/12/2019 2:50:55 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RCRA_PRM_UNIT_DETAIL](
	[PRM_UNIT_DETAIL_ID] [int] IDENTITY(1,1) NOT NULL,
	[PRM_UNIT_ID] [int] NOT NULL,
	[TRANS_CODE] [char](1) NULL,
	[PERMIT_UNIT_DETAIL_SEQ_NUM] [int] NOT NULL,
	[PROC_UNIT_DATA_OWNER_CODE] [char](2) NULL,
	[PROC_UNIT_CODE] [varchar](3) NULL,
	[PERMIT_STAT_EFFC_DATE] [datetime] NULL,
	[PERMIT_UNIT_CAP_QNTY] [decimal](14, 3) NULL,
	[CAP_TYPE_CODE] [char](1) NULL,
	[COMMER_STAT_CODE] [char](1) NULL,
	[LEGAL_OPER_STAT_DATA_OWNER_CDE] [char](2) NULL,
	[LEGAL_OPER_STAT_CODE] [varchar](4) NULL,
	[MEASUREMENT_UNIT_DATA_OWNR_CDE] [char](2) NULL,
	[MEASUREMENT_UNIT_CODE] [char](1) NULL,
	[NUM_OF_UNITS_COUNT] [int] NULL,
	[STANDARD_PERMIT_IND] [char](1) NULL,
	[SUPP_INFO_TXT] [varchar](2000) NULL,
 CONSTRAINT [PK_PRM_UNIT_DETAIL] PRIMARY KEY CLUSTERED 
(
	[PRM_UNIT_DETAIL_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RCRA_PRM_WASTE_CODE]    Script Date: 6/12/2019 2:50:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RCRA_PRM_WASTE_CODE](
	[PRM_WASTE_CODE_ID] [int] IDENTITY(1,1) NOT NULL,
	[PRM_UNIT_DETAIL_ID] [int] NOT NULL,
	[TRANSACTION_CODE] [char](1) NULL,
	[WASTE_CODE_OWNER] [char](2) NULL,
	[WASTE_CODE_TYPE] [varchar](6) NULL,
 CONSTRAINT [PK_PRM_WASTE_CODE] PRIMARY KEY CLUSTERED 
(
	[PRM_WASTE_CODE_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RCRA_PRM_RELATED_EVENT]    Script Date: 6/12/2019 2:50:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RCRA_PRM_RELATED_EVENT](
	[PRM_RELATED_EVENT_ID] [int] IDENTITY(1,1) NOT NULL,
	[PRM_UNIT_DETAIL_ID] [int] NOT NULL,
	[TRANS_CODE] [char](1) NULL,
	[ACT_LOC_CODE] [char](2) NOT NULL,
	[PERMIT_SERIES_SEQ_NUM] [int] NOT NULL,
	[PERMIT_EVENT_DATA_OWNER_CODE] [char](2) NOT NULL,
	[PERMIT_EVENT_CODE] [varchar](7) NOT NULL,
	[EVENT_AGN_CODE] [char](1) NOT NULL,
	[EVENT_SEQ_NUM] [int] NOT NULL,
 CONSTRAINT [PK_PRM_RELTED_EVNT] PRIMARY KEY CLUSTERED 
(
	[PRM_RELATED_EVENT_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RCRA_PRM_EVENT_COMMITMENT]    Script Date: 6/12/2019 2:50:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RCRA_PRM_EVENT_COMMITMENT](
	[PRM_EVENT_COMMITMENT_ID] [int] IDENTITY(1,1) NOT NULL,
	[PRM_EVENT_ID] [int] NOT NULL,
	[TRANS_CODE] [char](1) NULL,
	[COMMIT_LEAD] [char](2) NOT NULL,
	[COMMIT_SEQ_NUM] [int] NOT NULL,
 CONSTRAINT [PK_PRM_EVNT_CMMTMN] PRIMARY KEY CLUSTERED 
(
	[PRM_EVENT_COMMITMENT_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RCRA_CME_PYMT]    Script Date: 6/12/2019 2:50:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RCRA_CME_PYMT](
	[CME_PYMT_ID] [int] IDENTITY(1,1) NOT NULL,
	[CME_PNLTY_ID] [int] NOT NULL,
	[TRANS_CODE] [char](1) NULL,
	[PYMT_SEQ_NUM] [int] NOT NULL,
	[PYMT_DFLT_DATE] [datetime] NULL,
	[SCHD_PYMT_DATE] [datetime] NULL,
	[SCHD_PYMT_AMOUNT] [decimal](13, 2) NULL,
	[ACTL_PYMT_DATE] [datetime] NULL,
	[ACTL_PAID_AMOUNT] [decimal](13, 2) NULL,
	[NOTES] [varchar](4000) NULL,
 CONSTRAINT [PK_CME_PYMT] PRIMARY KEY CLUSTERED 
(
	[CME_PYMT_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ETL_RUN]    Script Date: 6/12/2019 2:50:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ETL_RUN](
	[ETL_RUN_ID] [int] IDENTITY(1,1) NOT NULL,
	[RUN_DATE] [datetime2](7) NOT NULL,
	[ETL_TYPE] [char](2) NOT NULL,
	[SUBM_ID] [varchar](40) NULL,
PRIMARY KEY CLUSTERED 
(
	[ETL_RUN_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ETL_RUN_HANDLER]    Script Date: 6/12/2019 2:50:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ETL_RUN_HANDLER](
	[ETL_RUN_ID] [int] NOT NULL,
	[HANDLER_ID] [varchar](12) NOT NULL,
	[STATUS_TYPE] [char](1) NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RCRA_CME_FAC_SUBM]    Script Date: 6/12/2019 2:50:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RCRA_CME_FAC_SUBM](
	[CME_FAC_SUBM_ID] [int] IDENTITY(1,1) NOT NULL,
	[EPA_HDLR_ID] [char](12) NOT NULL,
 CONSTRAINT [PK_CME_FAC_SUBM] PRIMARY KEY CLUSTERED 
(
	[CME_FAC_SUBM_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RCRA_CA_FAC_SUBM]    Script Date: 6/12/2019 2:50:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RCRA_CA_FAC_SUBM](
	[CA_FAC_SUBM_ID] [int] IDENTITY(1,1) NOT NULL,
	[HANDLER_ID] [varchar](12) NOT NULL,
 CONSTRAINT [PK_CA_FAC_SUBM] PRIMARY KEY CLUSTERED 
(
	[CA_FAC_SUBM_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RCRA_GIS_FAC_SUBM]    Script Date: 6/12/2019 2:50:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RCRA_GIS_FAC_SUBM](
	[GIS_FAC_SUBM_ID] [int] IDENTITY(1,1) NOT NULL,
	[HANDLER_ID] [varchar](12) NOT NULL,
 CONSTRAINT [PK_GIS_FAC_SUBM] PRIMARY KEY CLUSTERED 
(
	[GIS_FAC_SUBM_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RCRA_EM_SUBM]    Script Date: 6/12/2019 2:50:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RCRA_EM_SUBM](
	[EM_SUBM_ID] [int] IDENTITY(1,1) NOT NULL,
 CONSTRAINT [PK_RCRA_EM_SUBM] PRIMARY KEY CLUSTERED 
(
	[EM_SUBM_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RCRA_FA_FAC_SUBM]    Script Date: 6/12/2019 2:50:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RCRA_FA_FAC_SUBM](
	[FA_FAC_SUBM_ID] [int] IDENTITY(1,1) NOT NULL,
	[HANDLER_ID] [varchar](12) NOT NULL,
 CONSTRAINT [PK_FA_FAC_SUBM] PRIMARY KEY CLUSTERED 
(
	[FA_FAC_SUBM_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RCRA_EM_EMANIFEST_COMMENT]    Script Date: 6/12/2019 2:50:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RCRA_EM_EMANIFEST_COMMENT](
	[EM_EMANIFEST_COMMENT_ID] [int] IDENTITY(1,1) NOT NULL,
	[EM_EMANIFEST_ID] [int] NOT NULL,
	[COMMENT_DESC] [varchar](4000) NULL,
	[HANDLER_ID] [varchar](15) NULL,
	[COMMENT_LABEL] [varchar](255) NULL,
 CONSTRAINT [PK_EM_EMANIFEST_COMMENT] PRIMARY KEY CLUSTERED 
(
	[EM_EMANIFEST_COMMENT_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RCRA_PRM_FAC_SUBM]    Script Date: 6/12/2019 2:50:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RCRA_PRM_FAC_SUBM](
	[PRM_FAC_SUBM_ID] [int] IDENTITY(1,1) NOT NULL,
	[HANDLER_ID] [varchar](12) NOT NULL,
 CONSTRAINT [PK_PRM_FAC_SUBM] PRIMARY KEY CLUSTERED 
(
	[PRM_FAC_SUBM_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RCRA_EM_HANDLER]    Script Date: 6/12/2019 2:50:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RCRA_EM_HANDLER](
	[EM_HANDLER_ID] [int] IDENTITY(1,1) NOT NULL,
	[EM_EMANIFEST_ID] [int] NOT NULL,
	[SITE_TYPE] [varchar](11) NOT NULL,
	[EPA_SITE_ID] [varchar](15) NULL,
	[MANIFEST_NAME] [varchar](80) NOT NULL,
	[ORDER_NUM] [int] NULL,
	[REG_IND] [char](1) NULL,
	[MOD_IND] [char](1) NULL,
	[MANIFEST_HANDLER_TYPE] [varchar](40) NOT NULL,
	[MAIL_STREET_NUM] [varchar](12) NULL,
	[MAIL_STREET1] [varchar](50) NULL,
	[MAIL_STREET2] [varchar](50) NULL,
	[MAIL_CITY] [varchar](25) NULL,
	[MAIL_ZIP] [varchar](14) NULL,
	[MAIL_CNTRY_CODE] [char](2) NULL,
	[MAIL_CNTRY_NAME] [varchar](100) NULL,
	[MAIL_STATE_CODE] [char](2) NULL,
	[MAIL_STATE_NAME] [varchar](100) NULL,
	[SITE_STREET_NUM] [varchar](12) NULL,
	[SITE_STREET1] [varchar](50) NULL,
	[SITE_STREET2] [varchar](50) NULL,
	[SITE_CITY] [varchar](25) NULL,
	[SITE_ZIP] [varchar](14) NULL,
	[SITE_CNTRY_CODE] [char](2) NULL,
	[SITE_CNTRY_NAME] [varchar](100) NULL,
	[SITE_STATE_CODE] [char](2) NULL,
	[SITE_STATE_NAME] [varchar](100) NULL,
	[CONTACT_FIRST_NAME] [varchar](38) NULL,
	[CONTACT_MIDDLE_INITIAL] [char](1) NULL,
	[CONTACT_LAST_NAME] [varchar](38) NULL,
	[CONTACT_EMAIL] [varchar](80) NULL,
	[CONTACT_COMPANY_NAME] [varchar](80) NULL,
	[CONTACT_PHONE_NUM] [varchar](15) NULL,
	[CONTACT_PHONE_EXT] [varchar](6) NULL,
	[EMERG_PHONE_NUM] [varchar](15) NULL,
	[EMERG_PHONE_EXT] [varchar](6) NULL,
	[PS_NAME] [varchar](80) NULL,
	[PS_DATE] [datetime] NULL,
	[ES_SIGN_DATE] [datetime] NULL,
	[ES_CROMERR_ACT_ID] [varchar](50) NULL,
	[ES_CROMERR_DOC_ID] [varchar](50) NULL,
	[ES_SIGNER_FIRST_NAME] [varchar](38) NULL,
	[ES_SIGNER_LAST_NAME] [varchar](38) NULL,
	[ES_SIGNER_USER_ID] [varchar](255) NULL,
	[ES_DOC_NAME] [varchar](255) NULL,
	[ES_DOC_SIZE] [int] NULL,
	[ES_DOC_MIME_TYPE] [varchar](50) NULL,
 CONSTRAINT [PK_RCRA_EM_HANDLER] PRIMARY KEY CLUSTERED 
(
	[EM_HANDLER_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RCRA_PRM_SERIES]    Script Date: 6/12/2019 2:50:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RCRA_PRM_SERIES](
	[PRM_SERIES_ID] [int] IDENTITY(1,1) NOT NULL,
	[PRM_FAC_SUBM_ID] [int] NOT NULL,
	[TRANS_CODE] [char](1) NULL,
	[PERMIT_SERIES_SEQ_NUM] [int] NOT NULL,
	[PERMIT_SERIES_NAME] [varchar](40) NULL,
	[RESP_PERSON_DATA_OWNER_CODE] [char](2) NULL,
	[RESP_PERSON_ID] [varchar](5) NULL,
	[SUPP_INFO_TXT] [varchar](2000) NULL,
 CONSTRAINT [PK_PRM_SERIES] PRIMARY KEY CLUSTERED 
(
	[PRM_SERIES_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RCRA_EM_WASTE]    Script Date: 6/12/2019 2:50:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RCRA_EM_WASTE](
	[EM_WASTE_ID] [int] IDENTITY(1,1) NOT NULL,
	[EM_EMANIFEST_ID] [int] NOT NULL,
	[DOT_HAZ_IND] [char](1) NOT NULL,
	[WASTES_DESC] [varchar](500) NULL,
	[BR_IND] [char](1) NULL,
	[PCB_IND] [char](1) NOT NULL,
	[LINE_NUM] [int] NOT NULL,
	[EPA_WASTE_IND] [char](1) NULL,
	[DOT_ID_NUM] [varchar](255) NULL,
	[DOT_PRINTED_INFO] [varchar](500) NULL,
	[QNT_CONT_NUM] [int] NULL,
	[QNT_VAL] [decimal](14, 6) NULL,
	[QNT_CONT_TYPE_CODE] [varchar](255) NULL,
	[QNT_CONT_TYPE_DESC] [varchar](255) NULL,
	[QNT_UOM_CODE] [char](1) NULL,
	[QNT_UOM_DESC] [varchar](28) NULL,
	[BR_DENSITY] [decimal](14, 6) NULL,
	[BR_DENSITY_UOM_CODE] [char](1) NULL,
	[BR_DENSITY_UOM_DESC] [varchar](240) NULL,
	[BR_FORM_CODE] [varchar](4) NULL,
	[BR_FORM_DESC] [varchar](240) NULL,
	[BR_SRC_CODE] [varchar](3) NULL,
	[BR_SRC_DESC] [varchar](240) NULL,
	[BR_WM_CODE] [char](1) NULL,
	[BR_WM_DESC] [varchar](240) NULL,
	[DISC_WASTE_QTY_IND] [char](1) NULL,
	[DISC_WASTE_TYPE_IND] [char](1) NULL,
	[DISC_COMMENTS] [varchar](255) NULL,
	[DISC_RESIDUE_IND] [char](1) NULL,
	[DISC_RESIDUE_COMMENTS] [varchar](255) NULL,
	[MGMT_METHOD_CODE] [varchar](4) NULL,
	[MGMT_METHOD_DESC] [varchar](240) NULL,
	[ADD_INFO_NEW_MAN_DEST] [varchar](255) NULL,
	[ADD_INFO_CONSENT_NUM] [varchar](255) NULL,
	[ADD_INFO_HAND_INSTR] [varchar](4000) NULL,
 CONSTRAINT [PK_RCRA_EM_WASTE] PRIMARY KEY CLUSTERED 
(
	[EM_WASTE_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RCRA_PRM_UNIT]    Script Date: 6/12/2019 2:50:56 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RCRA_PRM_UNIT](
	[PRM_UNIT_ID] [int] IDENTITY(1,1) NOT NULL,
	[PRM_FAC_SUBM_ID] [int] NOT NULL,
	[TRANS_CODE] [char](1) NULL,
	[PERMIT_UNIT_SEQ_NUM] [int] NOT NULL,
	[PERMIT_UNIT_NAME] [varchar](40) NULL,
	[SUPP_INFO_TXT] [varchar](2000) NULL,
 CONSTRAINT [PK_PRM_UNIT] PRIMARY KEY CLUSTERED 
(
	[PRM_UNIT_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RCRA_GIS_GEO_INFORMATION]    Script Date: 6/12/2019 2:50:57 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RCRA_GIS_GEO_INFORMATION](
	[GIS_GEO_INFORMATION_ID] [int] IDENTITY(1,1) NOT NULL,
	[GIS_FAC_SUBM_ID] [int] NOT NULL,
	[TRANS_CODE] [char](1) NULL,
	[GEO_INFO_OWNER] [char](2) NOT NULL,
	[GEO_INFO_SEQ_NUM] [int] NOT NULL,
	[PERMIT_UNIT_SEQ_NUM] [int] NULL,
	[AREA_SEQ_NUM] [int] NULL,
	[LOC_COMM_TXT] [varchar](2000) NULL,
	[AREA_ACREAGE_MEAS] [decimal](13, 2) NULL,
	[AREA_MEAS_SRC_DATA_OWNER_CODE] [char](2) NULL,
	[AREA_MEAS_SRC_CODE] [varchar](4) NULL,
	[AREA_MEAS_DATE] [datetime] NULL,
	[DATA_COLL_DATE] [datetime] NOT NULL,
	[HORZ_ACC_MEAS] [int] NULL,
	[SRC_MAP_SCALE_NUM] [int] NULL,
	[COORD_DATA_SRC_DATA_OWNER_CODE] [char](2) NULL,
	[COORD_DATA_SRC_CODE] [varchar](3) NULL,
	[GEO_REF_PT_DATA_OWNER_CODE] [char](2) NULL,
	[GEO_REF_PT_CODE] [varchar](3) NULL,
	[GEOM_TYPE_DATA_OWNER_CODE] [char](2) NULL,
	[GEOM_TYPE_CODE] [varchar](3) NULL,
	[HORZ_COLL_METH_DATA_OWNER_CODE] [char](2) NULL,
	[HORZ_COLL_METH_CODE] [varchar](3) NULL,
	[HRZ_CRD_RF_SYS_DTM_DTA_OWN_CDE] [char](2) NULL,
	[HORZ_COORD_REF_SYS_DATUM_CODE] [varchar](3) NULL,
	[VERF_METH_DATA_OWNER_CODE] [char](2) NULL,
	[VERF_METH_CODE] [varchar](3) NULL,
	[LATITUDE] [decimal](19, 14) NULL,
	[LONGITUDE] [decimal](19, 14) NULL,
	[ELEVATION] [decimal](19, 14) NULL,
 CONSTRAINT [PK_GS_GO_INFORMTON] PRIMARY KEY CLUSTERED 
(
	[GIS_GEO_INFORMATION_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RCRA_EM_TR_NUM_ORIG]    Script Date: 6/12/2019 2:50:57 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RCRA_EM_TR_NUM_ORIG](
	[EM_TR_NUM_ORIG_ID] [int] IDENTITY(1,1) NOT NULL,
	[EM_EMANIFEST_ID] [int] NOT NULL,
	[MANIFEST_TRACKING_NUM] [varchar](12) NOT NULL,
 CONSTRAINT [PK_RCRA_EM_TR_NUM_ORIG] PRIMARY KEY CLUSTERED 
(
	[EM_TR_NUM_ORIG_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RCRA_HD_OTHER_ID]    Script Date: 6/12/2019 2:50:57 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RCRA_HD_OTHER_ID](
	[HD_OTHER_ID_ID] [int] IDENTITY(1,1) NOT NULL,
	[HD_HBASIC_ID] [int] NOT NULL,
	[TRANSACTION_CODE] [char](1) NULL,
	[OTHER_ID] [varchar](12) NOT NULL,
	[RELATIONSHIP_OWNER] [char](2) NULL,
	[RELATIONSHIP_TYPE] [char](1) NULL,
	[SAME_FACILITY] [char](1) NULL,
	[NOTES] [varchar](4000) NULL,
 CONSTRAINT [PK_HD_OTHER_ID] PRIMARY KEY CLUSTERED 
(
	[HD_OTHER_ID_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RCRA_EM_TR_NUM_REJ]    Script Date: 6/12/2019 2:50:57 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RCRA_EM_TR_NUM_REJ](
	[EM_TR_NUM_REJ_ID] [int] IDENTITY(1,1) NOT NULL,
	[EM_EMANIFEST_ID] [int] NOT NULL,
	[MANIFEST_TRACKING_NUM] [varchar](12) NOT NULL,
 CONSTRAINT [PK_RCRA_EM_TR_NUM_REJ] PRIMARY KEY CLUSTERED 
(
	[EM_TR_NUM_REJ_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RCRA_CA_AREA]    Script Date: 6/12/2019 2:50:57 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RCRA_CA_AREA](
	[CA_AREA_ID] [int] IDENTITY(1,1) NOT NULL,
	[CA_FAC_SUBM_ID] [int] NOT NULL,
	[TRANS_CODE] [char](1) NULL,
	[AREA_SEQ_NUM] [int] NOT NULL,
	[FAC_WIDE_IND] [char](1) NULL,
	[AREA_NAME] [varchar](40) NULL,
	[AIR_REL_IND] [char](1) NULL,
	[GROUNDWATER_REL_IND] [char](1) NULL,
	[SOIL_REL_IND] [char](1) NULL,
	[SURFACE_WATER_REL_IND] [char](1) NULL,
	[REGULATED_UNIT_IND] [char](1) NULL,
	[EPA_RESP_PERSON_DATA_OWNER_CDE] [char](2) NULL,
	[EPA_RESP_PERSON_ID] [varchar](5) NULL,
	[STA_RESP_PERSON_DATA_OWNER_CDE] [char](2) NULL,
	[STA_RESP_PERSON_ID] [varchar](5) NULL,
	[SUPP_INFO_TXT] [varchar](2000) NULL,
 CONSTRAINT [PK_CA_AREA] PRIMARY KEY CLUSTERED 
(
	[CA_AREA_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RCRA_EM_TR_NUM_RESIDUE_NEW]    Script Date: 6/12/2019 2:50:57 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RCRA_EM_TR_NUM_RESIDUE_NEW](
	[EM_TR_NUM_RESIDUE_NEW_ID] [int] IDENTITY(1,1) NOT NULL,
	[EM_EMANIFEST_ID] [int] NOT NULL,
	[MANIFEST_TRACKING_NUM] [varchar](12) NOT NULL,
 CONSTRAINT [PK_RCRA_EM_TR_NUM_RESIDUE_NEW] PRIMARY KEY CLUSTERED 
(
	[EM_TR_NUM_RESIDUE_NEW_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RCRA_CME_VIOL]    Script Date: 6/12/2019 2:50:57 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RCRA_CME_VIOL](
	[CME_VIOL_ID] [int] IDENTITY(1,1) NOT NULL,
	[CME_FAC_SUBM_ID] [int] NOT NULL,
	[TRANS_CODE] [char](1) NULL,
	[VIOL_ACT_LOC] [char](2) NOT NULL,
	[VIOL_SEQ_NUM] [int] NOT NULL,
	[AGN_WHICH_DTRM_VIOL] [char](1) NOT NULL,
	[VIOL_TYPE_OWNER] [char](2) NULL,
	[VIOL_TYPE] [varchar](10) NULL,
	[FORMER_CITATION_NAME] [varchar](35) NULL,
	[VIOL_DTRM_DATE] [datetime] NULL,
	[RTN_COMPL_ACTL_DATE] [datetime] NULL,
	[RTN_TO_COMPL_QUAL] [char](1) NULL,
	[VIOL_RESP_AGN] [char](1) NULL,
	[NOTES] [varchar](4000) NULL,
 CONSTRAINT [PK_CME_VIOL] PRIMARY KEY CLUSTERED 
(
	[CME_VIOL_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RCRA_EM_TR_NUM_WASTE]    Script Date: 6/12/2019 2:50:57 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RCRA_EM_TR_NUM_WASTE](
	[EM_TR_NUM_WASTE_ID] [int] IDENTITY(1,1) NOT NULL,
	[EM_WASTE_ID] [int] NOT NULL,
	[MANIFEST_TRACKING_NUM] [varchar](12) NOT NULL,
 CONSTRAINT [PK_RCRA_EM_TR_NUM_WASTE] PRIMARY KEY CLUSTERED 
(
	[EM_TR_NUM_WASTE_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RCRA_FA_MECHANISM]    Script Date: 6/12/2019 2:50:57 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RCRA_FA_MECHANISM](
	[FA_MECHANISM_ID] [int] IDENTITY(1,1) NOT NULL,
	[FA_FAC_SUBM_ID] [int] NOT NULL,
	[TRANS_CODE] [char](1) NULL,
	[ACT_LOC_CODE] [char](2) NOT NULL,
	[MECHANISM_AGN_CODE] [char](1) NOT NULL,
	[MECHANISM_SEQ_NUM] [int] NOT NULL,
	[MECHANISM_TYPE_DATA_OWNER_CODE] [char](2) NULL,
	[MECHANISM_TYPE_CODE] [char](1) NULL,
	[PROVIDER_TXT] [varchar](80) NULL,
	[PROVIDER_FULL_CONTACT_NAME] [varchar](33) NULL,
	[TELE_NUM_TXT] [varchar](15) NULL,
	[SUPP_INFO_TXT] [varchar](2000) NULL,
 CONSTRAINT [PK_FA_MECHANISM] PRIMARY KEY CLUSTERED 
(
	[FA_MECHANISM_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RCRA_FA_COST_EST]    Script Date: 6/12/2019 2:50:57 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RCRA_FA_COST_EST](
	[FA_COST_EST_ID] [int] IDENTITY(1,1) NOT NULL,
	[FA_FAC_SUBM_ID] [int] NOT NULL,
	[TRANS_CODE] [char](1) NULL,
	[ACT_LOC_CODE] [char](2) NOT NULL,
	[COST_ESTIMATE_TYPE_CODE] [char](1) NOT NULL,
	[COST_ESTIMATE_AGN_CODE] [char](1) NOT NULL,
	[COST_ESTIMATE_SEQ_NUM] [int] NOT NULL,
	[RESP_PERSON_DATA_OWNER_CODE] [char](2) NULL,
	[RESP_PERSON_ID] [varchar](5) NULL,
	[COST_ESTIMATE_AMOUNT] [decimal](13, 2) NULL,
	[COST_ESTIMATE_DATE] [datetime] NULL,
	[COST_ESTIMATE_RSN_CODE] [char](1) NULL,
	[AREA_UNIT_NOTES_TXT] [varchar](240) NULL,
	[SUPP_INFO_TXT] [varchar](2000) NULL,
 CONSTRAINT [PK_FA_COST_EST] PRIMARY KEY CLUSTERED 
(
	[FA_COST_EST_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RCRA_EM_WASTE_CD_FED]    Script Date: 6/12/2019 2:50:57 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RCRA_EM_WASTE_CD_FED](
	[EM_WASTE_CD_FED_ID] [int] IDENTITY(1,1) NOT NULL,
	[EM_WASTE_ID] [int] NOT NULL,
	[WASTE_CODE] [varchar](6) NOT NULL,
	[WASTE_DESC] [varchar](2000) NULL,
 CONSTRAINT [PK_RCRA_EM_WASTE_CD_FED] PRIMARY KEY CLUSTERED 
(
	[EM_WASTE_CD_FED_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RCRA_CA_EVENT]    Script Date: 6/12/2019 2:50:57 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RCRA_CA_EVENT](
	[CA_EVENT_ID] [int] IDENTITY(1,1) NOT NULL,
	[CA_FAC_SUBM_ID] [int] NOT NULL,
	[TRANS_CODE] [char](1) NULL,
	[ACT_LOC_CODE] [char](2) NOT NULL,
	[CORCT_ACT_EVENT_DATA_OWNER_CDE] [char](2) NOT NULL,
	[CORCT_ACT_EVENT_CODE] [varchar](7) NOT NULL,
	[EVENT_AGN_CODE] [char](1) NOT NULL,
	[EVENT_SEQ_NUM] [int] NOT NULL,
	[ACTL_DATE] [datetime] NULL,
	[ORIGINAL_SCHEDULE_DATE] [datetime] NULL,
	[NEW_SCHEDULE_DATE] [datetime] NULL,
	[EVENT_SUBORG_DATA_OWNER_CODE] [char](2) NULL,
	[EVENT_SUBORG_CODE] [varchar](10) NULL,
	[RESP_PERSON_DATA_OWNER_CODE] [char](2) NULL,
	[RESP_PERSON_ID] [varchar](5) NULL,
	[SUPP_INFO_TXT] [varchar](2000) NULL,
 CONSTRAINT [PK_CA_EVENT] PRIMARY KEY CLUSTERED 
(
	[CA_EVENT_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RCRA_EM_WASTE_CD_GEN]    Script Date: 6/12/2019 2:50:57 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RCRA_EM_WASTE_CD_GEN](
	[EM_WASTE_CD_GEN_ID] [int] IDENTITY(1,1) NOT NULL,
	[EM_WASTE_ID] [int] NOT NULL,
	[WASTE_CODE] [varchar](6) NOT NULL,
	[WASTE_DESC] [varchar](2000) NULL,
 CONSTRAINT [PK_RCRA_EM_WASTE_CD_GEN] PRIMARY KEY CLUSTERED 
(
	[EM_WASTE_CD_GEN_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RCRA_CA_AUTHORITY]    Script Date: 6/12/2019 2:50:57 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RCRA_CA_AUTHORITY](
	[CA_AUTHORITY_ID] [int] IDENTITY(1,1) NOT NULL,
	[CA_FAC_SUBM_ID] [int] NOT NULL,
	[TRANS_CODE] [char](1) NULL,
	[ACT_LOC_CODE] [char](2) NOT NULL,
	[AUTHORITY_DATA_OWNER_CODE] [char](2) NOT NULL,
	[AUTHORITY_TYPE_CODE] [char](1) NOT NULL,
	[AUTHORITY_AGN_CODE] [char](1) NOT NULL,
	[AUTHORITY_EFFC_DATE] [datetime] NOT NULL,
	[ISSUE_DATE] [datetime] NULL,
	[END_DATE] [datetime] NULL,
	[ESTABLISHED_REPOSITORY_CODE] [char](1) NULL,
	[RESP_LEAD_PROG_IDEN] [char](1) NULL,
	[AUTHORITY_SUBORG_DATA_OWNR_CDE] [char](2) NULL,
	[AUTHORITY_SUBORG_CODE] [varchar](10) NULL,
	[RESP_PERSON_DATA_OWNER_CODE] [char](2) NULL,
	[RESP_PERSON_ID] [varchar](5) NULL,
	[SUPP_INFO_TXT] [varchar](2000) NULL,
 CONSTRAINT [PK_CA_AUTHORITY] PRIMARY KEY CLUSTERED 
(
	[CA_AUTHORITY_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[WH_TABLE_COUNTS]    Script Date: 6/12/2019 2:50:57 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[WH_TABLE_COUNTS] AS
    SELECT
        'RCRA_CA_AREA' table_name,
        count(*)       cnt
    FROM RCRA_CA_AREA
    UNION ALL
    SELECT
        'RCRA_CA_AREA_REL_EVENT' table_name,
        count(*)                 cnt
    FROM RCRA_CA_AREA_REL_EVENT
    UNION ALL
    SELECT
        'RCRA_CA_AUTH_REL_EVENT' table_name,
        count(*)                 cnt
    FROM RCRA_CA_AUTH_REL_EVENT
    UNION ALL
    SELECT
        'RCRA_CA_AUTHORITY' table_name,
        count(*)            cnt
    FROM RCRA_CA_AUTHORITY
    UNION ALL
    SELECT
        'RCRA_CA_EVENT' table_name,
        count(*)        cnt
    FROM RCRA_CA_EVENT
    UNION ALL
    SELECT
        'RCRA_CA_EVENT_COMMITMENT' table_name,
        count(*)                   cnt
    FROM RCRA_CA_EVENT_COMMITMENT
    UNION ALL
    SELECT
        'RCRA_CA_FAC_SUBM' table_name,
        count(*)           cnt
    FROM RCRA_CA_FAC_SUBM
    UNION ALL
    SELECT
        'RCRA_CA_REL_PERMIT_UNIT' table_name,
        count(*)                  cnt
    FROM RCRA_CA_REL_PERMIT_UNIT
    UNION ALL
    SELECT
        'RCRA_CA_STATUTORY_CITATION' table_name,
        count(*)                     cnt
    FROM RCRA_CA_STATUTORY_CITATION
    UNION ALL
    SELECT
        'RCRA_CME_CITATION' table_name,
        count(*)            cnt
    FROM RCRA_CME_CITATION
    UNION ALL
    SELECT
        'RCRA_CME_CSNY_DATE' table_name,
        count(*)             cnt
    FROM RCRA_CME_CSNY_DATE
    UNION ALL
    SELECT
        'RCRA_CME_ENFRC_ACT' table_name,
        count(*)             cnt
    FROM RCRA_CME_ENFRC_ACT
    UNION ALL
    SELECT
        'RCRA_CME_EVAL' table_name,
        count(*)        cnt
    FROM RCRA_CME_EVAL
    UNION ALL
    SELECT
        'RCRA_CME_EVAL_COMMIT' table_name,
        count(*)               cnt
    FROM RCRA_CME_EVAL_COMMIT
    UNION ALL
    SELECT
        'RCRA_CME_EVAL_VIOL' table_name,
        count(*)             cnt
    FROM RCRA_CME_EVAL_VIOL
    UNION ALL
    SELECT
        'RCRA_CME_FAC_SUBM' table_name,
        count(*)            cnt
    FROM RCRA_CME_FAC_SUBM
    UNION ALL
    SELECT
        'RCRA_CME_MEDIA' table_name,
        count(*)         cnt
    FROM RCRA_CME_MEDIA
    UNION ALL
    SELECT
        'RCRA_CME_MILESTONE' table_name,
        count(*)             cnt
    FROM RCRA_CME_MILESTONE
    UNION ALL
    SELECT
        'RCRA_CME_PNLTY' table_name,
        count(*)         cnt
    FROM RCRA_CME_PNLTY
    UNION ALL
    SELECT
        'RCRA_CME_PYMT' table_name,
        count(*)        cnt
    FROM RCRA_CME_PYMT
    UNION ALL
    SELECT
        'RCRA_CME_RQST' table_name,
        count(*)        cnt
    FROM RCRA_CME_RQST
    UNION ALL
    SELECT
        'RCRA_CME_SUPP_ENVR_PRJT' table_name,
        count(*)                  cnt
    FROM RCRA_CME_SUPP_ENVR_PRJT
    UNION ALL
    SELECT
        'RCRA_CME_VIOL' table_name,
        count(*)        cnt
    FROM RCRA_CME_VIOL
    UNION ALL
    SELECT
        'RCRA_CME_VIOL_ENFRC' table_name,
        count(*)              cnt
    FROM RCRA_CME_VIOL_ENFRC
    UNION ALL
    SELECT
        'RCRA_FA_COST_EST' table_name,
        count(*)           cnt
    FROM RCRA_FA_COST_EST
    UNION ALL
    SELECT
        'RCRA_FA_COST_EST_REL_MECHANISM' table_name,
        count(*)                         cnt
    FROM RCRA_FA_COST_EST_REL_MECHANISM
    UNION ALL
    SELECT
        'RCRA_FA_FAC_SUBM' table_name,
        count(*)           cnt
    FROM RCRA_FA_FAC_SUBM
    UNION ALL
    SELECT
        'RCRA_FA_MECHANISM' table_name,
        count(*)            cnt
    FROM RCRA_FA_MECHANISM
    UNION ALL
    SELECT
        'RCRA_FA_MECHANISM_DETAIL' table_name,
        count(*)                   cnt
    FROM RCRA_FA_MECHANISM_DETAIL
    UNION ALL
    SELECT
        'RCRA_GIS_FAC_SUBM' table_name,
        count(*)            cnt
    FROM RCRA_GIS_FAC_SUBM
    UNION ALL
    SELECT
        'RCRA_GIS_GEO_INFORMATION' table_name,
        count(*)                   cnt
    FROM RCRA_GIS_GEO_INFORMATION
    UNION ALL
    SELECT
        'RCRA_HD_CERTIFICATION' table_name,
        count(*)                cnt
    FROM RCRA_HD_CERTIFICATION
    UNION ALL
    SELECT
        'RCRA_HD_ENV_PERMIT' table_name,
        count(*)             cnt
    FROM RCRA_HD_ENV_PERMIT
    UNION ALL
    SELECT
        'RCRA_HD_EPISODIC_EVENT' table_name,
        count(*)                 cnt
    FROM RCRA_HD_EPISODIC_EVENT
    UNION ALL
    SELECT
        'RCRA_HD_EPISODIC_WASTE' table_name,
        count(*)                 cnt
    FROM RCRA_HD_EPISODIC_WASTE
    UNION ALL
    SELECT
        'RCRA_HD_EPISODIC_WASTE_CODE' table_name,
        count(*)                      cnt
    FROM RCRA_HD_EPISODIC_WASTE_CODE
    UNION ALL
    SELECT
        'RCRA_HD_HANDLER' table_name,
        count(*)          cnt
    FROM RCRA_HD_HANDLER
    UNION ALL
    SELECT
        'RCRA_HD_HBASIC' table_name,
        count(*)         cnt
    FROM RCRA_HD_HBASIC
    UNION ALL
    SELECT
        'RCRA_HD_LQG_CLOSURE' table_name,
        count(*)              cnt
    FROM RCRA_HD_LQG_CLOSURE
    UNION ALL
    SELECT
        'RCRA_HD_LQG_CONSOLIDATION' table_name,
        count(*)                    cnt
    FROM RCRA_HD_LQG_CONSOLIDATION
    UNION ALL
    SELECT
        'RCRA_HD_NAICS' table_name,
        count(*)        cnt
    FROM RCRA_HD_NAICS
    UNION ALL
    SELECT
        'RCRA_HD_OTHER_ID' table_name,
        count(*)           cnt
    FROM RCRA_HD_OTHER_ID
    UNION ALL
    SELECT
        'RCRA_HD_OWNEROP' table_name,
        count(*)          cnt
    FROM RCRA_HD_OWNEROP
    UNION ALL
    SELECT
        'RCRA_HD_SEC_MATERIAL_ACTIVITY' table_name,
        count(*)                        cnt
    FROM RCRA_HD_SEC_MATERIAL_ACTIVITY
    UNION ALL
    SELECT
        'RCRA_HD_SEC_WASTE_CODE' table_name,
        count(*)                 cnt
    FROM RCRA_HD_SEC_WASTE_CODE
    UNION ALL
    SELECT
        'RCRA_HD_STATE_ACTIVITY' table_name,
        count(*)                 cnt
    FROM RCRA_HD_STATE_ACTIVITY
    UNION ALL
    SELECT
        'RCRA_HD_UNIVERSAL_WASTE' table_name,
        count(*)                  cnt
    FROM RCRA_HD_UNIVERSAL_WASTE
    UNION ALL
    SELECT
        'RCRA_HD_WASTE_CODE' table_name,
        count(*)             cnt
    FROM RCRA_HD_WASTE_CODE
    UNION ALL
    SELECT
        'RCRA_PRM_EVENT' table_name,
        count(*)         cnt
    FROM RCRA_PRM_EVENT
    UNION ALL
    SELECT
        'RCRA_PRM_EVENT_COMMITMENT' table_name,
        count(*)                    cnt
    FROM RCRA_PRM_EVENT_COMMITMENT
    UNION ALL
    SELECT
        'RCRA_PRM_FAC_SUBM' table_name,
        count(*)            cnt
    FROM RCRA_PRM_FAC_SUBM
    UNION ALL
    SELECT
        'RCRA_PRM_RELATED_EVENT' table_name,
        count(*)                 cnt
    FROM RCRA_PRM_RELATED_EVENT
    UNION ALL
    SELECT
        'RCRA_PRM_SERIES' table_name,
        count(*)          cnt
    FROM RCRA_PRM_SERIES
    UNION ALL
    SELECT
        'RCRA_PRM_UNIT' table_name,
        count(*)        cnt
    FROM RCRA_PRM_UNIT
    UNION ALL
    SELECT
        'RCRA_PRM_UNIT_DETAIL' table_name,
        count(*)               cnt
    FROM RCRA_PRM_UNIT_DETAIL
    UNION ALL
    SELECT
        'RCRA_PRM_WASTE_CODE' table_name,
        count(*)              cnt
    FROM RCRA_PRM_WASTE_CODE
    UNION ALL
    SELECT
        'RCRA_RU_REPORT_UNIV' table_name,
        count(*)              cnt
    FROM RCRA_RU_REPORT_UNIV
    UNION ALL
    SELECT
        'RCRA_EM_EMANIFEST' table_name,
        count(*) cnt
    FROM RCRA_EM_EMANIFEST
    UNION ALL
    SELECT
        'RCRA_EM_EMANIFEST_COMMENT' table_name,
        count(*) cnt
    FROM RCRA_EM_EMANIFEST_COMMENT
    UNION ALL
    SELECT
        'RCRA_EM_HANDLER' table_name,
        count(*) cnt
    FROM RCRA_EM_HANDLER
    UNION ALL
    SELECT
        'RCRA_EM_SUBM' table_name,
        count(*) cnt
    FROM RCRA_EM_SUBM
    UNION ALL
    SELECT
        'RCRA_EM_TR_NUM_ORIG' table_name,
        count(*) cnt
    FROM RCRA_EM_TR_NUM_ORIG
    UNION ALL
    SELECT
        'RCRA_EM_TR_NUM_REJ' table_name,
        count(*) cnt
    FROM RCRA_EM_TR_NUM_REJ
    UNION ALL
    SELECT
        'RCRA_EM_TR_NUM_RESIDUE_NEW' table_name,
        count(*) cnt
    FROM RCRA_EM_TR_NUM_RESIDUE_NEW
    UNION ALL
    SELECT
        'RCRA_EM_TR_NUM_WASTE' table_name,
        count(*) cnt
    FROM RCRA_EM_TR_NUM_WASTE
    UNION ALL
    SELECT
        'RCRA_EM_WASTE' table_name,
        count(*) cnt
    FROM RCRA_EM_WASTE
    UNION ALL
    SELECT
        'RCRA_EM_WASTE_CD_FED' table_name,
        count(*) cnt
    FROM RCRA_EM_WASTE_CD_FED
    UNION ALL
    SELECT
        'RCRA_EM_WASTE_CD_GEN' table_name,
        count(*) cnt
    FROM RCRA_EM_WASTE_CD_GEN
    UNION ALL
    SELECT
        'RCRA_EM_WASTE_CD_TRANS' table_name,
        count(*) cnt
    FROM RCRA_EM_WASTE_CD_TRANS
    UNION ALL
    SELECT
        'RCRA_EM_WASTE_CD_TSDF' table_name,
        count(*) cnt
    FROM RCRA_EM_WASTE_CD_TSDF
    UNION ALL
    SELECT
        'RCRA_EM_WASTE_COMMENT' table_name,
        count(*) cnt
    FROM RCRA_EM_WASTE_COMMENT
    UNION ALL
    SELECT
        'RCRA_EM_WASTE_PCB' table_name,
        count(*) cnt
    FROM RCRA_EM_WASTE_PCB
    UNION ALL
    SELECT
        'ETL_RUN' table_name,
        count(*)
    FROM ETL_RUN
    UNION ALL
    SELECT
        'ETL_RUN_HANDLER' table_name,
        count(*)
    FROM ETL_RUN_HANDLER
GO
/****** Object:  View [dbo].[ETL_EM_WASTE_VW]    Script Date: 6/12/2019 2:50:57 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[ETL_EM_WASTE_VW] AS (
    SELECT WH.EM_WASTE_ID WH_EM_WASTE_ID,
           ETL.WH_EM_EMANIFEST_ID,
           ETL.EM_SUBM_ID,
           NODE.*
    FROM NODE_RCRA_EM_WASTE NODE
             INNER JOIN ETL_EM_EMANIFEST_VW ETL ON ETL.EM_EMANIFEST_ID = NODE.EM_EMANIFEST_ID
             LEFT OUTER JOIN RCRA_EM_WASTE WH ON WH.EM_EMANIFEST_ID = ETL.WH_EM_EMANIFEST_ID
        AND WH.LINE_NUM = NODE.LINE_NUM
)
GO
/****** Object:  View [dbo].[ETL_EM_TR_NUM_ORIG_VW]    Script Date: 6/12/2019 2:50:57 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[ETL_EM_TR_NUM_ORIG_VW] AS (
    SELECT ETL.WH_EM_EMANIFEST_ID,
           ETL.EM_SUBM_ID,
           NODE.*
    FROM NODE_RCRA_EM_TR_NUM_ORIG NODE
             INNER JOIN ETL_EM_EMANIFEST_VW ETL ON ETL.EM_EMANIFEST_ID = NODE.EM_EMANIFEST_ID
)
GO
/****** Object:  View [dbo].[ETL_EM_TR_NUM_RESIDUE_NEW_VW]    Script Date: 6/12/2019 2:50:57 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[ETL_EM_TR_NUM_RESIDUE_NEW_VW] AS (
    SELECT ETL.WH_EM_EMANIFEST_ID,
           NODE.*
    FROM NODE_RCRA_EM_TR_NUM_RESIDUE_NEW NODE
             INNER JOIN ETL_EM_EMANIFEST_VW ETL ON ETL.EM_EMANIFEST_ID = NODE.EM_EMANIFEST_ID
)
GO
/****** Object:  View [dbo].[ETL_EM_TR_NUM_REJ_VW]    Script Date: 6/12/2019 2:50:57 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[ETL_EM_TR_NUM_REJ_VW] AS (
    SELECT ETL.WH_EM_EMANIFEST_ID,
           NODE.*
    FROM NODE_RCRA_EM_TR_NUM_REJ NODE
             INNER JOIN ETL_EM_EMANIFEST_VW ETL ON ETL.EM_EMANIFEST_ID = NODE.EM_EMANIFEST_ID
)
GO
/****** Object:  View [dbo].[ETL_EM_WASTE_COMMENT_VW]    Script Date: 6/12/2019 2:50:57 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[ETL_EM_WASTE_COMMENT_VW] AS (
    SELECT ETL.WH_EM_WASTE_ID,
           ETL.WH_EM_EMANIFEST_ID,
           ETL.EM_SUBM_ID,
           NODE.*
    FROM NODE_RCRA_EM_WASTE_COMMENT NODE
             INNER JOIN ETL_EM_WASTE_VW ETL ON ETL.EM_WASTE_ID = NODE.EM_WASTE_ID
)
GO
/****** Object:  View [dbo].[ETL_EM_TR_NUM_WASTE_VW]    Script Date: 6/12/2019 2:50:57 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[ETL_EM_TR_NUM_WASTE_VW] AS (
    SELECT ETL.WH_EM_WASTE_ID,
           ETL.WH_EM_EMANIFEST_ID,
           ETL.EM_SUBM_ID,
           NODE.*
    FROM NODE_RCRA_EM_TR_NUM_WASTE NODE
             INNER JOIN ETL_EM_WASTE_VW ETL ON ETL.EM_WASTE_ID = NODE.EM_WASTE_ID
)
GO
/****** Object:  View [dbo].[ETL_EM_WASTE_CD_FED_VW]    Script Date: 6/12/2019 2:50:57 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[ETL_EM_WASTE_CD_FED_VW] AS (
    SELECT ETL.WH_EM_WASTE_ID,
           ETL.WH_EM_EMANIFEST_ID,
           ETL.EM_SUBM_ID,
           NODE.*
    FROM NODE_RCRA_EM_WASTE_CD_FED NODE
             INNER JOIN ETL_EM_WASTE_VW ETL ON ETL.EM_WASTE_ID = NODE.EM_WASTE_ID
)
GO
/****** Object:  View [dbo].[ETL_EM_WASTE_CD_GEN_VW]    Script Date: 6/12/2019 2:50:57 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[ETL_EM_WASTE_CD_GEN_VW] AS (
    SELECT ETL.WH_EM_WASTE_ID,
           ETL.WH_EM_EMANIFEST_ID,
           ETL.EM_SUBM_ID,
           NODE.*
    FROM NODE_RCRA_EM_WASTE_CD_GEN NODE
             INNER JOIN ETL_EM_WASTE_VW ETL ON ETL.EM_WASTE_ID = NODE.EM_WASTE_ID
)
GO
/****** Object:  View [dbo].[ETL_EM_WASTE_CD_TRANS_VW]    Script Date: 6/12/2019 2:50:57 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[ETL_EM_WASTE_CD_TRANS_VW] AS (
    SELECT ETL.WH_EM_WASTE_ID,
           ETL.WH_EM_EMANIFEST_ID,
           ETL.EM_SUBM_ID,
           NODE.*
    FROM NODE_RCRA_EM_WASTE_CD_TRANS NODE
             INNER JOIN ETL_EM_WASTE_VW ETL ON ETL.EM_WASTE_ID = NODE.EM_WASTE_ID
)
GO
/****** Object:  View [dbo].[ETL_EM_WASTE_CD_TSDF_VW]    Script Date: 6/12/2019 2:50:57 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[ETL_EM_WASTE_CD_TSDF_VW] AS (
    SELECT ETL.WH_EM_WASTE_ID,
           ETL.WH_EM_EMANIFEST_ID,
           ETL.EM_SUBM_ID,
           NODE.*
    FROM NODE_RCRA_EM_WASTE_CD_TSDF NODE
             INNER JOIN ETL_EM_WASTE_VW ETL ON ETL.EM_WASTE_ID = NODE.EM_WASTE_ID
)
GO
/****** Object:  View [dbo].[ETL_EM_WASTE_PCB_VW]    Script Date: 6/12/2019 2:50:57 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[ETL_EM_WASTE_PCB_VW] AS (
    SELECT ETL.WH_EM_WASTE_ID,
           ETL.WH_EM_EMANIFEST_ID,
           ETL.EM_SUBM_ID,
           NODE.*
    FROM NODE_RCRA_EM_WASTE_PCB NODE
             INNER JOIN ETL_EM_WASTE_VW ETL ON ETL.EM_WASTE_ID = NODE.EM_WASTE_ID
)
GO
/****** Object:  View [dbo].[ETL_GIS_FAC_SUBM_VW]    Script Date: 6/12/2019 2:50:57 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--
-- Instructions:
-- 1: Run this script in the reporting database.
--

-- GIS views

CREATE VIEW [dbo].[ETL_GIS_FAC_SUBM_VW] AS (
    SELECT
        WH.GIS_FAC_SUBM_ID WH_GIS_FAC_SUBM_ID,
        NODE.*
    FROM NODE_RCRA_GIS_FAC_SUBM NODE
             LEFT OUTER JOIN RCRA_GIS_FAC_SUBM WH ON NODE.HANDLER_ID = WH.HANDLER_ID
)
GO
/****** Object:  View [dbo].[ETL_GIS_GEO_INFORMATION_VW]    Script Date: 6/12/2019 2:50:57 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[ETL_GIS_GEO_INFORMATION_VW] AS (
    SELECT
        WH.GIS_GEO_INFORMATION_ID WH_GIS_GEO_INFORMATION_ID,
        ETL.WH_GIS_FAC_SUBM_ID,
        ETL.GIS_SUBM_ID,
        NODE.*
    FROM NODE_RCRA_GIS_GEO_INFORMATION NODE
             JOIN ETL_GIS_FAC_SUBM_VW ETL ON ETL.GIS_FAC_SUBM_ID = NODE.GIS_FAC_SUBM_ID
             LEFT OUTER JOIN RCRA_GIS_GEO_INFORMATION WH ON WH.GIS_FAC_SUBM_ID = ETL.WH_GIS_FAC_SUBM_ID
        AND WH.GEO_INFO_SEQ_NUM = NODE.GEO_INFO_SEQ_NUM
)
GO
/****** Object:  View [dbo].[ETL_CME_FAC_SUBM_VW]    Script Date: 6/12/2019 2:50:57 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- CME views

CREATE VIEW [dbo].[ETL_CME_FAC_SUBM_VW] AS (
    SELECT
        WH.CME_FAC_SUBM_ID WH_CME_FAC_SUBM_ID,
        NODE.*
    FROM NODE_RCRA_CME_FAC_SUBM NODE
             LEFT OUTER JOIN RCRA_CME_FAC_SUBM WH ON WH.EPA_HDLR_ID = NODE.EPA_HDLR_ID
)
GO
/****** Object:  View [dbo].[ETL_CME_VIOL_VW]    Script Date: 6/12/2019 2:50:57 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[ETL_CME_VIOL_VW] AS (
    SELECT
        WH.CME_VIOL_ID WH_CME_VIOL_ID,
        ETL.WH_CME_FAC_SUBM_ID,
        ETL.CME_SUBM_ID,
        NODE.*
    FROM NODE_RCRA_CME_VIOL NODE
             JOIN ETL_CME_FAC_SUBM_VW ETL ON ETL.CME_FAC_SUBM_ID = NODE.CME_FAC_SUBM_ID
             LEFT OUTER JOIN RCRA_CME_VIOL WH ON WH.CME_FAC_SUBM_ID = ETL.WH_CME_FAC_SUBM_ID
        AND WH.VIOL_SEQ_NUM = NODE.VIOL_SEQ_NUM
        AND WH.VIOL_ACT_LOC = NODE.VIOL_ACT_LOC
        AND WH.AGN_WHICH_DTRM_VIOL = NODE.AGN_WHICH_DTRM_VIOL
)
GO
/****** Object:  View [dbo].[ETL_CME_EVAL_VW]    Script Date: 6/12/2019 2:50:57 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[ETL_CME_EVAL_VW] AS (
    SELECT
        WH.CME_EVAL_ID WH_CME_EVAL_ID,
        ETL.WH_CME_FAC_SUBM_ID,
        ETL.CME_SUBM_ID,
        NODE.*
    FROM NODE_RCRA_CME_EVAL NODE
             JOIN ETL_CME_FAC_SUBM_VW ETL ON ETL.CME_FAC_SUBM_ID = NODE.CME_FAC_SUBM_ID
             LEFT OUTER JOIN RCRA_CME_EVAL WH ON WH.CME_FAC_SUBM_ID = ETL.WH_CME_FAC_SUBM_ID
        AND WH.EVAL_ACT_LOC = NODE.EVAL_ACT_LOC
        AND WH.EVAL_IDEN = NODE.EVAL_IDEN
        AND (
                                                         (WH.DAY_ZERO = NODE.DAY_ZERO)
                                                         OR (WH.DAY_ZERO IS NULL AND NODE.DAY_ZERO IS NULL)
                                                     )
        AND WH.EVAL_TYPE = NODE.EVAL_TYPE
        AND WH.EVAL_RESP_AGN = NODE.EVAL_RESP_AGN
        AND WH.EVAL_START_DATE = NODE.EVAL_START_DATE
)
GO
/****** Object:  View [dbo].[ETL_CME_EVAL_COMMIT_VW]    Script Date: 6/12/2019 2:50:57 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[ETL_CME_EVAL_COMMIT_VW] AS (
    SELECT
        WH.CME_EVAL_COMMIT_ID WH_CME_EVAL_COMMIT_ID,
        ETL.WH_CME_EVAL_ID,
        ETL.CME_SUBM_ID,
        NODE.*
    FROM NODE_RCRA_CME_EVAL_COMMIT NODE
             INNER JOIN ETL_CME_EVAL_VW ETL ON ETL.CME_EVAL_ID = NODE.CME_EVAL_ID
             LEFT OUTER JOIN RCRA_CME_EVAL_COMMIT WH ON WH.CME_EVAL_ID = ETL.WH_CME_EVAL_ID
        AND WH.COMMIT_SEQ_NUM = NODE.COMMIT_SEQ_NUM
)
GO
/****** Object:  View [dbo].[ETL_CME_EVAL_VIOL_VW]    Script Date: 6/12/2019 2:50:57 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[ETL_CME_EVAL_VIOL_VW] AS (
    SELECT
        WH.CME_EVAL_VIOL_ID WH_CME_EVAL_VIOL_ID,
        ETL.WH_CME_EVAL_ID,
        ETL.CME_SUBM_ID,
        NODE.*
    FROM NODE_RCRA_CME_EVAL_VIOL NODE
             INNER JOIN ETL_CME_EVAL_VW ETL ON ETL.CME_EVAL_ID = NODE.CME_EVAL_ID
             LEFT OUTER JOIN RCRA_CME_EVAL_VIOL WH ON WH.CME_EVAL_ID = ETL.WH_CME_EVAL_ID
        AND WH.VIOL_ACT_LOC = NODE.VIOL_ACT_LOC
        AND WH.VIOL_SEQ_NUM = NODE.VIOL_SEQ_NUM
        AND WH.AGN_WHICH_DTRM_VIOL = NODE.AGN_WHICH_DTRM_VIOL
)
GO
/****** Object:  View [dbo].[ETL_CME_ENFRC_ACT_VW]    Script Date: 6/12/2019 2:50:57 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[ETL_CME_ENFRC_ACT_VW] AS (
    SELECT
        WH.CME_ENFRC_ACT_ID WH_CME_ENFR_ACT_ID,
        ETL.WH_CME_FAC_SUBM_ID,
        ETL.CME_SUBM_ID,
        NODE.*
    FROM NODE_RCRA_CME_ENFRC_ACT NODE
             INNER JOIN ETL_CME_FAC_SUBM_VW ETL ON ETL.CME_FAC_SUBM_ID = NODE.CME_FAC_SUBM_ID
             LEFT OUTER JOIN RCRA_CME_ENFRC_ACT WH ON WH.CME_FAC_SUBM_ID = ETL.WH_CME_FAC_SUBM_ID
        AND WH.ENFRC_ACT_IDEN = NODE.ENFRC_ACT_IDEN
        AND WH.ENFRC_ACT_DATE = NODE.ENFRC_ACT_DATE
        AND WH.ENFRC_AGN_NAME = NODE.ENFRC_AGN_NAME
)
GO
/****** Object:  View [dbo].[ETL_CME_CITATION_VW]    Script Date: 6/12/2019 2:50:57 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[ETL_CME_CITATION_VW] AS (
    SELECT
        WH.CME_CITATION_ID WH_CME_CITATION_ID,
        ETL.WH_CME_VIOL_ID,
        ETL.CME_SUBM_ID,
        NODE.*
    FROM NODE_RCRA_CME_CITATION NODE
             INNER JOIN ETL_CME_VIOL_VW ETL ON ETL.CME_VIOL_ID = NODE.CME_VIOL_ID
             LEFT OUTER JOIN RCRA_CME_CITATION WH ON WH.CME_VIOL_ID = ETL.WH_CME_VIOL_ID
        AND WH.CITATION_NAME_SEQ_NUM = NODE.CITATION_NAME_SEQ_NUM
)
GO
/****** Object:  View [dbo].[ETL_CME_CSNY_DATE_VW]    Script Date: 6/12/2019 2:50:57 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[ETL_CME_CSNY_DATE_VW] AS (
    SELECT
        WH.CME_CSNY_DATE_ID WH_CME_CSNY_DATE_ID,
        ETL.WH_CME_ENFR_ACT_ID,
        ETL.CME_SUBM_ID,
        NODE.*
    FROM NODE_RCRA_CME_CSNY_DATE NODE
             INNER JOIN ETL_CME_ENFRC_ACT_VW ETL ON ETL.CME_ENFRC_ACT_ID = NODE.CME_ENFRC_ACT_ID
             LEFT OUTER JOIN RCRA_CME_CSNY_DATE WH ON WH.CME_ENFRC_ACT_ID = ETL.WH_CME_ENFR_ACT_ID
        AND WH.SNY_DATE = NODE.SNY_DATE
)
GO
/****** Object:  View [dbo].[ETL_CME_MEDIA_VW]    Script Date: 6/12/2019 2:50:57 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[ETL_CME_MEDIA_VW] AS (
    SELECT
        WH.CME_MEDIA_ID WH_CME_MEDIA_ID,
        ETL.WH_CME_ENFR_ACT_ID,
        ETL.CME_SUBM_ID,
        NODE.*
    FROM NODE_RCRA_CME_MEDIA NODE
             INNER JOIN ETL_CME_ENFRC_ACT_VW ETL ON ETL.CME_ENFRC_ACT_ID = NODE.CME_ENFRC_ACT_ID
             LEFT OUTER JOIN RCRA_CME_MEDIA WH ON WH.CME_ENFRC_ACT_ID = ETL.WH_CME_ENFR_ACT_ID
        AND WH.MULTIMEDIA_CODE_OWNER = NODE.MULTIMEDIA_CODE_OWNER
        AND WH.MULTIMEDIA_CODE = NODE.MULTIMEDIA_CODE
)
GO
/****** Object:  View [dbo].[ETL_CME_MILESTONE_VW]    Script Date: 6/12/2019 2:50:57 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[ETL_CME_MILESTONE_VW] AS (
    SELECT
        WH.CME_MILESTONE_ID WH_CME_MILESTONE_ID,
        ETL.WH_CME_ENFR_ACT_ID,
        ETL.CME_SUBM_ID,
        NODE.*
    FROM NODE_RCRA_CME_MILESTONE NODE
             INNER JOIN ETL_CME_ENFRC_ACT_VW ETL ON ETL.CME_ENFRC_ACT_ID = NODE.CME_ENFRC_ACT_ID
             LEFT OUTER JOIN RCRA_CME_MILESTONE WH ON WH.CME_ENFRC_ACT_ID = ETL.WH_CME_ENFR_ACT_ID
        AND WH.MILESTONE_SEQ_NUM = NODE.MILESTONE_SEQ_NUM
)
GO
/****** Object:  View [dbo].[ETL_CME_RQST_VW]    Script Date: 6/12/2019 2:50:57 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[ETL_CME_RQST_VW] AS (
    SELECT
        WH.CME_RQST_ID WH_CME_RQST_ID,
        ETL.WH_CME_EVAL_ID,
        ETL.CME_SUBM_ID,
        NODE.*
    FROM NODE_RCRA_CME_RQST NODE
             INNER JOIN ETL_CME_EVAL_VW ETL ON ETL.CME_EVAL_ID = NODE.CME_EVAL_ID
             LEFT OUTER JOIN RCRA_CME_RQST WH ON WH.CME_EVAL_ID = ETL.WH_CME_EVAL_ID
        AND WH.RQST_SEQ_NUM = NODE.RQST_SEQ_NUM
)
GO
/****** Object:  View [dbo].[ETL_CME_SUPP_ENVR_PRJT_VW]    Script Date: 6/12/2019 2:50:57 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[ETL_CME_SUPP_ENVR_PRJT_VW] AS (
    SELECT
        WH.CME_SUPP_ENVR_PRJT_ID WH_CME_SUPP_ENVR_PRJT_ID,
        ETL.WH_CME_ENFR_ACT_ID,
        ETL.CME_SUBM_ID,
        NODE.*
    FROM NODE_RCRA_CME_SUPP_ENVR_PRJT NODE
             INNER JOIN ETL_CME_ENFRC_ACT_VW ETL ON ETL.CME_ENFRC_ACT_ID = NODE.CME_ENFRC_ACT_ID
             LEFT OUTER JOIN RCRA_CME_SUPP_ENVR_PRJT WH ON WH.CME_ENFRC_ACT_ID = ETL.WH_CME_ENFR_ACT_ID
        AND WH.SEP_SEQ_NUM = NODE.SEP_SEQ_NUM
)
GO
/****** Object:  View [dbo].[ETL_CME_VIOL_ENFRC_VW]    Script Date: 6/12/2019 2:50:57 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[ETL_CME_VIOL_ENFRC_VW] AS (
    SELECT
        WH.CME_VIOL_ENFRC_ID WH_CME_VIOL_ENFRC_ID,
        ETL.WH_CME_ENFR_ACT_ID,
        ETL.CME_SUBM_ID,
        NODE.*
    FROM NODE_RCRA_CME_VIOL_ENFRC NODE
             INNER JOIN ETL_CME_ENFRC_ACT_VW ETL ON ETL.CME_ENFRC_ACT_ID = NODE.CME_ENFRC_ACT_ID
             LEFT OUTER JOIN RCRA_CME_VIOL_ENFRC WH ON WH.CME_ENFRC_ACT_ID = ETL.WH_CME_ENFR_ACT_ID
        AND WH.VIOL_SEQ_NUM = NODE.VIOL_SEQ_NUM
        AND WH.AGN_WHICH_DTRM_VIOL = NODE.AGN_WHICH_DTRM_VIOL
)
GO
/****** Object:  View [dbo].[ETL_CME_PNLTY_VW]    Script Date: 6/12/2019 2:50:57 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[ETL_CME_PNLTY_VW] AS (
    SELECT
        WH.CME_PNLTY_ID WH_CME_PNLTY_ID,
        ETL.WH_CME_ENFR_ACT_ID,
        ETL.CME_SUBM_ID,
        NODE.*
    FROM NODE_RCRA_CME_PNLTY NODE
             INNER JOIN ETL_CME_ENFRC_ACT_VW ETL ON ETL.CME_ENFRC_ACT_ID = NODE.CME_ENFRC_ACT_ID
             LEFT OUTER JOIN RCRA_CME_PNLTY WH ON WH.CME_ENFRC_ACT_ID = ETL.WH_CME_ENFR_ACT_ID
        AND WH.PNLTY_TYPE_OWNER = NODE.PNLTY_TYPE_OWNER
        AND WH.PNLTY_TYPE = NODE.PNLTY_TYPE
)
GO
/****** Object:  View [dbo].[ETL_CME_PYMT_VW]    Script Date: 6/12/2019 2:50:57 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[ETL_CME_PYMT_VW] AS (
    SELECT
        WH.CME_PYMT_ID WH_CME_PYMT_ID,
        ETL.WH_CME_PNLTY_ID,
        ETL.CME_SUBM_ID,
        NODE.*
    FROM NODE_RCRA_CME_PYMT NODE
             INNER JOIN ETL_CME_PNLTY_VW ETL ON ETL.CME_PNLTY_ID = NODE.CME_PNLTY_ID
             LEFT OUTER JOIN RCRA_CME_PYMT WH ON WH.CME_PNLTY_ID = ETL.WH_CME_PNLTY_ID
        AND WH.PYMT_SEQ_NUM = NODE.PYMT_SEQ_NUM
)
GO
/****** Object:  View [dbo].[ETL_CA_FAC_SUBM_VW]    Script Date: 6/12/2019 2:50:57 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- CA views --

CREATE VIEW [dbo].[ETL_CA_FAC_SUBM_VW] AS (
    SELECT
        WH.CA_FAC_SUBM_ID WH_CA_FAC_SUBM_ID,
        NODE.*
    FROM NODE_RCRA_CA_FAC_SUBM NODE
             LEFT OUTER JOIN RCRA_CA_FAC_SUBM WH ON WH.HANDLER_ID = NODE.HANDLER_ID
)
GO
/****** Object:  View [dbo].[ETL_CA_EVENT_VW]    Script Date: 6/12/2019 2:50:57 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[ETL_CA_EVENT_VW] AS (
    SELECT
        WH.CA_EVENT_ID WH_CA_EVENT_ID,
        ETL.WH_CA_FAC_SUBM_ID,
        ETL.CA_SUBM_ID,
        NODE.*
    FROM NODE_RCRA_CA_EVENT NODE
             INNER JOIN ETL_CA_FAC_SUBM_VW ETL ON ETL.CA_FAC_SUBM_ID = NODE.CA_FAC_SUBM_ID
             LEFT OUTER JOIN RCRA_CA_EVENT WH ON WH.CA_FAC_SUBM_ID = ETL.WH_CA_FAC_SUBM_ID
        AND WH.EVENT_SEQ_NUM = NODE.EVENT_SEQ_NUM
        AND WH.EVENT_AGN_CODE = NODE.EVENT_AGN_CODE
        AND WH.CORCT_ACT_EVENT_CODE = NODE.CORCT_ACT_EVENT_CODE
)
GO
/****** Object:  View [dbo].[ETL_CA_EVENT_COMMITMENT_VW]    Script Date: 6/12/2019 2:50:57 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[ETL_CA_EVENT_COMMITMENT_VW] AS (
    SELECT
        WH.CA_EVENT_COMMITMENT_ID WH_CA_EVENT_COMMITMENT_ID,
        ETL.WH_CA_EVENT_ID,
        ETL.CA_SUBM_ID,
        NODE.*
    FROM NODE_RCRA_CA_EVENT_COMMITMENT NODE
             INNER JOIN ETL_CA_EVENT_VW ETL ON ETL.CA_EVENT_ID = NODE.CA_EVENT_ID
             LEFT OUTER JOIN RCRA_CA_EVENT_COMMITMENT WH ON WH.CA_EVENT_ID = ETL.WH_CA_EVENT_ID
        AND WH.COMMIT_SEQ_NUM = NODE.COMMIT_SEQ_NUM
)
GO
/****** Object:  View [dbo].[ETL_CA_AREA_VW]    Script Date: 6/12/2019 2:50:57 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[ETL_CA_AREA_VW] AS (
    SELECT
        WH.CA_AREA_ID WH_CA_AREA_ID,
        ETL.WH_CA_FAC_SUBM_ID,
        ETL.CA_SUBM_ID,
        NODE.*
    FROM NODE_RCRA_CA_AREA NODE
             INNER JOIN ETL_CA_FAC_SUBM_VW ETL ON ETL.CA_FAC_SUBM_ID = NODE.CA_FAC_SUBM_ID
             LEFT OUTER JOIN RCRA_CA_AREA WH ON WH.CA_FAC_SUBM_ID = ETL.WH_CA_FAC_SUBM_ID
        AND WH.AREA_SEQ_NUM = NODE.AREA_SEQ_NUM
)
GO
/****** Object:  View [dbo].[ETL_CA_AREA_REL_EVENT_VW]    Script Date: 6/12/2019 2:50:57 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[ETL_CA_AREA_REL_EVENT_VW] AS (
    SELECT
        WH.CA_AREA_REL_EVENT_ID WH_CA_AREA_REL_EVENT_ID,
        ETL.WH_CA_AREA_ID,
        ETL.CA_SUBM_ID,
        NODE.*
    FROM NODE_RCRA_CA_AREA_REL_EVENT NODE
             INNER JOIN ETL_CA_AREA_VW ETL ON ETL.CA_AREA_ID = NODE.CA_AREA_ID
             LEFT OUTER JOIN RCRA_CA_AREA_REL_EVENT WH ON WH.CA_AREA_ID = ETL.WH_CA_AREA_ID
        AND
                                                          WH.CORCT_ACT_EVENT_DATA_OWNER_CDE = NODE.CORCT_ACT_EVENT_DATA_OWNER_CDE
        AND WH.CORCT_ACT_EVENT_CODE = NODE.CORCT_ACT_EVENT_CODE
        AND WH.EVENT_AGN_CODE = NODE.EVENT_AGN_CODE
        AND WH.EVENT_SEQ_NUM = NODE.EVENT_SEQ_NUM
)
GO
/****** Object:  View [dbo].[ETL_CA_REL_PERMIT_UNIT_VW]    Script Date: 6/12/2019 2:50:57 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[ETL_CA_REL_PERMIT_UNIT_VW] AS (
    SELECT
        WH.CA_REL_PERMIT_UNIT_ID WH_CA_REL_PERMIT_UNIT_ID,
        ETL.WH_CA_AREA_ID,
        ETL.CA_SUBM_ID,
        NODE.*
    FROM NODE_RCRA_CA_REL_PERMIT_UNIT NODE
             INNER JOIN ETL_CA_AREA_VW ETL ON ETL.CA_AREA_ID = NODE.CA_AREA_ID
             LEFT OUTER JOIN RCRA_CA_REL_PERMIT_UNIT WH ON WH.CA_AREA_ID = ETL.WH_CA_AREA_ID
        AND WH.PERMIT_UNIT_SEQ_NUM = NODE.PERMIT_UNIT_SEQ_NUM
)
GO
/****** Object:  View [dbo].[ETL_CA_AUTHORITY_VW]    Script Date: 6/12/2019 2:50:57 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[ETL_CA_AUTHORITY_VW] AS (
    SELECT
        WH.CA_AUTHORITY_ID WH_CA_AUTHORITY_ID,
        ETL.WH_CA_FAC_SUBM_ID,
        ETL.CA_SUBM_ID,
        NODE.*
    FROM NODE_RCRA_CA_AUTHORITY NODE
             INNER JOIN ETL_CA_FAC_SUBM_VW ETL ON ETL.CA_FAC_SUBM_ID = NODE.CA_FAC_SUBM_ID
             LEFT OUTER JOIN RCRA_CA_AUTHORITY WH ON WH.CA_FAC_SUBM_ID = ETL.WH_CA_FAC_SUBM_ID
        AND WH.ACT_LOC_CODE = NODE.ACT_LOC_CODE
        AND WH.AUTHORITY_AGN_CODE = NODE.AUTHORITY_AGN_CODE
        AND WH.AUTHORITY_EFFC_DATE = NODE.AUTHORITY_EFFC_DATE
        AND WH.AUTHORITY_DATA_OWNER_CODE = NODE.AUTHORITY_DATA_OWNER_CODE
        AND WH.AUTHORITY_TYPE_CODE = NODE.AUTHORITY_TYPE_CODE
)
GO
/****** Object:  View [dbo].[ETL_CA_AUTH_REL_EVENT_VW]    Script Date: 6/12/2019 2:50:57 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[ETL_CA_AUTH_REL_EVENT_VW] AS (
    SELECT
        WH.CA_AUTH_REL_EVENT_ID WH_CA_AUTH_REL_EVENT_ID,
        ETL.WH_CA_AUTHORITY_ID,
        ETL.CA_SUBM_ID,
        NODE.*
    FROM NODE_RCRA_CA_AUTH_REL_EVENT NODE
             INNER JOIN ETL_CA_AUTHORITY_VW ETL ON ETL.CA_AUTHORITY_ID = NODE.CA_AUTHORITY_ID
             LEFT OUTER JOIN RCRA_CA_AUTH_REL_EVENT WH ON WH.CA_AUTHORITY_ID = ETL.WH_CA_AUTHORITY_ID
        AND
                                                          WH.CORCT_ACT_EVENT_DATA_OWNER_CDE = NODE.CORCT_ACT_EVENT_DATA_OWNER_CDE
        AND WH.CORCT_ACT_EVENT_CODE = NODE.CORCT_ACT_EVENT_CODE
        AND WH.EVENT_AGN_CODE = NODE.EVENT_AGN_CODE
        AND WH.EVENT_SEQ_NUM = NODE.EVENT_SEQ_NUM
)
GO
/****** Object:  View [dbo].[ETL_CA_STATUTORY_CITATION_VW]    Script Date: 6/12/2019 2:50:57 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[ETL_CA_STATUTORY_CITATION_VW] AS (
    SELECT
        WH.CA_STATUTORY_CITATION_ID WH_CA_STATUTORY_CITATION_ID,
        ETL.WH_CA_AUTHORITY_ID,
        ETL.CA_SUBM_ID,
        NODE.*
    FROM NODE_RCRA_CA_STATUTORY_CITATION NODE
             INNER JOIN ETL_CA_AUTHORITY_VW ETL ON ETL.CA_AUTHORITY_ID = NODE.CA_AUTHORITY_ID
             LEFT OUTER JOIN RCRA_CA_STATUTORY_CITATION WH ON WH.CA_AUTHORITY_ID = ETL.WH_CA_AUTHORITY_ID
        AND WH.STATUTORY_CITTION_DTA_OWNR_CDE =
            NODE.STATUTORY_CITTION_DTA_OWNR_CDE
        AND WH.STATUTORY_CITATION_IDEN = NODE.STATUTORY_CITATION_IDEN
)
GO
/****** Object:  View [dbo].[ETL_FA_FAC_SUBM_VW]    Script Date: 6/12/2019 2:50:57 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- FA views --

CREATE VIEW [dbo].[ETL_FA_FAC_SUBM_VW] AS (
    SELECT
        WH.FA_FAC_SUBM_ID WH_FA_FAC_SUBM_ID,
        NODE.*
    FROM NODE_RCRA_FA_FAC_SUBM NODE
             LEFT OUTER JOIN RCRA_FA_FAC_SUBM WH ON WH.HANDLER_ID = NODE.HANDLER_ID
)
GO
/****** Object:  View [dbo].[ETL_FA_COST_EST_VW]    Script Date: 6/12/2019 2:50:57 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[ETL_FA_COST_EST_VW] AS (
    SELECT
        WH.FA_COST_EST_ID WH_FA_COST_EST_ID,
        ETL.WH_FA_FAC_SUBM_ID,
        ETL.FA_SUBM_ID,
        NODE.*
    FROM NODE_RCRA_FA_COST_EST NODE
             INNER JOIN ETL_FA_FAC_SUBM_VW ETL ON ETL.FA_FAC_SUBM_ID = NODE.FA_FAC_SUBM_ID
             LEFT OUTER JOIN RCRA_FA_COST_EST WH ON WH.FA_FAC_SUBM_ID = ETL.WH_FA_FAC_SUBM_ID
        AND WH.COST_ESTIMATE_SEQ_NUM = NODE.COST_ESTIMATE_SEQ_NUM
)
GO
/****** Object:  View [dbo].[ETL_FA_COST_EST_REL_MECHANISM_VW]    Script Date: 6/12/2019 2:50:57 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[ETL_FA_COST_EST_REL_MECHANISM_VW] AS (
    SELECT
        WH.FA_COST_EST_REL_MECHANISM_ID WH_FA_COST_EST_REL_MECHANISM_ID,
        ETL.WH_FA_COST_EST_ID,
        ETL.FA_SUBM_ID,
        NODE.*
    FROM NODE_RCRA_FA_COST_EST_REL_MECHANISM NODE
             INNER JOIN ETL_FA_COST_EST_VW ETL ON ETL.FA_COST_EST_ID = NODE.FA_COST_EST_ID
             LEFT OUTER JOIN RCRA_FA_COST_EST_REL_MECHANISM WH ON WH.FA_COST_EST_ID = ETL.WH_FA_COST_EST_ID
        AND WH.MECHANISM_SEQ_NUM = NODE.MECHANISM_SEQ_NUM
        AND WH.MECHANISM_DETAIL_SEQ_NUM = NODE.MECHANISM_DETAIL_SEQ_NUM
)
GO
/****** Object:  View [dbo].[ETL_FA_MECHANISM_VW]    Script Date: 6/12/2019 2:50:57 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[ETL_FA_MECHANISM_VW] AS (
    SELECT
        WH.FA_MECHANISM_ID WH_FA_MECHANISM_ID,
        ETL.WH_FA_FAC_SUBM_ID,
        ETL.FA_SUBM_ID,
        NODE.*
    FROM NODE_RCRA_FA_MECHANISM NODE
             INNER JOIN ETL_FA_FAC_SUBM_VW ETL ON ETL.FA_FAC_SUBM_ID = NODE.FA_FAC_SUBM_ID
             LEFT OUTER JOIN RCRA_FA_MECHANISM WH ON WH.FA_FAC_SUBM_ID = ETL.WH_FA_FAC_SUBM_ID
        AND WH.MECHANISM_SEQ_NUM = NODE.MECHANISM_SEQ_NUM
)
GO
/****** Object:  View [dbo].[ETL_FA_MECHANISM_DETAIL_VW]    Script Date: 6/12/2019 2:50:57 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[ETL_FA_MECHANISM_DETAIL_VW] AS (
    SELECT
        WH.FA_MECHANISM_DETAIL_ID WH_FA_MECHANISM_DETAIL_ID,
        ETL.WH_FA_MECHANISM_ID,
        ETL.FA_SUBM_ID,
        NODE.*
    FROM NODE_RCRA_FA_MECHANISM_DETAIL NODE
             INNER JOIN ETL_FA_MECHANISM_VW ETL ON ETL.FA_MECHANISM_ID = NODE.FA_MECHANISM_ID
             LEFT OUTER JOIN RCRA_FA_MECHANISM_DETAIL WH ON WH.FA_MECHANISM_ID = ETL.WH_FA_MECHANISM_ID
        AND WH.MECHANISM_DETAIL_SEQ_NUM = NODE.MECHANISM_DETAIL_SEQ_NUM
)
GO
/****** Object:  View [dbo].[ETL_PRM_FAC_SUBM_VW]    Script Date: 6/12/2019 2:50:57 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- PRM views --

CREATE VIEW [dbo].[ETL_PRM_FAC_SUBM_VW] AS (
    SELECT
        WH.PRM_FAC_SUBM_ID WH_PRM_FAC_SUBM_ID,
        NODE.*
    FROM NODE_RCRA_PRM_FAC_SUBM NODE
             LEFT OUTER JOIN RCRA_PRM_FAC_SUBM WH ON WH.HANDLER_ID = NODE.HANDLER_ID
)
GO
/****** Object:  View [dbo].[ETL_PRM_UNIT_VW]    Script Date: 6/12/2019 2:50:57 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[ETL_PRM_UNIT_VW] AS (
    SELECT
        WH.PRM_UNIT_ID WH_PRM_UNIT_ID,
        ETL.WH_PRM_FAC_SUBM_ID,
        ETL.PRM_SUBM_ID,
        NODE.*
    FROM NODE_RCRA_PRM_UNIT NODE
             INNER JOIN ETL_PRM_FAC_SUBM_VW ETL ON ETL.PRM_FAC_SUBM_ID = NODE.PRM_FAC_SUBM_ID
             LEFT OUTER JOIN RCRA_PRM_UNIT WH ON WH.PRM_FAC_SUBM_ID = ETL.WH_PRM_FAC_SUBM_ID
        AND WH.PERMIT_UNIT_SEQ_NUM = NODE.PERMIT_UNIT_SEQ_NUM
)
GO
/****** Object:  View [dbo].[ETL_PRM_UNIT_DETAIL_VW]    Script Date: 6/12/2019 2:50:57 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[ETL_PRM_UNIT_DETAIL_VW] AS (
    SELECT
        WH.PRM_UNIT_DETAIL_ID WH_PRM_UNIT_DETAIL_ID,
        ETL.WH_PRM_UNIT_ID,
        ETL.PRM_SUBM_ID,
        NODE.*
    FROM NODE_RCRA_PRM_UNIT_DETAIL NODE
             INNER JOIN ETL_PRM_UNIT_VW ETL ON ETL.PRM_UNIT_ID = NODE.PRM_UNIT_ID
             LEFT OUTER JOIN RCRA_PRM_UNIT_DETAIL WH ON WH.PRM_UNIT_ID = ETL.WH_PRM_UNIT_ID
        AND WH.PERMIT_UNIT_DETAIL_SEQ_NUM = NODE.PERMIT_UNIT_DETAIL_SEQ_NUM
)
GO
/****** Object:  View [dbo].[ETL_PRM_REL_EVENT_VW]    Script Date: 6/12/2019 2:50:57 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[ETL_PRM_REL_EVENT_VW] AS (
    SELECT
        WH.PRM_RELATED_EVENT_ID WH_PRM_RELATED_EVENT_ID,
        ETL.WH_PRM_UNIT_DETAIL_ID,
        ETL.PRM_SUBM_ID,
        NODE.*
    FROM NODE_RCRA_PRM_RELATED_EVENT NODE
             INNER JOIN ETL_PRM_UNIT_DETAIL_VW ETL ON ETL.PRM_UNIT_DETAIL_ID = NODE.PRM_UNIT_DETAIL_ID
             LEFT OUTER JOIN RCRA_PRM_RELATED_EVENT WH ON WH.PRM_UNIT_DETAIL_ID = ETL.WH_PRM_UNIT_DETAIL_ID
        AND WH.EVENT_SEQ_NUM = NODE.EVENT_SEQ_NUM
        AND WH.PERMIT_EVENT_CODE = NODE.PERMIT_EVENT_CODE
        AND WH.PERMIT_SERIES_SEQ_NUM = NODE.PERMIT_SERIES_SEQ_NUM
        AND WH.EVENT_AGN_CODE = NODE.EVENT_AGN_CODE
)
GO
/****** Object:  View [dbo].[ETL_PRM_SERIES_VW]    Script Date: 6/12/2019 2:50:57 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[ETL_PRM_SERIES_VW] AS (
    SELECT
        WH.PRM_SERIES_ID WH_PRM_SERIES_ID,
        ETL.WH_PRM_FAC_SUBM_ID,
        ETL.PRM_SUBM_ID,
        NODE.*
    FROM NODE_RCRA_PRM_SERIES NODE
             INNER JOIN ETL_PRM_FAC_SUBM_VW ETL ON ETL.PRM_FAC_SUBM_ID = NODE.PRM_FAC_SUBM_ID
             LEFT OUTER JOIN RCRA_PRM_SERIES WH ON WH.PRM_FAC_SUBM_ID = ETL.WH_PRM_FAC_SUBM_ID
        AND WH.PERMIT_SERIES_SEQ_NUM = NODE.PERMIT_SERIES_SEQ_NUM
)
GO
/****** Object:  View [dbo].[ETL_PRM_EVENT_VW]    Script Date: 6/12/2019 2:50:57 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[ETL_PRM_EVENT_VW] AS (
    SELECT
        WH.PRM_EVENT_ID WH_PRM_EVENT_ID,
        ETL.WH_PRM_SERIES_ID,
        ETL.PRM_SUBM_ID,
        NODE.*
    FROM NODE_RCRA_PRM_EVENT NODE
             INNER JOIN ETL_PRM_SERIES_VW ETL ON ETL.PRM_SERIES_ID = NODE.PRM_SERIES_ID
             LEFT OUTER JOIN RCRA_PRM_EVENT WH ON WH.PRM_SERIES_ID = ETL.WH_PRM_SERIES_ID
        AND WH.EVENT_SEQ_NUM = NODE.EVENT_SEQ_NUM
        AND WH.PERMIT_EVENT_CODE = NODE.PERMIT_EVENT_CODE
)
GO
/****** Object:  View [dbo].[ETL_PRM_EVENT_COMM_VW]    Script Date: 6/12/2019 2:50:57 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[ETL_PRM_EVENT_COMM_VW] AS (
    SELECT
        WH.PRM_EVENT_COMMITMENT_ID WH_PRM_EVENT_COMMITMENT_ID,
        ETL.WH_PRM_EVENT_ID,
        ETL.PRM_SUBM_ID,
        NODE.*
    FROM NODE_RCRA_PRM_EVENT_COMMITMENT NODE
             INNER JOIN ETL_PRM_EVENT_VW ETL ON ETL.PRM_EVENT_ID = NODE.PRM_EVENT_ID
             LEFT OUTER JOIN RCRA_PRM_EVENT_COMMITMENT WH ON WH.PRM_EVENT_ID = ETL.WH_PRM_EVENT_ID
        AND WH.COMMIT_SEQ_NUM = NODE.COMMIT_SEQ_NUM
)
GO
/****** Object:  View [dbo].[ETL_PRM_WASTE_CODE_VW]    Script Date: 6/12/2019 2:50:57 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[ETL_PRM_WASTE_CODE_VW] AS (
    SELECT
        WH.PRM_WASTE_CODE_ID WH_PRM_WASTE_CODE_ID,
        ETL.WH_PRM_UNIT_DETAIL_ID,
        ETL.PRM_SUBM_ID,
        NODE.*
    FROM NODE_RCRA_PRM_WASTE_CODE NODE
             INNER JOIN ETL_PRM_UNIT_DETAIL_VW ETL ON ETL.PRM_UNIT_DETAIL_ID = NODE.PRM_UNIT_DETAIL_ID
             LEFT OUTER JOIN RCRA_PRM_WASTE_CODE WH ON WH.PRM_UNIT_DETAIL_ID = ETL.WH_PRM_UNIT_DETAIL_ID
        AND WH.WASTE_CODE_OWNER = NODE.WASTE_CODE_OWNER
        AND WH.WASTE_CODE_TYPE = NODE.WASTE_CODE_TYPE
)
GO
/****** Object:  View [dbo].[ETL_HD_OTHER_ID_VW]    Script Date: 6/12/2019 2:50:57 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[ETL_HD_OTHER_ID_VW] AS (
    SELECT
        WH.HD_OTHER_ID_ID WH_HD_OTHER_ID_ID,
        ETL.WH_HD_HBASIC_ID,
        ETL.HD_SUBM_ID,
        NODE.*
    FROM NODE_RCRA_HD_OTHER_ID NODE
             INNER JOIN ETL_HD_BASIC_VW ETL ON ETL.HD_HBASIC_ID = NODE.HD_HBASIC_ID
             LEFT OUTER JOIN RCRA_HD_OTHER_ID WH ON WH.HD_HBASIC_ID = ETL.WH_HD_HBASIC_ID
        AND (
                                                                WH.RELATIONSHIP_OWNER = NODE.RELATIONSHIP_OWNER
                                                            OR (WH.RELATIONSHIP_OWNER IS NULL AND NODE.RELATIONSHIP_OWNER IS NULL)
                                                        )
        AND WH.RELATIONSHIP_TYPE = NODE.RELATIONSHIP_TYPE
        AND WH.OTHER_ID = NODE.OTHER_ID
)
GO
/****** Object:  View [dbo].[NODE_TABLE_COUNTS]    Script Date: 6/12/2019 2:50:57 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[NODE_TABLE_COUNTS] AS
    SELECT
        'RCRA_CA_AREA' table_name,
        count(*)       cnt
    FROM NODE_RCRA_CA_AREA
    UNION ALL
    SELECT
        'RCRA_CA_AREA_REL_EVENT' table_name,
        count(*)                 cnt
    FROM NODE_RCRA_CA_AREA_REL_EVENT
    UNION ALL
    SELECT
        'RCRA_CA_AUTH_REL_EVENT' table_name,
        count(*)                 cnt
    FROM NODE_RCRA_CA_AUTH_REL_EVENT
    UNION ALL
    SELECT
        'RCRA_CA_AUTHORITY' table_name,
        count(*)            cnt
    FROM NODE_RCRA_CA_AUTHORITY
    UNION ALL
    SELECT
        'RCRA_CA_EVENT' table_name,
        count(*)        cnt
    FROM NODE_RCRA_CA_EVENT
    UNION ALL
    SELECT
        'RCRA_CA_EVENT_COMMITMENT' table_name,
        count(*)                   cnt
    FROM NODE_RCRA_CA_EVENT_COMMITMENT
    UNION ALL
    SELECT
        'RCRA_CA_FAC_SUBM' table_name,
        count(*)           cnt
    FROM NODE_RCRA_CA_FAC_SUBM
    UNION ALL
    SELECT
        'RCRA_CA_REL_PERMIT_UNIT' table_name,
        count(*)                  cnt
    FROM NODE_RCRA_CA_REL_PERMIT_UNIT
    UNION ALL
    SELECT
        'RCRA_CA_STATUTORY_CITATION' table_name,
        count(*)                     cnt
    FROM NODE_RCRA_CA_STATUTORY_CITATION
    UNION ALL
    SELECT
        'RCRA_CME_CITATION' table_name,
        count(*)            cnt
    FROM NODE_RCRA_CME_CITATION
    UNION ALL
    SELECT
        'RCRA_CME_CSNY_DATE' table_name,
        count(*)             cnt
    FROM NODE_RCRA_CME_CSNY_DATE
    UNION ALL
    SELECT
        'RCRA_CME_ENFRC_ACT' table_name,
        count(*)             cnt
    FROM NODE_RCRA_CME_ENFRC_ACT
    UNION ALL
    SELECT
        'RCRA_CME_EVAL' table_name,
        count(*)        cnt
    FROM NODE_RCRA_CME_EVAL
    UNION ALL
    SELECT
        'RCRA_CME_EVAL_COMMIT' table_name,
        count(*)               cnt
    FROM NODE_RCRA_CME_EVAL_COMMIT
    UNION ALL
    SELECT
        'RCRA_CME_EVAL_VIOL' table_name,
        count(*)             cnt
    FROM NODE_RCRA_CME_EVAL_VIOL
    UNION ALL
    SELECT
        'RCRA_CME_FAC_SUBM' table_name,
        count(*)            cnt
    FROM NODE_RCRA_CME_FAC_SUBM
    UNION ALL
    SELECT
        'RCRA_CME_MEDIA' table_name,
        count(*)         cnt
    FROM NODE_RCRA_CME_MEDIA
    UNION ALL
    SELECT
        'RCRA_CME_MILESTONE' table_name,
        count(*)             cnt
    FROM NODE_RCRA_CME_MILESTONE
    UNION ALL
    SELECT
        'RCRA_CME_PNLTY' table_name,
        count(*)         cnt
    FROM NODE_RCRA_CME_PNLTY
    UNION ALL
    SELECT
        'RCRA_CME_PYMT' table_name,
        count(*)        cnt
    FROM NODE_RCRA_CME_PYMT
    UNION ALL
    SELECT
        'RCRA_CME_RQST' table_name,
        count(*)        cnt
    FROM NODE_RCRA_CME_RQST
    UNION ALL
    SELECT
        'RCRA_CME_SUPP_ENVR_PRJT' table_name,
        count(*)                  cnt
    FROM NODE_RCRA_CME_SUPP_ENVR_PRJT
    UNION ALL
    SELECT
        'RCRA_CME_VIOL' table_name,
        count(*)        cnt
    FROM NODE_RCRA_CME_VIOL
    UNION ALL
    SELECT
        'RCRA_CME_VIOL_ENFRC' table_name,
        count(*)              cnt
    FROM NODE_RCRA_CME_VIOL_ENFRC
    UNION ALL
    SELECT
        'RCRA_FA_COST_EST' table_name,
        count(*)           cnt
    FROM NODE_RCRA_FA_COST_EST
    UNION ALL
    SELECT
        'RCRA_FA_COST_EST_REL_MECHANISM' table_name,
        count(*)                         cnt
    FROM NODE_RCRA_FA_COST_EST_REL_MECHANISM
    UNION ALL
    SELECT
        'RCRA_FA_FAC_SUBM' table_name,
        count(*)           cnt
    FROM NODE_RCRA_FA_FAC_SUBM
    UNION ALL
    SELECT
        'RCRA_FA_MECHANISM' table_name,
        count(*)            cnt
    FROM NODE_RCRA_FA_MECHANISM
    UNION ALL
    SELECT
        'RCRA_FA_MECHANISM_DETAIL' table_name,
        count(*)                   cnt
    FROM NODE_RCRA_FA_MECHANISM_DETAIL
    UNION ALL
    SELECT
        'RCRA_FA_SUBM' table_name,
        count(*)       cnt
    FROM NODE_RCRA_FA_SUBM
    UNION ALL
    SELECT
        'RCRA_GIS_FAC_SUBM' table_name,
        count(*)            cnt
    FROM NODE_RCRA_GIS_FAC_SUBM
    UNION ALL
    SELECT
        'RCRA_GIS_GEO_INFORMATION' table_name,
        count(*)                   cnt
    FROM NODE_RCRA_GIS_GEO_INFORMATION
    UNION ALL
    SELECT
        'RCRA_HD_CERTIFICATION' table_name,
        count(*)                cnt
    FROM NODE_RCRA_HD_CERTIFICATION
    UNION ALL
    SELECT
        'RCRA_HD_ENV_PERMIT' table_name,
        count(*)             cnt
    FROM NODE_RCRA_HD_ENV_PERMIT
    UNION ALL
    SELECT
        'RCRA_HD_EPISODIC_EVENT' table_name,
        count(*)                 cnt
    FROM NODE_RCRA_HD_EPISODIC_EVENT
    UNION ALL
    SELECT
        'RCRA_HD_EPISODIC_WASTE' table_name,
        count(*)                 cnt
    FROM NODE_RCRA_HD_EPISODIC_WASTE
    UNION ALL
    SELECT
        'RCRA_HD_EPISODIC_WASTE_CODE' table_name,
        count(*)                      cnt
    FROM NODE_RCRA_HD_EPISODIC_WASTE_CODE
    UNION ALL
    SELECT
        'RCRA_HD_HANDLER' table_name,
        count(*)          cnt
    FROM NODE_RCRA_HD_HANDLER
    UNION ALL
    SELECT
        'RCRA_HD_HBASIC' table_name,
        count(*)         cnt
    FROM NODE_RCRA_HD_HBASIC
    UNION ALL
    SELECT
        'RCRA_HD_LQG_CLOSURE' table_name,
        count(*)              cnt
    FROM NODE_RCRA_HD_LQG_CLOSURE
    UNION ALL
    SELECT
        'RCRA_HD_LQG_CONSOLIDATION' table_name,
        count(*)                    cnt
    FROM NODE_RCRA_HD_LQG_CONSOLIDATION
    UNION ALL
    SELECT
        'RCRA_HD_NAICS' table_name,
        count(*)        cnt
    FROM NODE_RCRA_HD_NAICS
    UNION ALL
    SELECT
        'RCRA_HD_OTHER_ID' table_name,
        count(*)           cnt
    FROM NODE_RCRA_HD_OTHER_ID
    UNION ALL
    SELECT
        'RCRA_HD_OWNEROP' table_name,
        count(*)          cnt
    FROM NODE_RCRA_HD_OWNEROP
    UNION ALL
    SELECT
        'RCRA_HD_SEC_MATERIAL_ACTIVITY' table_name,
        count(*)                        cnt
    FROM NODE_RCRA_HD_SEC_MATERIAL_ACTIVITY
    UNION ALL
    SELECT
        'RCRA_HD_SEC_WASTE_CODE' table_name,
        count(*)                 cnt
    FROM NODE_RCRA_HD_SEC_WASTE_CODE
    UNION ALL
    SELECT
        'RCRA_HD_STATE_ACTIVITY' table_name,
        count(*)                 cnt
    FROM NODE_RCRA_HD_STATE_ACTIVITY
    UNION ALL
    SELECT
        'RCRA_HD_UNIVERSAL_WASTE' table_name,
        count(*)                  cnt
    FROM NODE_RCRA_HD_UNIVERSAL_WASTE
    UNION ALL
    SELECT
        'RCRA_HD_WASTE_CODE' table_name,
        count(*)             cnt
    FROM NODE_RCRA_HD_WASTE_CODE
    UNION ALL
    SELECT
        'RCRA_PRM_EVENT' table_name,
        count(*)         cnt
    FROM NODE_RCRA_PRM_EVENT
    UNION ALL
    SELECT
        'RCRA_PRM_EVENT_COMMITMENT' table_name,
        count(*)                    cnt
    FROM NODE_RCRA_PRM_EVENT_COMMITMENT
    UNION ALL
    SELECT
        'RCRA_PRM_FAC_SUBM' table_name,
        count(*)            cnt
    FROM NODE_RCRA_PRM_FAC_SUBM
    UNION ALL
    SELECT
        'RCRA_PRM_RELATED_EVENT' table_name,
        count(*)                 cnt
    FROM NODE_RCRA_PRM_RELATED_EVENT
    UNION ALL
    SELECT
        'RCRA_PRM_SERIES' table_name,
        count(*)          cnt
    FROM NODE_RCRA_PRM_SERIES
    UNION ALL
    SELECT
        'RCRA_PRM_UNIT' table_name,
        count(*)        cnt
    FROM NODE_RCRA_PRM_UNIT
    UNION ALL
    SELECT
        'RCRA_PRM_UNIT_DETAIL' table_name,
        count(*)               cnt
    FROM NODE_RCRA_PRM_UNIT_DETAIL
    UNION ALL
    SELECT
        'RCRA_PRM_WASTE_CODE' table_name,
        count(*)              cnt
    FROM NODE_RCRA_PRM_WASTE_CODE
    UNION ALL
    SELECT
        'RCRA_RU_REPORT_UNIV' table_name,
        count(*)              cnt
    FROM NODE_RCRA_RU_REPORT_UNIV
    UNION ALL
    SELECT
        'RCRA_RU_REPORT_UNIV_SUBM' table_name,
        count(*)                   cnt
    FROM NODE_RCRA_RU_REPORT_UNIV_SUBM
    UNION ALL
    SELECT
        'RCRA_RU_SUBM' table_name,
        count(*)       cnt
    FROM NODE_RCRA_RU_SUBM
    UNION ALL
    SELECT
        'RCRA_EM_EMANIFEST' table_name,
        count(*) cnt
    FROM NODE_RCRA_EM_EMANIFEST
    UNION ALL
    SELECT
        'RCRA_EM_EMANIFEST_COMMENT' table_name,
        count(*) cnt
    FROM NODE_RCRA_EM_EMANIFEST_COMMENT
    UNION ALL
    SELECT
        'RCRA_EM_HANDLER' table_name,
        count(*) cnt
    FROM NODE_RCRA_EM_HANDLER
    UNION ALL
    SELECT
        'RCRA_EM_SUBM' table_name,
        count(*) cnt
    FROM NODE_RCRA_EM_SUBM
    UNION ALL
    SELECT
        'RCRA_EM_TR_NUM_ORIG' table_name,
        count(*) cnt
    FROM NODE_RCRA_EM_TR_NUM_ORIG
    UNION ALL
    SELECT
        'RCRA_EM_TR_NUM_REJ' table_name,
        count(*) cnt
    FROM NODE_RCRA_EM_TR_NUM_REJ
    UNION ALL
    SELECT
        'RCRA_EM_TR_NUM_RESIDUE_NEW' table_name,
        count(*) cnt
    FROM NODE_RCRA_EM_TR_NUM_RESIDUE_NEW
    UNION ALL
    SELECT
        'RCRA_EM_TR_NUM_WASTE' table_name,
        count(*) cnt
    FROM NODE_RCRA_EM_TR_NUM_WASTE
    UNION ALL
    SELECT
        'RCRA_EM_WASTE' table_name,
        count(*) cnt
    FROM NODE_RCRA_EM_WASTE
    UNION ALL
    SELECT
        'RCRA_EM_WASTE_CD_FED' table_name,
        count(*) cnt
    FROM NODE_RCRA_EM_WASTE_CD_FED
    UNION ALL
    SELECT
        'RCRA_EM_WASTE_CD_GEN' table_name,
        count(*) cnt
    FROM NODE_RCRA_EM_WASTE_CD_GEN
    UNION ALL
    SELECT
        'RCRA_EM_WASTE_CD_TRANS' table_name,
        count(*) cnt
    FROM NODE_RCRA_EM_WASTE_CD_TRANS
    UNION ALL
    SELECT
        'RCRA_EM_WASTE_CD_TSDF' table_name,
        count(*) cnt
    FROM NODE_RCRA_EM_WASTE_CD_TSDF
    UNION ALL
    SELECT
        'RCRA_EM_WASTE_COMMENT' table_name,
        count(*) cnt
    FROM NODE_RCRA_EM_WASTE_COMMENT
    UNION ALL
    SELECT
        'RCRA_EM_WASTE_PCB' table_name,
        count(*) cnt
    FROM NODE_RCRA_EM_WASTE_PCB
    UNION ALL
    SELECT
        'RCRA_SUBMISSIONHISTORY' table_name,
        count(*)                 cnt
    FROM NODE_RCRA_SUBMISSIONHISTORY
GO
/****** Object:  Table [dbo].[RCRA_RU_REPORT_UNIV_SUBM]    Script Date: 6/12/2019 2:50:58 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RCRA_RU_REPORT_UNIV_SUBM](
	[RU_REPORT_UNIV_SUBM_ID] [varchar](40) NOT NULL,
	[RU_SUBM_ID] [varchar](40) NOT NULL,
 CONSTRAINT [PK_RU_REPORT_UNIV_SUBM] PRIMARY KEY CLUSTERED 
(
	[RU_REPORT_UNIV_SUBM_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RCRA_RU_SUBM]    Script Date: 6/12/2019 2:50:58 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RCRA_RU_SUBM](
	[RU_SUBM_ID] [varchar](40) NOT NULL,
 CONSTRAINT [PK_RU_SUBM] PRIMARY KEY CLUSTERED 
(
	[RU_SUBM_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Index [IX_ETL_RUN_HANDLER_ETL_RUN_ID]    Script Date: 6/12/2019 2:50:58 PM ******/
CREATE NONCLUSTERED INDEX [IX_ETL_RUN_HANDLER_ETL_RUN_ID] ON [dbo].[ETL_RUN_HANDLER]
(
	[ETL_RUN_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_ETL_RUN_HANDLER_HANDLER_ID]    Script Date: 6/12/2019 2:50:58 PM ******/
CREATE NONCLUSTERED INDEX [IX_ETL_RUN_HANDLER_HANDLER_ID] ON [dbo].[ETL_RUN_HANDLER]
(
	[HANDLER_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_CA_AR_CA_FC_SB]    Script Date: 6/12/2019 2:50:58 PM ******/
CREATE NONCLUSTERED INDEX [IX_CA_AR_CA_FC_SB] ON [dbo].[RCRA_CA_AREA]
(
	[CA_FAC_SUBM_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_CA_AR_RL_EV_CA]    Script Date: 6/12/2019 2:50:58 PM ******/
CREATE NONCLUSTERED INDEX [IX_CA_AR_RL_EV_CA] ON [dbo].[RCRA_CA_AREA_REL_EVENT]
(
	[CA_AREA_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_CA_AT_RL_EV_CA]    Script Date: 6/12/2019 2:50:58 PM ******/
CREATE NONCLUSTERED INDEX [IX_CA_AT_RL_EV_CA] ON [dbo].[RCRA_CA_AUTH_REL_EVENT]
(
	[CA_AUTHORITY_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_CA_AT_CA_FC_SB]    Script Date: 6/12/2019 2:50:58 PM ******/
CREATE NONCLUSTERED INDEX [IX_CA_AT_CA_FC_SB] ON [dbo].[RCRA_CA_AUTHORITY]
(
	[CA_FAC_SUBM_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_CA_EV_CA_FC_SB]    Script Date: 6/12/2019 2:50:58 PM ******/
CREATE NONCLUSTERED INDEX [IX_CA_EV_CA_FC_SB] ON [dbo].[RCRA_CA_EVENT]
(
	[CA_FAC_SUBM_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_CA_EV_CM_CA_EV]    Script Date: 6/12/2019 2:50:58 PM ******/
CREATE NONCLUSTERED INDEX [IX_CA_EV_CM_CA_EV] ON [dbo].[RCRA_CA_EVENT_COMMITMENT]
(
	[CA_EVENT_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_CA_RL_PR_UN_CA]    Script Date: 6/12/2019 2:50:58 PM ******/
CREATE NONCLUSTERED INDEX [IX_CA_RL_PR_UN_CA] ON [dbo].[RCRA_CA_REL_PERMIT_UNIT]
(
	[CA_AREA_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_CA_ST_CT_CA_AT]    Script Date: 6/12/2019 2:50:58 PM ******/
CREATE NONCLUSTERED INDEX [IX_CA_ST_CT_CA_AT] ON [dbo].[RCRA_CA_STATUTORY_CITATION]
(
	[CA_AUTHORITY_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_CME_CT_CM_VL_ID]    Script Date: 6/12/2019 2:50:58 PM ******/
CREATE NONCLUSTERED INDEX [IX_CME_CT_CM_VL_ID] ON [dbo].[RCRA_CME_CITATION]
(
	[CME_VIOL_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_CM_CS_DT_CM_EN]    Script Date: 6/12/2019 2:50:58 PM ******/
CREATE NONCLUSTERED INDEX [IX_CM_CS_DT_CM_EN] ON [dbo].[RCRA_CME_CSNY_DATE]
(
	[CME_ENFRC_ACT_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_CM_EN_AC_CM_FC]    Script Date: 6/12/2019 2:50:58 PM ******/
CREATE NONCLUSTERED INDEX [IX_CM_EN_AC_CM_FC] ON [dbo].[RCRA_CME_ENFRC_ACT]
(
	[CME_FAC_SUBM_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_CM_EV_CM_FC_SB]    Script Date: 6/12/2019 2:50:58 PM ******/
CREATE NONCLUSTERED INDEX [IX_CM_EV_CM_FC_SB] ON [dbo].[RCRA_CME_EVAL]
(
	[CME_FAC_SUBM_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_CM_EV_CM_CM_EV]    Script Date: 6/12/2019 2:50:58 PM ******/
CREATE NONCLUSTERED INDEX [IX_CM_EV_CM_CM_EV] ON [dbo].[RCRA_CME_EVAL_COMMIT]
(
	[CME_EVAL_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_CM_EV_VL_CM_EV]    Script Date: 6/12/2019 2:50:58 PM ******/
CREATE NONCLUSTERED INDEX [IX_CM_EV_VL_CM_EV] ON [dbo].[RCRA_CME_EVAL_VIOL]
(
	[CME_EVAL_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_CM_MD_CM_EN_AC]    Script Date: 6/12/2019 2:50:58 PM ******/
CREATE NONCLUSTERED INDEX [IX_CM_MD_CM_EN_AC] ON [dbo].[RCRA_CME_MEDIA]
(
	[CME_ENFRC_ACT_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_CM_ML_CM_EN_AC]    Script Date: 6/12/2019 2:50:58 PM ******/
CREATE NONCLUSTERED INDEX [IX_CM_ML_CM_EN_AC] ON [dbo].[RCRA_CME_MILESTONE]
(
	[CME_ENFRC_ACT_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_CM_PN_CM_EN_AC]    Script Date: 6/12/2019 2:50:58 PM ******/
CREATE NONCLUSTERED INDEX [IX_CM_PN_CM_EN_AC] ON [dbo].[RCRA_CME_PNLTY]
(
	[CME_ENFRC_ACT_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_CME_PY_CM_PN_ID]    Script Date: 6/12/2019 2:50:58 PM ******/
CREATE NONCLUSTERED INDEX [IX_CME_PY_CM_PN_ID] ON [dbo].[RCRA_CME_PYMT]
(
	[CME_PNLTY_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_CME_RQ_CM_EV_ID]    Script Date: 6/12/2019 2:50:58 PM ******/
CREATE NONCLUSTERED INDEX [IX_CME_RQ_CM_EV_ID] ON [dbo].[RCRA_CME_RQST]
(
	[CME_EVAL_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_CM_SP_EN_PR_CM]    Script Date: 6/12/2019 2:50:58 PM ******/
CREATE NONCLUSTERED INDEX [IX_CM_SP_EN_PR_CM] ON [dbo].[RCRA_CME_SUPP_ENVR_PRJT]
(
	[CME_ENFRC_ACT_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_CM_VL_CM_FC_SB]    Script Date: 6/12/2019 2:50:58 PM ******/
CREATE NONCLUSTERED INDEX [IX_CM_VL_CM_FC_SB] ON [dbo].[RCRA_CME_VIOL]
(
	[CME_FAC_SUBM_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_CM_VL_EN_CM_EN]    Script Date: 6/12/2019 2:50:58 PM ******/
CREATE NONCLUSTERED INDEX [IX_CM_VL_EN_CM_EN] ON [dbo].[RCRA_CME_VIOL_ENFRC]
(
	[CME_ENFRC_ACT_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_FA_CS_ES_FA_FC]    Script Date: 6/12/2019 2:50:58 PM ******/
CREATE NONCLUSTERED INDEX [IX_FA_CS_ES_FA_FC] ON [dbo].[RCRA_FA_COST_EST]
(
	[FA_FAC_SUBM_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_FA_CS_ES_RL_MC]    Script Date: 6/12/2019 2:50:58 PM ******/
CREATE NONCLUSTERED INDEX [IX_FA_CS_ES_RL_MC] ON [dbo].[RCRA_FA_COST_EST_REL_MECHANISM]
(
	[FA_COST_EST_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_FA_MC_FA_FC_SB]    Script Date: 6/12/2019 2:50:58 PM ******/
CREATE NONCLUSTERED INDEX [IX_FA_MC_FA_FC_SB] ON [dbo].[RCRA_FA_MECHANISM]
(
	[FA_FAC_SUBM_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_FA_MC_DT_FA_MC]    Script Date: 6/12/2019 2:50:58 PM ******/
CREATE NONCLUSTERED INDEX [IX_FA_MC_DT_FA_MC] ON [dbo].[RCRA_FA_MECHANISM_DETAIL]
(
	[FA_MECHANISM_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_GS_GO_IN_GS_FC]    Script Date: 6/12/2019 2:50:58 PM ******/
CREATE NONCLUSTERED INDEX [IX_GS_GO_IN_GS_FC] ON [dbo].[RCRA_GIS_GEO_INFORMATION]
(
	[GIS_FAC_SUBM_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_HD_CER_HD_HA_ID]    Script Date: 6/12/2019 2:50:58 PM ******/
CREATE NONCLUSTERED INDEX [IX_HD_CER_HD_HA_ID] ON [dbo].[RCRA_HD_CERTIFICATION]
(
	[HD_HANDLER_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_HD_EN_PE_HD_HA]    Script Date: 6/12/2019 2:50:58 PM ******/
CREATE NONCLUSTERED INDEX [IX_HD_EN_PE_HD_HA] ON [dbo].[RCRA_HD_ENV_PERMIT]
(
	[HD_HANDLER_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_HD_HAN_HD_HB_ID]    Script Date: 6/12/2019 2:50:58 PM ******/
CREATE NONCLUSTERED INDEX [IX_HD_HAN_HD_HB_ID] ON [dbo].[RCRA_HD_HANDLER]
(
	[HD_HBASIC_ID] ASC,
	[ACTIVITY_LOCATION] ASC,
	[SEQ_NUMBER] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_HD_NAI_HD_HA_ID]    Script Date: 6/12/2019 2:50:58 PM ******/
CREATE NONCLUSTERED INDEX [IX_HD_NAI_HD_HA_ID] ON [dbo].[RCRA_HD_NAICS]
(
	[HD_HANDLER_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_HD_OT_ID_HD_HB]    Script Date: 6/12/2019 2:50:58 PM ******/
CREATE NONCLUSTERED INDEX [IX_HD_OT_ID_HD_HB] ON [dbo].[RCRA_HD_OTHER_ID]
(
	[HD_HBASIC_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_HD_OWN_HD_HA_ID]    Script Date: 6/12/2019 2:50:58 PM ******/
CREATE NONCLUSTERED INDEX [IX_HD_OWN_HD_HA_ID] ON [dbo].[RCRA_HD_OWNEROP]
(
	[HD_HANDLER_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_HD_SE_MA_AC_HD]    Script Date: 6/12/2019 2:50:58 PM ******/
CREATE NONCLUSTERED INDEX [IX_HD_SE_MA_AC_HD] ON [dbo].[RCRA_HD_SEC_MATERIAL_ACTIVITY]
(
	[HD_HANDLER_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_HD_SE_WA_CO_HD]    Script Date: 6/12/2019 2:50:58 PM ******/
CREATE NONCLUSTERED INDEX [IX_HD_SE_WA_CO_HD] ON [dbo].[RCRA_HD_SEC_WASTE_CODE]
(
	[HD_SEC_MATERIAL_ACTIVITY_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_HD_ST_AC_HD_HA]    Script Date: 6/12/2019 2:50:58 PM ******/
CREATE NONCLUSTERED INDEX [IX_HD_ST_AC_HD_HA] ON [dbo].[RCRA_HD_STATE_ACTIVITY]
(
	[HD_HANDLER_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_HD_UN_WA_HD_HA]    Script Date: 6/12/2019 2:50:58 PM ******/
CREATE NONCLUSTERED INDEX [IX_HD_UN_WA_HD_HA] ON [dbo].[RCRA_HD_UNIVERSAL_WASTE]
(
	[HD_HANDLER_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_HD_WA_CO_HD_HA]    Script Date: 6/12/2019 2:50:58 PM ******/
CREATE NONCLUSTERED INDEX [IX_HD_WA_CO_HD_HA] ON [dbo].[RCRA_HD_WASTE_CODE]
(
	[HD_HANDLER_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_PRM_EV_PR_SR_ID]    Script Date: 6/12/2019 2:50:58 PM ******/
CREATE NONCLUSTERED INDEX [IX_PRM_EV_PR_SR_ID] ON [dbo].[RCRA_PRM_EVENT]
(
	[PRM_SERIES_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_PR_EV_CM_PR_EV]    Script Date: 6/12/2019 2:50:58 PM ******/
CREATE NONCLUSTERED INDEX [IX_PR_EV_CM_PR_EV] ON [dbo].[RCRA_PRM_EVENT_COMMITMENT]
(
	[PRM_EVENT_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_PR_RL_EV_PR_UN]    Script Date: 6/12/2019 2:50:58 PM ******/
CREATE NONCLUSTERED INDEX [IX_PR_RL_EV_PR_UN] ON [dbo].[RCRA_PRM_RELATED_EVENT]
(
	[PRM_UNIT_DETAIL_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_PR_SR_PR_FC_SB]    Script Date: 6/12/2019 2:50:58 PM ******/
CREATE NONCLUSTERED INDEX [IX_PR_SR_PR_FC_SB] ON [dbo].[RCRA_PRM_SERIES]
(
	[PRM_FAC_SUBM_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_PR_UN_PR_FC_SB]    Script Date: 6/12/2019 2:50:58 PM ******/
CREATE NONCLUSTERED INDEX [IX_PR_UN_PR_FC_SB] ON [dbo].[RCRA_PRM_UNIT]
(
	[PRM_FAC_SUBM_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_PR_UN_DT_PR_UN]    Script Date: 6/12/2019 2:50:58 PM ******/
CREATE NONCLUSTERED INDEX [IX_PR_UN_DT_PR_UN] ON [dbo].[RCRA_PRM_UNIT_DETAIL]
(
	[PRM_UNIT_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_PR_WS_CD_PR_UN]    Script Date: 6/12/2019 2:50:58 PM ******/
CREATE NONCLUSTERED INDEX [IX_PR_WS_CD_PR_UN] ON [dbo].[RCRA_PRM_WASTE_CODE]
(
	[PRM_UNIT_DETAIL_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
ALTER TABLE [dbo].[RCRA_CA_AREA]  WITH CHECK ADD  CONSTRAINT [FK_CA_AREA_CA_FAC_SUBM] FOREIGN KEY([CA_FAC_SUBM_ID])
    REFERENCES [dbo].[RCRA_CA_FAC_SUBM] ([CA_FAC_SUBM_ID])
    ON DELETE CASCADE
GO
ALTER TABLE [dbo].[RCRA_CA_AREA] CHECK CONSTRAINT [FK_CA_AREA_CA_FAC_SUBM]
GO
ALTER TABLE [dbo].[RCRA_CA_AREA_REL_EVENT]  WITH CHECK ADD  CONSTRAINT [FK_CA_AREA_REL_EVENT_CA_AREA] FOREIGN KEY([CA_AREA_ID])
    REFERENCES [dbo].[RCRA_CA_AREA] ([CA_AREA_ID])
    ON DELETE CASCADE
GO
ALTER TABLE [dbo].[RCRA_CA_AREA_REL_EVENT] CHECK CONSTRAINT [FK_CA_AREA_REL_EVENT_CA_AREA]
GO
ALTER TABLE [dbo].[RCRA_CA_AUTH_REL_EVENT]  WITH CHECK ADD  CONSTRAINT [FK_CA_AUTH_RL_EVNT_CA_AUTHORTY] FOREIGN KEY([CA_AUTHORITY_ID])
    REFERENCES [dbo].[RCRA_CA_AUTHORITY] ([CA_AUTHORITY_ID])
    ON DELETE CASCADE
GO
ALTER TABLE [dbo].[RCRA_CA_AUTH_REL_EVENT] CHECK CONSTRAINT [FK_CA_AUTH_RL_EVNT_CA_AUTHORTY]
GO
ALTER TABLE [dbo].[RCRA_CA_AUTHORITY]  WITH CHECK ADD  CONSTRAINT [FK_CA_AUTHORITY_CA_FAC_SUBM] FOREIGN KEY([CA_FAC_SUBM_ID])
    REFERENCES [dbo].[RCRA_CA_FAC_SUBM] ([CA_FAC_SUBM_ID])
    ON DELETE CASCADE
GO
ALTER TABLE [dbo].[RCRA_CA_AUTHORITY] CHECK CONSTRAINT [FK_CA_AUTHORITY_CA_FAC_SUBM]
GO
ALTER TABLE [dbo].[RCRA_CA_EVENT]  WITH CHECK ADD  CONSTRAINT [FK_CA_EVENT_CA_FAC_SUBM] FOREIGN KEY([CA_FAC_SUBM_ID])
    REFERENCES [dbo].[RCRA_CA_FAC_SUBM] ([CA_FAC_SUBM_ID])
    ON DELETE CASCADE
GO
ALTER TABLE [dbo].[RCRA_CA_EVENT] CHECK CONSTRAINT [FK_CA_EVENT_CA_FAC_SUBM]
GO
ALTER TABLE [dbo].[RCRA_CA_EVENT_COMMITMENT]  WITH CHECK ADD  CONSTRAINT [FK_CA_EVENT_COMMITMENT_CA_EVNT] FOREIGN KEY([CA_EVENT_ID])
    REFERENCES [dbo].[RCRA_CA_EVENT] ([CA_EVENT_ID])
    ON DELETE CASCADE
GO
ALTER TABLE [dbo].[RCRA_CA_EVENT_COMMITMENT] CHECK CONSTRAINT [FK_CA_EVENT_COMMITMENT_CA_EVNT]
GO
ALTER TABLE [dbo].[RCRA_CA_REL_PERMIT_UNIT]  WITH CHECK ADD  CONSTRAINT [FK_CA_REL_PERMIT_UNIT_CA_AREA] FOREIGN KEY([CA_AREA_ID])
    REFERENCES [dbo].[RCRA_CA_AREA] ([CA_AREA_ID])
    ON DELETE CASCADE
GO
ALTER TABLE [dbo].[RCRA_CA_REL_PERMIT_UNIT] CHECK CONSTRAINT [FK_CA_REL_PERMIT_UNIT_CA_AREA]
GO
ALTER TABLE [dbo].[RCRA_CA_STATUTORY_CITATION]  WITH CHECK ADD  CONSTRAINT [FK_CA_STTUTRY_CITTON_CA_ATHRTY] FOREIGN KEY([CA_AUTHORITY_ID])
    REFERENCES [dbo].[RCRA_CA_AUTHORITY] ([CA_AUTHORITY_ID])
    ON DELETE CASCADE
GO
ALTER TABLE [dbo].[RCRA_CA_STATUTORY_CITATION] CHECK CONSTRAINT [FK_CA_STTUTRY_CITTON_CA_ATHRTY]
GO
ALTER TABLE [dbo].[RCRA_CME_CITATION]  WITH CHECK ADD  CONSTRAINT [FK_CME_CITATION_CME_VIOL] FOREIGN KEY([CME_VIOL_ID])
    REFERENCES [dbo].[RCRA_CME_VIOL] ([CME_VIOL_ID])
    ON DELETE CASCADE
GO
ALTER TABLE [dbo].[RCRA_CME_CITATION] CHECK CONSTRAINT [FK_CME_CITATION_CME_VIOL]
GO
ALTER TABLE [dbo].[RCRA_CME_CSNY_DATE]  WITH CHECK ADD  CONSTRAINT [FK_CME_CSNY_DATE_CME_ENFRC_ACT] FOREIGN KEY([CME_ENFRC_ACT_ID])
    REFERENCES [dbo].[RCRA_CME_ENFRC_ACT] ([CME_ENFRC_ACT_ID])
    ON DELETE CASCADE
GO
ALTER TABLE [dbo].[RCRA_CME_CSNY_DATE] CHECK CONSTRAINT [FK_CME_CSNY_DATE_CME_ENFRC_ACT]
GO
ALTER TABLE [dbo].[RCRA_CME_ENFRC_ACT]  WITH CHECK ADD  CONSTRAINT [FK_CME_ENFRC_ACT_CME_FAC_SUBM] FOREIGN KEY([CME_FAC_SUBM_ID])
    REFERENCES [dbo].[RCRA_CME_FAC_SUBM] ([CME_FAC_SUBM_ID])
    ON DELETE CASCADE
GO
ALTER TABLE [dbo].[RCRA_CME_ENFRC_ACT] CHECK CONSTRAINT [FK_CME_ENFRC_ACT_CME_FAC_SUBM]
GO
ALTER TABLE [dbo].[RCRA_CME_EVAL]  WITH CHECK ADD  CONSTRAINT [FK_CME_EVAL_CME_FAC_SUBM] FOREIGN KEY([CME_FAC_SUBM_ID])
    REFERENCES [dbo].[RCRA_CME_FAC_SUBM] ([CME_FAC_SUBM_ID])
    ON DELETE CASCADE
GO
ALTER TABLE [dbo].[RCRA_CME_EVAL] CHECK CONSTRAINT [FK_CME_EVAL_CME_FAC_SUBM]
GO
ALTER TABLE [dbo].[RCRA_CME_EVAL_COMMIT]  WITH CHECK ADD  CONSTRAINT [FK_CME_EVAL_COMMIT_CME_EVAL] FOREIGN KEY([CME_EVAL_ID])
    REFERENCES [dbo].[RCRA_CME_EVAL] ([CME_EVAL_ID])
    ON DELETE CASCADE
GO
ALTER TABLE [dbo].[RCRA_CME_EVAL_COMMIT] CHECK CONSTRAINT [FK_CME_EVAL_COMMIT_CME_EVAL]
GO
ALTER TABLE [dbo].[RCRA_CME_EVAL_VIOL]  WITH CHECK ADD  CONSTRAINT [FK_CME_EVAL_VIOL_CME_EVAL] FOREIGN KEY([CME_EVAL_ID])
    REFERENCES [dbo].[RCRA_CME_EVAL] ([CME_EVAL_ID])
    ON DELETE CASCADE
GO
ALTER TABLE [dbo].[RCRA_CME_EVAL_VIOL] CHECK CONSTRAINT [FK_CME_EVAL_VIOL_CME_EVAL]
GO
ALTER TABLE [dbo].[RCRA_CME_MEDIA]  WITH CHECK ADD  CONSTRAINT [FK_CME_MEDIA_CME_ENFRC_ACT] FOREIGN KEY([CME_ENFRC_ACT_ID])
    REFERENCES [dbo].[RCRA_CME_ENFRC_ACT] ([CME_ENFRC_ACT_ID])
    ON DELETE CASCADE
GO
ALTER TABLE [dbo].[RCRA_CME_MEDIA] CHECK CONSTRAINT [FK_CME_MEDIA_CME_ENFRC_ACT]
GO
ALTER TABLE [dbo].[RCRA_CME_MILESTONE]  WITH CHECK ADD  CONSTRAINT [FK_CME_MILESTONE_CME_ENFRC_ACT] FOREIGN KEY([CME_ENFRC_ACT_ID])
    REFERENCES [dbo].[RCRA_CME_ENFRC_ACT] ([CME_ENFRC_ACT_ID])
    ON DELETE CASCADE
GO
ALTER TABLE [dbo].[RCRA_CME_MILESTONE] CHECK CONSTRAINT [FK_CME_MILESTONE_CME_ENFRC_ACT]
GO
ALTER TABLE [dbo].[RCRA_CME_PNLTY]  WITH CHECK ADD  CONSTRAINT [FK_CME_PNLTY_CME_ENFRC_ACT] FOREIGN KEY([CME_ENFRC_ACT_ID])
    REFERENCES [dbo].[RCRA_CME_ENFRC_ACT] ([CME_ENFRC_ACT_ID])
    ON DELETE CASCADE
GO
ALTER TABLE [dbo].[RCRA_CME_PNLTY] CHECK CONSTRAINT [FK_CME_PNLTY_CME_ENFRC_ACT]
GO
ALTER TABLE [dbo].[RCRA_CME_PYMT]  WITH CHECK ADD  CONSTRAINT [FK_CME_PYMT_CME_PNLTY] FOREIGN KEY([CME_PNLTY_ID])
    REFERENCES [dbo].[RCRA_CME_PNLTY] ([CME_PNLTY_ID])
    ON DELETE CASCADE
GO
ALTER TABLE [dbo].[RCRA_CME_PYMT] CHECK CONSTRAINT [FK_CME_PYMT_CME_PNLTY]
GO
ALTER TABLE [dbo].[RCRA_CME_RQST]  WITH CHECK ADD  CONSTRAINT [FK_CME_RQST_CME_EVAL] FOREIGN KEY([CME_EVAL_ID])
    REFERENCES [dbo].[RCRA_CME_EVAL] ([CME_EVAL_ID])
    ON DELETE CASCADE
GO
ALTER TABLE [dbo].[RCRA_CME_RQST] CHECK CONSTRAINT [FK_CME_RQST_CME_EVAL]
GO
ALTER TABLE [dbo].[RCRA_CME_SUPP_ENVR_PRJT]  WITH CHECK ADD  CONSTRAINT [FK_CME_SPP_ENV_PRJ_CME_ENF_ACT] FOREIGN KEY([CME_ENFRC_ACT_ID])
    REFERENCES [dbo].[RCRA_CME_ENFRC_ACT] ([CME_ENFRC_ACT_ID])
    ON DELETE CASCADE
GO
ALTER TABLE [dbo].[RCRA_CME_SUPP_ENVR_PRJT] CHECK CONSTRAINT [FK_CME_SPP_ENV_PRJ_CME_ENF_ACT]
GO
ALTER TABLE [dbo].[RCRA_CME_VIOL]  WITH CHECK ADD  CONSTRAINT [FK_CME_VIOL_CME_FAC_SUBM] FOREIGN KEY([CME_FAC_SUBM_ID])
    REFERENCES [dbo].[RCRA_CME_FAC_SUBM] ([CME_FAC_SUBM_ID])
    ON DELETE CASCADE
GO
ALTER TABLE [dbo].[RCRA_CME_VIOL] CHECK CONSTRAINT [FK_CME_VIOL_CME_FAC_SUBM]
GO
ALTER TABLE [dbo].[RCRA_CME_VIOL_ENFRC]  WITH CHECK ADD  CONSTRAINT [FK_CME_VL_ENFRC_CME_ENFRC_ACT] FOREIGN KEY([CME_ENFRC_ACT_ID])
    REFERENCES [dbo].[RCRA_CME_ENFRC_ACT] ([CME_ENFRC_ACT_ID])
    ON DELETE CASCADE
GO
ALTER TABLE [dbo].[RCRA_CME_VIOL_ENFRC] CHECK CONSTRAINT [FK_CME_VL_ENFRC_CME_ENFRC_ACT]
GO
ALTER TABLE [dbo].[RCRA_EM_EMANIFEST]  WITH CHECK ADD  CONSTRAINT [FK_EM_EMANIFEST_EM_SUBM] FOREIGN KEY([EM_SUBM_ID])
    REFERENCES [dbo].[RCRA_EM_SUBM] ([EM_SUBM_ID])
    ON DELETE CASCADE
GO
ALTER TABLE [dbo].[RCRA_EM_EMANIFEST] CHECK CONSTRAINT [FK_EM_EMANIFEST_EM_SUBM]
GO
ALTER TABLE [dbo].[RCRA_EM_EMANIFEST_COMMENT]  WITH CHECK ADD  CONSTRAINT [FK_EM_EMNIFST_CMMNT_EM_EMNIFST] FOREIGN KEY([EM_EMANIFEST_ID])
    REFERENCES [dbo].[RCRA_EM_EMANIFEST] ([EM_EMANIFEST_ID])
    ON DELETE CASCADE
GO
ALTER TABLE [dbo].[RCRA_EM_EMANIFEST_COMMENT] CHECK CONSTRAINT [FK_EM_EMNIFST_CMMNT_EM_EMNIFST]
GO
ALTER TABLE [dbo].[RCRA_EM_HANDLER]  WITH CHECK ADD  CONSTRAINT [FK_EM_HANDLER_EM_EMANIFEST] FOREIGN KEY([EM_EMANIFEST_ID])
    REFERENCES [dbo].[RCRA_EM_EMANIFEST] ([EM_EMANIFEST_ID])
    ON DELETE CASCADE
GO
ALTER TABLE [dbo].[RCRA_EM_HANDLER] CHECK CONSTRAINT [FK_EM_HANDLER_EM_EMANIFEST]
GO
ALTER TABLE [dbo].[RCRA_EM_TR_NUM_ORIG]  WITH CHECK ADD  CONSTRAINT [FK_EM_TR_NM_EMNIFST_EM_EMNIFST] FOREIGN KEY([EM_EMANIFEST_ID])
    REFERENCES [dbo].[RCRA_EM_EMANIFEST] ([EM_EMANIFEST_ID])
    ON DELETE CASCADE
GO
ALTER TABLE [dbo].[RCRA_EM_TR_NUM_ORIG] CHECK CONSTRAINT [FK_EM_TR_NM_EMNIFST_EM_EMNIFST]
GO
ALTER TABLE [dbo].[RCRA_EM_TR_NUM_REJ]  WITH CHECK ADD  CONSTRAINT [FK_EM_TR_NUM_REJ_EM_EMANIFEST] FOREIGN KEY([EM_EMANIFEST_ID])
    REFERENCES [dbo].[RCRA_EM_EMANIFEST] ([EM_EMANIFEST_ID])
    ON DELETE CASCADE
GO
ALTER TABLE [dbo].[RCRA_EM_TR_NUM_REJ] CHECK CONSTRAINT [FK_EM_TR_NUM_REJ_EM_EMANIFEST]
GO
ALTER TABLE [dbo].[RCRA_EM_TR_NUM_RESIDUE_NEW]  WITH CHECK ADD  CONSTRAINT [FK_EM_TR_NM_RSDUE_NW_EM_EMNFST] FOREIGN KEY([EM_EMANIFEST_ID])
    REFERENCES [dbo].[RCRA_EM_EMANIFEST] ([EM_EMANIFEST_ID])
    ON DELETE CASCADE
GO
ALTER TABLE [dbo].[RCRA_EM_TR_NUM_RESIDUE_NEW] CHECK CONSTRAINT [FK_EM_TR_NM_RSDUE_NW_EM_EMNFST]
GO
ALTER TABLE [dbo].[RCRA_EM_TR_NUM_WASTE]  WITH CHECK ADD  CONSTRAINT [FK_EM_TR_NUM_WASTE_EM_WASTE] FOREIGN KEY([EM_WASTE_ID])
    REFERENCES [dbo].[RCRA_EM_WASTE] ([EM_WASTE_ID])
    ON DELETE CASCADE
GO
ALTER TABLE [dbo].[RCRA_EM_TR_NUM_WASTE] CHECK CONSTRAINT [FK_EM_TR_NUM_WASTE_EM_WASTE]
GO
ALTER TABLE [dbo].[RCRA_EM_WASTE]  WITH CHECK ADD  CONSTRAINT [FK_EM_WASTE_EM_EMANIFEST] FOREIGN KEY([EM_EMANIFEST_ID])
    REFERENCES [dbo].[RCRA_EM_EMANIFEST] ([EM_EMANIFEST_ID])
    ON DELETE CASCADE
GO
ALTER TABLE [dbo].[RCRA_EM_WASTE] CHECK CONSTRAINT [FK_EM_WASTE_EM_EMANIFEST]
GO
ALTER TABLE [dbo].[RCRA_EM_WASTE_CD_FED]  WITH CHECK ADD  CONSTRAINT [FK_EM_WASTE_CD_FED_EM_WASTE] FOREIGN KEY([EM_WASTE_ID])
    REFERENCES [dbo].[RCRA_EM_WASTE] ([EM_WASTE_ID])
    ON DELETE CASCADE
GO
ALTER TABLE [dbo].[RCRA_EM_WASTE_CD_FED] CHECK CONSTRAINT [FK_EM_WASTE_CD_FED_EM_WASTE]
GO
ALTER TABLE [dbo].[RCRA_EM_WASTE_CD_GEN]  WITH CHECK ADD  CONSTRAINT [FK_EM_WASTE_CD_GEN_EM_WASTE] FOREIGN KEY([EM_WASTE_ID])
    REFERENCES [dbo].[RCRA_EM_WASTE] ([EM_WASTE_ID])
    ON DELETE CASCADE
GO
ALTER TABLE [dbo].[RCRA_EM_WASTE_CD_GEN] CHECK CONSTRAINT [FK_EM_WASTE_CD_GEN_EM_WASTE]
GO
ALTER TABLE [dbo].[RCRA_EM_WASTE_CD_TRANS]  WITH CHECK ADD  CONSTRAINT [FK_EM_WASTE_CD_TRANS_EM_WASTE] FOREIGN KEY([EM_WASTE_ID])
    REFERENCES [dbo].[RCRA_EM_WASTE] ([EM_WASTE_ID])
    ON DELETE CASCADE
GO
ALTER TABLE [dbo].[RCRA_EM_WASTE_CD_TRANS] CHECK CONSTRAINT [FK_EM_WASTE_CD_TRANS_EM_WASTE]
GO
ALTER TABLE [dbo].[RCRA_EM_WASTE_CD_TSDF]  WITH CHECK ADD  CONSTRAINT [FK_EM_WASTE_CD_TSDF_EM_WASTE] FOREIGN KEY([EM_WASTE_ID])
    REFERENCES [dbo].[RCRA_EM_WASTE] ([EM_WASTE_ID])
    ON DELETE CASCADE
GO
ALTER TABLE [dbo].[RCRA_EM_WASTE_CD_TSDF] CHECK CONSTRAINT [FK_EM_WASTE_CD_TSDF_EM_WASTE]
GO
ALTER TABLE [dbo].[RCRA_EM_WASTE_COMMENT]  WITH CHECK ADD  CONSTRAINT [FK_EM_WASTE_COMMENT_EM_WASTE] FOREIGN KEY([EM_WASTE_ID])
    REFERENCES [dbo].[RCRA_EM_WASTE] ([EM_WASTE_ID])
    ON DELETE CASCADE
GO
ALTER TABLE [dbo].[RCRA_EM_WASTE_COMMENT] CHECK CONSTRAINT [FK_EM_WASTE_COMMENT_EM_WASTE]
GO
ALTER TABLE [dbo].[RCRA_EM_WASTE_PCB]  WITH CHECK ADD  CONSTRAINT [FK_EM_WASTE_PCB_EM_WASTE] FOREIGN KEY([EM_WASTE_ID])
    REFERENCES [dbo].[RCRA_EM_WASTE] ([EM_WASTE_ID])
    ON DELETE CASCADE
GO
ALTER TABLE [dbo].[RCRA_EM_WASTE_PCB] CHECK CONSTRAINT [FK_EM_WASTE_PCB_EM_WASTE]
GO
ALTER TABLE [dbo].[RCRA_FA_COST_EST]  WITH CHECK ADD  CONSTRAINT [FK_FA_COST_EST_FA_FAC_SUBM] FOREIGN KEY([FA_FAC_SUBM_ID])
    REFERENCES [dbo].[RCRA_FA_FAC_SUBM] ([FA_FAC_SUBM_ID])
    ON DELETE CASCADE
GO
ALTER TABLE [dbo].[RCRA_FA_COST_EST] CHECK CONSTRAINT [FK_FA_COST_EST_FA_FAC_SUBM]
GO
ALTER TABLE [dbo].[RCRA_FA_COST_EST_REL_MECHANISM]  WITH CHECK ADD  CONSTRAINT [FK_FA_CST_EST_RL_MCH_FA_CST_ES] FOREIGN KEY([FA_COST_EST_ID])
    REFERENCES [dbo].[RCRA_FA_COST_EST] ([FA_COST_EST_ID])
    ON DELETE CASCADE
GO
ALTER TABLE [dbo].[RCRA_FA_COST_EST_REL_MECHANISM] CHECK CONSTRAINT [FK_FA_CST_EST_RL_MCH_FA_CST_ES]
GO
ALTER TABLE [dbo].[RCRA_FA_MECHANISM]  WITH CHECK ADD  CONSTRAINT [FK_FA_MECHANISM_FA_FAC_SUBM] FOREIGN KEY([FA_FAC_SUBM_ID])
    REFERENCES [dbo].[RCRA_FA_FAC_SUBM] ([FA_FAC_SUBM_ID])
    ON DELETE CASCADE
GO
ALTER TABLE [dbo].[RCRA_FA_MECHANISM] CHECK CONSTRAINT [FK_FA_MECHANISM_FA_FAC_SUBM]
GO
ALTER TABLE [dbo].[RCRA_FA_MECHANISM_DETAIL]  WITH CHECK ADD  CONSTRAINT [FK_FA_MECHNISM_DTIL_FA_MCHNISM] FOREIGN KEY([FA_MECHANISM_ID])
    REFERENCES [dbo].[RCRA_FA_MECHANISM] ([FA_MECHANISM_ID])
    ON DELETE CASCADE
GO
ALTER TABLE [dbo].[RCRA_FA_MECHANISM_DETAIL] CHECK CONSTRAINT [FK_FA_MECHNISM_DTIL_FA_MCHNISM]
GO
ALTER TABLE [dbo].[RCRA_GIS_GEO_INFORMATION]  WITH CHECK ADD  CONSTRAINT [FK_GIS_GO_INFORMTION_GS_FC_SBM] FOREIGN KEY([GIS_FAC_SUBM_ID])
    REFERENCES [dbo].[RCRA_GIS_FAC_SUBM] ([GIS_FAC_SUBM_ID])
    ON DELETE CASCADE
GO
ALTER TABLE [dbo].[RCRA_GIS_GEO_INFORMATION] CHECK CONSTRAINT [FK_GIS_GO_INFORMTION_GS_FC_SBM]
GO
ALTER TABLE [dbo].[RCRA_HD_CERTIFICATION]  WITH CHECK ADD  CONSTRAINT [FK_HD_CERTIFICATION_HD_HANDLER] FOREIGN KEY([HD_HANDLER_ID])
    REFERENCES [dbo].[RCRA_HD_HANDLER] ([HD_HANDLER_ID])
    ON DELETE CASCADE
GO
ALTER TABLE [dbo].[RCRA_HD_CERTIFICATION] CHECK CONSTRAINT [FK_HD_CERTIFICATION_HD_HANDLER]
GO
ALTER TABLE [dbo].[RCRA_HD_ENV_PERMIT]  WITH CHECK ADD  CONSTRAINT [FK_HD_ENV_PERMIT_HD_HANDLER] FOREIGN KEY([HD_HANDLER_ID])
    REFERENCES [dbo].[RCRA_HD_HANDLER] ([HD_HANDLER_ID])
    ON DELETE CASCADE
GO
ALTER TABLE [dbo].[RCRA_HD_ENV_PERMIT] CHECK CONSTRAINT [FK_HD_ENV_PERMIT_HD_HANDLER]
GO
ALTER TABLE [dbo].[RCRA_HD_EPISODIC_EVENT]  WITH CHECK ADD  CONSTRAINT [FK_HD_EPISODIC_EVENT_HD_HANDLE] FOREIGN KEY([HD_HANDLER_ID])
    REFERENCES [dbo].[RCRA_HD_HANDLER] ([HD_HANDLER_ID])
    ON DELETE CASCADE
GO
ALTER TABLE [dbo].[RCRA_HD_EPISODIC_EVENT] CHECK CONSTRAINT [FK_HD_EPISODIC_EVENT_HD_HANDLE]
GO
ALTER TABLE [dbo].[RCRA_HD_EPISODIC_WASTE]  WITH CHECK ADD  CONSTRAINT [FK_HD_EPISO_WASTE_HD_EPIS_EVEN] FOREIGN KEY([HD_EPISODIC_EVENT_ID])
    REFERENCES [dbo].[RCRA_HD_EPISODIC_EVENT] ([HD_EPISODIC_EVENT_ID])
    ON DELETE CASCADE
GO
ALTER TABLE [dbo].[RCRA_HD_EPISODIC_WASTE] CHECK CONSTRAINT [FK_HD_EPISO_WASTE_HD_EPIS_EVEN]
GO
ALTER TABLE [dbo].[RCRA_HD_EPISODIC_WASTE_CODE]  WITH CHECK ADD  CONSTRAINT [FK_HD_EPIS_WAST_COD_HD_EPI_WAS] FOREIGN KEY([HD_EPISODIC_WASTE_ID])
    REFERENCES [dbo].[RCRA_HD_EPISODIC_WASTE] ([HD_EPISODIC_WASTE_ID])
    ON DELETE CASCADE
GO
ALTER TABLE [dbo].[RCRA_HD_EPISODIC_WASTE_CODE] CHECK CONSTRAINT [FK_HD_EPIS_WAST_COD_HD_EPI_WAS]
GO
ALTER TABLE [dbo].[RCRA_HD_HANDLER]  WITH CHECK ADD  CONSTRAINT [FK_HD_HANDLER_HD_HBASIC] FOREIGN KEY([HD_HBASIC_ID])
    REFERENCES [dbo].[RCRA_HD_HBASIC] ([HD_HBASIC_ID])
    ON DELETE CASCADE
GO
ALTER TABLE [dbo].[RCRA_HD_HANDLER] CHECK CONSTRAINT [FK_HD_HANDLER_HD_HBASIC]
GO
ALTER TABLE [dbo].[RCRA_HD_LQG_CLOSURE]  WITH CHECK ADD  CONSTRAINT [FK_HD_LQG_CLOSURE_HD_HANDLER] FOREIGN KEY([HD_HANDLER_ID])
    REFERENCES [dbo].[RCRA_HD_HANDLER] ([HD_HANDLER_ID])
    ON DELETE CASCADE
GO
ALTER TABLE [dbo].[RCRA_HD_LQG_CLOSURE] CHECK CONSTRAINT [FK_HD_LQG_CLOSURE_HD_HANDLER]
GO
ALTER TABLE [dbo].[RCRA_HD_LQG_CONSOLIDATION]  WITH CHECK ADD  CONSTRAINT [FK_HD_LQG_CONSOLIDATI_HD_HANDL] FOREIGN KEY([HD_HANDLER_ID])
    REFERENCES [dbo].[RCRA_HD_HANDLER] ([HD_HANDLER_ID])
    ON DELETE CASCADE
GO
ALTER TABLE [dbo].[RCRA_HD_LQG_CONSOLIDATION] CHECK CONSTRAINT [FK_HD_LQG_CONSOLIDATI_HD_HANDL]
GO
ALTER TABLE [dbo].[RCRA_HD_NAICS]  WITH CHECK ADD  CONSTRAINT [FK_HD_NAICS_HD_HANDLER] FOREIGN KEY([HD_HANDLER_ID])
    REFERENCES [dbo].[RCRA_HD_HANDLER] ([HD_HANDLER_ID])
    ON DELETE CASCADE
GO
ALTER TABLE [dbo].[RCRA_HD_NAICS] CHECK CONSTRAINT [FK_HD_NAICS_HD_HANDLER]
GO
ALTER TABLE [dbo].[RCRA_HD_OTHER_ID]  WITH CHECK ADD  CONSTRAINT [FK_HD_OTHER_ID_HD_HBASIC] FOREIGN KEY([HD_HBASIC_ID])
    REFERENCES [dbo].[RCRA_HD_HBASIC] ([HD_HBASIC_ID])
    ON DELETE CASCADE
GO
ALTER TABLE [dbo].[RCRA_HD_OTHER_ID] CHECK CONSTRAINT [FK_HD_OTHER_ID_HD_HBASIC]
GO
ALTER TABLE [dbo].[RCRA_HD_OWNEROP]  WITH CHECK ADD  CONSTRAINT [FK_HD_OWNEROP_HD_HANDLER] FOREIGN KEY([HD_HANDLER_ID])
    REFERENCES [dbo].[RCRA_HD_HANDLER] ([HD_HANDLER_ID])
    ON DELETE CASCADE
GO
ALTER TABLE [dbo].[RCRA_HD_OWNEROP] CHECK CONSTRAINT [FK_HD_OWNEROP_HD_HANDLER]
GO
ALTER TABLE [dbo].[RCRA_HD_SEC_MATERIAL_ACTIVITY]  WITH CHECK ADD  CONSTRAINT [FK_HD_SEC_MATER_ACTIV_HD_HANDL] FOREIGN KEY([HD_HANDLER_ID])
    REFERENCES [dbo].[RCRA_HD_HANDLER] ([HD_HANDLER_ID])
    ON DELETE CASCADE
GO
ALTER TABLE [dbo].[RCRA_HD_SEC_MATERIAL_ACTIVITY] CHECK CONSTRAINT [FK_HD_SEC_MATER_ACTIV_HD_HANDL]
GO
ALTER TABLE [dbo].[RCRA_HD_SEC_WASTE_CODE]  WITH CHECK ADD  CONSTRAINT [FK_HD_SEC_WAS_COD_HD_SEC_MA_AC] FOREIGN KEY([HD_SEC_MATERIAL_ACTIVITY_ID])
    REFERENCES [dbo].[RCRA_HD_SEC_MATERIAL_ACTIVITY] ([HD_SEC_MATERIAL_ACTIVITY_ID])
    ON DELETE CASCADE
GO
ALTER TABLE [dbo].[RCRA_HD_SEC_WASTE_CODE] CHECK CONSTRAINT [FK_HD_SEC_WAS_COD_HD_SEC_MA_AC]
GO
ALTER TABLE [dbo].[RCRA_HD_STATE_ACTIVITY]  WITH CHECK ADD  CONSTRAINT [FK_HD_STATE_ACTIVITY_HD_HANDLE] FOREIGN KEY([HD_HANDLER_ID])
    REFERENCES [dbo].[RCRA_HD_HANDLER] ([HD_HANDLER_ID])
    ON DELETE CASCADE
GO
ALTER TABLE [dbo].[RCRA_HD_STATE_ACTIVITY] CHECK CONSTRAINT [FK_HD_STATE_ACTIVITY_HD_HANDLE]
GO
ALTER TABLE [dbo].[RCRA_HD_UNIVERSAL_WASTE]  WITH CHECK ADD  CONSTRAINT [FK_HD_UNIVERSA_WASTE_HD_HANDLE] FOREIGN KEY([HD_HANDLER_ID])
    REFERENCES [dbo].[RCRA_HD_HANDLER] ([HD_HANDLER_ID])
    ON DELETE CASCADE
GO
ALTER TABLE [dbo].[RCRA_HD_UNIVERSAL_WASTE] CHECK CONSTRAINT [FK_HD_UNIVERSA_WASTE_HD_HANDLE]
GO
ALTER TABLE [dbo].[RCRA_HD_WASTE_CODE]  WITH CHECK ADD  CONSTRAINT [FK_HD_WASTE_CODE_HD_HANDLER] FOREIGN KEY([HD_HANDLER_ID])
    REFERENCES [dbo].[RCRA_HD_HANDLER] ([HD_HANDLER_ID])
    ON DELETE CASCADE
GO
ALTER TABLE [dbo].[RCRA_HD_WASTE_CODE] CHECK CONSTRAINT [FK_HD_WASTE_CODE_HD_HANDLER]
GO
ALTER TABLE [dbo].[RCRA_PRM_EVENT]  WITH CHECK ADD  CONSTRAINT [FK_PRM_EVENT_PRM_SERIES] FOREIGN KEY([PRM_SERIES_ID])
    REFERENCES [dbo].[RCRA_PRM_SERIES] ([PRM_SERIES_ID])
    ON DELETE CASCADE
GO
ALTER TABLE [dbo].[RCRA_PRM_EVENT] CHECK CONSTRAINT [FK_PRM_EVENT_PRM_SERIES]
GO
ALTER TABLE [dbo].[RCRA_PRM_EVENT_COMMITMENT]  WITH CHECK ADD  CONSTRAINT [FK_PRM_EVNT_COMMITMNT_PRM_EVNT] FOREIGN KEY([PRM_EVENT_ID])
    REFERENCES [dbo].[RCRA_PRM_EVENT] ([PRM_EVENT_ID])
    ON DELETE CASCADE
GO
ALTER TABLE [dbo].[RCRA_PRM_EVENT_COMMITMENT] CHECK CONSTRAINT [FK_PRM_EVNT_COMMITMNT_PRM_EVNT]
GO
ALTER TABLE [dbo].[RCRA_PRM_RELATED_EVENT]  WITH CHECK ADD  CONSTRAINT [FK_PRM_RELTD_EVNT_PRM_UNT_DTIL] FOREIGN KEY([PRM_UNIT_DETAIL_ID])
    REFERENCES [dbo].[RCRA_PRM_UNIT_DETAIL] ([PRM_UNIT_DETAIL_ID])
    ON DELETE CASCADE
GO
ALTER TABLE [dbo].[RCRA_PRM_RELATED_EVENT] CHECK CONSTRAINT [FK_PRM_RELTD_EVNT_PRM_UNT_DTIL]
GO
ALTER TABLE [dbo].[RCRA_PRM_SERIES]  WITH CHECK ADD  CONSTRAINT [FK_PRM_SERIES_PRM_FAC_SUBM] FOREIGN KEY([PRM_FAC_SUBM_ID])
    REFERENCES [dbo].[RCRA_PRM_FAC_SUBM] ([PRM_FAC_SUBM_ID])
    ON DELETE CASCADE
GO
ALTER TABLE [dbo].[RCRA_PRM_SERIES] CHECK CONSTRAINT [FK_PRM_SERIES_PRM_FAC_SUBM]
GO
ALTER TABLE [dbo].[RCRA_PRM_UNIT]  WITH CHECK ADD  CONSTRAINT [FK_PRM_UNIT_PRM_FAC_SUBM] FOREIGN KEY([PRM_FAC_SUBM_ID])
    REFERENCES [dbo].[RCRA_PRM_FAC_SUBM] ([PRM_FAC_SUBM_ID])
    ON DELETE CASCADE
GO
ALTER TABLE [dbo].[RCRA_PRM_UNIT] CHECK CONSTRAINT [FK_PRM_UNIT_PRM_FAC_SUBM]
GO
ALTER TABLE [dbo].[RCRA_PRM_UNIT_DETAIL]  WITH CHECK ADD  CONSTRAINT [FK_PRM_UNIT_DETAIL_PRM_UNIT] FOREIGN KEY([PRM_UNIT_ID])
    REFERENCES [dbo].[RCRA_PRM_UNIT] ([PRM_UNIT_ID])
    ON DELETE CASCADE
GO
ALTER TABLE [dbo].[RCRA_PRM_UNIT_DETAIL] CHECK CONSTRAINT [FK_PRM_UNIT_DETAIL_PRM_UNIT]
GO
ALTER TABLE [dbo].[RCRA_PRM_WASTE_CODE]  WITH CHECK ADD  CONSTRAINT [FK_PRM_WASTE_CDE_PRM_UNT_DETIL] FOREIGN KEY([PRM_UNIT_DETAIL_ID])
    REFERENCES [dbo].[RCRA_PRM_UNIT_DETAIL] ([PRM_UNIT_DETAIL_ID])
    ON DELETE CASCADE
GO
ALTER TABLE [dbo].[RCRA_PRM_WASTE_CODE] CHECK CONSTRAINT [FK_PRM_WASTE_CDE_PRM_UNT_DETIL]
GO
ALTER TABLE [dbo].[RCRA_RU_REPORT_UNIV_SUBM]  WITH CHECK ADD  CONSTRAINT [FK_RU_REPORT_UNIV_SUBM_RU_SUBM] FOREIGN KEY([RU_SUBM_ID])
    REFERENCES [dbo].[RCRA_RU_SUBM] ([RU_SUBM_ID])
    ON DELETE CASCADE
GO
ALTER TABLE [dbo].[RCRA_RU_REPORT_UNIV_SUBM] CHECK CONSTRAINT [FK_RU_REPORT_UNIV_SUBM_RU_SUBM]
GO
/****** Object:  StoredProcedure [dbo].[CA_LOG_HANDLERS]    Script Date: 6/12/2019 2:50:58 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--
-- Instructions:
-- 1: Run this script in the reporting database.
--

/*************************************************************************************************
** ObjectName: CA_LOG_HANDLERS.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Logs information about merged CA handlers
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  06/12/2019   ageery      Created.
**
***************************************************************************************************/ --
    CREATE PROCEDURE [dbo].[CA_LOG_HANDLERS] @CA_SUBM_ID varchar(40) AS
    BEGIN
        SET NOCOUNT ON;
SET XACT_ABORT,
    QUOTED_IDENTIFIER,
    ANSI_NULLS,
    ANSI_PADDING,
    ANSI_WARNINGS,
    ARITHABORT,
    CONCAT_NULL_YIELDS_NULL ON;
SET NUMERIC_ROUNDABORT OFF;

DECLARE @int INT;

DECLARE @localTran BIT
IF @@TRANCOUNT = 0
BEGIN
    SET @localTran = 1
    BEGIN TRANSACTION LocalTran
END

BEGIN TRY
        INSERT INTO ETL_RUN (RUN_DATE, ETL_TYPE, SUBM_ID)
        VALUES (CURRENT_TIMESTAMP, 'CA', @CA_SUBM_ID);
        INSERT INTO ETL_RUN_HANDLER (ETL_RUN_ID, HANDLER_ID, STATUS_TYPE)
        SELECT SCOPE_IDENTITY(), HANDLER_ID,
               CASE
                   WHEN
                       CA_FAC_SUBM_ID IS NULL
                       THEN
                       'I'
                   ELSE
                       'U'
                   END
        FROM ETL_CA_FAC_SUBM_VW
        WHERE CA_SUBM_ID = @CA_SUBM_ID;
        IF @localTran = 1 AND XACT_STATE() = 1
        COMMIT TRAN LocalTran

END TRY
BEGIN CATCH

    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT

    SELECT  @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE()

    IF @localTran = 1 AND XACT_STATE() <> 0
        ROLLBACK TRAN

    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

END CATCH
    END
GO
/****** Object:  StoredProcedure [dbo].[CA_MERGE_AREA]    Script Date: 6/12/2019 2:50:58 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*************************************************************************************************
** ObjectName: CA_MERGE_AREA.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_CA_AREA table 
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  05/31/2019   ageery      Created.
**
***************************************************************************************************/ --
    CREATE PROCEDURE [dbo].[CA_MERGE_AREA] @CA_SUBM_ID varchar(40) AS
    BEGIN
        SET NOCOUNT ON;
SET XACT_ABORT,
    QUOTED_IDENTIFIER,
    ANSI_NULLS,
    ANSI_PADDING,
    ANSI_WARNINGS,
    ARITHABORT,
    CONCAT_NULL_YIELDS_NULL ON;
SET NUMERIC_ROUNDABORT OFF;

DECLARE @int INT;

DECLARE @localTran BIT
IF @@TRANCOUNT = 0
BEGIN
    SET @localTran = 1
    BEGIN TRANSACTION LocalTran
END

BEGIN TRY
        MERGE INTO RCRA_CA_AREA D
        USING (SELECT *
               FROM ETL_CA_AREA_VW
               WHERE CA_SUBM_ID = @CA_SUBM_ID) S
        ON (D.CA_AREA_ID = S.WH_CA_AREA_ID)
        WHEN MATCHED
            AND (
                    (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NOT NULL AND D.TRANS_CODE <> S.TRANS_CODE)
                    OR (D.TRANS_CODE IS NULL AND S.TRANS_CODE IS NOT NULL)
                    OR (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NULL)
                    OR (D.AREA_SEQ_NUM IS NOT NULL AND S.AREA_SEQ_NUM IS NOT NULL AND D.AREA_SEQ_NUM <> S.AREA_SEQ_NUM)
                    OR (D.AREA_SEQ_NUM IS NULL AND S.AREA_SEQ_NUM IS NOT NULL)
                    OR (D.AREA_SEQ_NUM IS NOT NULL AND S.AREA_SEQ_NUM IS NULL)
                    OR (D.FAC_WIDE_IND IS NOT NULL AND S.FAC_WIDE_IND IS NOT NULL AND D.FAC_WIDE_IND <> S.FAC_WIDE_IND)
                    OR (D.FAC_WIDE_IND IS NULL AND S.FAC_WIDE_IND IS NOT NULL)
                    OR (D.FAC_WIDE_IND IS NOT NULL AND S.FAC_WIDE_IND IS NULL)
                    OR (D.AREA_NAME IS NOT NULL AND S.AREA_NAME IS NOT NULL AND D.AREA_NAME <> S.AREA_NAME)
                    OR (D.AREA_NAME IS NULL AND S.AREA_NAME IS NOT NULL)
                    OR (D.AREA_NAME IS NOT NULL AND S.AREA_NAME IS NULL)
                    OR (D.AIR_REL_IND IS NOT NULL AND S.AIR_REL_IND IS NOT NULL AND D.AIR_REL_IND <> S.AIR_REL_IND)
                    OR (D.AIR_REL_IND IS NULL AND S.AIR_REL_IND IS NOT NULL)
                    OR (D.AIR_REL_IND IS NOT NULL AND S.AIR_REL_IND IS NULL)
                    OR (D.GROUNDWATER_REL_IND IS NOT NULL AND S.GROUNDWATER_REL_IND IS NOT NULL AND
                        D.GROUNDWATER_REL_IND <> S.GROUNDWATER_REL_IND)
                    OR (D.GROUNDWATER_REL_IND IS NULL AND S.GROUNDWATER_REL_IND IS NOT NULL)
                    OR (D.GROUNDWATER_REL_IND IS NOT NULL AND S.GROUNDWATER_REL_IND IS NULL)
                    OR (D.SOIL_REL_IND IS NOT NULL AND S.SOIL_REL_IND IS NOT NULL AND D.SOIL_REL_IND <> S.SOIL_REL_IND)
                    OR (D.SOIL_REL_IND IS NULL AND S.SOIL_REL_IND IS NOT NULL)
                    OR (D.SOIL_REL_IND IS NOT NULL AND S.SOIL_REL_IND IS NULL)
                    OR (D.SURFACE_WATER_REL_IND IS NOT NULL AND S.SURFACE_WATER_REL_IND IS NOT NULL AND
                        D.SURFACE_WATER_REL_IND <> S.SURFACE_WATER_REL_IND)
                    OR (D.SURFACE_WATER_REL_IND IS NULL AND S.SURFACE_WATER_REL_IND IS NOT NULL)
                    OR (D.SURFACE_WATER_REL_IND IS NOT NULL AND S.SURFACE_WATER_REL_IND IS NULL)
                    OR (D.REGULATED_UNIT_IND IS NOT NULL AND S.REGULATED_UNIT_IND IS NOT NULL AND
                        D.REGULATED_UNIT_IND <> S.REGULATED_UNIT_IND)
                    OR (D.REGULATED_UNIT_IND IS NULL AND S.REGULATED_UNIT_IND IS NOT NULL)
                    OR (D.REGULATED_UNIT_IND IS NOT NULL AND S.REGULATED_UNIT_IND IS NULL)
                    OR
                    (D.EPA_RESP_PERSON_DATA_OWNER_CDE IS NOT NULL AND S.EPA_RESP_PERSON_DATA_OWNER_CDE IS NOT NULL AND
                     D.EPA_RESP_PERSON_DATA_OWNER_CDE <> S.EPA_RESP_PERSON_DATA_OWNER_CDE)
                    OR (D.EPA_RESP_PERSON_DATA_OWNER_CDE IS NULL AND S.EPA_RESP_PERSON_DATA_OWNER_CDE IS NOT NULL)
                    OR (D.EPA_RESP_PERSON_DATA_OWNER_CDE IS NOT NULL AND S.EPA_RESP_PERSON_DATA_OWNER_CDE IS NULL)
                    OR (D.EPA_RESP_PERSON_ID IS NOT NULL AND S.EPA_RESP_PERSON_ID IS NOT NULL AND
                        D.EPA_RESP_PERSON_ID <> S.EPA_RESP_PERSON_ID)
                    OR (D.EPA_RESP_PERSON_ID IS NULL AND S.EPA_RESP_PERSON_ID IS NOT NULL)
                    OR (D.EPA_RESP_PERSON_ID IS NOT NULL AND S.EPA_RESP_PERSON_ID IS NULL)
                    OR
                    (D.STA_RESP_PERSON_DATA_OWNER_CDE IS NOT NULL AND S.STA_RESP_PERSON_DATA_OWNER_CDE IS NOT NULL AND
                     D.STA_RESP_PERSON_DATA_OWNER_CDE <> S.STA_RESP_PERSON_DATA_OWNER_CDE)
                    OR (D.STA_RESP_PERSON_DATA_OWNER_CDE IS NULL AND S.STA_RESP_PERSON_DATA_OWNER_CDE IS NOT NULL)
                    OR (D.STA_RESP_PERSON_DATA_OWNER_CDE IS NOT NULL AND S.STA_RESP_PERSON_DATA_OWNER_CDE IS NULL)
                    OR (D.STA_RESP_PERSON_ID IS NOT NULL AND S.STA_RESP_PERSON_ID IS NOT NULL AND
                        D.STA_RESP_PERSON_ID <> S.STA_RESP_PERSON_ID)
                    OR (D.STA_RESP_PERSON_ID IS NULL AND S.STA_RESP_PERSON_ID IS NOT NULL)
                    OR (D.STA_RESP_PERSON_ID IS NOT NULL AND S.STA_RESP_PERSON_ID IS NULL)
                    OR
                    (D.SUPP_INFO_TXT IS NOT NULL AND S.SUPP_INFO_TXT IS NOT NULL AND D.SUPP_INFO_TXT <> S.SUPP_INFO_TXT)
                    OR (D.SUPP_INFO_TXT IS NULL AND S.SUPP_INFO_TXT IS NOT NULL)
                    OR (D.SUPP_INFO_TXT IS NOT NULL AND S.SUPP_INFO_TXT IS NULL)
                )
            THEN
            UPDATE
            SET D.TRANS_CODE                     = S.TRANS_CODE,
                D.AREA_SEQ_NUM                   = S.AREA_SEQ_NUM,
                D.FAC_WIDE_IND                   = S.FAC_WIDE_IND,
                D.AREA_NAME                      = S.AREA_NAME,
                D.AIR_REL_IND                    = S.AIR_REL_IND,
                D.GROUNDWATER_REL_IND            = S.GROUNDWATER_REL_IND,
                D.SOIL_REL_IND                   = S.SOIL_REL_IND,
                D.SURFACE_WATER_REL_IND          = S.SURFACE_WATER_REL_IND,
                D.REGULATED_UNIT_IND             = S.REGULATED_UNIT_IND,
                D.EPA_RESP_PERSON_DATA_OWNER_CDE = S.EPA_RESP_PERSON_DATA_OWNER_CDE,
                D.EPA_RESP_PERSON_ID             = S.EPA_RESP_PERSON_ID,
                D.STA_RESP_PERSON_DATA_OWNER_CDE = S.STA_RESP_PERSON_DATA_OWNER_CDE,
                D.STA_RESP_PERSON_ID             = S.STA_RESP_PERSON_ID,
                D.SUPP_INFO_TXT                  = S.SUPP_INFO_TXT
        WHEN NOT MATCHED THEN
            INSERT (CA_FAC_SUBM_ID,
                    TRANS_CODE,
                    AREA_SEQ_NUM,
                    FAC_WIDE_IND,
                    AREA_NAME,
                    AIR_REL_IND,
                    GROUNDWATER_REL_IND,
                    SOIL_REL_IND,
                    SURFACE_WATER_REL_IND,
                    REGULATED_UNIT_IND,
                    EPA_RESP_PERSON_DATA_OWNER_CDE,
                    EPA_RESP_PERSON_ID,
                    STA_RESP_PERSON_DATA_OWNER_CDE,
                    STA_RESP_PERSON_ID,
                    SUPP_INFO_TXT)
            VALUES (S.WH_CA_FAC_SUBM_ID,
                    S.TRANS_CODE,
                    S.AREA_SEQ_NUM,
                    S.FAC_WIDE_IND,
                    S.AREA_NAME,
                    S.AIR_REL_IND,
                    S.GROUNDWATER_REL_IND,
                    S.SOIL_REL_IND,
                    S.SURFACE_WATER_REL_IND,
                    S.REGULATED_UNIT_IND,
                    S.EPA_RESP_PERSON_DATA_OWNER_CDE,
                    S.EPA_RESP_PERSON_ID,
                    S.STA_RESP_PERSON_DATA_OWNER_CDE,
                    S.STA_RESP_PERSON_ID,
                    S.SUPP_INFO_TXT);
        IF @localTran = 1 AND XACT_STATE() = 1
        COMMIT TRAN LocalTran

END TRY
BEGIN CATCH

    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT

    SELECT  @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE()

    IF @localTran = 1 AND XACT_STATE() <> 0
        ROLLBACK TRAN

    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

END CATCH
    END
GO
/****** Object:  StoredProcedure [dbo].[CA_MERGE_AREA_REL_EVENT]    Script Date: 6/12/2019 2:50:58 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*************************************************************************************************
** ObjectName: CA_MERGE_AREA_REL_EVENT.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_CA_AREA_REL_EVENT table 
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  05/31/2019   ageery      Created.
**
***************************************************************************************************/ --
    CREATE PROCEDURE [dbo].[CA_MERGE_AREA_REL_EVENT] @CA_SUBM_ID varchar(40) AS
    BEGIN
        SET NOCOUNT ON;
SET XACT_ABORT,
    QUOTED_IDENTIFIER,
    ANSI_NULLS,
    ANSI_PADDING,
    ANSI_WARNINGS,
    ARITHABORT,
    CONCAT_NULL_YIELDS_NULL ON;
SET NUMERIC_ROUNDABORT OFF;

DECLARE @int INT;

DECLARE @localTran BIT
IF @@TRANCOUNT = 0
BEGIN
    SET @localTran = 1
    BEGIN TRANSACTION LocalTran
END

BEGIN TRY
        MERGE INTO RCRA_CA_AREA_REL_EVENT D
        USING (SELECT *
               FROM ETL_CA_AREA_REL_EVENT_VW
               WHERE CA_SUBM_ID = @CA_SUBM_ID) S
        ON (D.CA_AREA_REL_EVENT_ID = S.WH_CA_AREA_REL_EVENT_ID)
        WHEN MATCHED
            AND (
                    (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NOT NULL AND D.TRANS_CODE <> S.TRANS_CODE)
                    OR (D.TRANS_CODE IS NULL AND S.TRANS_CODE IS NOT NULL)
                    OR (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NULL)
                    OR (D.ACT_LOC_CODE IS NOT NULL AND S.ACT_LOC_CODE IS NOT NULL AND D.ACT_LOC_CODE <> S.ACT_LOC_CODE)
                    OR (D.ACT_LOC_CODE IS NULL AND S.ACT_LOC_CODE IS NOT NULL)
                    OR (D.ACT_LOC_CODE IS NOT NULL AND S.ACT_LOC_CODE IS NULL)
                    OR
                    (D.CORCT_ACT_EVENT_DATA_OWNER_CDE IS NOT NULL AND S.CORCT_ACT_EVENT_DATA_OWNER_CDE IS NOT NULL AND
                     D.CORCT_ACT_EVENT_DATA_OWNER_CDE <> S.CORCT_ACT_EVENT_DATA_OWNER_CDE)
                    OR (D.CORCT_ACT_EVENT_DATA_OWNER_CDE IS NULL AND S.CORCT_ACT_EVENT_DATA_OWNER_CDE IS NOT NULL)
                    OR (D.CORCT_ACT_EVENT_DATA_OWNER_CDE IS NOT NULL AND S.CORCT_ACT_EVENT_DATA_OWNER_CDE IS NULL)
                    OR (D.CORCT_ACT_EVENT_CODE IS NOT NULL AND S.CORCT_ACT_EVENT_CODE IS NOT NULL AND
                        D.CORCT_ACT_EVENT_CODE <> S.CORCT_ACT_EVENT_CODE)
                    OR (D.CORCT_ACT_EVENT_CODE IS NULL AND S.CORCT_ACT_EVENT_CODE IS NOT NULL)
                    OR (D.CORCT_ACT_EVENT_CODE IS NOT NULL AND S.CORCT_ACT_EVENT_CODE IS NULL)
                    OR
                    (D.EVENT_AGN_CODE IS NOT NULL AND S.EVENT_AGN_CODE IS NOT NULL AND
                     D.EVENT_AGN_CODE <> S.EVENT_AGN_CODE)
                    OR (D.EVENT_AGN_CODE IS NULL AND S.EVENT_AGN_CODE IS NOT NULL)
                    OR (D.EVENT_AGN_CODE IS NOT NULL AND S.EVENT_AGN_CODE IS NULL)
                    OR
                    (D.EVENT_SEQ_NUM IS NOT NULL AND S.EVENT_SEQ_NUM IS NOT NULL AND D.EVENT_SEQ_NUM <> S.EVENT_SEQ_NUM)
                    OR (D.EVENT_SEQ_NUM IS NULL AND S.EVENT_SEQ_NUM IS NOT NULL)
                    OR (D.EVENT_SEQ_NUM IS NOT NULL AND S.EVENT_SEQ_NUM IS NULL)
                )
            THEN
            UPDATE
            SET D.TRANS_CODE                     = S.TRANS_CODE,
                D.ACT_LOC_CODE                   = S.ACT_LOC_CODE,
                D.CORCT_ACT_EVENT_DATA_OWNER_CDE = S.CORCT_ACT_EVENT_DATA_OWNER_CDE,
                D.CORCT_ACT_EVENT_CODE           = S.CORCT_ACT_EVENT_CODE,
                D.EVENT_AGN_CODE                 = S.EVENT_AGN_CODE,
                D.EVENT_SEQ_NUM                  = S.EVENT_SEQ_NUM
        WHEN NOT MATCHED THEN
            INSERT (CA_AREA_ID,
                    TRANS_CODE,
                    ACT_LOC_CODE,
                    CORCT_ACT_EVENT_DATA_OWNER_CDE,
                    CORCT_ACT_EVENT_CODE,
                    EVENT_AGN_CODE,
                    EVENT_SEQ_NUM)
            VALUES (S.WH_CA_AREA_ID,
                    S.TRANS_CODE,
                    S.ACT_LOC_CODE,
                    S.CORCT_ACT_EVENT_DATA_OWNER_CDE,
                    S.CORCT_ACT_EVENT_CODE,
                    S.EVENT_AGN_CODE,
                    S.EVENT_SEQ_NUM);
        IF @localTran = 1 AND XACT_STATE() = 1
        COMMIT TRAN LocalTran

END TRY
BEGIN CATCH

    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT

    SELECT  @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE()

    IF @localTran = 1 AND XACT_STATE() <> 0
        ROLLBACK TRAN

    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

END CATCH
    END
GO
/****** Object:  StoredProcedure [dbo].[CA_MERGE_AUTH_REL_EVENT]    Script Date: 6/12/2019 2:50:58 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*************************************************************************************************
** ObjectName: CA_MERGE_AUTH_REL_EVENT.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_CA_AUTH_REL_EVENT table 
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  05/31/2019   ageery      Created.
**
***************************************************************************************************/ --
    CREATE PROCEDURE [dbo].[CA_MERGE_AUTH_REL_EVENT] @CA_SUBM_ID varchar(40) AS
    BEGIN
        SET NOCOUNT ON;
SET XACT_ABORT,
    QUOTED_IDENTIFIER,
    ANSI_NULLS,
    ANSI_PADDING,
    ANSI_WARNINGS,
    ARITHABORT,
    CONCAT_NULL_YIELDS_NULL ON;
SET NUMERIC_ROUNDABORT OFF;

DECLARE @int INT;

DECLARE @localTran BIT
IF @@TRANCOUNT = 0
BEGIN
    SET @localTran = 1
    BEGIN TRANSACTION LocalTran
END

BEGIN TRY
        MERGE INTO RCRA_CA_AUTH_REL_EVENT D
        USING (SELECT *
               FROM ETL_CA_AUTH_REL_EVENT_VW
               WHERE CA_SUBM_ID = @CA_SUBM_ID) S
        ON (D.CA_AUTH_REL_EVENT_ID = S.WH_CA_AUTH_REL_EVENT_ID)
        WHEN MATCHED
            AND (
                    (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NOT NULL AND D.TRANS_CODE <> S.TRANS_CODE)
                    OR (D.TRANS_CODE IS NULL AND S.TRANS_CODE IS NOT NULL)
                    OR (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NULL)
                    OR (D.ACT_LOC_CODE IS NOT NULL AND S.ACT_LOC_CODE IS NOT NULL AND D.ACT_LOC_CODE <> S.ACT_LOC_CODE)
                    OR (D.ACT_LOC_CODE IS NULL AND S.ACT_LOC_CODE IS NOT NULL)
                    OR (D.ACT_LOC_CODE IS NOT NULL AND S.ACT_LOC_CODE IS NULL)
                    OR
                    (D.CORCT_ACT_EVENT_DATA_OWNER_CDE IS NOT NULL AND S.CORCT_ACT_EVENT_DATA_OWNER_CDE IS NOT NULL AND
                     D.CORCT_ACT_EVENT_DATA_OWNER_CDE <> S.CORCT_ACT_EVENT_DATA_OWNER_CDE)
                    OR (D.CORCT_ACT_EVENT_DATA_OWNER_CDE IS NULL AND S.CORCT_ACT_EVENT_DATA_OWNER_CDE IS NOT NULL)
                    OR (D.CORCT_ACT_EVENT_DATA_OWNER_CDE IS NOT NULL AND S.CORCT_ACT_EVENT_DATA_OWNER_CDE IS NULL)
                    OR (D.CORCT_ACT_EVENT_CODE IS NOT NULL AND S.CORCT_ACT_EVENT_CODE IS NOT NULL AND
                        D.CORCT_ACT_EVENT_CODE <> S.CORCT_ACT_EVENT_CODE)
                    OR (D.CORCT_ACT_EVENT_CODE IS NULL AND S.CORCT_ACT_EVENT_CODE IS NOT NULL)
                    OR (D.CORCT_ACT_EVENT_CODE IS NOT NULL AND S.CORCT_ACT_EVENT_CODE IS NULL)
                    OR
                    (D.EVENT_AGN_CODE IS NOT NULL AND S.EVENT_AGN_CODE IS NOT NULL AND
                     D.EVENT_AGN_CODE <> S.EVENT_AGN_CODE)
                    OR (D.EVENT_AGN_CODE IS NULL AND S.EVENT_AGN_CODE IS NOT NULL)
                    OR (D.EVENT_AGN_CODE IS NOT NULL AND S.EVENT_AGN_CODE IS NULL)
                    OR
                    (D.EVENT_SEQ_NUM IS NOT NULL AND S.EVENT_SEQ_NUM IS NOT NULL AND D.EVENT_SEQ_NUM <> S.EVENT_SEQ_NUM)
                    OR (D.EVENT_SEQ_NUM IS NULL AND S.EVENT_SEQ_NUM IS NOT NULL)
                    OR (D.EVENT_SEQ_NUM IS NOT NULL AND S.EVENT_SEQ_NUM IS NULL)
                ) THEN
            UPDATE
            SET D.TRANS_CODE                     = S.TRANS_CODE,
                D.ACT_LOC_CODE                   = S.ACT_LOC_CODE,
                D.CORCT_ACT_EVENT_DATA_OWNER_CDE = S.CORCT_ACT_EVENT_DATA_OWNER_CDE,
                D.CORCT_ACT_EVENT_CODE           = S.CORCT_ACT_EVENT_CODE,
                D.EVENT_AGN_CODE                 = S.EVENT_AGN_CODE,
                D.EVENT_SEQ_NUM                  = S.EVENT_SEQ_NUM
        WHEN NOT MATCHED THEN
            INSERT (CA_AUTHORITY_ID,
                    TRANS_CODE,
                    ACT_LOC_CODE,
                    CORCT_ACT_EVENT_DATA_OWNER_CDE,
                    CORCT_ACT_EVENT_CODE,
                    EVENT_AGN_CODE,
                    EVENT_SEQ_NUM)
            VALUES (S.WH_CA_AUTHORITY_ID,
                    S.TRANS_CODE,
                    S.ACT_LOC_CODE,
                    S.CORCT_ACT_EVENT_DATA_OWNER_CDE,
                    S.CORCT_ACT_EVENT_CODE,
                    S.EVENT_AGN_CODE,
                    S.EVENT_SEQ_NUM);
        IF @localTran = 1 AND XACT_STATE() = 1
        COMMIT TRAN LocalTran

END TRY
BEGIN CATCH

    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT

    SELECT  @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE()

    IF @localTran = 1 AND XACT_STATE() <> 0
        ROLLBACK TRAN

    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

END CATCH
    END
GO
/****** Object:  StoredProcedure [dbo].[CA_MERGE_AUTHORITY]    Script Date: 6/12/2019 2:50:58 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*************************************************************************************************
** ObjectName: CA_MERGE_AUTHORITY.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_CA_AUTHORITY table 
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  05/31/2019   ageery      Created.
**
***************************************************************************************************/ --
    CREATE PROCEDURE [dbo].[CA_MERGE_AUTHORITY] @CA_SUBM_ID varchar(40) AS
    BEGIN
        SET NOCOUNT ON;
SET XACT_ABORT,
    QUOTED_IDENTIFIER,
    ANSI_NULLS,
    ANSI_PADDING,
    ANSI_WARNINGS,
    ARITHABORT,
    CONCAT_NULL_YIELDS_NULL ON;
SET NUMERIC_ROUNDABORT OFF;

DECLARE @int INT;

DECLARE @localTran BIT
IF @@TRANCOUNT = 0
BEGIN
    SET @localTran = 1
    BEGIN TRANSACTION LocalTran
END

BEGIN TRY
        MERGE INTO RCRA_CA_AUTHORITY D
        USING (SELECT *
               FROM ETL_CA_AUTHORITY_VW
               WHERE CA_SUBM_ID = @CA_SUBM_ID) S
        ON (D.CA_AUTHORITY_ID = S.WH_CA_AUTHORITY_ID)
        WHEN MATCHED
            AND (
                    (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NOT NULL AND D.TRANS_CODE <> S.TRANS_CODE)
                    OR (D.TRANS_CODE IS NULL AND S.TRANS_CODE IS NOT NULL)
                    OR (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NULL)
                    OR (D.ACT_LOC_CODE IS NOT NULL AND S.ACT_LOC_CODE IS NOT NULL AND D.ACT_LOC_CODE <> S.ACT_LOC_CODE)
                    OR (D.ACT_LOC_CODE IS NULL AND S.ACT_LOC_CODE IS NOT NULL)
                    OR (D.ACT_LOC_CODE IS NOT NULL AND S.ACT_LOC_CODE IS NULL)
                    OR (D.AUTHORITY_DATA_OWNER_CODE IS NOT NULL AND S.AUTHORITY_DATA_OWNER_CODE IS NOT NULL AND
                        D.AUTHORITY_DATA_OWNER_CODE <> S.AUTHORITY_DATA_OWNER_CODE)
                    OR (D.AUTHORITY_DATA_OWNER_CODE IS NULL AND S.AUTHORITY_DATA_OWNER_CODE IS NOT NULL)
                    OR (D.AUTHORITY_DATA_OWNER_CODE IS NOT NULL AND S.AUTHORITY_DATA_OWNER_CODE IS NULL)
                    OR (D.AUTHORITY_TYPE_CODE IS NOT NULL AND S.AUTHORITY_TYPE_CODE IS NOT NULL AND
                        D.AUTHORITY_TYPE_CODE <> S.AUTHORITY_TYPE_CODE)
                    OR (D.AUTHORITY_TYPE_CODE IS NULL AND S.AUTHORITY_TYPE_CODE IS NOT NULL)
                    OR (D.AUTHORITY_TYPE_CODE IS NOT NULL AND S.AUTHORITY_TYPE_CODE IS NULL)
                    OR (D.AUTHORITY_AGN_CODE IS NOT NULL AND S.AUTHORITY_AGN_CODE IS NOT NULL AND
                        D.AUTHORITY_AGN_CODE <> S.AUTHORITY_AGN_CODE)
                    OR (D.AUTHORITY_AGN_CODE IS NULL AND S.AUTHORITY_AGN_CODE IS NOT NULL)
                    OR (D.AUTHORITY_AGN_CODE IS NOT NULL AND S.AUTHORITY_AGN_CODE IS NULL)
                    OR (D.AUTHORITY_EFFC_DATE IS NOT NULL AND S.AUTHORITY_EFFC_DATE IS NOT NULL AND
                        D.AUTHORITY_EFFC_DATE <> S.AUTHORITY_EFFC_DATE)
                    OR (D.AUTHORITY_EFFC_DATE IS NULL AND S.AUTHORITY_EFFC_DATE IS NOT NULL)
                    OR (D.AUTHORITY_EFFC_DATE IS NOT NULL AND S.AUTHORITY_EFFC_DATE IS NULL)
                    OR (D.ISSUE_DATE IS NOT NULL AND S.ISSUE_DATE IS NOT NULL AND D.ISSUE_DATE <> S.ISSUE_DATE)
                    OR (D.ISSUE_DATE IS NULL AND S.ISSUE_DATE IS NOT NULL)
                    OR (D.ISSUE_DATE IS NOT NULL AND S.ISSUE_DATE IS NULL)
                    OR (D.END_DATE IS NOT NULL AND S.END_DATE IS NOT NULL AND D.END_DATE <> S.END_DATE)
                    OR (D.END_DATE IS NULL AND S.END_DATE IS NOT NULL)
                    OR (D.END_DATE IS NOT NULL AND S.END_DATE IS NULL)
                    OR (D.ESTABLISHED_REPOSITORY_CODE IS NOT NULL AND S.ESTABLISHED_REPOSITORY_CODE IS NOT NULL AND
                        D.ESTABLISHED_REPOSITORY_CODE <> S.ESTABLISHED_REPOSITORY_CODE)
                    OR (D.ESTABLISHED_REPOSITORY_CODE IS NULL AND S.ESTABLISHED_REPOSITORY_CODE IS NOT NULL)
                    OR (D.ESTABLISHED_REPOSITORY_CODE IS NOT NULL AND S.ESTABLISHED_REPOSITORY_CODE IS NULL)
                    OR (D.RESP_LEAD_PROG_IDEN IS NOT NULL AND S.RESP_LEAD_PROG_IDEN IS NOT NULL AND
                        D.RESP_LEAD_PROG_IDEN <> S.RESP_LEAD_PROG_IDEN)
                    OR (D.RESP_LEAD_PROG_IDEN IS NULL AND S.RESP_LEAD_PROG_IDEN IS NOT NULL)
                    OR (D.RESP_LEAD_PROG_IDEN IS NOT NULL AND S.RESP_LEAD_PROG_IDEN IS NULL)
                    OR
                    (D.AUTHORITY_SUBORG_DATA_OWNR_CDE IS NOT NULL AND S.AUTHORITY_SUBORG_DATA_OWNR_CDE IS NOT NULL AND
                     D.AUTHORITY_SUBORG_DATA_OWNR_CDE <> S.AUTHORITY_SUBORG_DATA_OWNR_CDE)
                    OR (D.AUTHORITY_SUBORG_DATA_OWNR_CDE IS NULL AND S.AUTHORITY_SUBORG_DATA_OWNR_CDE IS NOT NULL)
                    OR (D.AUTHORITY_SUBORG_DATA_OWNR_CDE IS NOT NULL AND S.AUTHORITY_SUBORG_DATA_OWNR_CDE IS NULL)
                    OR (D.AUTHORITY_SUBORG_CODE IS NOT NULL AND S.AUTHORITY_SUBORG_CODE IS NOT NULL AND
                        D.AUTHORITY_SUBORG_CODE <> S.AUTHORITY_SUBORG_CODE)
                    OR (D.AUTHORITY_SUBORG_CODE IS NULL AND S.AUTHORITY_SUBORG_CODE IS NOT NULL)
                    OR (D.AUTHORITY_SUBORG_CODE IS NOT NULL AND S.AUTHORITY_SUBORG_CODE IS NULL)
                    OR (D.RESP_PERSON_DATA_OWNER_CODE IS NOT NULL AND S.RESP_PERSON_DATA_OWNER_CODE IS NOT NULL AND
                        D.RESP_PERSON_DATA_OWNER_CODE <> S.RESP_PERSON_DATA_OWNER_CODE)
                    OR (D.RESP_PERSON_DATA_OWNER_CODE IS NULL AND S.RESP_PERSON_DATA_OWNER_CODE IS NOT NULL)
                    OR (D.RESP_PERSON_DATA_OWNER_CODE IS NOT NULL AND S.RESP_PERSON_DATA_OWNER_CODE IS NULL)
                    OR
                    (D.RESP_PERSON_ID IS NOT NULL AND S.RESP_PERSON_ID IS NOT NULL AND
                     D.RESP_PERSON_ID <> S.RESP_PERSON_ID)
                    OR (D.RESP_PERSON_ID IS NULL AND S.RESP_PERSON_ID IS NOT NULL)
                    OR (D.RESP_PERSON_ID IS NOT NULL AND S.RESP_PERSON_ID IS NULL)
                    OR
                    (D.SUPP_INFO_TXT IS NOT NULL AND S.SUPP_INFO_TXT IS NOT NULL AND D.SUPP_INFO_TXT <> S.SUPP_INFO_TXT)
                    OR (D.SUPP_INFO_TXT IS NULL AND S.SUPP_INFO_TXT IS NOT NULL)
                    OR (D.SUPP_INFO_TXT IS NOT NULL AND S.SUPP_INFO_TXT IS NULL)
                ) THEN
            UPDATE
            SET D.TRANS_CODE                     = S.TRANS_CODE,
                D.ACT_LOC_CODE                   = S.ACT_LOC_CODE,
                D.AUTHORITY_DATA_OWNER_CODE      = S.AUTHORITY_DATA_OWNER_CODE,
                D.AUTHORITY_TYPE_CODE            = S.AUTHORITY_TYPE_CODE,
                D.AUTHORITY_AGN_CODE             = S.AUTHORITY_AGN_CODE,
                D.AUTHORITY_EFFC_DATE            = S.AUTHORITY_EFFC_DATE,
                D.ISSUE_DATE                     = S.ISSUE_DATE,
                D.END_DATE                       = S.END_DATE,
                D.ESTABLISHED_REPOSITORY_CODE    = S.ESTABLISHED_REPOSITORY_CODE,
                D.RESP_LEAD_PROG_IDEN            = S.RESP_LEAD_PROG_IDEN,
                D.AUTHORITY_SUBORG_DATA_OWNR_CDE = S.AUTHORITY_SUBORG_DATA_OWNR_CDE,
                D.AUTHORITY_SUBORG_CODE          = S.AUTHORITY_SUBORG_CODE,
                D.RESP_PERSON_DATA_OWNER_CODE    = S.RESP_PERSON_DATA_OWNER_CODE,
                D.RESP_PERSON_ID                 = S.RESP_PERSON_ID,
                D.SUPP_INFO_TXT                  = S.SUPP_INFO_TXT
        WHEN NOT MATCHED THEN
            INSERT (CA_FAC_SUBM_ID,
                    TRANS_CODE,
                    ACT_LOC_CODE,
                    AUTHORITY_DATA_OWNER_CODE,
                    AUTHORITY_TYPE_CODE,
                    AUTHORITY_AGN_CODE,
                    AUTHORITY_EFFC_DATE,
                    ISSUE_DATE,
                    END_DATE,
                    ESTABLISHED_REPOSITORY_CODE,
                    RESP_LEAD_PROG_IDEN,
                    AUTHORITY_SUBORG_DATA_OWNR_CDE,
                    AUTHORITY_SUBORG_CODE,
                    RESP_PERSON_DATA_OWNER_CODE,
                    RESP_PERSON_ID,
                    SUPP_INFO_TXT)
            VALUES (S.WH_CA_FAC_SUBM_ID,
                    S.TRANS_CODE,
                    S.ACT_LOC_CODE,
                    S.AUTHORITY_DATA_OWNER_CODE,
                    S.AUTHORITY_TYPE_CODE,
                    S.AUTHORITY_AGN_CODE,
                    S.AUTHORITY_EFFC_DATE,
                    S.ISSUE_DATE,
                    S.END_DATE,
                    S.ESTABLISHED_REPOSITORY_CODE,
                    S.RESP_LEAD_PROG_IDEN,
                    S.AUTHORITY_SUBORG_DATA_OWNR_CDE,
                    S.AUTHORITY_SUBORG_CODE,
                    S.RESP_PERSON_DATA_OWNER_CODE,
                    S.RESP_PERSON_ID,
                    S.SUPP_INFO_TXT);
        IF @localTran = 1 AND XACT_STATE() = 1
        COMMIT TRAN LocalTran

END TRY
BEGIN CATCH

    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT

    SELECT  @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE()

    IF @localTran = 1 AND XACT_STATE() <> 0
        ROLLBACK TRAN

    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

END CATCH
    END
GO
/****** Object:  StoredProcedure [dbo].[CA_MERGE_EVENT]    Script Date: 6/12/2019 2:50:58 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*************************************************************************************************
** ObjectName: CA_MERGE_EVENT.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_CA_EVENT table 
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  05/31/2019   ageery      Created.
**
***************************************************************************************************/ --
    CREATE PROCEDURE [dbo].[CA_MERGE_EVENT] @CA_SUBM_ID varchar(40) AS
    BEGIN
        SET NOCOUNT ON;
SET XACT_ABORT,
    QUOTED_IDENTIFIER,
    ANSI_NULLS,
    ANSI_PADDING,
    ANSI_WARNINGS,
    ARITHABORT,
    CONCAT_NULL_YIELDS_NULL ON;
SET NUMERIC_ROUNDABORT OFF;

DECLARE @int INT;

DECLARE @localTran BIT
IF @@TRANCOUNT = 0
BEGIN
    SET @localTran = 1
    BEGIN TRANSACTION LocalTran
END

BEGIN TRY
        MERGE INTO RCRA_CA_EVENT D
        USING (SELECT *
               FROM ETL_CA_EVENT_VW
               WHERE CA_SUBM_ID = @CA_SUBM_ID) S
        ON (D.CA_EVENT_ID = S.WH_CA_EVENT_ID)
        WHEN MATCHED
            AND (
                    (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NOT NULL AND D.TRANS_CODE <> S.TRANS_CODE)
                    OR (D.TRANS_CODE IS NULL AND S.TRANS_CODE IS NOT NULL)
                    OR (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NULL)
                    OR (D.ACT_LOC_CODE IS NOT NULL AND S.ACT_LOC_CODE IS NOT NULL AND D.ACT_LOC_CODE <> S.ACT_LOC_CODE)
                    OR (D.ACT_LOC_CODE IS NULL AND S.ACT_LOC_CODE IS NOT NULL)
                    OR (D.ACT_LOC_CODE IS NOT NULL AND S.ACT_LOC_CODE IS NULL)
                    OR
                    (D.CORCT_ACT_EVENT_DATA_OWNER_CDE IS NOT NULL AND S.CORCT_ACT_EVENT_DATA_OWNER_CDE IS NOT NULL AND
                     D.CORCT_ACT_EVENT_DATA_OWNER_CDE <> S.CORCT_ACT_EVENT_DATA_OWNER_CDE)
                    OR (D.CORCT_ACT_EVENT_DATA_OWNER_CDE IS NULL AND S.CORCT_ACT_EVENT_DATA_OWNER_CDE IS NOT NULL)
                    OR (D.CORCT_ACT_EVENT_DATA_OWNER_CDE IS NOT NULL AND S.CORCT_ACT_EVENT_DATA_OWNER_CDE IS NULL)
                    OR (D.CORCT_ACT_EVENT_CODE IS NOT NULL AND S.CORCT_ACT_EVENT_CODE IS NOT NULL AND
                        D.CORCT_ACT_EVENT_CODE <> S.CORCT_ACT_EVENT_CODE)
                    OR (D.CORCT_ACT_EVENT_CODE IS NULL AND S.CORCT_ACT_EVENT_CODE IS NOT NULL)
                    OR (D.CORCT_ACT_EVENT_CODE IS NOT NULL AND S.CORCT_ACT_EVENT_CODE IS NULL)
                    OR
                    (D.EVENT_AGN_CODE IS NOT NULL AND S.EVENT_AGN_CODE IS NOT NULL AND
                     D.EVENT_AGN_CODE <> S.EVENT_AGN_CODE)
                    OR (D.EVENT_AGN_CODE IS NULL AND S.EVENT_AGN_CODE IS NOT NULL)
                    OR (D.EVENT_AGN_CODE IS NOT NULL AND S.EVENT_AGN_CODE IS NULL)
                    OR
                    (D.EVENT_SEQ_NUM IS NOT NULL AND S.EVENT_SEQ_NUM IS NOT NULL AND D.EVENT_SEQ_NUM <> S.EVENT_SEQ_NUM)
                    OR (D.EVENT_SEQ_NUM IS NULL AND S.EVENT_SEQ_NUM IS NOT NULL)
                    OR (D.EVENT_SEQ_NUM IS NOT NULL AND S.EVENT_SEQ_NUM IS NULL)
                    OR (D.ACTL_DATE IS NOT NULL AND S.ACTL_DATE IS NOT NULL AND D.ACTL_DATE <> S.ACTL_DATE)
                    OR (D.ACTL_DATE IS NULL AND S.ACTL_DATE IS NOT NULL)
                    OR (D.ACTL_DATE IS NOT NULL AND S.ACTL_DATE IS NULL)
                    OR (D.ORIGINAL_SCHEDULE_DATE IS NOT NULL AND S.ORIGINAL_SCHEDULE_DATE IS NOT NULL AND
                        D.ORIGINAL_SCHEDULE_DATE <> S.ORIGINAL_SCHEDULE_DATE)
                    OR (D.ORIGINAL_SCHEDULE_DATE IS NULL AND S.ORIGINAL_SCHEDULE_DATE IS NOT NULL)
                    OR (D.ORIGINAL_SCHEDULE_DATE IS NOT NULL AND S.ORIGINAL_SCHEDULE_DATE IS NULL)
                    OR (D.NEW_SCHEDULE_DATE IS NOT NULL AND S.NEW_SCHEDULE_DATE IS NOT NULL AND
                        D.NEW_SCHEDULE_DATE <> S.NEW_SCHEDULE_DATE)
                    OR (D.NEW_SCHEDULE_DATE IS NULL AND S.NEW_SCHEDULE_DATE IS NOT NULL)
                    OR (D.NEW_SCHEDULE_DATE IS NOT NULL AND S.NEW_SCHEDULE_DATE IS NULL)
                    OR (D.EVENT_SUBORG_DATA_OWNER_CODE IS NOT NULL AND S.EVENT_SUBORG_DATA_OWNER_CODE IS NOT NULL AND
                        D.EVENT_SUBORG_DATA_OWNER_CODE <> S.EVENT_SUBORG_DATA_OWNER_CODE)
                    OR (D.EVENT_SUBORG_DATA_OWNER_CODE IS NULL AND S.EVENT_SUBORG_DATA_OWNER_CODE IS NOT NULL)
                    OR (D.EVENT_SUBORG_DATA_OWNER_CODE IS NOT NULL AND S.EVENT_SUBORG_DATA_OWNER_CODE IS NULL)
                    OR (D.EVENT_SUBORG_CODE IS NOT NULL AND S.EVENT_SUBORG_CODE IS NOT NULL AND
                        D.EVENT_SUBORG_CODE <> S.EVENT_SUBORG_CODE)
                    OR (D.EVENT_SUBORG_CODE IS NULL AND S.EVENT_SUBORG_CODE IS NOT NULL)
                    OR (D.EVENT_SUBORG_CODE IS NOT NULL AND S.EVENT_SUBORG_CODE IS NULL)
                    OR (D.RESP_PERSON_DATA_OWNER_CODE IS NOT NULL AND S.RESP_PERSON_DATA_OWNER_CODE IS NOT NULL AND
                        D.RESP_PERSON_DATA_OWNER_CODE <> S.RESP_PERSON_DATA_OWNER_CODE)
                    OR (D.RESP_PERSON_DATA_OWNER_CODE IS NULL AND S.RESP_PERSON_DATA_OWNER_CODE IS NOT NULL)
                    OR (D.RESP_PERSON_DATA_OWNER_CODE IS NOT NULL AND S.RESP_PERSON_DATA_OWNER_CODE IS NULL)
                    OR
                    (D.RESP_PERSON_ID IS NOT NULL AND S.RESP_PERSON_ID IS NOT NULL AND
                     D.RESP_PERSON_ID <> S.RESP_PERSON_ID)
                    OR (D.RESP_PERSON_ID IS NULL AND S.RESP_PERSON_ID IS NOT NULL)
                    OR (D.RESP_PERSON_ID IS NOT NULL AND S.RESP_PERSON_ID IS NULL)
                    OR
                    (D.SUPP_INFO_TXT IS NOT NULL AND S.SUPP_INFO_TXT IS NOT NULL AND D.SUPP_INFO_TXT <> S.SUPP_INFO_TXT)
                    OR (D.SUPP_INFO_TXT IS NULL AND S.SUPP_INFO_TXT IS NOT NULL)
                    OR (D.SUPP_INFO_TXT IS NOT NULL AND S.SUPP_INFO_TXT IS NULL)
                )
            THEN
            UPDATE
            SET D.TRANS_CODE                     = S.TRANS_CODE,
                D.ACT_LOC_CODE                   = S.ACT_LOC_CODE,
                D.CORCT_ACT_EVENT_DATA_OWNER_CDE = S.CORCT_ACT_EVENT_DATA_OWNER_CDE,
                D.CORCT_ACT_EVENT_CODE           = S.CORCT_ACT_EVENT_CODE,
                D.EVENT_AGN_CODE                 = S.EVENT_AGN_CODE,
                D.EVENT_SEQ_NUM                  = S.EVENT_SEQ_NUM,
                D.ACTL_DATE                      = S.ACTL_DATE,
                D.ORIGINAL_SCHEDULE_DATE         = S.ORIGINAL_SCHEDULE_DATE,
                D.NEW_SCHEDULE_DATE              = S.NEW_SCHEDULE_DATE,
                D.EVENT_SUBORG_DATA_OWNER_CODE   = S.EVENT_SUBORG_DATA_OWNER_CODE,
                D.EVENT_SUBORG_CODE              = S.EVENT_SUBORG_CODE,
                D.RESP_PERSON_DATA_OWNER_CODE    = S.RESP_PERSON_DATA_OWNER_CODE,
                D.RESP_PERSON_ID                 = S.RESP_PERSON_ID,
                D.SUPP_INFO_TXT                  = S.SUPP_INFO_TXT
        WHEN NOT MATCHED THEN
            INSERT (CA_FAC_SUBM_ID,
                    TRANS_CODE,
                    ACT_LOC_CODE,
                    CORCT_ACT_EVENT_DATA_OWNER_CDE,
                    CORCT_ACT_EVENT_CODE,
                    EVENT_AGN_CODE,
                    EVENT_SEQ_NUM,
                    ACTL_DATE,
                    ORIGINAL_SCHEDULE_DATE,
                    NEW_SCHEDULE_DATE,
                    EVENT_SUBORG_DATA_OWNER_CODE,
                    EVENT_SUBORG_CODE,
                    RESP_PERSON_DATA_OWNER_CODE,
                    RESP_PERSON_ID,
                    SUPP_INFO_TXT)
            VALUES (S.WH_CA_FAC_SUBM_ID,
                    S.TRANS_CODE,
                    S.ACT_LOC_CODE,
                    S.CORCT_ACT_EVENT_DATA_OWNER_CDE,
                    S.CORCT_ACT_EVENT_CODE,
                    S.EVENT_AGN_CODE,
                    S.EVENT_SEQ_NUM,
                    S.ACTL_DATE,
                    S.ORIGINAL_SCHEDULE_DATE,
                    S.NEW_SCHEDULE_DATE,
                    S.EVENT_SUBORG_DATA_OWNER_CODE,
                    S.EVENT_SUBORG_CODE,
                    S.RESP_PERSON_DATA_OWNER_CODE,
                    S.RESP_PERSON_ID,
                    S.SUPP_INFO_TXT);
        IF @localTran = 1 AND XACT_STATE() = 1
        COMMIT TRAN LocalTran

END TRY
BEGIN CATCH

    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT

    SELECT  @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE()

    IF @localTran = 1 AND XACT_STATE() <> 0
        ROLLBACK TRAN

    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

END CATCH
    END
GO
/****** Object:  StoredProcedure [dbo].[CA_MERGE_EVENT_COMMITMENT]    Script Date: 6/12/2019 2:50:58 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*************************************************************************************************
** ObjectName: CA_MERGE_EVENT_COMMITMENT.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_CA_EVENT_COMMITMENT table 
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  05/31/2019   ageery      Created.
**
***************************************************************************************************/ --
    CREATE PROCEDURE [dbo].[CA_MERGE_EVENT_COMMITMENT] @CA_SUBM_ID varchar(40) AS
    BEGIN
        SET NOCOUNT ON;
SET XACT_ABORT,
    QUOTED_IDENTIFIER,
    ANSI_NULLS,
    ANSI_PADDING,
    ANSI_WARNINGS,
    ARITHABORT,
    CONCAT_NULL_YIELDS_NULL ON;
SET NUMERIC_ROUNDABORT OFF;

DECLARE @int INT;

DECLARE @localTran BIT
IF @@TRANCOUNT = 0
BEGIN
    SET @localTran = 1
    BEGIN TRANSACTION LocalTran
END

BEGIN TRY
        MERGE INTO RCRA_CA_EVENT_COMMITMENT D
        USING (SELECT *
               FROM ETL_CA_EVENT_COMMITMENT_VW
               WHERE CA_SUBM_ID = @CA_SUBM_ID) S
        ON (D.CA_EVENT_COMMITMENT_ID = S.WH_CA_EVENT_COMMITMENT_ID)
        WHEN MATCHED
            AND
                (
                        (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NOT NULL AND D.TRANS_CODE <> S.TRANS_CODE)
                        OR (D.TRANS_CODE IS NULL AND S.TRANS_CODE IS NOT NULL)
                        OR (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NULL)
                        OR (D.COMMIT_LEAD IS NOT NULL AND S.COMMIT_LEAD IS NOT NULL AND D.COMMIT_LEAD <> S.COMMIT_LEAD)
                        OR (D.COMMIT_LEAD IS NULL AND S.COMMIT_LEAD IS NOT NULL)
                        OR (D.COMMIT_LEAD IS NOT NULL AND S.COMMIT_LEAD IS NULL)
                        OR (D.COMMIT_SEQ_NUM IS NOT NULL AND S.COMMIT_SEQ_NUM IS NOT NULL AND
                            D.COMMIT_SEQ_NUM <> S.COMMIT_SEQ_NUM)
                        OR (D.COMMIT_SEQ_NUM IS NULL AND S.COMMIT_SEQ_NUM IS NOT NULL)
                        OR (D.COMMIT_SEQ_NUM IS NOT NULL AND S.COMMIT_SEQ_NUM IS NULL)
                    )
            THEN
            UPDATE
            SET D.TRANS_CODE     = S.TRANS_CODE,
                D.COMMIT_LEAD    = S.COMMIT_LEAD,
                D.COMMIT_SEQ_NUM = S.COMMIT_SEQ_NUM
        WHEN NOT MATCHED THEN
            INSERT (CA_EVENT_ID,
                    TRANS_CODE,
                    COMMIT_LEAD,
                    COMMIT_SEQ_NUM)
            VALUES (S.WH_CA_EVENT_ID,
                    S.TRANS_CODE,
                    S.COMMIT_LEAD,
                    S.COMMIT_SEQ_NUM);
        IF @localTran = 1 AND XACT_STATE() = 1
        COMMIT TRAN LocalTran

END TRY
BEGIN CATCH

    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT

    SELECT  @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE()

    IF @localTran = 1 AND XACT_STATE() <> 0
        ROLLBACK TRAN

    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

END CATCH
    END
GO
/****** Object:  StoredProcedure [dbo].[CA_MERGE_FAC_SUBM]    Script Date: 6/12/2019 2:50:58 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*************************************************************************************************
** ObjectName: CA_MERGE_FAC_SUBM.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_CA_FAC_SUBM table 
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  05/31/2019   ageery      Created.
**
***************************************************************************************************/ --
    CREATE PROCEDURE [dbo].[CA_MERGE_FAC_SUBM] @CA_SUBM_ID varchar(40) AS
    BEGIN
        SET NOCOUNT ON;
SET XACT_ABORT,
    QUOTED_IDENTIFIER,
    ANSI_NULLS,
    ANSI_PADDING,
    ANSI_WARNINGS,
    ARITHABORT,
    CONCAT_NULL_YIELDS_NULL ON;
SET NUMERIC_ROUNDABORT OFF;

DECLARE @int INT;

DECLARE @localTran BIT
IF @@TRANCOUNT = 0
BEGIN
    SET @localTran = 1
    BEGIN TRANSACTION LocalTran
END

BEGIN TRY
        MERGE INTO RCRA_CA_FAC_SUBM D
        USING (SELECT *
               FROM ETL_CA_FAC_SUBM_VW
               WHERE CA_SUBM_ID = @CA_SUBM_ID) S
        ON (D.CA_FAC_SUBM_ID = S.WH_CA_FAC_SUBM_ID)
        WHEN NOT MATCHED THEN
            INSERT (
                HANDLER_ID
            )
            VALUES (
                       S.HANDLER_ID
                   );
        IF @localTran = 1 AND XACT_STATE() = 1
        COMMIT TRAN LocalTran

END TRY
BEGIN CATCH

    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT

    SELECT  @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE()

    IF @localTran = 1 AND XACT_STATE() <> 0
        ROLLBACK TRAN

    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

END CATCH
    END
GO
/****** Object:  StoredProcedure [dbo].[CA_MERGE_REL_PERMIT_UNIT]    Script Date: 6/12/2019 2:50:58 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*************************************************************************************************
** ObjectName: CA_MERGE_REL_PERMIT_UNIT.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_CA_REL_PERMIT_UNIT table 
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  05/31/2019   ageery      Created.
**
***************************************************************************************************/ --
    CREATE PROCEDURE [dbo].[CA_MERGE_REL_PERMIT_UNIT] @CA_SUBM_ID varchar(40) AS
    BEGIN
        SET NOCOUNT ON;
SET XACT_ABORT,
    QUOTED_IDENTIFIER,
    ANSI_NULLS,
    ANSI_PADDING,
    ANSI_WARNINGS,
    ARITHABORT,
    CONCAT_NULL_YIELDS_NULL ON;
SET NUMERIC_ROUNDABORT OFF;

DECLARE @int INT;

DECLARE @localTran BIT
IF @@TRANCOUNT = 0
BEGIN
    SET @localTran = 1
    BEGIN TRANSACTION LocalTran
END

BEGIN TRY
        MERGE INTO RCRA_CA_REL_PERMIT_UNIT D
        USING (SELECT *
               FROM ETL_CA_REL_PERMIT_UNIT_VW
               WHERE CA_SUBM_ID = @CA_SUBM_ID) S
        ON (D.CA_REL_PERMIT_UNIT_ID = S.WH_CA_REL_PERMIT_UNIT_ID)
        WHEN MATCHED
            AND (
                    (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NOT NULL AND D.TRANS_CODE <> S.TRANS_CODE)
                    OR (D.TRANS_CODE IS NULL AND S.TRANS_CODE IS NOT NULL)
                    OR (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NULL)
                    OR (D.PERMIT_UNIT_SEQ_NUM IS NOT NULL AND S.PERMIT_UNIT_SEQ_NUM IS NOT NULL AND
                        D.PERMIT_UNIT_SEQ_NUM <> S.PERMIT_UNIT_SEQ_NUM)
                    OR (D.PERMIT_UNIT_SEQ_NUM IS NULL AND S.PERMIT_UNIT_SEQ_NUM IS NOT NULL)
                    OR (D.PERMIT_UNIT_SEQ_NUM IS NOT NULL AND S.PERMIT_UNIT_SEQ_NUM IS NULL)
                )
            THEN
            UPDATE
            SET D.TRANS_CODE          = S.TRANS_CODE,
                D.PERMIT_UNIT_SEQ_NUM = S.PERMIT_UNIT_SEQ_NUM
        WHEN NOT MATCHED THEN
            INSERT (CA_AREA_ID,
                    TRANS_CODE,
                    PERMIT_UNIT_SEQ_NUM)
            VALUES (S.WH_CA_AREA_ID,
                    S.TRANS_CODE,
                    S.PERMIT_UNIT_SEQ_NUM);
        IF @localTran = 1 AND XACT_STATE() = 1
        COMMIT TRAN LocalTran

END TRY
BEGIN CATCH

    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT

    SELECT  @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE()

    IF @localTran = 1 AND XACT_STATE() <> 0
        ROLLBACK TRAN

    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

END CATCH
    END
GO
/****** Object:  StoredProcedure [dbo].[CA_MERGE_STATUTORY_CITATION]    Script Date: 6/12/2019 2:50:58 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*************************************************************************************************
** ObjectName: CA_MERGE_STATUTORY_CITATION.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_CA_STATUTORY_CITATION table 
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  05/31/2019   ageery      Created.
**
***************************************************************************************************/ --
    CREATE PROCEDURE [dbo].[CA_MERGE_STATUTORY_CITATION] @CA_SUBM_ID varchar(40) AS
    BEGIN
        SET NOCOUNT ON;
SET XACT_ABORT,
    QUOTED_IDENTIFIER,
    ANSI_NULLS,
    ANSI_PADDING,
    ANSI_WARNINGS,
    ARITHABORT,
    CONCAT_NULL_YIELDS_NULL ON;
SET NUMERIC_ROUNDABORT OFF;

DECLARE @int INT;

DECLARE @localTran BIT
IF @@TRANCOUNT = 0
BEGIN
    SET @localTran = 1
    BEGIN TRANSACTION LocalTran
END

BEGIN TRY
        MERGE INTO RCRA_CA_STATUTORY_CITATION D
        USING (SELECT *
               FROM ETL_CA_STATUTORY_CITATION_VW
               WHERE CA_SUBM_ID = @CA_SUBM_ID) S
        ON (D.CA_STATUTORY_CITATION_ID = S.WH_CA_STATUTORY_CITATION_ID)
        WHEN MATCHED
            AND (
                    (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NOT NULL AND D.TRANS_CODE <> S.TRANS_CODE)
                    OR (D.TRANS_CODE IS NULL AND S.TRANS_CODE IS NOT NULL)
                    OR (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NULL)
                    OR
                    (D.STATUTORY_CITTION_DTA_OWNR_CDE IS NOT NULL AND S.STATUTORY_CITTION_DTA_OWNR_CDE IS NOT NULL AND
                     D.STATUTORY_CITTION_DTA_OWNR_CDE <> S.STATUTORY_CITTION_DTA_OWNR_CDE)
                    OR (D.STATUTORY_CITTION_DTA_OWNR_CDE IS NULL AND S.STATUTORY_CITTION_DTA_OWNR_CDE IS NOT NULL)
                    OR (D.STATUTORY_CITTION_DTA_OWNR_CDE IS NOT NULL AND S.STATUTORY_CITTION_DTA_OWNR_CDE IS NULL)
                    OR (D.STATUTORY_CITATION_IDEN IS NOT NULL AND S.STATUTORY_CITATION_IDEN IS NOT NULL AND
                        D.STATUTORY_CITATION_IDEN <> S.STATUTORY_CITATION_IDEN)
                    OR (D.STATUTORY_CITATION_IDEN IS NULL AND S.STATUTORY_CITATION_IDEN IS NOT NULL)
                    OR (D.STATUTORY_CITATION_IDEN IS NOT NULL AND S.STATUTORY_CITATION_IDEN IS NULL)
                ) THEN
            UPDATE
            SET D.TRANS_CODE                     = S.TRANS_CODE,
                D.STATUTORY_CITTION_DTA_OWNR_CDE = S.STATUTORY_CITTION_DTA_OWNR_CDE,
                D.STATUTORY_CITATION_IDEN        = S.STATUTORY_CITATION_IDEN
        WHEN NOT MATCHED THEN
            INSERT (CA_AUTHORITY_ID,
                    TRANS_CODE,
                    STATUTORY_CITTION_DTA_OWNR_CDE,
                    STATUTORY_CITATION_IDEN)
            VALUES (S.WH_CA_AUTHORITY_ID,
                    S.TRANS_CODE,
                    S.STATUTORY_CITTION_DTA_OWNR_CDE,
                    S.STATUTORY_CITATION_IDEN);
        IF @localTran = 1 AND XACT_STATE() = 1
        COMMIT TRAN LocalTran

END TRY
BEGIN CATCH

    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT

    SELECT  @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE()

    IF @localTran = 1 AND XACT_STATE() <> 0
        ROLLBACK TRAN

    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

END CATCH
    END
GO
/****** Object:  StoredProcedure [dbo].[CME_LOG_HANDLERS]    Script Date: 6/12/2019 2:50:58 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*************************************************************************************************
** ObjectName: CME_LOG_HANDLERS.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Logs information about merged CME handlers
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  06/12/2019   ageery      Created.
**
***************************************************************************************************/ --
    CREATE PROCEDURE [dbo].[CME_LOG_HANDLERS] @CME_SUBM_ID varchar(40) AS
    BEGIN
        SET NOCOUNT ON;
SET XACT_ABORT,
    QUOTED_IDENTIFIER,
    ANSI_NULLS,
    ANSI_PADDING,
    ANSI_WARNINGS,
    ARITHABORT,
    CONCAT_NULL_YIELDS_NULL ON;
SET NUMERIC_ROUNDABORT OFF;

DECLARE @int INT;

DECLARE @localTran BIT
IF @@TRANCOUNT = 0
BEGIN
    SET @localTran = 1
    BEGIN TRANSACTION LocalTran
END

BEGIN TRY
        INSERT INTO ETL_RUN
        (RUN_DATE, ETL_TYPE, SUBM_ID)
        VALUES (CURRENT_TIMESTAMP, 'CE', @CME_SUBM_ID);
        INSERT INTO ETL_RUN_HANDLER (ETL_RUN_ID, HANDLER_ID, STATUS_TYPE)
        SELECT SCOPE_IDENTITY(),
               EPA_HDLR_ID,
               CASE
                   WHEN
                       CME_FAC_SUBM_ID IS NULL
                       THEN
                       'I'
                   ELSE
                       'U'
                   END
        FROM ETL_CME_FAC_SUBM_VW
        WHERE CME_SUBM_ID = @CME_SUBM_ID;
        IF @localTran = 1 AND XACT_STATE() = 1
        COMMIT TRAN LocalTran

END TRY
BEGIN CATCH

    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT

    SELECT  @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE()

    IF @localTran = 1 AND XACT_STATE() <> 0
        ROLLBACK TRAN

    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

END CATCH
    END
GO
/****** Object:  StoredProcedure [dbo].[CME_MERGE_CITATION]    Script Date: 6/12/2019 2:50:58 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*************************************************************************************************
** ObjectName: CME_MERGE_CITATION.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_CME_CITATION table 
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  05/31/2019   ageery      Created.
**
***************************************************************************************************/ --
    CREATE PROCEDURE [dbo].[CME_MERGE_CITATION] @CME_SUBM_ID varchar(40) AS
    BEGIN
        SET NOCOUNT ON;
SET XACT_ABORT,
    QUOTED_IDENTIFIER,
    ANSI_NULLS,
    ANSI_PADDING,
    ANSI_WARNINGS,
    ARITHABORT,
    CONCAT_NULL_YIELDS_NULL ON;
SET NUMERIC_ROUNDABORT OFF;

DECLARE @int INT;

DECLARE @localTran BIT
IF @@TRANCOUNT = 0
BEGIN
    SET @localTran = 1
    BEGIN TRANSACTION LocalTran
END

BEGIN TRY
        MERGE INTO RCRA_CME_CITATION D
        USING (SELECT *
               FROM ETL_CME_CITATION_VW
               WHERE CME_SUBM_ID = @CME_SUBM_ID) S
        ON (D.CME_CITATION_ID = S.WH_CME_CITATION_ID)
        WHEN MATCHED
            AND (
                    (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NOT NULL AND D.TRANS_CODE <> S.TRANS_CODE)
                    OR (D.TRANS_CODE IS NULL AND S.TRANS_CODE IS NOT NULL)
                    OR (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NULL)
                    OR (D.CITATION_NAME_SEQ_NUM IS NOT NULL AND S.CITATION_NAME_SEQ_NUM IS NOT NULL AND
                        D.CITATION_NAME_SEQ_NUM <> S.CITATION_NAME_SEQ_NUM)
                    OR (D.CITATION_NAME_SEQ_NUM IS NULL AND S.CITATION_NAME_SEQ_NUM IS NOT NULL)
                    OR (D.CITATION_NAME_SEQ_NUM IS NOT NULL AND S.CITATION_NAME_SEQ_NUM IS NULL)
                    OR
                    (D.CITATION_NAME IS NOT NULL AND S.CITATION_NAME IS NOT NULL AND D.CITATION_NAME <> S.CITATION_NAME)
                    OR (D.CITATION_NAME IS NULL AND S.CITATION_NAME IS NOT NULL)
                    OR (D.CITATION_NAME IS NOT NULL AND S.CITATION_NAME IS NULL)
                    OR (D.CITATION_NAME_OWNER IS NOT NULL AND S.CITATION_NAME_OWNER IS NOT NULL AND
                        D.CITATION_NAME_OWNER <> S.CITATION_NAME_OWNER)
                    OR (D.CITATION_NAME_OWNER IS NULL AND S.CITATION_NAME_OWNER IS NOT NULL)
                    OR (D.CITATION_NAME_OWNER IS NOT NULL AND S.CITATION_NAME_OWNER IS NULL)
                    OR (D.CITATION_NAME_TYPE IS NOT NULL AND S.CITATION_NAME_TYPE IS NOT NULL AND
                        D.CITATION_NAME_TYPE <> S.CITATION_NAME_TYPE)
                    OR (D.CITATION_NAME_TYPE IS NULL AND S.CITATION_NAME_TYPE IS NOT NULL)
                    OR (D.CITATION_NAME_TYPE IS NOT NULL AND S.CITATION_NAME_TYPE IS NULL)
                    OR (D.NOTES IS NOT NULL AND S.NOTES IS NOT NULL AND D.NOTES <> S.NOTES)
                    OR (D.NOTES IS NULL AND S.NOTES IS NOT NULL)
                    OR (D.NOTES IS NOT NULL AND S.NOTES IS NULL)
                ) THEN
            UPDATE
            SET D.TRANS_CODE            = S.TRANS_CODE,
                D.CITATION_NAME_SEQ_NUM = S.CITATION_NAME_SEQ_NUM,
                D.CITATION_NAME         = S.CITATION_NAME,
                D.CITATION_NAME_OWNER   = S.CITATION_NAME_OWNER,
                D.CITATION_NAME_TYPE    = S.CITATION_NAME_TYPE,
                D.NOTES                 = S.NOTES
        WHEN NOT MATCHED THEN
            INSERT (CME_VIOL_ID,
                    TRANS_CODE,
                    CITATION_NAME_SEQ_NUM,
                    CITATION_NAME,
                    CITATION_NAME_OWNER,
                    CITATION_NAME_TYPE,
                    NOTES)
            VALUES (S.WH_CME_VIOL_ID,
                    S.TRANS_CODE,
                    S.CITATION_NAME_SEQ_NUM,
                    S.CITATION_NAME,
                    S.CITATION_NAME_OWNER,
                    S.CITATION_NAME_TYPE,
                    S.NOTES);
        IF @localTran = 1 AND XACT_STATE() = 1
        COMMIT TRAN LocalTran

END TRY
BEGIN CATCH

    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT

    SELECT  @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE()

    IF @localTran = 1 AND XACT_STATE() <> 0
        ROLLBACK TRAN

    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

END CATCH
    END
GO
/****** Object:  StoredProcedure [dbo].[CME_MERGE_CSNY_DATE]    Script Date: 6/12/2019 2:50:58 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*************************************************************************************************
** ObjectName: CME_MERGE_CSNY_DATE.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_CME_CSNY_DATE table 
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  05/31/2019   ageery      Created.
**
***************************************************************************************************/ --
    CREATE PROCEDURE [dbo].[CME_MERGE_CSNY_DATE] @CME_SUBM_ID varchar(40) AS
    BEGIN
        SET NOCOUNT ON;
SET XACT_ABORT,
    QUOTED_IDENTIFIER,
    ANSI_NULLS,
    ANSI_PADDING,
    ANSI_WARNINGS,
    ARITHABORT,
    CONCAT_NULL_YIELDS_NULL ON;
SET NUMERIC_ROUNDABORT OFF;

DECLARE @int INT;

DECLARE @localTran BIT
IF @@TRANCOUNT = 0
BEGIN
    SET @localTran = 1
    BEGIN TRANSACTION LocalTran
END

BEGIN TRY
        MERGE INTO RCRA_CME_CSNY_DATE D
        USING (SELECT *
               FROM ETL_CME_CSNY_DATE_VW
               WHERE CME_SUBM_ID = @CME_SUBM_ID) S
        ON (D.CME_CSNY_DATE_ID = S.WH_CME_CSNY_DATE_ID)
        WHEN MATCHED
            AND (
                    (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NOT NULL AND D.TRANS_CODE <> S.TRANS_CODE)
                    OR (D.TRANS_CODE IS NULL AND S.TRANS_CODE IS NOT NULL)
                    OR (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NULL)
                    OR (D.SNY_DATE IS NOT NULL AND S.SNY_DATE IS NOT NULL AND D.SNY_DATE <> S.SNY_DATE)
                    OR (D.SNY_DATE IS NULL AND S.SNY_DATE IS NOT NULL)
                    OR (D.SNY_DATE IS NOT NULL AND S.SNY_DATE IS NULL)
                ) THEN
            UPDATE
            SET D.TRANS_CODE = S.TRANS_CODE,
                D.SNY_DATE   = S.SNY_DATE
        WHEN NOT MATCHED THEN
            INSERT (CME_ENFRC_ACT_ID,
                    TRANS_CODE,
                    SNY_DATE)
            VALUES (S.WH_CME_ENFR_ACT_ID,
                    S.TRANS_CODE,
                    S.SNY_DATE);
        IF @localTran = 1 AND XACT_STATE() = 1
        COMMIT TRAN LocalTran

END TRY
BEGIN CATCH

    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT

    SELECT  @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE()

    IF @localTran = 1 AND XACT_STATE() <> 0
        ROLLBACK TRAN

    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

END CATCH
    END
GO
/****** Object:  StoredProcedure [dbo].[CME_MERGE_ENFRC_ACT]    Script Date: 6/12/2019 2:50:58 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*************************************************************************************************
** ObjectName: CME_MERGE_ENFRC_ACT.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_CME_ENFRC_ACT table 
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  05/31/2019   ageery      Created.
**
***************************************************************************************************/ --
    CREATE PROCEDURE [dbo].[CME_MERGE_ENFRC_ACT] @CME_SUBM_ID varchar(40) AS
    BEGIN
        SET NOCOUNT ON;
SET XACT_ABORT,
    QUOTED_IDENTIFIER,
    ANSI_NULLS,
    ANSI_PADDING,
    ANSI_WARNINGS,
    ARITHABORT,
    CONCAT_NULL_YIELDS_NULL ON;
SET NUMERIC_ROUNDABORT OFF;

DECLARE @int INT;

DECLARE @localTran BIT
IF @@TRANCOUNT = 0
BEGIN
    SET @localTran = 1
    BEGIN TRANSACTION LocalTran
END

BEGIN TRY
        MERGE INTO RCRA_CME_ENFRC_ACT D
        USING (SELECT *
               FROM ETL_CME_ENFRC_ACT_VW
               WHERE CME_SUBM_ID = @CME_SUBM_ID) S
        ON (D.CME_ENFRC_ACT_ID = S.WH_CME_ENFR_ACT_ID)
        WHEN MATCHED
            AND (
                    (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NOT NULL AND D.TRANS_CODE <> S.TRANS_CODE)
                    OR (D.TRANS_CODE IS NULL AND S.TRANS_CODE IS NOT NULL)
                    OR (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NULL)
                    OR (D.ENFRC_AGN_LOC_NAME IS NOT NULL AND S.ENFRC_AGN_LOC_NAME IS NOT NULL AND
                        D.ENFRC_AGN_LOC_NAME <> S.ENFRC_AGN_LOC_NAME)
                    OR (D.ENFRC_AGN_LOC_NAME IS NULL AND S.ENFRC_AGN_LOC_NAME IS NOT NULL)
                    OR (D.ENFRC_AGN_LOC_NAME IS NOT NULL AND S.ENFRC_AGN_LOC_NAME IS NULL)
                    OR
                    (D.ENFRC_ACT_IDEN IS NOT NULL AND S.ENFRC_ACT_IDEN IS NOT NULL AND
                     D.ENFRC_ACT_IDEN <> S.ENFRC_ACT_IDEN)
                    OR (D.ENFRC_ACT_IDEN IS NULL AND S.ENFRC_ACT_IDEN IS NOT NULL)
                    OR (D.ENFRC_ACT_IDEN IS NOT NULL AND S.ENFRC_ACT_IDEN IS NULL)
                    OR
                    (D.ENFRC_ACT_DATE IS NOT NULL AND S.ENFRC_ACT_DATE IS NOT NULL AND
                     D.ENFRC_ACT_DATE <> S.ENFRC_ACT_DATE)
                    OR (D.ENFRC_ACT_DATE IS NULL AND S.ENFRC_ACT_DATE IS NOT NULL)
                    OR (D.ENFRC_ACT_DATE IS NOT NULL AND S.ENFRC_ACT_DATE IS NULL)
                    OR
                    (D.ENFRC_AGN_NAME IS NOT NULL AND S.ENFRC_AGN_NAME IS NOT NULL AND
                     D.ENFRC_AGN_NAME <> S.ENFRC_AGN_NAME)
                    OR (D.ENFRC_AGN_NAME IS NULL AND S.ENFRC_AGN_NAME IS NOT NULL)
                    OR (D.ENFRC_AGN_NAME IS NOT NULL AND S.ENFRC_AGN_NAME IS NULL)
                    OR
                    (D.ENFRC_DOCKET_NUM IS NOT NULL AND S.ENFRC_DOCKET_NUM IS NOT NULL AND
                     D.ENFRC_DOCKET_NUM <> S.ENFRC_DOCKET_NUM)
                    OR (D.ENFRC_DOCKET_NUM IS NULL AND S.ENFRC_DOCKET_NUM IS NOT NULL)
                    OR (D.ENFRC_DOCKET_NUM IS NOT NULL AND S.ENFRC_DOCKET_NUM IS NULL)
                    OR (D.ENFRC_ATTRY IS NOT NULL AND S.ENFRC_ATTRY IS NOT NULL AND D.ENFRC_ATTRY <> S.ENFRC_ATTRY)
                    OR (D.ENFRC_ATTRY IS NULL AND S.ENFRC_ATTRY IS NOT NULL)
                    OR (D.ENFRC_ATTRY IS NOT NULL AND S.ENFRC_ATTRY IS NULL)
                    OR (D.CORCT_ACT_COMPT IS NOT NULL AND S.CORCT_ACT_COMPT IS NOT NULL AND
                        D.CORCT_ACT_COMPT <> S.CORCT_ACT_COMPT)
                    OR (D.CORCT_ACT_COMPT IS NULL AND S.CORCT_ACT_COMPT IS NOT NULL)
                    OR (D.CORCT_ACT_COMPT IS NOT NULL AND S.CORCT_ACT_COMPT IS NULL)
                    OR (D.CNST_AGMT_FINAL_ORDER_SEQ_NUM IS NOT NULL AND S.CNST_AGMT_FINAL_ORDER_SEQ_NUM IS NOT NULL AND
                        D.CNST_AGMT_FINAL_ORDER_SEQ_NUM <> S.CNST_AGMT_FINAL_ORDER_SEQ_NUM)
                    OR (D.CNST_AGMT_FINAL_ORDER_SEQ_NUM IS NULL AND S.CNST_AGMT_FINAL_ORDER_SEQ_NUM IS NOT NULL)
                    OR (D.CNST_AGMT_FINAL_ORDER_SEQ_NUM IS NOT NULL AND S.CNST_AGMT_FINAL_ORDER_SEQ_NUM IS NULL)
                    OR
                    (D.APPEAL_INIT_DATE IS NOT NULL AND S.APPEAL_INIT_DATE IS NOT NULL AND
                     D.APPEAL_INIT_DATE <> S.APPEAL_INIT_DATE)
                    OR (D.APPEAL_INIT_DATE IS NULL AND S.APPEAL_INIT_DATE IS NOT NULL)
                    OR (D.APPEAL_INIT_DATE IS NOT NULL AND S.APPEAL_INIT_DATE IS NULL)
                    OR
                    (D.APPEAL_RSLN_DATE IS NOT NULL AND S.APPEAL_RSLN_DATE IS NOT NULL AND
                     D.APPEAL_RSLN_DATE <> S.APPEAL_RSLN_DATE)
                    OR (D.APPEAL_RSLN_DATE IS NULL AND S.APPEAL_RSLN_DATE IS NOT NULL)
                    OR (D.APPEAL_RSLN_DATE IS NOT NULL AND S.APPEAL_RSLN_DATE IS NULL)
                    OR
                    (D.DISP_STAT_DATE IS NOT NULL AND S.DISP_STAT_DATE IS NOT NULL AND
                     D.DISP_STAT_DATE <> S.DISP_STAT_DATE)
                    OR (D.DISP_STAT_DATE IS NULL AND S.DISP_STAT_DATE IS NOT NULL)
                    OR (D.DISP_STAT_DATE IS NOT NULL AND S.DISP_STAT_DATE IS NULL)
                    OR (D.DISP_STAT_OWNER IS NOT NULL AND S.DISP_STAT_OWNER IS NOT NULL AND
                        D.DISP_STAT_OWNER <> S.DISP_STAT_OWNER)
                    OR (D.DISP_STAT_OWNER IS NULL AND S.DISP_STAT_OWNER IS NOT NULL)
                    OR (D.DISP_STAT_OWNER IS NOT NULL AND S.DISP_STAT_OWNER IS NULL)
                    OR (D.DISP_STAT IS NOT NULL AND S.DISP_STAT IS NOT NULL AND D.DISP_STAT <> S.DISP_STAT)
                    OR (D.DISP_STAT IS NULL AND S.DISP_STAT IS NOT NULL)
                    OR (D.DISP_STAT IS NOT NULL AND S.DISP_STAT IS NULL)
                    OR (D.ENFRC_OWNER IS NOT NULL AND S.ENFRC_OWNER IS NOT NULL AND D.ENFRC_OWNER <> S.ENFRC_OWNER)
                    OR (D.ENFRC_OWNER IS NULL AND S.ENFRC_OWNER IS NOT NULL)
                    OR (D.ENFRC_OWNER IS NOT NULL AND S.ENFRC_OWNER IS NULL)
                    OR (D.ENFRC_TYPE IS NOT NULL AND S.ENFRC_TYPE IS NOT NULL AND D.ENFRC_TYPE <> S.ENFRC_TYPE)
                    OR (D.ENFRC_TYPE IS NULL AND S.ENFRC_TYPE IS NOT NULL)
                    OR (D.ENFRC_TYPE IS NOT NULL AND S.ENFRC_TYPE IS NULL)
                    OR (D.ENFRC_RESP_PERSON_OWNER IS NOT NULL AND S.ENFRC_RESP_PERSON_OWNER IS NOT NULL AND
                        D.ENFRC_RESP_PERSON_OWNER <> S.ENFRC_RESP_PERSON_OWNER)
                    OR (D.ENFRC_RESP_PERSON_OWNER IS NULL AND S.ENFRC_RESP_PERSON_OWNER IS NOT NULL)
                    OR (D.ENFRC_RESP_PERSON_OWNER IS NOT NULL AND S.ENFRC_RESP_PERSON_OWNER IS NULL)
                    OR (D.ENFRC_RESP_PERSON_IDEN IS NOT NULL AND S.ENFRC_RESP_PERSON_IDEN IS NOT NULL AND
                        D.ENFRC_RESP_PERSON_IDEN <> S.ENFRC_RESP_PERSON_IDEN)
                    OR (D.ENFRC_RESP_PERSON_IDEN IS NULL AND S.ENFRC_RESP_PERSON_IDEN IS NOT NULL)
                    OR (D.ENFRC_RESP_PERSON_IDEN IS NOT NULL AND S.ENFRC_RESP_PERSON_IDEN IS NULL)
                    OR (D.ENFRC_RESP_SUBORG_OWNER IS NOT NULL AND S.ENFRC_RESP_SUBORG_OWNER IS NOT NULL AND
                        D.ENFRC_RESP_SUBORG_OWNER <> S.ENFRC_RESP_SUBORG_OWNER)
                    OR (D.ENFRC_RESP_SUBORG_OWNER IS NULL AND S.ENFRC_RESP_SUBORG_OWNER IS NOT NULL)
                    OR (D.ENFRC_RESP_SUBORG_OWNER IS NOT NULL AND S.ENFRC_RESP_SUBORG_OWNER IS NULL)
                    OR (D.ENFRC_RESP_SUBORG IS NOT NULL AND S.ENFRC_RESP_SUBORG IS NOT NULL AND
                        D.ENFRC_RESP_SUBORG <> S.ENFRC_RESP_SUBORG)
                    OR (D.ENFRC_RESP_SUBORG IS NULL AND S.ENFRC_RESP_SUBORG IS NOT NULL)
                    OR (D.ENFRC_RESP_SUBORG IS NOT NULL AND S.ENFRC_RESP_SUBORG IS NULL)
                    OR (D.NOTES IS NOT NULL AND S.NOTES IS NOT NULL AND D.NOTES <> S.NOTES)
                    OR (D.NOTES IS NULL AND S.NOTES IS NOT NULL)
                    OR (D.NOTES IS NOT NULL AND S.NOTES IS NULL)
                    OR (D.FA_REQUIRED IS NOT NULL AND S.FA_REQUIRED IS NOT NULL AND D.FA_REQUIRED <> S.FA_REQUIRED)
                    OR (D.FA_REQUIRED IS NULL AND S.FA_REQUIRED IS NOT NULL)
                    OR (D.FA_REQUIRED IS NOT NULL AND S.FA_REQUIRED IS NULL)
                ) THEN
            UPDATE
            SET D.TRANS_CODE                    = S.TRANS_CODE,
                D.ENFRC_AGN_LOC_NAME            = S.ENFRC_AGN_LOC_NAME,
                D.ENFRC_ACT_IDEN                = S.ENFRC_ACT_IDEN,
                D.ENFRC_ACT_DATE                = S.ENFRC_ACT_DATE,
                D.ENFRC_AGN_NAME                = S.ENFRC_AGN_NAME,
                D.ENFRC_DOCKET_NUM              = S.ENFRC_DOCKET_NUM,
                D.ENFRC_ATTRY                   = S.ENFRC_ATTRY,
                D.CORCT_ACT_COMPT               = S.CORCT_ACT_COMPT,
                D.CNST_AGMT_FINAL_ORDER_SEQ_NUM = S.CNST_AGMT_FINAL_ORDER_SEQ_NUM,
                D.APPEAL_INIT_DATE              = S.APPEAL_INIT_DATE,
                D.APPEAL_RSLN_DATE              = S.APPEAL_RSLN_DATE,
                D.DISP_STAT_DATE                = S.DISP_STAT_DATE,
                D.DISP_STAT_OWNER               = S.DISP_STAT_OWNER,
                D.DISP_STAT                     = S.DISP_STAT,
                D.ENFRC_OWNER                   = S.ENFRC_OWNER,
                D.ENFRC_TYPE                    = S.ENFRC_TYPE,
                D.ENFRC_RESP_PERSON_OWNER       = S.ENFRC_RESP_PERSON_OWNER,
                D.ENFRC_RESP_PERSON_IDEN        = S.ENFRC_RESP_PERSON_IDEN,
                D.ENFRC_RESP_SUBORG_OWNER       = S.ENFRC_RESP_SUBORG_OWNER,
                D.ENFRC_RESP_SUBORG             = S.ENFRC_RESP_SUBORG,
                D.NOTES                         = S.NOTES,
                D.FA_REQUIRED                   = S.FA_REQUIRED
        WHEN NOT MATCHED THEN
            INSERT (CME_FAC_SUBM_ID,
                    TRANS_CODE,
                    ENFRC_AGN_LOC_NAME,
                    ENFRC_ACT_IDEN,
                    ENFRC_ACT_DATE,
                    ENFRC_AGN_NAME,
                    ENFRC_DOCKET_NUM,
                    ENFRC_ATTRY,
                    CORCT_ACT_COMPT,
                    CNST_AGMT_FINAL_ORDER_SEQ_NUM,
                    APPEAL_INIT_DATE,
                    APPEAL_RSLN_DATE,
                    DISP_STAT_DATE,
                    DISP_STAT_OWNER,
                    DISP_STAT,
                    ENFRC_OWNER,
                    ENFRC_TYPE,
                    ENFRC_RESP_PERSON_OWNER,
                    ENFRC_RESP_PERSON_IDEN,
                    ENFRC_RESP_SUBORG_OWNER,
                    ENFRC_RESP_SUBORG,
                    NOTES,
                    FA_REQUIRED)
            VALUES (S.WH_CME_FAC_SUBM_ID,
                    S.TRANS_CODE,
                    S.ENFRC_AGN_LOC_NAME,
                    S.ENFRC_ACT_IDEN,
                    S.ENFRC_ACT_DATE,
                    S.ENFRC_AGN_NAME,
                    S.ENFRC_DOCKET_NUM,
                    S.ENFRC_ATTRY,
                    S.CORCT_ACT_COMPT,
                    S.CNST_AGMT_FINAL_ORDER_SEQ_NUM,
                    S.APPEAL_INIT_DATE,
                    S.APPEAL_RSLN_DATE,
                    S.DISP_STAT_DATE,
                    S.DISP_STAT_OWNER,
                    S.DISP_STAT,
                    S.ENFRC_OWNER,
                    S.ENFRC_TYPE,
                    S.ENFRC_RESP_PERSON_OWNER,
                    S.ENFRC_RESP_PERSON_IDEN,
                    S.ENFRC_RESP_SUBORG_OWNER,
                    S.ENFRC_RESP_SUBORG,
                    S.NOTES,
                    S.FA_REQUIRED);
        IF @localTran = 1 AND XACT_STATE() = 1
        COMMIT TRAN LocalTran

END TRY
BEGIN CATCH

    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT

    SELECT  @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE()

    IF @localTran = 1 AND XACT_STATE() <> 0
        ROLLBACK TRAN

    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

END CATCH
    END
GO
/****** Object:  StoredProcedure [dbo].[CME_MERGE_EVAL]    Script Date: 6/12/2019 2:50:58 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*************************************************************************************************
** ObjectName: CME_MERGE_EVAL.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_CME_EVAL table 
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  05/31/2019   ageery      Created.
**
***************************************************************************************************/ --
    CREATE PROCEDURE [dbo].[CME_MERGE_EVAL] @CME_SUBM_ID varchar(40) AS
    BEGIN
        SET NOCOUNT ON;
SET XACT_ABORT,
    QUOTED_IDENTIFIER,
    ANSI_NULLS,
    ANSI_PADDING,
    ANSI_WARNINGS,
    ARITHABORT,
    CONCAT_NULL_YIELDS_NULL ON;
SET NUMERIC_ROUNDABORT OFF;

DECLARE @int INT;

DECLARE @localTran BIT
IF @@TRANCOUNT = 0
BEGIN
    SET @localTran = 1
    BEGIN TRANSACTION LocalTran
END

BEGIN TRY
        MERGE INTO RCRA_CME_EVAL D
        USING (SELECT *
               FROM ETL_CME_EVAL_VW
               WHERE CME_SUBM_ID = @CME_SUBM_ID) S
        ON (D.CME_EVAL_ID = S.WH_CME_EVAL_ID)
        WHEN MATCHED
            AND (
                    (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NOT NULL AND D.TRANS_CODE <> S.TRANS_CODE)
                    OR (D.TRANS_CODE IS NULL AND S.TRANS_CODE IS NOT NULL)
                    OR (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NULL)
                    OR (D.EVAL_ACT_LOC IS NOT NULL AND S.EVAL_ACT_LOC IS NOT NULL AND D.EVAL_ACT_LOC <> S.EVAL_ACT_LOC)
                    OR (D.EVAL_ACT_LOC IS NULL AND S.EVAL_ACT_LOC IS NOT NULL)
                    OR (D.EVAL_ACT_LOC IS NOT NULL AND S.EVAL_ACT_LOC IS NULL)
                    OR (D.EVAL_IDEN IS NOT NULL AND S.EVAL_IDEN IS NOT NULL AND D.EVAL_IDEN <> S.EVAL_IDEN)
                    OR (D.EVAL_IDEN IS NULL AND S.EVAL_IDEN IS NOT NULL)
                    OR (D.EVAL_IDEN IS NOT NULL AND S.EVAL_IDEN IS NULL)
                    OR (D.EVAL_START_DATE IS NOT NULL AND S.EVAL_START_DATE IS NOT NULL AND
                        D.EVAL_START_DATE <> S.EVAL_START_DATE)
                    OR (D.EVAL_START_DATE IS NULL AND S.EVAL_START_DATE IS NOT NULL)
                    OR (D.EVAL_START_DATE IS NOT NULL AND S.EVAL_START_DATE IS NULL)
                    OR
                    (D.EVAL_RESP_AGN IS NOT NULL AND S.EVAL_RESP_AGN IS NOT NULL AND D.EVAL_RESP_AGN <> S.EVAL_RESP_AGN)
                    OR (D.EVAL_RESP_AGN IS NULL AND S.EVAL_RESP_AGN IS NOT NULL)
                    OR (D.EVAL_RESP_AGN IS NOT NULL AND S.EVAL_RESP_AGN IS NULL)
                    OR (D.DAY_ZERO IS NOT NULL AND S.DAY_ZERO IS NOT NULL AND D.DAY_ZERO <> S.DAY_ZERO)
                    OR (D.DAY_ZERO IS NULL AND S.DAY_ZERO IS NOT NULL)
                    OR (D.DAY_ZERO IS NOT NULL AND S.DAY_ZERO IS NULL)
                    OR (D.FOUND_VIOL IS NOT NULL AND S.FOUND_VIOL IS NOT NULL AND D.FOUND_VIOL <> S.FOUND_VIOL)
                    OR (D.FOUND_VIOL IS NULL AND S.FOUND_VIOL IS NOT NULL)
                    OR (D.FOUND_VIOL IS NOT NULL AND S.FOUND_VIOL IS NULL)
                    OR
                    (D.CTZN_CPLT_IND IS NOT NULL AND S.CTZN_CPLT_IND IS NOT NULL AND D.CTZN_CPLT_IND <> S.CTZN_CPLT_IND)
                    OR (D.CTZN_CPLT_IND IS NULL AND S.CTZN_CPLT_IND IS NOT NULL)
                    OR (D.CTZN_CPLT_IND IS NOT NULL AND S.CTZN_CPLT_IND IS NULL)
                    OR
                    (D.MULTIMEDIA_IND IS NOT NULL AND S.MULTIMEDIA_IND IS NOT NULL AND
                     D.MULTIMEDIA_IND <> S.MULTIMEDIA_IND)
                    OR (D.MULTIMEDIA_IND IS NULL AND S.MULTIMEDIA_IND IS NOT NULL)
                    OR (D.MULTIMEDIA_IND IS NOT NULL AND S.MULTIMEDIA_IND IS NULL)
                    OR (D.SAMPL_IND IS NOT NULL AND S.SAMPL_IND IS NOT NULL AND D.SAMPL_IND <> S.SAMPL_IND)
                    OR (D.SAMPL_IND IS NULL AND S.SAMPL_IND IS NOT NULL)
                    OR (D.SAMPL_IND IS NOT NULL AND S.SAMPL_IND IS NULL)
                    OR (D.NOT_SUBTL_C_IND IS NOT NULL AND S.NOT_SUBTL_C_IND IS NOT NULL AND
                        D.NOT_SUBTL_C_IND <> S.NOT_SUBTL_C_IND)
                    OR (D.NOT_SUBTL_C_IND IS NULL AND S.NOT_SUBTL_C_IND IS NOT NULL)
                    OR (D.NOT_SUBTL_C_IND IS NOT NULL AND S.NOT_SUBTL_C_IND IS NULL)
                    OR (D.EVAL_TYPE_OWNER IS NOT NULL AND S.EVAL_TYPE_OWNER IS NOT NULL AND
                        D.EVAL_TYPE_OWNER <> S.EVAL_TYPE_OWNER)
                    OR (D.EVAL_TYPE_OWNER IS NULL AND S.EVAL_TYPE_OWNER IS NOT NULL)
                    OR (D.EVAL_TYPE_OWNER IS NOT NULL AND S.EVAL_TYPE_OWNER IS NULL)
                    OR (D.EVAL_TYPE IS NOT NULL AND S.EVAL_TYPE IS NOT NULL AND D.EVAL_TYPE <> S.EVAL_TYPE)
                    OR (D.EVAL_TYPE IS NULL AND S.EVAL_TYPE IS NOT NULL)
                    OR (D.EVAL_TYPE IS NOT NULL AND S.EVAL_TYPE IS NULL)
                    OR
                    (D.FOCUS_AREA_OWNER IS NOT NULL AND S.FOCUS_AREA_OWNER IS NOT NULL AND
                     D.FOCUS_AREA_OWNER <> S.FOCUS_AREA_OWNER)
                    OR (D.FOCUS_AREA_OWNER IS NULL AND S.FOCUS_AREA_OWNER IS NOT NULL)
                    OR (D.FOCUS_AREA_OWNER IS NOT NULL AND S.FOCUS_AREA_OWNER IS NULL)
                    OR (D.FOCUS_AREA IS NOT NULL AND S.FOCUS_AREA IS NOT NULL AND D.FOCUS_AREA <> S.FOCUS_AREA)
                    OR (D.FOCUS_AREA IS NULL AND S.FOCUS_AREA IS NOT NULL)
                    OR (D.FOCUS_AREA IS NOT NULL AND S.FOCUS_AREA IS NULL)
                    OR (D.EVAL_RESP_PERSON_IDEN_OWNER IS NOT NULL AND S.EVAL_RESP_PERSON_IDEN_OWNER IS NOT NULL AND
                        D.EVAL_RESP_PERSON_IDEN_OWNER <> S.EVAL_RESP_PERSON_IDEN_OWNER)
                    OR (D.EVAL_RESP_PERSON_IDEN_OWNER IS NULL AND S.EVAL_RESP_PERSON_IDEN_OWNER IS NOT NULL)
                    OR (D.EVAL_RESP_PERSON_IDEN_OWNER IS NOT NULL AND S.EVAL_RESP_PERSON_IDEN_OWNER IS NULL)
                    OR (D.EVAL_RESP_PERSON_IDEN IS NOT NULL AND S.EVAL_RESP_PERSON_IDEN IS NOT NULL AND
                        D.EVAL_RESP_PERSON_IDEN <> S.EVAL_RESP_PERSON_IDEN)
                    OR (D.EVAL_RESP_PERSON_IDEN IS NULL AND S.EVAL_RESP_PERSON_IDEN IS NOT NULL)
                    OR (D.EVAL_RESP_PERSON_IDEN IS NOT NULL AND S.EVAL_RESP_PERSON_IDEN IS NULL)
                    OR (D.EVAL_RESP_SUBORG_OWNER IS NOT NULL AND S.EVAL_RESP_SUBORG_OWNER IS NOT NULL AND
                        D.EVAL_RESP_SUBORG_OWNER <> S.EVAL_RESP_SUBORG_OWNER)
                    OR (D.EVAL_RESP_SUBORG_OWNER IS NULL AND S.EVAL_RESP_SUBORG_OWNER IS NOT NULL)
                    OR (D.EVAL_RESP_SUBORG_OWNER IS NOT NULL AND S.EVAL_RESP_SUBORG_OWNER IS NULL)
                    OR
                    (D.EVAL_RESP_SUBORG IS NOT NULL AND S.EVAL_RESP_SUBORG IS NOT NULL AND
                     D.EVAL_RESP_SUBORG <> S.EVAL_RESP_SUBORG)
                    OR (D.EVAL_RESP_SUBORG IS NULL AND S.EVAL_RESP_SUBORG IS NOT NULL)
                    OR (D.EVAL_RESP_SUBORG IS NOT NULL AND S.EVAL_RESP_SUBORG IS NULL)
                    OR (D.NOTES IS NOT NULL AND S.NOTES IS NOT NULL AND D.NOTES <> S.NOTES)
                    OR (D.NOTES IS NULL AND S.NOTES IS NOT NULL)
                    OR (D.NOTES IS NOT NULL AND S.NOTES IS NULL)
                    OR (D.NOC_DATE IS NOT NULL AND S.NOC_DATE IS NOT NULL AND D.NOC_DATE <> S.NOC_DATE)
                    OR (D.NOC_DATE IS NULL AND S.NOC_DATE IS NOT NULL)
                    OR (D.NOC_DATE IS NOT NULL AND S.NOC_DATE IS NULL)
                ) THEN
            UPDATE
            SET D.TRANS_CODE                  = S.TRANS_CODE,
                D.EVAL_ACT_LOC                = S.EVAL_ACT_LOC,
                D.EVAL_IDEN                   = S.EVAL_IDEN,
                D.EVAL_START_DATE             = S.EVAL_START_DATE,
                D.EVAL_RESP_AGN               = S.EVAL_RESP_AGN,
                D.DAY_ZERO                    = S.DAY_ZERO,
                D.FOUND_VIOL                  = S.FOUND_VIOL,
                D.CTZN_CPLT_IND               = S.CTZN_CPLT_IND,
                D.MULTIMEDIA_IND              = S.MULTIMEDIA_IND,
                D.SAMPL_IND                   = S.SAMPL_IND,
                D.NOT_SUBTL_C_IND             = S.NOT_SUBTL_C_IND,
                D.EVAL_TYPE_OWNER             = S.EVAL_TYPE_OWNER,
                D.EVAL_TYPE                   = S.EVAL_TYPE,
                D.FOCUS_AREA_OWNER            = S.FOCUS_AREA_OWNER,
                D.FOCUS_AREA                  = S.FOCUS_AREA,
                D.EVAL_RESP_PERSON_IDEN_OWNER = S.EVAL_RESP_PERSON_IDEN_OWNER,
                D.EVAL_RESP_PERSON_IDEN       = S.EVAL_RESP_PERSON_IDEN,
                D.EVAL_RESP_SUBORG_OWNER      = S.EVAL_RESP_SUBORG_OWNER,
                D.EVAL_RESP_SUBORG            = S.EVAL_RESP_SUBORG,
                D.NOTES                       = S.NOTES,
                D.NOC_DATE                    = S.NOC_DATE
        WHEN NOT MATCHED THEN
            INSERT (CME_FAC_SUBM_ID,
                    TRANS_CODE,
                    EVAL_ACT_LOC,
                    EVAL_IDEN,
                    EVAL_START_DATE,
                    EVAL_RESP_AGN,
                    DAY_ZERO,
                    FOUND_VIOL,
                    CTZN_CPLT_IND,
                    MULTIMEDIA_IND,
                    SAMPL_IND,
                    NOT_SUBTL_C_IND,
                    EVAL_TYPE_OWNER,
                    EVAL_TYPE,
                    FOCUS_AREA_OWNER,
                    FOCUS_AREA,
                    EVAL_RESP_PERSON_IDEN_OWNER,
                    EVAL_RESP_PERSON_IDEN,
                    EVAL_RESP_SUBORG_OWNER,
                    EVAL_RESP_SUBORG,
                    NOTES,
                    NOC_DATE)
            VALUES (S.WH_CME_FAC_SUBM_ID,
                    S.TRANS_CODE,
                    S.EVAL_ACT_LOC,
                    S.EVAL_IDEN,
                    S.EVAL_START_DATE,
                    S.EVAL_RESP_AGN,
                    S.DAY_ZERO,
                    S.FOUND_VIOL,
                    S.CTZN_CPLT_IND,
                    S.MULTIMEDIA_IND,
                    S.SAMPL_IND,
                    S.NOT_SUBTL_C_IND,
                    S.EVAL_TYPE_OWNER,
                    S.EVAL_TYPE,
                    S.FOCUS_AREA_OWNER,
                    S.FOCUS_AREA,
                    S.EVAL_RESP_PERSON_IDEN_OWNER,
                    S.EVAL_RESP_PERSON_IDEN,
                    S.EVAL_RESP_SUBORG_OWNER,
                    S.EVAL_RESP_SUBORG,
                    S.NOTES,
                    S.NOC_DATE);
        IF @localTran = 1 AND XACT_STATE() = 1
        COMMIT TRAN LocalTran

END TRY
BEGIN CATCH

    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT

    SELECT  @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE()

    IF @localTran = 1 AND XACT_STATE() <> 0
        ROLLBACK TRAN

    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

END CATCH
    END
GO
/****** Object:  StoredProcedure [dbo].[CME_MERGE_EVAL_COMMIT]    Script Date: 6/12/2019 2:50:58 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*************************************************************************************************
** ObjectName: CME_MERGE_EVAL_COMMIT.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_CME_EVAL_COMMIT table 
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  05/31/2019   ageery      Created.
**
***************************************************************************************************/ --
    CREATE PROCEDURE [dbo].[CME_MERGE_EVAL_COMMIT] @CME_SUBM_ID varchar(40) AS
    BEGIN
        SET NOCOUNT ON;
SET XACT_ABORT,
    QUOTED_IDENTIFIER,
    ANSI_NULLS,
    ANSI_PADDING,
    ANSI_WARNINGS,
    ARITHABORT,
    CONCAT_NULL_YIELDS_NULL ON;
SET NUMERIC_ROUNDABORT OFF;

DECLARE @int INT;

DECLARE @localTran BIT
IF @@TRANCOUNT = 0
BEGIN
    SET @localTran = 1
    BEGIN TRANSACTION LocalTran
END

BEGIN TRY
        MERGE INTO RCRA_CME_EVAL_COMMIT D
        USING (SELECT *
               FROM ETL_CME_EVAL_COMMIT_VW
               WHERE CME_SUBM_ID = @CME_SUBM_ID) S
        ON (D.CME_EVAL_COMMIT_ID = S.WH_CME_EVAL_COMMIT_ID)
        WHEN MATCHED
            AND (
                    (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NOT NULL AND D.TRANS_CODE <> S.TRANS_CODE)
                    OR (D.TRANS_CODE IS NULL AND S.TRANS_CODE IS NOT NULL)
                    OR (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NULL)
                    OR (D.COMMIT_LEAD IS NOT NULL AND S.COMMIT_LEAD IS NOT NULL AND D.COMMIT_LEAD <> S.COMMIT_LEAD)
                    OR (D.COMMIT_LEAD IS NULL AND S.COMMIT_LEAD IS NOT NULL)
                    OR (D.COMMIT_LEAD IS NOT NULL AND S.COMMIT_LEAD IS NULL)
                    OR
                    (D.COMMIT_SEQ_NUM IS NOT NULL AND S.COMMIT_SEQ_NUM IS NOT NULL AND
                     D.COMMIT_SEQ_NUM <> S.COMMIT_SEQ_NUM)
                    OR (D.COMMIT_SEQ_NUM IS NULL AND S.COMMIT_SEQ_NUM IS NOT NULL)
                    OR (D.COMMIT_SEQ_NUM IS NOT NULL AND S.COMMIT_SEQ_NUM IS NULL)
                ) THEN
            UPDATE
            SET D.TRANS_CODE     = S.TRANS_CODE,
                D.COMMIT_LEAD    = S.COMMIT_LEAD,
                D.COMMIT_SEQ_NUM = S.COMMIT_SEQ_NUM
        WHEN NOT MATCHED THEN
            INSERT (CME_EVAL_ID,
                    TRANS_CODE,
                    COMMIT_LEAD,
                    COMMIT_SEQ_NUM)
            VALUES (S.WH_CME_EVAL_ID,
                    S.TRANS_CODE,
                    S.COMMIT_LEAD,
                    S.COMMIT_SEQ_NUM);
        IF @localTran = 1 AND XACT_STATE() = 1
        COMMIT TRAN LocalTran

END TRY
BEGIN CATCH

    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT

    SELECT  @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE()

    IF @localTran = 1 AND XACT_STATE() <> 0
        ROLLBACK TRAN

    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

END CATCH
    END
GO
/****** Object:  StoredProcedure [dbo].[CME_MERGE_EVAL_VIOL]    Script Date: 6/12/2019 2:50:58 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*************************************************************************************************
** ObjectName: CME_MERGE_EVAL_VIOL.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_CME_EVAL_VIOL table 
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  05/31/2019   ageery      Created.
**
***************************************************************************************************/ --
    CREATE PROCEDURE [dbo].[CME_MERGE_EVAL_VIOL] @CME_SUBM_ID varchar(40) AS
    BEGIN
        SET NOCOUNT ON;
SET XACT_ABORT,
    QUOTED_IDENTIFIER,
    ANSI_NULLS,
    ANSI_PADDING,
    ANSI_WARNINGS,
    ARITHABORT,
    CONCAT_NULL_YIELDS_NULL ON;
SET NUMERIC_ROUNDABORT OFF;

DECLARE @int INT;

DECLARE @localTran BIT
IF @@TRANCOUNT = 0
BEGIN
    SET @localTran = 1
    BEGIN TRANSACTION LocalTran
END

BEGIN TRY
        MERGE INTO RCRA_CME_EVAL_VIOL D
        USING (SELECT *
               FROM ETL_CME_EVAL_VIOL_VW
               WHERE CME_SUBM_ID = @CME_SUBM_ID) S
        ON (D.CME_EVAL_VIOL_ID = S.WH_CME_EVAL_VIOL_ID)
        WHEN MATCHED
            AND (
                    (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NOT NULL AND D.TRANS_CODE <> S.TRANS_CODE)
                    OR (D.TRANS_CODE IS NULL AND S.TRANS_CODE IS NOT NULL)
                    OR (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NULL)
                    OR (D.VIOL_SEQ_NUM IS NOT NULL AND S.VIOL_SEQ_NUM IS NOT NULL AND D.VIOL_SEQ_NUM <> S.VIOL_SEQ_NUM)
                    OR (D.VIOL_SEQ_NUM IS NULL AND S.VIOL_SEQ_NUM IS NOT NULL)
                    OR (D.VIOL_SEQ_NUM IS NOT NULL AND S.VIOL_SEQ_NUM IS NULL)
                    OR (D.VIOL_ACT_LOC IS NOT NULL AND S.VIOL_ACT_LOC IS NOT NULL AND D.VIOL_ACT_LOC <> S.VIOL_ACT_LOC)
                    OR (D.VIOL_ACT_LOC IS NULL AND S.VIOL_ACT_LOC IS NOT NULL)
                    OR (D.VIOL_ACT_LOC IS NOT NULL AND S.VIOL_ACT_LOC IS NULL)
                    OR (D.AGN_WHICH_DTRM_VIOL IS NOT NULL AND S.AGN_WHICH_DTRM_VIOL IS NOT NULL AND
                        D.AGN_WHICH_DTRM_VIOL <> S.AGN_WHICH_DTRM_VIOL)
                    OR (D.AGN_WHICH_DTRM_VIOL IS NULL AND S.AGN_WHICH_DTRM_VIOL IS NOT NULL)
                    OR (D.AGN_WHICH_DTRM_VIOL IS NOT NULL AND S.AGN_WHICH_DTRM_VIOL IS NULL)
                ) THEN
            UPDATE
            SET D.TRANS_CODE          = S.TRANS_CODE,
                D.VIOL_SEQ_NUM        = S.VIOL_SEQ_NUM,
                D.VIOL_ACT_LOC        = S.VIOL_ACT_LOC,
                D.AGN_WHICH_DTRM_VIOL = S.AGN_WHICH_DTRM_VIOL
        WHEN NOT MATCHED THEN
            INSERT (CME_EVAL_ID,
                    TRANS_CODE,
                    VIOL_SEQ_NUM,
                    VIOL_ACT_LOC,
                    AGN_WHICH_DTRM_VIOL)
            VALUES (S.WH_CME_EVAL_ID,
                    S.TRANS_CODE,
                    S.VIOL_SEQ_NUM,
                    S.VIOL_ACT_LOC,
                    S.AGN_WHICH_DTRM_VIOL);
        IF @localTran = 1 AND XACT_STATE() = 1
        COMMIT TRAN LocalTran

END TRY
BEGIN CATCH

    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT

    SELECT  @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE()

    IF @localTran = 1 AND XACT_STATE() <> 0
        ROLLBACK TRAN

    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

END CATCH
    END
GO
/****** Object:  StoredProcedure [dbo].[CME_MERGE_FAC_SUBM]    Script Date: 6/12/2019 2:50:58 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*************************************************************************************************
** ObjectName: CME_MERGE_FAC_SUBM.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_CME_FAC_SUBM table 
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  05/31/2019   ageery      Created.
**
***************************************************************************************************/ --
    CREATE PROCEDURE [dbo].[CME_MERGE_FAC_SUBM] @CME_SUBM_ID varchar(40) AS
    BEGIN
        SET NOCOUNT ON;
SET XACT_ABORT,
    QUOTED_IDENTIFIER,
    ANSI_NULLS,
    ANSI_PADDING,
    ANSI_WARNINGS,
    ARITHABORT,
    CONCAT_NULL_YIELDS_NULL ON;
SET NUMERIC_ROUNDABORT OFF;

DECLARE @int INT;

DECLARE @localTran BIT
IF @@TRANCOUNT = 0
BEGIN
    SET @localTran = 1
    BEGIN TRANSACTION LocalTran
END

BEGIN TRY
        MERGE INTO RCRA_CME_FAC_SUBM D
        USING (SELECT *
               FROM ETL_CME_FAC_SUBM_VW
               WHERE CME_SUBM_ID = @CME_SUBM_ID) S
        ON (D.CME_FAC_SUBM_ID = S.WH_CME_FAC_SUBM_ID)
        WHEN NOT MATCHED THEN
            INSERT (
                EPA_HDLR_ID
            )
            VALUES (
                       S.EPA_HDLR_ID
                   );
        IF @localTran = 1 AND XACT_STATE() = 1
        COMMIT TRAN LocalTran

END TRY
BEGIN CATCH

    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT

    SELECT  @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE()

    IF @localTran = 1 AND XACT_STATE() <> 0
        ROLLBACK TRAN

    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

END CATCH
    END
GO
/****** Object:  StoredProcedure [dbo].[CME_MERGE_MEDIA]    Script Date: 6/12/2019 2:50:58 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*************************************************************************************************
** ObjectName: CME_MERGE_MEDIA.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_CME_MEDIA table 
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  05/31/2019   ageery      Created.
**
***************************************************************************************************/ --
    CREATE PROCEDURE [dbo].[CME_MERGE_MEDIA] @CME_SUBM_ID varchar(40) AS
    BEGIN
        SET NOCOUNT ON;
SET XACT_ABORT,
    QUOTED_IDENTIFIER,
    ANSI_NULLS,
    ANSI_PADDING,
    ANSI_WARNINGS,
    ARITHABORT,
    CONCAT_NULL_YIELDS_NULL ON;
SET NUMERIC_ROUNDABORT OFF;

DECLARE @int INT;

DECLARE @localTran BIT
IF @@TRANCOUNT = 0
BEGIN
    SET @localTran = 1
    BEGIN TRANSACTION LocalTran
END

BEGIN TRY
        MERGE INTO RCRA_CME_MEDIA D
        USING (SELECT *
               FROM ETL_CME_MEDIA_VW
               WHERE CME_SUBM_ID = @CME_SUBM_ID) S
        ON (D.CME_MEDIA_ID = S.WH_CME_MEDIA_ID)
        WHEN MATCHED
            AND (
                    (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NOT NULL AND D.TRANS_CODE <> S.TRANS_CODE)
                    OR (D.TRANS_CODE IS NULL AND S.TRANS_CODE IS NOT NULL)
                    OR (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NULL)
                    OR (D.MULTIMEDIA_CODE_OWNER IS NOT NULL AND S.MULTIMEDIA_CODE_OWNER IS NOT NULL AND
                        D.MULTIMEDIA_CODE_OWNER <> S.MULTIMEDIA_CODE_OWNER)
                    OR (D.MULTIMEDIA_CODE_OWNER IS NULL AND S.MULTIMEDIA_CODE_OWNER IS NOT NULL)
                    OR (D.MULTIMEDIA_CODE_OWNER IS NOT NULL AND S.MULTIMEDIA_CODE_OWNER IS NULL)
                    OR (D.MULTIMEDIA_CODE IS NOT NULL AND S.MULTIMEDIA_CODE IS NOT NULL AND
                        D.MULTIMEDIA_CODE <> S.MULTIMEDIA_CODE)
                    OR (D.MULTIMEDIA_CODE IS NULL AND S.MULTIMEDIA_CODE IS NOT NULL)
                    OR (D.MULTIMEDIA_CODE IS NOT NULL AND S.MULTIMEDIA_CODE IS NULL)
                ) THEN
            UPDATE
            SET D.TRANS_CODE            = S.TRANS_CODE,
                D.MULTIMEDIA_CODE_OWNER = S.MULTIMEDIA_CODE_OWNER,
                D.MULTIMEDIA_CODE       = S.MULTIMEDIA_CODE
        WHEN NOT MATCHED THEN
            INSERT (CME_ENFRC_ACT_ID,
                    TRANS_CODE,
                    MULTIMEDIA_CODE_OWNER,
                    MULTIMEDIA_CODE)
            VALUES (S.WH_CME_ENFR_ACT_ID,
                    S.TRANS_CODE,
                    S.MULTIMEDIA_CODE_OWNER,
                    S.MULTIMEDIA_CODE);
        IF @localTran = 1 AND XACT_STATE() = 1
        COMMIT TRAN LocalTran

END TRY
BEGIN CATCH

    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT

    SELECT  @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE()

    IF @localTran = 1 AND XACT_STATE() <> 0
        ROLLBACK TRAN

    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

END CATCH
    END
GO
/****** Object:  StoredProcedure [dbo].[CME_MERGE_MILESTONE]    Script Date: 6/12/2019 2:50:58 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*************************************************************************************************
** ObjectName: CME_MERGE_MILESTONE.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_CME_MILESTONE table 
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  05/31/2019   ageery      Created.
**
***************************************************************************************************/ --
    CREATE PROCEDURE [dbo].[CME_MERGE_MILESTONE] @CME_SUBM_ID varchar(40) AS
    BEGIN
        SET NOCOUNT ON;
SET XACT_ABORT,
    QUOTED_IDENTIFIER,
    ANSI_NULLS,
    ANSI_PADDING,
    ANSI_WARNINGS,
    ARITHABORT,
    CONCAT_NULL_YIELDS_NULL ON;
SET NUMERIC_ROUNDABORT OFF;

DECLARE @int INT;

DECLARE @localTran BIT
IF @@TRANCOUNT = 0
BEGIN
    SET @localTran = 1
    BEGIN TRANSACTION LocalTran
END

BEGIN TRY
        MERGE INTO RCRA_CME_MILESTONE D
        USING (SELECT *
               FROM ETL_CME_MILESTONE_VW
               WHERE CME_SUBM_ID = @CME_SUBM_ID) S
        ON (D.CME_MILESTONE_ID = S.WH_CME_MILESTONE_ID)
        WHEN MATCHED
            AND (
                    (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NOT NULL AND D.TRANS_CODE <> S.TRANS_CODE)
                    OR (D.TRANS_CODE IS NULL AND S.TRANS_CODE IS NOT NULL)
                    OR (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NULL)
                    OR (D.MILESTONE_SEQ_NUM IS NOT NULL AND S.MILESTONE_SEQ_NUM IS NOT NULL AND
                        D.MILESTONE_SEQ_NUM <> S.MILESTONE_SEQ_NUM)
                    OR (D.MILESTONE_SEQ_NUM IS NULL AND S.MILESTONE_SEQ_NUM IS NOT NULL)
                    OR (D.MILESTONE_SEQ_NUM IS NOT NULL AND S.MILESTONE_SEQ_NUM IS NULL)
                    OR
                    (D.TECH_RQMT_IDEN IS NOT NULL AND S.TECH_RQMT_IDEN IS NOT NULL AND
                     D.TECH_RQMT_IDEN <> S.TECH_RQMT_IDEN)
                    OR (D.TECH_RQMT_IDEN IS NULL AND S.TECH_RQMT_IDEN IS NOT NULL)
                    OR (D.TECH_RQMT_IDEN IS NOT NULL AND S.TECH_RQMT_IDEN IS NULL)
                    OR
                    (D.TECH_RQMT_DESC IS NOT NULL AND S.TECH_RQMT_DESC IS NOT NULL AND
                     D.TECH_RQMT_DESC <> S.TECH_RQMT_DESC)
                    OR (D.TECH_RQMT_DESC IS NULL AND S.TECH_RQMT_DESC IS NOT NULL)
                    OR (D.TECH_RQMT_DESC IS NOT NULL AND S.TECH_RQMT_DESC IS NULL)
                    OR (D.MILESTONE_SCHD_COMP_DATE IS NOT NULL AND S.MILESTONE_SCHD_COMP_DATE IS NOT NULL AND
                        D.MILESTONE_SCHD_COMP_DATE <> S.MILESTONE_SCHD_COMP_DATE)
                    OR (D.MILESTONE_SCHD_COMP_DATE IS NULL AND S.MILESTONE_SCHD_COMP_DATE IS NOT NULL)
                    OR (D.MILESTONE_SCHD_COMP_DATE IS NOT NULL AND S.MILESTONE_SCHD_COMP_DATE IS NULL)
                    OR (D.MILESTONE_ACTL_COMP_DATE IS NOT NULL AND S.MILESTONE_ACTL_COMP_DATE IS NOT NULL AND
                        D.MILESTONE_ACTL_COMP_DATE <> S.MILESTONE_ACTL_COMP_DATE)
                    OR (D.MILESTONE_ACTL_COMP_DATE IS NULL AND S.MILESTONE_ACTL_COMP_DATE IS NOT NULL)
                    OR (D.MILESTONE_ACTL_COMP_DATE IS NOT NULL AND S.MILESTONE_ACTL_COMP_DATE IS NULL)
                    OR (D.MILESTONE_DFLT_DATE IS NOT NULL AND S.MILESTONE_DFLT_DATE IS NOT NULL AND
                        D.MILESTONE_DFLT_DATE <> S.MILESTONE_DFLT_DATE)
                    OR (D.MILESTONE_DFLT_DATE IS NULL AND S.MILESTONE_DFLT_DATE IS NOT NULL)
                    OR (D.MILESTONE_DFLT_DATE IS NOT NULL AND S.MILESTONE_DFLT_DATE IS NULL)
                    OR (D.NOTES IS NOT NULL AND S.NOTES IS NOT NULL AND D.NOTES <> S.NOTES)
                    OR (D.NOTES IS NULL AND S.NOTES IS NOT NULL)
                    OR (D.NOTES IS NOT NULL AND S.NOTES IS NULL)
                ) THEN
            UPDATE
            SET D.TRANS_CODE               = S.TRANS_CODE,
                D.MILESTONE_SEQ_NUM        = S.MILESTONE_SEQ_NUM,
                D.TECH_RQMT_IDEN           = S.TECH_RQMT_IDEN,
                D.TECH_RQMT_DESC           = S.TECH_RQMT_DESC,
                D.MILESTONE_SCHD_COMP_DATE = S.MILESTONE_SCHD_COMP_DATE,
                D.MILESTONE_ACTL_COMP_DATE = S.MILESTONE_ACTL_COMP_DATE,
                D.MILESTONE_DFLT_DATE      = S.MILESTONE_DFLT_DATE,
                D.NOTES                    = S.NOTES
        WHEN NOT MATCHED THEN
            INSERT (CME_ENFRC_ACT_ID,
                    TRANS_CODE,
                    MILESTONE_SEQ_NUM,
                    TECH_RQMT_IDEN,
                    TECH_RQMT_DESC,
                    MILESTONE_SCHD_COMP_DATE,
                    MILESTONE_ACTL_COMP_DATE,
                    MILESTONE_DFLT_DATE,
                    NOTES)
            VALUES (S.WH_CME_ENFR_ACT_ID,
                    S.TRANS_CODE,
                    S.MILESTONE_SEQ_NUM,
                    S.TECH_RQMT_IDEN,
                    S.TECH_RQMT_DESC,
                    S.MILESTONE_SCHD_COMP_DATE,
                    S.MILESTONE_ACTL_COMP_DATE,
                    S.MILESTONE_DFLT_DATE,
                    S.NOTES);
        IF @localTran = 1 AND XACT_STATE() = 1
        COMMIT TRAN LocalTran

END TRY
BEGIN CATCH

    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT

    SELECT  @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE()

    IF @localTran = 1 AND XACT_STATE() <> 0
        ROLLBACK TRAN

    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

END CATCH
    END
GO
/****** Object:  StoredProcedure [dbo].[CME_MERGE_PNLTY]    Script Date: 6/12/2019 2:50:58 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*************************************************************************************************
** ObjectName: CME_MERGE_PNLTY.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_CME_PNLTY table 
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  05/31/2019   ageery      Created.
**
***************************************************************************************************/ --
    CREATE PROCEDURE [dbo].[CME_MERGE_PNLTY] @CME_SUBM_ID varchar(40) AS
    BEGIN
        SET NOCOUNT ON;
SET XACT_ABORT,
    QUOTED_IDENTIFIER,
    ANSI_NULLS,
    ANSI_PADDING,
    ANSI_WARNINGS,
    ARITHABORT,
    CONCAT_NULL_YIELDS_NULL ON;
SET NUMERIC_ROUNDABORT OFF;

DECLARE @int INT;

DECLARE @localTran BIT
IF @@TRANCOUNT = 0
BEGIN
    SET @localTran = 1
    BEGIN TRANSACTION LocalTran
END

BEGIN TRY
        MERGE INTO RCRA_CME_PNLTY D
        USING (SELECT *
               FROM ETL_CME_PNLTY_VW
               WHERE CME_SUBM_ID = @CME_SUBM_ID) S
        ON (D.CME_PNLTY_ID = S.WH_CME_PNLTY_ID)
        WHEN MATCHED
            AND (
                    (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NOT NULL AND D.TRANS_CODE <> S.TRANS_CODE)
                    OR (D.TRANS_CODE IS NULL AND S.TRANS_CODE IS NOT NULL)
                    OR (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NULL)
                    OR
                    (D.PNLTY_TYPE_OWNER IS NOT NULL AND S.PNLTY_TYPE_OWNER IS NOT NULL AND
                     D.PNLTY_TYPE_OWNER <> S.PNLTY_TYPE_OWNER)
                    OR (D.PNLTY_TYPE_OWNER IS NULL AND S.PNLTY_TYPE_OWNER IS NOT NULL)
                    OR (D.PNLTY_TYPE_OWNER IS NOT NULL AND S.PNLTY_TYPE_OWNER IS NULL)
                    OR (D.PNLTY_TYPE IS NOT NULL AND S.PNLTY_TYPE IS NOT NULL AND D.PNLTY_TYPE <> S.PNLTY_TYPE)
                    OR (D.PNLTY_TYPE IS NULL AND S.PNLTY_TYPE IS NOT NULL)
                    OR (D.PNLTY_TYPE IS NOT NULL AND S.PNLTY_TYPE IS NULL)
                    OR
                    (D.CASH_CIVIL_PNLTY_SOUGHT_AMOUNT IS NOT NULL AND S.CASH_CIVIL_PNLTY_SOUGHT_AMOUNT IS NOT NULL AND
                     D.CASH_CIVIL_PNLTY_SOUGHT_AMOUNT <> S.CASH_CIVIL_PNLTY_SOUGHT_AMOUNT)
                    OR (D.CASH_CIVIL_PNLTY_SOUGHT_AMOUNT IS NULL AND S.CASH_CIVIL_PNLTY_SOUGHT_AMOUNT IS NOT NULL)
                    OR (D.CASH_CIVIL_PNLTY_SOUGHT_AMOUNT IS NOT NULL AND S.CASH_CIVIL_PNLTY_SOUGHT_AMOUNT IS NULL)
                    OR (D.NOTES IS NOT NULL AND S.NOTES IS NOT NULL AND D.NOTES <> S.NOTES)
                    OR (D.NOTES IS NULL AND S.NOTES IS NOT NULL)
                    OR (D.NOTES IS NOT NULL AND S.NOTES IS NULL)
                )
            THEN
            UPDATE
            SET D.TRANS_CODE                     = S.TRANS_CODE,
                D.PNLTY_TYPE_OWNER               = S.PNLTY_TYPE_OWNER,
                D.PNLTY_TYPE                     = S.PNLTY_TYPE,
                D.CASH_CIVIL_PNLTY_SOUGHT_AMOUNT = S.CASH_CIVIL_PNLTY_SOUGHT_AMOUNT,
                D.NOTES                          = S.NOTES
        WHEN NOT MATCHED THEN
            INSERT (CME_ENFRC_ACT_ID,
                    TRANS_CODE,
                    PNLTY_TYPE_OWNER,
                    PNLTY_TYPE,
                    CASH_CIVIL_PNLTY_SOUGHT_AMOUNT,
                    NOTES)
            VALUES (S.WH_CME_ENFR_ACT_ID,
                    S.TRANS_CODE,
                    S.PNLTY_TYPE_OWNER,
                    S.PNLTY_TYPE,
                    S.CASH_CIVIL_PNLTY_SOUGHT_AMOUNT,
                    S.NOTES);
        IF @localTran = 1 AND XACT_STATE() = 1
        COMMIT TRAN LocalTran

END TRY
BEGIN CATCH

    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT

    SELECT  @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE()

    IF @localTran = 1 AND XACT_STATE() <> 0
        ROLLBACK TRAN

    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

END CATCH
    END
GO
/****** Object:  StoredProcedure [dbo].[CME_MERGE_PYMT]    Script Date: 6/12/2019 2:50:58 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*************************************************************************************************
** ObjectName: CME_MERGE_PYMT.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_CME_PYMT table 
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  05/31/2019   ageery      Created.
**
***************************************************************************************************/ --
    CREATE PROCEDURE [dbo].[CME_MERGE_PYMT] @CME_SUBM_ID varchar(40) AS
    BEGIN
        SET NOCOUNT ON;
SET XACT_ABORT,
    QUOTED_IDENTIFIER,
    ANSI_NULLS,
    ANSI_PADDING,
    ANSI_WARNINGS,
    ARITHABORT,
    CONCAT_NULL_YIELDS_NULL ON;
SET NUMERIC_ROUNDABORT OFF;

DECLARE @int INT;

DECLARE @localTran BIT
IF @@TRANCOUNT = 0
BEGIN
    SET @localTran = 1
    BEGIN TRANSACTION LocalTran
END

BEGIN TRY
        MERGE INTO RCRA_CME_PYMT D
        USING (SELECT *
               FROM ETL_CME_PYMT_VW
               WHERE CME_SUBM_ID = @CME_SUBM_ID) S
        ON (D.CME_PYMT_ID = S.WH_CME_PYMT_ID)
        WHEN MATCHED
            AND (
                    (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NOT NULL AND D.TRANS_CODE <> S.TRANS_CODE)
                    OR (D.TRANS_CODE IS NULL AND S.TRANS_CODE IS NOT NULL)
                    OR (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NULL)
                    OR (D.PYMT_SEQ_NUM IS NOT NULL AND S.PYMT_SEQ_NUM IS NOT NULL AND D.PYMT_SEQ_NUM <> S.PYMT_SEQ_NUM)
                    OR (D.PYMT_SEQ_NUM IS NULL AND S.PYMT_SEQ_NUM IS NOT NULL)
                    OR (D.PYMT_SEQ_NUM IS NOT NULL AND S.PYMT_SEQ_NUM IS NULL)
                    OR
                    (D.PYMT_DFLT_DATE IS NOT NULL AND S.PYMT_DFLT_DATE IS NOT NULL AND
                     D.PYMT_DFLT_DATE <> S.PYMT_DFLT_DATE)
                    OR (D.PYMT_DFLT_DATE IS NULL AND S.PYMT_DFLT_DATE IS NOT NULL)
                    OR (D.PYMT_DFLT_DATE IS NOT NULL AND S.PYMT_DFLT_DATE IS NULL)
                    OR
                    (D.SCHD_PYMT_DATE IS NOT NULL AND S.SCHD_PYMT_DATE IS NOT NULL AND
                     D.SCHD_PYMT_DATE <> S.SCHD_PYMT_DATE)
                    OR (D.SCHD_PYMT_DATE IS NULL AND S.SCHD_PYMT_DATE IS NOT NULL)
                    OR (D.SCHD_PYMT_DATE IS NOT NULL AND S.SCHD_PYMT_DATE IS NULL)
                    OR
                    (D.SCHD_PYMT_AMOUNT IS NOT NULL AND S.SCHD_PYMT_AMOUNT IS NOT NULL AND
                     D.SCHD_PYMT_AMOUNT <> S.SCHD_PYMT_AMOUNT)
                    OR (D.SCHD_PYMT_AMOUNT IS NULL AND S.SCHD_PYMT_AMOUNT IS NOT NULL)
                    OR (D.SCHD_PYMT_AMOUNT IS NOT NULL AND S.SCHD_PYMT_AMOUNT IS NULL)
                    OR
                    (D.ACTL_PYMT_DATE IS NOT NULL AND S.ACTL_PYMT_DATE IS NOT NULL AND
                     D.ACTL_PYMT_DATE <> S.ACTL_PYMT_DATE)
                    OR (D.ACTL_PYMT_DATE IS NULL AND S.ACTL_PYMT_DATE IS NOT NULL)
                    OR (D.ACTL_PYMT_DATE IS NOT NULL AND S.ACTL_PYMT_DATE IS NULL)
                    OR
                    (D.ACTL_PAID_AMOUNT IS NOT NULL AND S.ACTL_PAID_AMOUNT IS NOT NULL AND
                     D.ACTL_PAID_AMOUNT <> S.ACTL_PAID_AMOUNT)
                    OR (D.ACTL_PAID_AMOUNT IS NULL AND S.ACTL_PAID_AMOUNT IS NOT NULL)
                    OR (D.ACTL_PAID_AMOUNT IS NOT NULL AND S.ACTL_PAID_AMOUNT IS NULL)
                    OR (D.NOTES IS NOT NULL AND S.NOTES IS NOT NULL AND D.NOTES <> S.NOTES)
                    OR (D.NOTES IS NULL AND S.NOTES IS NOT NULL)
                    OR (D.NOTES IS NOT NULL AND S.NOTES IS NULL)
                ) THEN
            UPDATE
            SET D.TRANS_CODE       = S.TRANS_CODE,
                D.PYMT_SEQ_NUM     = S.PYMT_SEQ_NUM,
                D.PYMT_DFLT_DATE   = S.PYMT_DFLT_DATE,
                D.SCHD_PYMT_DATE   = S.SCHD_PYMT_DATE,
                D.SCHD_PYMT_AMOUNT = S.SCHD_PYMT_AMOUNT,
                D.ACTL_PYMT_DATE   = S.ACTL_PYMT_DATE,
                D.ACTL_PAID_AMOUNT = S.ACTL_PAID_AMOUNT,
                D.NOTES            = S.NOTES
        WHEN NOT MATCHED THEN
            INSERT (CME_PNLTY_ID,
                    TRANS_CODE,
                    PYMT_SEQ_NUM,
                    PYMT_DFLT_DATE,
                    SCHD_PYMT_DATE,
                    SCHD_PYMT_AMOUNT,
                    ACTL_PYMT_DATE,
                    ACTL_PAID_AMOUNT,
                    NOTES)
            VALUES (S.WH_CME_PNLTY_ID,
                    S.TRANS_CODE,
                    S.PYMT_SEQ_NUM,
                    S.PYMT_DFLT_DATE,
                    S.SCHD_PYMT_DATE,
                    S.SCHD_PYMT_AMOUNT,
                    S.ACTL_PYMT_DATE,
                    S.ACTL_PAID_AMOUNT,
                    S.NOTES);
        IF @localTran = 1 AND XACT_STATE() = 1
        COMMIT TRAN LocalTran

END TRY
BEGIN CATCH

    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT

    SELECT  @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE()

    IF @localTran = 1 AND XACT_STATE() <> 0
        ROLLBACK TRAN

    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

END CATCH
    END
GO
/****** Object:  StoredProcedure [dbo].[CME_MERGE_RQST]    Script Date: 6/12/2019 2:50:58 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*************************************************************************************************
** ObjectName: CME_MERGE_RQST.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_CME_RQST table 
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  05/31/2019   ageery      Created.
**
***************************************************************************************************/ --
    CREATE PROCEDURE [dbo].[CME_MERGE_RQST] @CME_SUBM_ID varchar(40) AS
    BEGIN
        SET NOCOUNT ON;
SET XACT_ABORT,
    QUOTED_IDENTIFIER,
    ANSI_NULLS,
    ANSI_PADDING,
    ANSI_WARNINGS,
    ARITHABORT,
    CONCAT_NULL_YIELDS_NULL ON;
SET NUMERIC_ROUNDABORT OFF;

DECLARE @int INT;

DECLARE @localTran BIT
IF @@TRANCOUNT = 0
BEGIN
    SET @localTran = 1
    BEGIN TRANSACTION LocalTran
END

BEGIN TRY
        MERGE INTO RCRA_CME_RQST D
        USING (SELECT *
               FROM ETL_CME_RQST_VW
               WHERE CME_SUBM_ID = @CME_SUBM_ID) S
        ON (D.CME_RQST_ID = S.WH_CME_RQST_ID)
        WHEN MATCHED
            AND (
                    (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NOT NULL AND D.TRANS_CODE <> S.TRANS_CODE)
                    OR (D.TRANS_CODE IS NULL AND S.TRANS_CODE IS NOT NULL)
                    OR (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NULL)
                    OR (D.RQST_SEQ_NUM IS NOT NULL AND S.RQST_SEQ_NUM IS NOT NULL AND D.RQST_SEQ_NUM <> S.RQST_SEQ_NUM)
                    OR (D.RQST_SEQ_NUM IS NULL AND S.RQST_SEQ_NUM IS NOT NULL)
                    OR (D.RQST_SEQ_NUM IS NOT NULL AND S.RQST_SEQ_NUM IS NULL)
                    OR (D.DATE_OF_RQST IS NOT NULL AND S.DATE_OF_RQST IS NOT NULL AND D.DATE_OF_RQST <> S.DATE_OF_RQST)
                    OR (D.DATE_OF_RQST IS NULL AND S.DATE_OF_RQST IS NOT NULL)
                    OR (D.DATE_OF_RQST IS NOT NULL AND S.DATE_OF_RQST IS NULL)
                    OR
                    (D.DATE_RESP_RCVD IS NOT NULL AND S.DATE_RESP_RCVD IS NOT NULL AND
                     D.DATE_RESP_RCVD <> S.DATE_RESP_RCVD)
                    OR (D.DATE_RESP_RCVD IS NULL AND S.DATE_RESP_RCVD IS NOT NULL)
                    OR (D.DATE_RESP_RCVD IS NOT NULL AND S.DATE_RESP_RCVD IS NULL)
                    OR (D.RQST_AGN IS NOT NULL AND S.RQST_AGN IS NOT NULL AND D.RQST_AGN <> S.RQST_AGN)
                    OR (D.RQST_AGN IS NULL AND S.RQST_AGN IS NOT NULL)
                    OR (D.RQST_AGN IS NOT NULL AND S.RQST_AGN IS NULL)
                    OR (D.NOTES IS NOT NULL AND S.NOTES IS NOT NULL AND D.NOTES <> S.NOTES)
                    OR (D.NOTES IS NULL AND S.NOTES IS NOT NULL)
                    OR (D.NOTES IS NOT NULL AND S.NOTES IS NULL)
                ) THEN
            UPDATE
            SET D.TRANS_CODE     = S.TRANS_CODE,
                D.RQST_SEQ_NUM   = S.RQST_SEQ_NUM,
                D.DATE_OF_RQST   = S.DATE_OF_RQST,
                D.DATE_RESP_RCVD = S.DATE_RESP_RCVD,
                D.RQST_AGN       = S.RQST_AGN,
                D.NOTES          = S.NOTES
        WHEN NOT MATCHED THEN
            INSERT (CME_EVAL_ID,
                    TRANS_CODE,
                    RQST_SEQ_NUM,
                    DATE_OF_RQST,
                    DATE_RESP_RCVD,
                    RQST_AGN,
                    NOTES)
            VALUES (S.WH_CME_EVAL_ID,
                    S.TRANS_CODE,
                    S.RQST_SEQ_NUM,
                    S.DATE_OF_RQST,
                    S.DATE_RESP_RCVD,
                    S.RQST_AGN,
                    S.NOTES);
        IF @localTran = 1 AND XACT_STATE() = 1
        COMMIT TRAN LocalTran

END TRY
BEGIN CATCH

    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT

    SELECT  @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE()

    IF @localTran = 1 AND XACT_STATE() <> 0
        ROLLBACK TRAN

    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

END CATCH
    END
GO
/****** Object:  StoredProcedure [dbo].[CME_MERGE_SUPP_ENVR_PRJT]    Script Date: 6/12/2019 2:50:58 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*************************************************************************************************
** ObjectName: CME_MERGE_SUPP_ENVR_PRJT.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_CME_SUPP_ENVR_PRJT table 
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  05/31/2019   ageery      Created.
**
***************************************************************************************************/ --
    CREATE PROCEDURE [dbo].[CME_MERGE_SUPP_ENVR_PRJT] @CME_SUBM_ID varchar(40) AS
    BEGIN
        SET NOCOUNT ON;
SET XACT_ABORT,
    QUOTED_IDENTIFIER,
    ANSI_NULLS,
    ANSI_PADDING,
    ANSI_WARNINGS,
    ARITHABORT,
    CONCAT_NULL_YIELDS_NULL ON;
SET NUMERIC_ROUNDABORT OFF;

DECLARE @int INT;

DECLARE @localTran BIT
IF @@TRANCOUNT = 0
BEGIN
    SET @localTran = 1
    BEGIN TRANSACTION LocalTran
END

BEGIN TRY
        MERGE INTO RCRA_CME_SUPP_ENVR_PRJT D
        USING (SELECT *
               FROM ETL_CME_SUPP_ENVR_PRJT_VW
               WHERE CME_SUBM_ID = @CME_SUBM_ID) S
        ON (D.CME_SUPP_ENVR_PRJT_ID = S.WH_CME_SUPP_ENVR_PRJT_ID)
        WHEN MATCHED
            AND (
                    (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NOT NULL AND D.TRANS_CODE <> S.TRANS_CODE)
                    OR (D.TRANS_CODE IS NULL AND S.TRANS_CODE IS NOT NULL)
                    OR (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NULL)
                    OR (D.SEP_SEQ_NUM IS NOT NULL AND S.SEP_SEQ_NUM IS NOT NULL AND D.SEP_SEQ_NUM <> S.SEP_SEQ_NUM)
                    OR (D.SEP_SEQ_NUM IS NULL AND S.SEP_SEQ_NUM IS NOT NULL)
                    OR (D.SEP_SEQ_NUM IS NOT NULL AND S.SEP_SEQ_NUM IS NULL)
                    OR
                    (D.SEP_EXPND_AMOUNT IS NOT NULL AND S.SEP_EXPND_AMOUNT IS NOT NULL AND
                     D.SEP_EXPND_AMOUNT <> S.SEP_EXPND_AMOUNT)
                    OR (D.SEP_EXPND_AMOUNT IS NULL AND S.SEP_EXPND_AMOUNT IS NOT NULL)
                    OR (D.SEP_EXPND_AMOUNT IS NOT NULL AND S.SEP_EXPND_AMOUNT IS NULL)
                    OR (D.SEP_SCHD_COMP_DATE IS NOT NULL AND S.SEP_SCHD_COMP_DATE IS NOT NULL AND
                        D.SEP_SCHD_COMP_DATE <> S.SEP_SCHD_COMP_DATE)
                    OR (D.SEP_SCHD_COMP_DATE IS NULL AND S.SEP_SCHD_COMP_DATE IS NOT NULL)
                    OR (D.SEP_SCHD_COMP_DATE IS NOT NULL AND S.SEP_SCHD_COMP_DATE IS NULL)
                    OR
                    (D.SEP_ACTL_DATE IS NOT NULL AND S.SEP_ACTL_DATE IS NOT NULL AND D.SEP_ACTL_DATE <> S.SEP_ACTL_DATE)
                    OR (D.SEP_ACTL_DATE IS NULL AND S.SEP_ACTL_DATE IS NOT NULL)
                    OR (D.SEP_ACTL_DATE IS NOT NULL AND S.SEP_ACTL_DATE IS NULL)
                    OR
                    (D.SEP_DFLT_DATE IS NOT NULL AND S.SEP_DFLT_DATE IS NOT NULL AND D.SEP_DFLT_DATE <> S.SEP_DFLT_DATE)
                    OR (D.SEP_DFLT_DATE IS NULL AND S.SEP_DFLT_DATE IS NOT NULL)
                    OR (D.SEP_DFLT_DATE IS NOT NULL AND S.SEP_DFLT_DATE IS NULL)
                    OR
                    (D.SEP_CODE_OWNER IS NOT NULL AND S.SEP_CODE_OWNER IS NOT NULL AND
                     D.SEP_CODE_OWNER <> S.SEP_CODE_OWNER)
                    OR (D.SEP_CODE_OWNER IS NULL AND S.SEP_CODE_OWNER IS NOT NULL)
                    OR (D.SEP_CODE_OWNER IS NOT NULL AND S.SEP_CODE_OWNER IS NULL)
                    OR (D.SEP_DESC_TXT IS NOT NULL AND S.SEP_DESC_TXT IS NOT NULL AND D.SEP_DESC_TXT <> S.SEP_DESC_TXT)
                    OR (D.SEP_DESC_TXT IS NULL AND S.SEP_DESC_TXT IS NOT NULL)
                    OR (D.SEP_DESC_TXT IS NOT NULL AND S.SEP_DESC_TXT IS NULL)
                    OR (D.NOTES IS NOT NULL AND S.NOTES IS NOT NULL AND D.NOTES <> S.NOTES)
                    OR (D.NOTES IS NULL AND S.NOTES IS NOT NULL)
                    OR (D.NOTES IS NOT NULL AND S.NOTES IS NULL)
                ) THEN
            UPDATE
            SET D.TRANS_CODE         = S.TRANS_CODE,
                D.SEP_SEQ_NUM        = S.SEP_SEQ_NUM,
                D.SEP_EXPND_AMOUNT   = S.SEP_EXPND_AMOUNT,
                D.SEP_SCHD_COMP_DATE = S.SEP_SCHD_COMP_DATE,
                D.SEP_ACTL_DATE      = S.SEP_ACTL_DATE,
                D.SEP_DFLT_DATE      = S.SEP_DFLT_DATE,
                D.SEP_CODE_OWNER     = S.SEP_CODE_OWNER,
                D.SEP_DESC_TXT       = S.SEP_DESC_TXT,
                D.NOTES              = S.NOTES
        WHEN NOT MATCHED THEN
            INSERT (CME_ENFRC_ACT_ID,
                    TRANS_CODE,
                    SEP_SEQ_NUM,
                    SEP_EXPND_AMOUNT,
                    SEP_SCHD_COMP_DATE,
                    SEP_ACTL_DATE,
                    SEP_DFLT_DATE,
                    SEP_CODE_OWNER,
                    SEP_DESC_TXT,
                    NOTES)
            VALUES (S.WH_CME_ENFR_ACT_ID,
                    S.TRANS_CODE,
                    S.SEP_SEQ_NUM,
                    S.SEP_EXPND_AMOUNT,
                    S.SEP_SCHD_COMP_DATE,
                    S.SEP_ACTL_DATE,
                    S.SEP_DFLT_DATE,
                    S.SEP_CODE_OWNER,
                    S.SEP_DESC_TXT,
                    S.NOTES);
        IF @localTran = 1 AND XACT_STATE() = 1
        COMMIT TRAN LocalTran

END TRY
BEGIN CATCH

    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT

    SELECT  @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE()

    IF @localTran = 1 AND XACT_STATE() <> 0
        ROLLBACK TRAN

    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

END CATCH
    END
GO
/****** Object:  StoredProcedure [dbo].[CME_MERGE_VIOL]    Script Date: 6/12/2019 2:50:58 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*************************************************************************************************
** ObjectName: CME_MERGE_VIOL.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_CME_VIOL table 
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  05/31/2019   ageery      Created.
**
***************************************************************************************************/ --
    CREATE PROCEDURE [dbo].[CME_MERGE_VIOL] @CME_SUBM_ID varchar(40) AS
    BEGIN
        SET NOCOUNT ON;
SET XACT_ABORT,
    QUOTED_IDENTIFIER,
    ANSI_NULLS,
    ANSI_PADDING,
    ANSI_WARNINGS,
    ARITHABORT,
    CONCAT_NULL_YIELDS_NULL ON;
SET NUMERIC_ROUNDABORT OFF;

DECLARE @int INT;

DECLARE @localTran BIT
IF @@TRANCOUNT = 0
BEGIN
    SET @localTran = 1
    BEGIN TRANSACTION LocalTran
END

BEGIN TRY
        MERGE INTO RCRA_CME_VIOL D
        USING (SELECT *
               FROM ETL_CME_VIOL_VW
               WHERE CME_SUBM_ID = @CME_SUBM_ID) S
        ON (D.CME_VIOL_ID = S.WH_CME_VIOL_ID)
        WHEN MATCHED
            AND (
                    (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NOT NULL AND D.TRANS_CODE <> S.TRANS_CODE)
                    OR (D.TRANS_CODE IS NULL AND S.TRANS_CODE IS NOT NULL)
                    OR (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NULL)
                    OR (D.VIOL_ACT_LOC IS NOT NULL AND S.VIOL_ACT_LOC IS NOT NULL AND D.VIOL_ACT_LOC <> S.VIOL_ACT_LOC)
                    OR (D.VIOL_ACT_LOC IS NULL AND S.VIOL_ACT_LOC IS NOT NULL)
                    OR (D.VIOL_ACT_LOC IS NOT NULL AND S.VIOL_ACT_LOC IS NULL)
                    OR (D.VIOL_SEQ_NUM IS NOT NULL AND S.VIOL_SEQ_NUM IS NOT NULL AND D.VIOL_SEQ_NUM <> S.VIOL_SEQ_NUM)
                    OR (D.VIOL_SEQ_NUM IS NULL AND S.VIOL_SEQ_NUM IS NOT NULL)
                    OR (D.VIOL_SEQ_NUM IS NOT NULL AND S.VIOL_SEQ_NUM IS NULL)
                    OR (D.AGN_WHICH_DTRM_VIOL IS NOT NULL AND S.AGN_WHICH_DTRM_VIOL IS NOT NULL AND
                        D.AGN_WHICH_DTRM_VIOL <> S.AGN_WHICH_DTRM_VIOL)
                    OR (D.AGN_WHICH_DTRM_VIOL IS NULL AND S.AGN_WHICH_DTRM_VIOL IS NOT NULL)
                    OR (D.AGN_WHICH_DTRM_VIOL IS NOT NULL AND S.AGN_WHICH_DTRM_VIOL IS NULL)
                    OR (D.VIOL_TYPE_OWNER IS NOT NULL AND S.VIOL_TYPE_OWNER IS NOT NULL AND
                        D.VIOL_TYPE_OWNER <> S.VIOL_TYPE_OWNER)
                    OR (D.VIOL_TYPE_OWNER IS NULL AND S.VIOL_TYPE_OWNER IS NOT NULL)
                    OR (D.VIOL_TYPE_OWNER IS NOT NULL AND S.VIOL_TYPE_OWNER IS NULL)
                    OR (D.VIOL_TYPE IS NOT NULL AND S.VIOL_TYPE IS NOT NULL AND D.VIOL_TYPE <> S.VIOL_TYPE)
                    OR (D.VIOL_TYPE IS NULL AND S.VIOL_TYPE IS NOT NULL)
                    OR (D.VIOL_TYPE IS NOT NULL AND S.VIOL_TYPE IS NULL)
                    OR (D.FORMER_CITATION_NAME IS NOT NULL AND S.FORMER_CITATION_NAME IS NOT NULL AND
                        D.FORMER_CITATION_NAME <> S.FORMER_CITATION_NAME)
                    OR (D.FORMER_CITATION_NAME IS NULL AND S.FORMER_CITATION_NAME IS NOT NULL)
                    OR (D.FORMER_CITATION_NAME IS NOT NULL AND S.FORMER_CITATION_NAME IS NULL)
                    OR
                    (D.VIOL_DTRM_DATE IS NOT NULL AND S.VIOL_DTRM_DATE IS NOT NULL AND
                     D.VIOL_DTRM_DATE <> S.VIOL_DTRM_DATE)
                    OR (D.VIOL_DTRM_DATE IS NULL AND S.VIOL_DTRM_DATE IS NOT NULL)
                    OR (D.VIOL_DTRM_DATE IS NOT NULL AND S.VIOL_DTRM_DATE IS NULL)
                    OR (D.RTN_COMPL_ACTL_DATE IS NOT NULL AND S.RTN_COMPL_ACTL_DATE IS NOT NULL AND
                        D.RTN_COMPL_ACTL_DATE <> S.RTN_COMPL_ACTL_DATE)
                    OR (D.RTN_COMPL_ACTL_DATE IS NULL AND S.RTN_COMPL_ACTL_DATE IS NOT NULL)
                    OR (D.RTN_COMPL_ACTL_DATE IS NOT NULL AND S.RTN_COMPL_ACTL_DATE IS NULL)
                    OR (D.RTN_TO_COMPL_QUAL IS NOT NULL AND S.RTN_TO_COMPL_QUAL IS NOT NULL AND
                        D.RTN_TO_COMPL_QUAL <> S.RTN_TO_COMPL_QUAL)
                    OR (D.RTN_TO_COMPL_QUAL IS NULL AND S.RTN_TO_COMPL_QUAL IS NOT NULL)
                    OR (D.RTN_TO_COMPL_QUAL IS NOT NULL AND S.RTN_TO_COMPL_QUAL IS NULL)
                    OR
                    (D.VIOL_RESP_AGN IS NOT NULL AND S.VIOL_RESP_AGN IS NOT NULL AND D.VIOL_RESP_AGN <> S.VIOL_RESP_AGN)
                    OR (D.VIOL_RESP_AGN IS NULL AND S.VIOL_RESP_AGN IS NOT NULL)
                    OR (D.VIOL_RESP_AGN IS NOT NULL AND S.VIOL_RESP_AGN IS NULL)
                    OR (D.NOTES IS NOT NULL AND S.NOTES IS NOT NULL AND D.NOTES <> S.NOTES)
                    OR (D.NOTES IS NULL AND S.NOTES IS NOT NULL)
                    OR (D.NOTES IS NOT NULL AND S.NOTES IS NULL)
                ) THEN
            UPDATE
            SET D.TRANS_CODE           = S.TRANS_CODE,
                D.VIOL_ACT_LOC         = S.VIOL_ACT_LOC,
                D.VIOL_SEQ_NUM         = S.VIOL_SEQ_NUM,
                D.AGN_WHICH_DTRM_VIOL  = S.AGN_WHICH_DTRM_VIOL,
                D.VIOL_TYPE_OWNER      = S.VIOL_TYPE_OWNER,
                D.VIOL_TYPE            = S.VIOL_TYPE,
                D.FORMER_CITATION_NAME = S.FORMER_CITATION_NAME,
                D.VIOL_DTRM_DATE       = S.VIOL_DTRM_DATE,
                D.RTN_COMPL_ACTL_DATE  = S.RTN_COMPL_ACTL_DATE,
                D.RTN_TO_COMPL_QUAL    = S.RTN_TO_COMPL_QUAL,
                D.VIOL_RESP_AGN        = S.VIOL_RESP_AGN,
                D.NOTES                = S.NOTES
        WHEN NOT MATCHED THEN
            INSERT (CME_FAC_SUBM_ID,
                    TRANS_CODE,
                    VIOL_ACT_LOC,
                    VIOL_SEQ_NUM,
                    AGN_WHICH_DTRM_VIOL,
                    VIOL_TYPE_OWNER,
                    VIOL_TYPE,
                    FORMER_CITATION_NAME,
                    VIOL_DTRM_DATE,
                    RTN_COMPL_ACTL_DATE,
                    RTN_TO_COMPL_QUAL,
                    VIOL_RESP_AGN,
                    NOTES)
            VALUES (S.WH_CME_FAC_SUBM_ID,
                    S.TRANS_CODE,
                    S.VIOL_ACT_LOC,
                    S.VIOL_SEQ_NUM,
                    S.AGN_WHICH_DTRM_VIOL,
                    S.VIOL_TYPE_OWNER,
                    S.VIOL_TYPE,
                    S.FORMER_CITATION_NAME,
                    S.VIOL_DTRM_DATE,
                    S.RTN_COMPL_ACTL_DATE,
                    S.RTN_TO_COMPL_QUAL,
                    S.VIOL_RESP_AGN,
                    S.NOTES);
        IF @localTran = 1 AND XACT_STATE() = 1
        COMMIT TRAN LocalTran

END TRY
BEGIN CATCH

    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT

    SELECT  @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE()

    IF @localTran = 1 AND XACT_STATE() <> 0
        ROLLBACK TRAN

    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

END CATCH
    END
GO
/****** Object:  StoredProcedure [dbo].[CME_MERGE_VIOL_ENFRC]    Script Date: 6/12/2019 2:50:58 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*************************************************************************************************
** ObjectName: CME_MERGE_VIOL_ENFRC.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_CME_VIOL_ENFRC table 
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  05/31/2019   ageery      Created.
**
***************************************************************************************************/ --
    CREATE PROCEDURE [dbo].[CME_MERGE_VIOL_ENFRC] @CME_SUBM_ID varchar(40) AS
    BEGIN
        SET NOCOUNT ON;
SET XACT_ABORT,
    QUOTED_IDENTIFIER,
    ANSI_NULLS,
    ANSI_PADDING,
    ANSI_WARNINGS,
    ARITHABORT,
    CONCAT_NULL_YIELDS_NULL ON;
SET NUMERIC_ROUNDABORT OFF;

DECLARE @int INT;

DECLARE @localTran BIT
IF @@TRANCOUNT = 0
BEGIN
    SET @localTran = 1
    BEGIN TRANSACTION LocalTran
END

BEGIN TRY
        MERGE INTO RCRA_CME_VIOL_ENFRC D
        USING (SELECT *
               FROM ETL_CME_VIOL_ENFRC_VW
               WHERE CME_SUBM_ID = @CME_SUBM_ID) S
        ON (D.CME_VIOL_ENFRC_ID = S.WH_CME_VIOL_ENFRC_ID)
        WHEN MATCHED
            AND (
                    (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NOT NULL AND D.TRANS_CODE <> S.TRANS_CODE)
                    OR (D.TRANS_CODE IS NULL AND S.TRANS_CODE IS NOT NULL)
                    OR (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NULL)
                    OR (D.VIOL_SEQ_NUM IS NOT NULL AND S.VIOL_SEQ_NUM IS NOT NULL AND D.VIOL_SEQ_NUM <> S.VIOL_SEQ_NUM)
                    OR (D.VIOL_SEQ_NUM IS NULL AND S.VIOL_SEQ_NUM IS NOT NULL)
                    OR (D.VIOL_SEQ_NUM IS NOT NULL AND S.VIOL_SEQ_NUM IS NULL)
                    OR (D.AGN_WHICH_DTRM_VIOL IS NOT NULL AND S.AGN_WHICH_DTRM_VIOL IS NOT NULL AND
                        D.AGN_WHICH_DTRM_VIOL <> S.AGN_WHICH_DTRM_VIOL)
                    OR (D.AGN_WHICH_DTRM_VIOL IS NULL AND S.AGN_WHICH_DTRM_VIOL IS NOT NULL)
                    OR (D.AGN_WHICH_DTRM_VIOL IS NOT NULL AND S.AGN_WHICH_DTRM_VIOL IS NULL)
                    OR (D.RTN_COMPL_SCHD_DATE IS NOT NULL AND S.RTN_COMPL_SCHD_DATE IS NOT NULL AND
                        D.RTN_COMPL_SCHD_DATE <> S.RTN_COMPL_SCHD_DATE)
                    OR (D.RTN_COMPL_SCHD_DATE IS NULL AND S.RTN_COMPL_SCHD_DATE IS NOT NULL)
                    OR (D.RTN_COMPL_SCHD_DATE IS NOT NULL AND S.RTN_COMPL_SCHD_DATE IS NULL)
                ) THEN
            UPDATE
            SET D.TRANS_CODE          = S.TRANS_CODE,
                D.VIOL_SEQ_NUM        = S.VIOL_SEQ_NUM,
                D.AGN_WHICH_DTRM_VIOL = S.AGN_WHICH_DTRM_VIOL,
                D.RTN_COMPL_SCHD_DATE = S.RTN_COMPL_SCHD_DATE
        WHEN NOT MATCHED THEN
            INSERT (CME_ENFRC_ACT_ID,
                    TRANS_CODE,
                    VIOL_SEQ_NUM,
                    AGN_WHICH_DTRM_VIOL,
                    RTN_COMPL_SCHD_DATE)
            VALUES (S.WH_CME_ENFR_ACT_ID,
                    S.TRANS_CODE,
                    S.VIOL_SEQ_NUM,
                    S.AGN_WHICH_DTRM_VIOL,
                    S.RTN_COMPL_SCHD_DATE);
        IF @localTran = 1 AND XACT_STATE() = 1
        COMMIT TRAN LocalTran

END TRY
BEGIN CATCH

    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT

    SELECT  @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE()

    IF @localTran = 1 AND XACT_STATE() <> 0
        ROLLBACK TRAN

    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

END CATCH
    END
GO
/****** Object:  StoredProcedure [dbo].[EM_LOG_HANDLERS]    Script Date: 6/12/2019 2:50:58 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*************************************************************************************************
** ObjectName: EM_LOG_HANDLERS.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Logs information about EM runs
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  06/12/2019   ageery      Created.
**
***************************************************************************************************/ --
    CREATE PROCEDURE [dbo].[EM_LOG_HANDLERS] @EM_SUBM_ID varchar(40) AS
    BEGIN
        SET NOCOUNT ON;
SET XACT_ABORT,
    QUOTED_IDENTIFIER,
    ANSI_NULLS,
    ANSI_PADDING,
    ANSI_WARNINGS,
    ARITHABORT,
    CONCAT_NULL_YIELDS_NULL ON;
SET NUMERIC_ROUNDABORT OFF;

DECLARE @int INT;

DECLARE @localTran BIT
IF @@TRANCOUNT = 0
BEGIN
    SET @localTran = 1
    BEGIN TRANSACTION LocalTran
END

BEGIN TRY
        INSERT INTO ETL_RUN
        (RUN_DATE, ETL_TYPE, SUBM_ID) VALUES (CURRENT_TIMESTAMP, 'EM', @EM_SUBM_ID);
        IF @localTran = 1 AND XACT_STATE() = 1
        COMMIT TRAN LocalTran

END TRY
BEGIN CATCH

    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT

    SELECT  @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE()

    IF @localTran = 1 AND XACT_STATE() <> 0
        ROLLBACK TRAN

    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

END CATCH
    END
GO
/****** Object:  StoredProcedure [dbo].[EM_MERGE_EMANIFEST]    Script Date: 6/12/2019 2:50:58 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*************************************************************************************************
** ObjectName: EM_MERGE_EMANIFEST.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_EM_EMANIFEST table 
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  06/12/2019   ageery      Created.
**
***************************************************************************************************/ --
    CREATE PROCEDURE [dbo].[EM_MERGE_EMANIFEST] @EM_SUBM_ID varchar(40) AS
    BEGIN
        SET NOCOUNT ON;
SET XACT_ABORT,
    QUOTED_IDENTIFIER,
    ANSI_NULLS,
    ANSI_PADDING,
    ANSI_WARNINGS,
    ARITHABORT,
    CONCAT_NULL_YIELDS_NULL ON;
SET NUMERIC_ROUNDABORT OFF;

DECLARE @int INT;

DECLARE @localTran BIT
IF @@TRANCOUNT = 0
BEGIN
    SET @localTran = 1
    BEGIN TRANSACTION LocalTran
END

BEGIN TRY
        MERGE INTO RCRA_EM_EMANIFEST D
        USING (SELECT *
               FROM ETL_EM_EMANIFEST_VW
               WHERE EM_SUBM_ID = @EM_SUBM_ID) S
        ON (D.EM_EMANIFEST_ID = S.WH_EM_EMANIFEST_ID)
        WHEN MATCHED
            AND (
                    (D.CREATED_DATE IS NOT NULL AND S.CREATED_DATE IS NOT NULL AND D.CREATED_DATE <> S.CREATED_DATE)
                    OR (D.CREATED_DATE IS NULL AND S.CREATED_DATE IS NOT NULL)
                    OR (D.CREATED_DATE IS NOT NULL AND S.CREATED_DATE IS NULL)
                    OR (D.UPDATED_DATE IS NOT NULL AND S.UPDATED_DATE IS NOT NULL AND D.UPDATED_DATE <> S.UPDATED_DATE)
                    OR (D.UPDATED_DATE IS NULL AND S.UPDATED_DATE IS NOT NULL)
                    OR (D.UPDATED_DATE IS NOT NULL AND S.UPDATED_DATE IS NULL)
                    OR (D.MAN_TRACKING_NUM IS NOT NULL AND S.MAN_TRACKING_NUM IS NOT NULL AND D.MAN_TRACKING_NUM <> S.MAN_TRACKING_NUM)
                    OR (D.MAN_TRACKING_NUM IS NULL AND S.MAN_TRACKING_NUM IS NOT NULL)
                    OR (D.MAN_TRACKING_NUM IS NOT NULL AND S.MAN_TRACKING_NUM IS NULL)
                    OR (D.STATUS IS NOT NULL AND S.STATUS IS NOT NULL AND D.STATUS <> S.STATUS)
                    OR (D.STATUS IS NULL AND S.STATUS IS NOT NULL)
                    OR (D.STATUS IS NOT NULL AND S.STATUS IS NULL)
                    OR (D.PUBLIC_IND IS NOT NULL AND S.PUBLIC_IND IS NOT NULL AND D.PUBLIC_IND <> S.PUBLIC_IND)
                    OR (D.PUBLIC_IND IS NULL AND S.PUBLIC_IND IS NOT NULL)
                    OR (D.PUBLIC_IND IS NOT NULL AND S.PUBLIC_IND IS NULL)
                    OR (D.SUBM_TYPE IS NOT NULL AND S.SUBM_TYPE IS NOT NULL AND D.SUBM_TYPE <> S.SUBM_TYPE)
                    OR (D.SUBM_TYPE IS NULL AND S.SUBM_TYPE IS NOT NULL)
                    OR (D.SUBM_TYPE IS NOT NULL AND S.SUBM_TYPE IS NULL)
                    OR (D.SIGN_STATUS_IND IS NOT NULL AND S.SIGN_STATUS_IND IS NOT NULL AND D.SIGN_STATUS_IND <> S.SIGN_STATUS_IND)
                    OR (D.SIGN_STATUS_IND IS NULL AND S.SIGN_STATUS_IND IS NOT NULL)
                    OR (D.SIGN_STATUS_IND IS NOT NULL AND S.SIGN_STATUS_IND IS NULL)
                    OR (D.ORIGIN_TYPE IS NOT NULL AND S.ORIGIN_TYPE IS NOT NULL AND D.ORIGIN_TYPE <> S.ORIGIN_TYPE)
                    OR (D.ORIGIN_TYPE IS NULL AND S.ORIGIN_TYPE IS NOT NULL)
                    OR (D.ORIGIN_TYPE IS NOT NULL AND S.ORIGIN_TYPE IS NULL)
                    OR (D.SHIPPED_DATE IS NOT NULL AND S.SHIPPED_DATE IS NOT NULL AND D.SHIPPED_DATE <> S.SHIPPED_DATE)
                    OR (D.SHIPPED_DATE IS NULL AND S.SHIPPED_DATE IS NOT NULL)
                    OR (D.SHIPPED_DATE IS NOT NULL AND S.SHIPPED_DATE IS NULL)
                    OR (D.RECEIVED_DATE IS NOT NULL AND S.RECEIVED_DATE IS NOT NULL AND D.RECEIVED_DATE <> S.RECEIVED_DATE)
                    OR (D.RECEIVED_DATE IS NULL AND S.RECEIVED_DATE IS NOT NULL)
                    OR (D.RECEIVED_DATE IS NOT NULL AND S.RECEIVED_DATE IS NULL)
                    OR (D.CERT_DATE IS NOT NULL AND S.CERT_DATE IS NOT NULL AND D.CERT_DATE <> S.CERT_DATE)
                    OR (D.CERT_DATE IS NULL AND S.CERT_DATE IS NOT NULL)
                    OR (D.CERT_DATE IS NOT NULL AND S.CERT_DATE IS NULL)
                    OR (D.REJ_IND IS NOT NULL AND S.REJ_IND IS NOT NULL AND D.REJ_IND <> S.REJ_IND)
                    OR (D.REJ_IND IS NULL AND S.REJ_IND IS NOT NULL)
                    OR (D.REJ_IND IS NOT NULL AND S.REJ_IND IS NULL)
                    OR (D.DISCREPANCY_IND IS NOT NULL AND S.DISCREPANCY_IND IS NOT NULL AND D.DISCREPANCY_IND <> S.DISCREPANCY_IND)
                    OR (D.DISCREPANCY_IND IS NULL AND S.DISCREPANCY_IND IS NOT NULL)
                    OR (D.DISCREPANCY_IND IS NOT NULL AND S.DISCREPANCY_IND IS NULL)
                    OR (D.RESIDUE_IND IS NOT NULL AND S.RESIDUE_IND IS NOT NULL AND D.RESIDUE_IND <> S.RESIDUE_IND)
                    OR (D.RESIDUE_IND IS NULL AND S.RESIDUE_IND IS NOT NULL)
                    OR (D.RESIDUE_IND IS NOT NULL AND S.RESIDUE_IND IS NULL)
                    OR (D.IMP_IND IS NOT NULL AND S.IMP_IND IS NOT NULL AND D.IMP_IND <> S.IMP_IND)
                    OR (D.IMP_IND IS NULL AND S.IMP_IND IS NOT NULL)
                    OR (D.IMP_IND IS NOT NULL AND S.IMP_IND IS NULL)
                    OR (D.CONT_PREV_REJ_RES_IND IS NOT NULL AND S.CONT_PREV_REJ_RES_IND IS NOT NULL AND D.CONT_PREV_REJ_RES_IND <> S.CONT_PREV_REJ_RES_IND)
                    OR (D.CONT_PREV_REJ_RES_IND IS NULL AND S.CONT_PREV_REJ_RES_IND IS NOT NULL)
                    OR (D.CONT_PREV_REJ_RES_IND IS NOT NULL AND S.CONT_PREV_REJ_RES_IND IS NULL)
                    OR (D.CERT_BY_FIRST_NAME IS NOT NULL AND S.CERT_BY_FIRST_NAME IS NOT NULL AND D.CERT_BY_FIRST_NAME <> S.CERT_BY_FIRST_NAME)
                    OR (D.CERT_BY_FIRST_NAME IS NULL AND S.CERT_BY_FIRST_NAME IS NOT NULL)
                    OR (D.CERT_BY_FIRST_NAME IS NOT NULL AND S.CERT_BY_FIRST_NAME IS NULL)
                    OR (D.CERT_BY_LAST_NAME IS NOT NULL AND S.CERT_BY_LAST_NAME IS NOT NULL AND D.CERT_BY_LAST_NAME <> S.CERT_BY_LAST_NAME)
                    OR (D.CERT_BY_LAST_NAME IS NULL AND S.CERT_BY_LAST_NAME IS NOT NULL)
                    OR (D.CERT_BY_LAST_NAME IS NOT NULL AND S.CERT_BY_LAST_NAME IS NULL)
                    OR (D.CERT_BY_USER_ID IS NOT NULL AND S.CERT_BY_USER_ID IS NOT NULL AND D.CERT_BY_USER_ID <> S.CERT_BY_USER_ID)
                    OR (D.CERT_BY_USER_ID IS NULL AND S.CERT_BY_USER_ID IS NOT NULL)
                    OR (D.CERT_BY_USER_ID IS NOT NULL AND S.CERT_BY_USER_ID IS NULL)
                    OR (D.REJ_TRANS_ON_SITE_IND IS NOT NULL AND S.REJ_TRANS_ON_SITE_IND IS NOT NULL AND D.REJ_TRANS_ON_SITE_IND <> S.REJ_TRANS_ON_SITE_IND)
                    OR (D.REJ_TRANS_ON_SITE_IND IS NULL AND S.REJ_TRANS_ON_SITE_IND IS NOT NULL)
                    OR (D.REJ_TRANS_ON_SITE_IND IS NOT NULL AND S.REJ_TRANS_ON_SITE_IND IS NULL)
                    OR (D.REJ_TYPE IS NOT NULL AND S.REJ_TYPE IS NOT NULL AND D.REJ_TYPE <> S.REJ_TYPE)
                    OR (D.REJ_TYPE IS NULL AND S.REJ_TYPE IS NOT NULL)
                    OR (D.REJ_TYPE IS NOT NULL AND S.REJ_TYPE IS NULL)
                    OR (D.REJ_ALT_DES_FAC_TYPE IS NOT NULL AND S.REJ_ALT_DES_FAC_TYPE IS NOT NULL AND D.REJ_ALT_DES_FAC_TYPE <> S.REJ_ALT_DES_FAC_TYPE)
                    OR (D.REJ_ALT_DES_FAC_TYPE IS NULL AND S.REJ_ALT_DES_FAC_TYPE IS NOT NULL)
                    OR (D.REJ_ALT_DES_FAC_TYPE IS NOT NULL AND S.REJ_ALT_DES_FAC_TYPE IS NULL)
                    OR (D.REJ_COMMENTS IS NOT NULL AND S.REJ_COMMENTS IS NOT NULL AND D.REJ_COMMENTS <> S.REJ_COMMENTS)
                    OR (D.REJ_COMMENTS IS NULL AND S.REJ_COMMENTS IS NOT NULL)
                    OR (D.REJ_COMMENTS IS NOT NULL AND S.REJ_COMMENTS IS NULL)
                    OR (D.REJ_GEN_PS_NAME IS NOT NULL AND S.REJ_GEN_PS_NAME IS NOT NULL AND D.REJ_GEN_PS_NAME <> S.REJ_GEN_PS_NAME)
                    OR (D.REJ_GEN_PS_NAME IS NULL AND S.REJ_GEN_PS_NAME IS NOT NULL)
                    OR (D.REJ_GEN_PS_NAME IS NOT NULL AND S.REJ_GEN_PS_NAME IS NULL)
                    OR (D.REJ_GEN_PS_DATE IS NOT NULL AND S.REJ_GEN_PS_DATE IS NOT NULL AND D.REJ_GEN_PS_DATE <> S.REJ_GEN_PS_DATE)
                    OR (D.REJ_GEN_PS_DATE IS NULL AND S.REJ_GEN_PS_DATE IS NOT NULL)
                    OR (D.REJ_GEN_PS_DATE IS NOT NULL AND S.REJ_GEN_PS_DATE IS NULL)
                    OR (D.REJ_GEN_ES_SIGN_DATE IS NOT NULL AND S.REJ_GEN_ES_SIGN_DATE IS NOT NULL AND D.REJ_GEN_ES_SIGN_DATE <> S.REJ_GEN_ES_SIGN_DATE)
                    OR (D.REJ_GEN_ES_SIGN_DATE IS NULL AND S.REJ_GEN_ES_SIGN_DATE IS NOT NULL)
                    OR (D.REJ_GEN_ES_SIGN_DATE IS NOT NULL AND S.REJ_GEN_ES_SIGN_DATE IS NULL)
                    OR (D.REJ_GEN_ES_CROMERR_ACT_ID IS NOT NULL AND S.REJ_GEN_ES_CROMERR_ACT_ID IS NOT NULL AND D.REJ_GEN_ES_CROMERR_ACT_ID <> S.REJ_GEN_ES_CROMERR_ACT_ID)
                    OR (D.REJ_GEN_ES_CROMERR_ACT_ID IS NULL AND S.REJ_GEN_ES_CROMERR_ACT_ID IS NOT NULL)
                    OR (D.REJ_GEN_ES_CROMERR_ACT_ID IS NOT NULL AND S.REJ_GEN_ES_CROMERR_ACT_ID IS NULL)
                    OR (D.REJ_GEN_ES_CROMERR_DOC_ID IS NOT NULL AND S.REJ_GEN_ES_CROMERR_DOC_ID IS NOT NULL AND D.REJ_GEN_ES_CROMERR_DOC_ID <> S.REJ_GEN_ES_CROMERR_DOC_ID)
                    OR (D.REJ_GEN_ES_CROMERR_DOC_ID IS NULL AND S.REJ_GEN_ES_CROMERR_DOC_ID IS NOT NULL)
                    OR (D.REJ_GEN_ES_CROMERR_DOC_ID IS NOT NULL AND S.REJ_GEN_ES_CROMERR_DOC_ID IS NULL)
                    OR (D.REJ_GEN_ES_SIGNER_FIRST_NAME IS NOT NULL AND S.REJ_GEN_ES_SIGNER_FIRST_NAME IS NOT NULL AND D.REJ_GEN_ES_SIGNER_FIRST_NAME <> S.REJ_GEN_ES_SIGNER_FIRST_NAME)
                    OR (D.REJ_GEN_ES_SIGNER_FIRST_NAME IS NULL AND S.REJ_GEN_ES_SIGNER_FIRST_NAME IS NOT NULL)
                    OR (D.REJ_GEN_ES_SIGNER_FIRST_NAME IS NOT NULL AND S.REJ_GEN_ES_SIGNER_FIRST_NAME IS NULL)
                    OR (D.REJ_GEN_ES_SIGNER_LAST_NAME IS NOT NULL AND S.REJ_GEN_ES_SIGNER_LAST_NAME IS NOT NULL AND D.REJ_GEN_ES_SIGNER_LAST_NAME <> S.REJ_GEN_ES_SIGNER_LAST_NAME)
                    OR (D.REJ_GEN_ES_SIGNER_LAST_NAME IS NULL AND S.REJ_GEN_ES_SIGNER_LAST_NAME IS NOT NULL)
                    OR (D.REJ_GEN_ES_SIGNER_LAST_NAME IS NOT NULL AND S.REJ_GEN_ES_SIGNER_LAST_NAME IS NULL)
                    OR (D.REJ_GEN_ES_SIGNER_USER_ID IS NOT NULL AND S.REJ_GEN_ES_SIGNER_USER_ID IS NOT NULL AND D.REJ_GEN_ES_SIGNER_USER_ID <> S.REJ_GEN_ES_SIGNER_USER_ID)
                    OR (D.REJ_GEN_ES_SIGNER_USER_ID IS NULL AND S.REJ_GEN_ES_SIGNER_USER_ID IS NOT NULL)
                    OR (D.REJ_GEN_ES_SIGNER_USER_ID IS NOT NULL AND S.REJ_GEN_ES_SIGNER_USER_ID IS NULL)
                    OR (D.REJ_GEN_ES_DOC_NAME IS NOT NULL AND S.REJ_GEN_ES_DOC_NAME IS NOT NULL AND D.REJ_GEN_ES_DOC_NAME <> S.REJ_GEN_ES_DOC_NAME)
                    OR (D.REJ_GEN_ES_DOC_NAME IS NULL AND S.REJ_GEN_ES_DOC_NAME IS NOT NULL)
                    OR (D.REJ_GEN_ES_DOC_NAME IS NOT NULL AND S.REJ_GEN_ES_DOC_NAME IS NULL)
                    OR (D.REJ_GEN_ES_DOC_SIZE IS NOT NULL AND S.REJ_GEN_ES_DOC_SIZE IS NOT NULL AND D.REJ_GEN_ES_DOC_SIZE <> S.REJ_GEN_ES_DOC_SIZE)
                    OR (D.REJ_GEN_ES_DOC_SIZE IS NULL AND S.REJ_GEN_ES_DOC_SIZE IS NOT NULL)
                    OR (D.REJ_GEN_ES_DOC_SIZE IS NOT NULL AND S.REJ_GEN_ES_DOC_SIZE IS NULL)
                    OR (D.REJ_GEN_ES_DOC_MIME_TYPE IS NOT NULL AND S.REJ_GEN_ES_DOC_MIME_TYPE IS NOT NULL AND D.REJ_GEN_ES_DOC_MIME_TYPE <> S.REJ_GEN_ES_DOC_MIME_TYPE)
                    OR (D.REJ_GEN_ES_DOC_MIME_TYPE IS NULL AND S.REJ_GEN_ES_DOC_MIME_TYPE IS NOT NULL)
                    OR (D.REJ_GEN_ES_DOC_MIME_TYPE IS NOT NULL AND S.REJ_GEN_ES_DOC_MIME_TYPE IS NULL)
                    OR (D.IMP_GEN_NAME IS NOT NULL AND S.IMP_GEN_NAME IS NOT NULL AND D.IMP_GEN_NAME <> S.IMP_GEN_NAME)
                    OR (D.IMP_GEN_NAME IS NULL AND S.IMP_GEN_NAME IS NOT NULL)
                    OR (D.IMP_GEN_NAME IS NOT NULL AND S.IMP_GEN_NAME IS NULL)
                    OR (D.IMP_GEN_ADDRESS IS NOT NULL AND S.IMP_GEN_ADDRESS IS NOT NULL AND D.IMP_GEN_ADDRESS <> S.IMP_GEN_ADDRESS)
                    OR (D.IMP_GEN_ADDRESS IS NULL AND S.IMP_GEN_ADDRESS IS NOT NULL)
                    OR (D.IMP_GEN_ADDRESS IS NOT NULL AND S.IMP_GEN_ADDRESS IS NULL)
                    OR (D.IMP_GEN_CITY IS NOT NULL AND S.IMP_GEN_CITY IS NOT NULL AND D.IMP_GEN_CITY <> S.IMP_GEN_CITY)
                    OR (D.IMP_GEN_CITY IS NULL AND S.IMP_GEN_CITY IS NOT NULL)
                    OR (D.IMP_GEN_CITY IS NOT NULL AND S.IMP_GEN_CITY IS NULL)
                    OR (D.IMP_GEN_POSTAL_CODE IS NOT NULL AND S.IMP_GEN_POSTAL_CODE IS NOT NULL AND D.IMP_GEN_POSTAL_CODE <> S.IMP_GEN_POSTAL_CODE)
                    OR (D.IMP_GEN_POSTAL_CODE IS NULL AND S.IMP_GEN_POSTAL_CODE IS NOT NULL)
                    OR (D.IMP_GEN_POSTAL_CODE IS NOT NULL AND S.IMP_GEN_POSTAL_CODE IS NULL)
                    OR (D.IMP_GEN_PROVINCE IS NOT NULL AND S.IMP_GEN_PROVINCE IS NOT NULL AND D.IMP_GEN_PROVINCE <> S.IMP_GEN_PROVINCE)
                    OR (D.IMP_GEN_PROVINCE IS NULL AND S.IMP_GEN_PROVINCE IS NOT NULL)
                    OR (D.IMP_GEN_PROVINCE IS NOT NULL AND S.IMP_GEN_PROVINCE IS NULL)
                    OR (D.IMP_GEN_CNTRY_CODE IS NOT NULL AND S.IMP_GEN_CNTRY_CODE IS NOT NULL AND D.IMP_GEN_CNTRY_CODE <> S.IMP_GEN_CNTRY_CODE)
                    OR (D.IMP_GEN_CNTRY_CODE IS NULL AND S.IMP_GEN_CNTRY_CODE IS NOT NULL)
                    OR (D.IMP_GEN_CNTRY_CODE IS NOT NULL AND S.IMP_GEN_CNTRY_CODE IS NULL)
                    OR (D.IMP_GEN_CNTRY_NAME IS NOT NULL AND S.IMP_GEN_CNTRY_NAME IS NOT NULL AND D.IMP_GEN_CNTRY_NAME <> S.IMP_GEN_CNTRY_NAME)
                    OR (D.IMP_GEN_CNTRY_NAME IS NULL AND S.IMP_GEN_CNTRY_NAME IS NOT NULL)
                    OR (D.IMP_GEN_CNTRY_NAME IS NOT NULL AND S.IMP_GEN_CNTRY_NAME IS NULL)
                    OR (D.IMP_PORT_CITY IS NOT NULL AND S.IMP_PORT_CITY IS NOT NULL AND D.IMP_PORT_CITY <> S.IMP_PORT_CITY)
                    OR (D.IMP_PORT_CITY IS NULL AND S.IMP_PORT_CITY IS NOT NULL)
                    OR (D.IMP_PORT_CITY IS NOT NULL AND S.IMP_PORT_CITY IS NULL)
                    OR (D.IMP_PORT_STATE_CODE IS NOT NULL AND S.IMP_PORT_STATE_CODE IS NOT NULL AND D.IMP_PORT_STATE_CODE <> S.IMP_PORT_STATE_CODE)
                    OR (D.IMP_PORT_STATE_CODE IS NULL AND S.IMP_PORT_STATE_CODE IS NOT NULL)
                    OR (D.IMP_PORT_STATE_CODE IS NOT NULL AND S.IMP_PORT_STATE_CODE IS NULL)
                    OR (D.IMP_PORT_STATE_NAME IS NOT NULL AND S.IMP_PORT_STATE_NAME IS NOT NULL AND D.IMP_PORT_STATE_NAME <> S.IMP_PORT_STATE_NAME)
                    OR (D.IMP_PORT_STATE_NAME IS NULL AND S.IMP_PORT_STATE_NAME IS NOT NULL)
                    OR (D.IMP_PORT_STATE_NAME IS NOT NULL AND S.IMP_PORT_STATE_NAME IS NULL)
                    OR (D.PRINTED_DOC_NAME IS NOT NULL AND S.PRINTED_DOC_NAME IS NOT NULL AND D.PRINTED_DOC_NAME <> S.PRINTED_DOC_NAME)
                    OR (D.PRINTED_DOC_NAME IS NULL AND S.PRINTED_DOC_NAME IS NOT NULL)
                    OR (D.PRINTED_DOC_NAME IS NOT NULL AND S.PRINTED_DOC_NAME IS NULL)
                    OR (D.PRINTED_DOC_SIZE IS NOT NULL AND S.PRINTED_DOC_SIZE IS NOT NULL AND D.PRINTED_DOC_SIZE <> S.PRINTED_DOC_SIZE)
                    OR (D.PRINTED_DOC_SIZE IS NULL AND S.PRINTED_DOC_SIZE IS NOT NULL)
                    OR (D.PRINTED_DOC_SIZE IS NOT NULL AND S.PRINTED_DOC_SIZE IS NULL)
                    OR (D.PRINTED_DOC_MIME_TYPE IS NOT NULL AND S.PRINTED_DOC_MIME_TYPE IS NOT NULL AND D.PRINTED_DOC_MIME_TYPE <> S.PRINTED_DOC_MIME_TYPE)
                    OR (D.PRINTED_DOC_MIME_TYPE IS NULL AND S.PRINTED_DOC_MIME_TYPE IS NOT NULL)
                    OR (D.PRINTED_DOC_MIME_TYPE IS NOT NULL AND S.PRINTED_DOC_MIME_TYPE IS NULL)
                    OR (D.FORM_DOC_NAME IS NOT NULL AND S.FORM_DOC_NAME IS NOT NULL AND D.FORM_DOC_NAME <> S.FORM_DOC_NAME)
                    OR (D.FORM_DOC_NAME IS NULL AND S.FORM_DOC_NAME IS NOT NULL)
                    OR (D.FORM_DOC_NAME IS NOT NULL AND S.FORM_DOC_NAME IS NULL)
                    OR (D.FORM_DOC_SIZE IS NOT NULL AND S.FORM_DOC_SIZE IS NOT NULL AND D.FORM_DOC_SIZE <> S.FORM_DOC_SIZE)
                    OR (D.FORM_DOC_SIZE IS NULL AND S.FORM_DOC_SIZE IS NOT NULL)
                    OR (D.FORM_DOC_SIZE IS NOT NULL AND S.FORM_DOC_SIZE IS NULL)
                    OR (D.FORM_DOC_MIME_TYPE IS NOT NULL AND S.FORM_DOC_MIME_TYPE IS NOT NULL AND D.FORM_DOC_MIME_TYPE <> S.FORM_DOC_MIME_TYPE)
                    OR (D.FORM_DOC_MIME_TYPE IS NULL AND S.FORM_DOC_MIME_TYPE IS NOT NULL)
                    OR (D.FORM_DOC_MIME_TYPE IS NOT NULL AND S.FORM_DOC_MIME_TYPE IS NULL)
                    OR (D.ADD_INFO_NEW_MAN_DEST IS NOT NULL AND S.ADD_INFO_NEW_MAN_DEST IS NOT NULL AND D.ADD_INFO_NEW_MAN_DEST <> S.ADD_INFO_NEW_MAN_DEST)
                    OR (D.ADD_INFO_NEW_MAN_DEST IS NULL AND S.ADD_INFO_NEW_MAN_DEST IS NOT NULL)
                    OR (D.ADD_INFO_NEW_MAN_DEST IS NOT NULL AND S.ADD_INFO_NEW_MAN_DEST IS NULL)
                    OR (D.ADD_INFO_CONSENT_NUM IS NOT NULL AND S.ADD_INFO_CONSENT_NUM IS NOT NULL AND D.ADD_INFO_CONSENT_NUM <> S.ADD_INFO_CONSENT_NUM)
                    OR (D.ADD_INFO_CONSENT_NUM IS NULL AND S.ADD_INFO_CONSENT_NUM IS NOT NULL)
                    OR (D.ADD_INFO_CONSENT_NUM IS NOT NULL AND S.ADD_INFO_CONSENT_NUM IS NULL)
                    OR (D.ADD_INFO_HAND_INSTR IS NOT NULL AND S.ADD_INFO_HAND_INSTR IS NOT NULL AND D.ADD_INFO_HAND_INSTR <> S.ADD_INFO_HAND_INSTR)
                    OR (D.ADD_INFO_HAND_INSTR IS NULL AND S.ADD_INFO_HAND_INSTR IS NOT NULL)
                    OR (D.ADD_INFO_HAND_INSTR IS NOT NULL AND S.ADD_INFO_HAND_INSTR IS NULL)
                    OR (D.CORR_VERSION_NUM IS NOT NULL AND S.CORR_VERSION_NUM IS NOT NULL AND D.CORR_VERSION_NUM <> S.CORR_VERSION_NUM)
                    OR (D.CORR_VERSION_NUM IS NULL AND S.CORR_VERSION_NUM IS NOT NULL)
                    OR (D.CORR_VERSION_NUM IS NOT NULL AND S.CORR_VERSION_NUM IS NULL)
                    OR (D.CORR_ACTIVE_IND IS NOT NULL AND S.CORR_ACTIVE_IND IS NOT NULL AND D.CORR_ACTIVE_IND <> S.CORR_ACTIVE_IND)
                    OR (D.CORR_ACTIVE_IND IS NULL AND S.CORR_ACTIVE_IND IS NOT NULL)
                    OR (D.CORR_ACTIVE_IND IS NOT NULL AND S.CORR_ACTIVE_IND IS NULL)
                    OR (D.CORR_EPA_SITE_ID IS NOT NULL AND S.CORR_EPA_SITE_ID IS NOT NULL AND D.CORR_EPA_SITE_ID <> S.CORR_EPA_SITE_ID)
                    OR (D.CORR_EPA_SITE_ID IS NULL AND S.CORR_EPA_SITE_ID IS NOT NULL)
                    OR (D.CORR_EPA_SITE_ID IS NOT NULL AND S.CORR_EPA_SITE_ID IS NULL)
                    OR (D.CORR_ES_SIGN_DATE IS NOT NULL AND S.CORR_ES_SIGN_DATE IS NOT NULL AND D.CORR_ES_SIGN_DATE <> S.CORR_ES_SIGN_DATE)
                    OR (D.CORR_ES_SIGN_DATE IS NULL AND S.CORR_ES_SIGN_DATE IS NOT NULL)
                    OR (D.CORR_ES_SIGN_DATE IS NOT NULL AND S.CORR_ES_SIGN_DATE IS NULL)
                    OR (D.CORR_ES_CROMERR_ACT_ID IS NOT NULL AND S.CORR_ES_CROMERR_ACT_ID IS NOT NULL AND D.CORR_ES_CROMERR_ACT_ID <> S.CORR_ES_CROMERR_ACT_ID)
                    OR (D.CORR_ES_CROMERR_ACT_ID IS NULL AND S.CORR_ES_CROMERR_ACT_ID IS NOT NULL)
                    OR (D.CORR_ES_CROMERR_ACT_ID IS NOT NULL AND S.CORR_ES_CROMERR_ACT_ID IS NULL)
                    OR (D.CORR_ES_CROMERR_DOC_ID IS NOT NULL AND S.CORR_ES_CROMERR_DOC_ID IS NOT NULL AND D.CORR_ES_CROMERR_DOC_ID <> S.CORR_ES_CROMERR_DOC_ID)
                    OR (D.CORR_ES_CROMERR_DOC_ID IS NULL AND S.CORR_ES_CROMERR_DOC_ID IS NOT NULL)
                    OR (D.CORR_ES_CROMERR_DOC_ID IS NOT NULL AND S.CORR_ES_CROMERR_DOC_ID IS NULL)
                    OR (D.CORR_ES_SIGNER_FIRST_NAME IS NOT NULL AND S.CORR_ES_SIGNER_FIRST_NAME IS NOT NULL AND D.CORR_ES_SIGNER_FIRST_NAME <> S.CORR_ES_SIGNER_FIRST_NAME)
                    OR (D.CORR_ES_SIGNER_FIRST_NAME IS NULL AND S.CORR_ES_SIGNER_FIRST_NAME IS NOT NULL)
                    OR (D.CORR_ES_SIGNER_FIRST_NAME IS NOT NULL AND S.CORR_ES_SIGNER_FIRST_NAME IS NULL)
                    OR (D.CORR_ES_SIGNER_LAST_NAME IS NOT NULL AND S.CORR_ES_SIGNER_LAST_NAME IS NOT NULL AND D.CORR_ES_SIGNER_LAST_NAME <> S.CORR_ES_SIGNER_LAST_NAME)
                    OR (D.CORR_ES_SIGNER_LAST_NAME IS NULL AND S.CORR_ES_SIGNER_LAST_NAME IS NOT NULL)
                    OR (D.CORR_ES_SIGNER_LAST_NAME IS NOT NULL AND S.CORR_ES_SIGNER_LAST_NAME IS NULL)
                    OR (D.CORR_ES_SIGNER_USER_ID IS NOT NULL AND S.CORR_ES_SIGNER_USER_ID IS NOT NULL AND D.CORR_ES_SIGNER_USER_ID <> S.CORR_ES_SIGNER_USER_ID)
                    OR (D.CORR_ES_SIGNER_USER_ID IS NULL AND S.CORR_ES_SIGNER_USER_ID IS NOT NULL)
                    OR (D.CORR_ES_SIGNER_USER_ID IS NOT NULL AND S.CORR_ES_SIGNER_USER_ID IS NULL)
                    OR (D.CORR_ES_DOC_NAME IS NOT NULL AND S.CORR_ES_DOC_NAME IS NOT NULL AND D.CORR_ES_DOC_NAME <> S.CORR_ES_DOC_NAME)
                    OR (D.CORR_ES_DOC_NAME IS NULL AND S.CORR_ES_DOC_NAME IS NOT NULL)
                    OR (D.CORR_ES_DOC_NAME IS NOT NULL AND S.CORR_ES_DOC_NAME IS NULL)
                    OR (D.CORR_ES_DOC_SIZE IS NOT NULL AND S.CORR_ES_DOC_SIZE IS NOT NULL AND D.CORR_ES_DOC_SIZE <> S.CORR_ES_DOC_SIZE)
                    OR (D.CORR_ES_DOC_SIZE IS NULL AND S.CORR_ES_DOC_SIZE IS NOT NULL)
                    OR (D.CORR_ES_DOC_SIZE IS NOT NULL AND S.CORR_ES_DOC_SIZE IS NULL)
                    OR (D.CORR_ES_DOC_MIME_TYPE IS NOT NULL AND S.CORR_ES_DOC_MIME_TYPE IS NOT NULL AND D.CORR_ES_DOC_MIME_TYPE <> S.CORR_ES_DOC_MIME_TYPE)
                    OR (D.CORR_ES_DOC_MIME_TYPE IS NULL AND S.CORR_ES_DOC_MIME_TYPE IS NOT NULL)
                    OR (D.CORR_ES_DOC_MIME_TYPE IS NOT NULL AND S.CORR_ES_DOC_MIME_TYPE IS NULL)
                )
                    THEN
            UPDATE
            SET D.CREATED_DATE = S.CREATED_DATE,
                D.UPDATED_DATE = S.UPDATED_DATE,
                D.MAN_TRACKING_NUM = S.MAN_TRACKING_NUM,
                D.STATUS = S.STATUS,
                D.PUBLIC_IND = S.PUBLIC_IND,
                D.SUBM_TYPE = S.SUBM_TYPE,
                D.SIGN_STATUS_IND = S.SIGN_STATUS_IND,
                D.ORIGIN_TYPE = S.ORIGIN_TYPE,
                D.SHIPPED_DATE = S.SHIPPED_DATE,
                D.RECEIVED_DATE = S.RECEIVED_DATE,
                D.CERT_DATE = S.CERT_DATE,
                D.REJ_IND = S.REJ_IND,
                D.DISCREPANCY_IND = S.DISCREPANCY_IND,
                D.RESIDUE_IND = S.RESIDUE_IND,
                D.IMP_IND = S.IMP_IND,
                D.CONT_PREV_REJ_RES_IND = S.CONT_PREV_REJ_RES_IND,
                D.CERT_BY_FIRST_NAME = S.CERT_BY_FIRST_NAME,
                D.CERT_BY_LAST_NAME = S.CERT_BY_LAST_NAME,
                D.CERT_BY_USER_ID = S.CERT_BY_USER_ID,
                D.REJ_TRANS_ON_SITE_IND = S.REJ_TRANS_ON_SITE_IND,
                D.REJ_TYPE = S.REJ_TYPE,
                D.REJ_ALT_DES_FAC_TYPE = S.REJ_ALT_DES_FAC_TYPE,
                D.REJ_COMMENTS = S.REJ_COMMENTS,
                D.REJ_GEN_PS_NAME = S.REJ_GEN_PS_NAME,
                D.REJ_GEN_PS_DATE = S.REJ_GEN_PS_DATE,
                D.REJ_GEN_ES_SIGN_DATE = S.REJ_GEN_ES_SIGN_DATE,
                D.REJ_GEN_ES_CROMERR_ACT_ID = S.REJ_GEN_ES_CROMERR_ACT_ID,
                D.REJ_GEN_ES_CROMERR_DOC_ID = S.REJ_GEN_ES_CROMERR_DOC_ID,
                D.REJ_GEN_ES_SIGNER_FIRST_NAME = S.REJ_GEN_ES_SIGNER_FIRST_NAME,
                D.REJ_GEN_ES_SIGNER_LAST_NAME = S.REJ_GEN_ES_SIGNER_LAST_NAME,
                D.REJ_GEN_ES_SIGNER_USER_ID = S.REJ_GEN_ES_SIGNER_USER_ID,
                D.REJ_GEN_ES_DOC_NAME = S.REJ_GEN_ES_DOC_NAME,
                D.REJ_GEN_ES_DOC_SIZE = S.REJ_GEN_ES_DOC_SIZE,
                D.REJ_GEN_ES_DOC_MIME_TYPE = S.REJ_GEN_ES_DOC_MIME_TYPE,
                D.IMP_GEN_NAME = S.IMP_GEN_NAME,
                D.IMP_GEN_ADDRESS = S.IMP_GEN_ADDRESS,
                D.IMP_GEN_CITY = S.IMP_GEN_CITY,
                D.IMP_GEN_POSTAL_CODE = S.IMP_GEN_POSTAL_CODE,
                D.IMP_GEN_PROVINCE = S.IMP_GEN_PROVINCE,
                D.IMP_GEN_CNTRY_CODE = S.IMP_GEN_CNTRY_CODE,
                D.IMP_GEN_CNTRY_NAME = S.IMP_GEN_CNTRY_NAME,
                D.IMP_PORT_CITY = S.IMP_PORT_CITY,
                D.IMP_PORT_STATE_CODE = S.IMP_PORT_STATE_CODE,
                D.IMP_PORT_STATE_NAME = S.IMP_PORT_STATE_NAME,
                D.PRINTED_DOC_NAME = S.PRINTED_DOC_NAME,
                D.PRINTED_DOC_SIZE = S.PRINTED_DOC_SIZE,
                D.PRINTED_DOC_MIME_TYPE = S.PRINTED_DOC_MIME_TYPE,
                D.FORM_DOC_NAME = S.FORM_DOC_NAME,
                D.FORM_DOC_SIZE = S.FORM_DOC_SIZE,
                D.FORM_DOC_MIME_TYPE = S.FORM_DOC_MIME_TYPE,
                D.ADD_INFO_NEW_MAN_DEST = S.ADD_INFO_NEW_MAN_DEST,
                D.ADD_INFO_CONSENT_NUM = S.ADD_INFO_CONSENT_NUM,
                D.ADD_INFO_HAND_INSTR = S.ADD_INFO_HAND_INSTR,
                D.CORR_VERSION_NUM = S.CORR_VERSION_NUM,
                D.CORR_ACTIVE_IND = S.CORR_ACTIVE_IND,
                D.CORR_EPA_SITE_ID = S.CORR_EPA_SITE_ID,
                D.CORR_ES_SIGN_DATE = S.CORR_ES_SIGN_DATE,
                D.CORR_ES_CROMERR_ACT_ID = S.CORR_ES_CROMERR_ACT_ID,
                D.CORR_ES_CROMERR_DOC_ID = S.CORR_ES_CROMERR_DOC_ID,
                D.CORR_ES_SIGNER_FIRST_NAME = S.CORR_ES_SIGNER_FIRST_NAME,
                D.CORR_ES_SIGNER_LAST_NAME = S.CORR_ES_SIGNER_LAST_NAME,
                D.CORR_ES_SIGNER_USER_ID = S.CORR_ES_SIGNER_USER_ID,
                D.CORR_ES_DOC_NAME = S.CORR_ES_DOC_NAME,
                D.CORR_ES_DOC_SIZE = S.CORR_ES_DOC_SIZE,
                D.CORR_ES_DOC_MIME_TYPE = S.CORR_ES_DOC_MIME_TYPE
        WHEN NOT MATCHED THEN
            INSERT (CREATED_DATE,
                    UPDATED_DATE,
                    MAN_TRACKING_NUM,
                    STATUS,
                    PUBLIC_IND,
                    SUBM_TYPE,
                    SIGN_STATUS_IND,
                    ORIGIN_TYPE,
                    SHIPPED_DATE,
                    RECEIVED_DATE,
                    CERT_DATE,
                    REJ_IND,
                    DISCREPANCY_IND,
                    RESIDUE_IND,
                    IMP_IND,
                    CONT_PREV_REJ_RES_IND,
                    CERT_BY_FIRST_NAME,
                    CERT_BY_LAST_NAME,
                    CERT_BY_USER_ID,
                    REJ_TRANS_ON_SITE_IND,
                    REJ_TYPE,
                    REJ_ALT_DES_FAC_TYPE,
                    REJ_COMMENTS,
                    REJ_GEN_PS_NAME,
                    REJ_GEN_PS_DATE,
                    REJ_GEN_ES_SIGN_DATE,
                    REJ_GEN_ES_CROMERR_ACT_ID,
                    REJ_GEN_ES_CROMERR_DOC_ID,
                    REJ_GEN_ES_SIGNER_FIRST_NAME,
                    REJ_GEN_ES_SIGNER_LAST_NAME,
                    REJ_GEN_ES_SIGNER_USER_ID,
                    REJ_GEN_ES_DOC_NAME,
                    REJ_GEN_ES_DOC_SIZE,
                    REJ_GEN_ES_DOC_MIME_TYPE,
                    IMP_GEN_NAME,
                    IMP_GEN_ADDRESS,
                    IMP_GEN_CITY,
                    IMP_GEN_POSTAL_CODE,
                    IMP_GEN_PROVINCE,
                    IMP_GEN_CNTRY_CODE,
                    IMP_GEN_CNTRY_NAME,
                    IMP_PORT_CITY,
                    IMP_PORT_STATE_CODE,
                    IMP_PORT_STATE_NAME,
                    PRINTED_DOC_NAME,
                    PRINTED_DOC_SIZE,
                    PRINTED_DOC_MIME_TYPE,
                    FORM_DOC_NAME,
                    FORM_DOC_SIZE,
                    FORM_DOC_MIME_TYPE,
                    ADD_INFO_NEW_MAN_DEST,
                    ADD_INFO_CONSENT_NUM,
                    ADD_INFO_HAND_INSTR,
                    CORR_VERSION_NUM,
                    CORR_ACTIVE_IND,
                    CORR_EPA_SITE_ID,
                    CORR_ES_SIGN_DATE,
                    CORR_ES_CROMERR_ACT_ID,
                    CORR_ES_CROMERR_DOC_ID,
                    CORR_ES_SIGNER_FIRST_NAME,
                    CORR_ES_SIGNER_LAST_NAME,
                    CORR_ES_SIGNER_USER_ID,
                    CORR_ES_DOC_NAME,
                    CORR_ES_DOC_SIZE,
                    CORR_ES_DOC_MIME_TYPE)
                VALUES (S.CREATED_DATE,
                        S.UPDATED_DATE,
                        S.MAN_TRACKING_NUM,
                        S.STATUS,
                        S.PUBLIC_IND,
                        S.SUBM_TYPE,
                        S.SIGN_STATUS_IND,
                        S.ORIGIN_TYPE,
                        S.SHIPPED_DATE,
                        S.RECEIVED_DATE,
                        S.CERT_DATE,
                        S.REJ_IND,
                        S.DISCREPANCY_IND,
                        S.RESIDUE_IND,
                        S.IMP_IND,
                        S.CONT_PREV_REJ_RES_IND,
                        S.CERT_BY_FIRST_NAME,
                        S.CERT_BY_LAST_NAME,
                        S.CERT_BY_USER_ID,
                        S.REJ_TRANS_ON_SITE_IND,
                        S.REJ_TYPE,
                        S.REJ_ALT_DES_FAC_TYPE,
                        S.REJ_COMMENTS,
                        S.REJ_GEN_PS_NAME,
                        S.REJ_GEN_PS_DATE,
                        S.REJ_GEN_ES_SIGN_DATE,
                        S.REJ_GEN_ES_CROMERR_ACT_ID,
                        S.REJ_GEN_ES_CROMERR_DOC_ID,
                        S.REJ_GEN_ES_SIGNER_FIRST_NAME,
                        S.REJ_GEN_ES_SIGNER_LAST_NAME,
                        S.REJ_GEN_ES_SIGNER_USER_ID,
                        S.REJ_GEN_ES_DOC_NAME,
                        S.REJ_GEN_ES_DOC_SIZE,
                        S.REJ_GEN_ES_DOC_MIME_TYPE,
                        S.IMP_GEN_NAME,
                        S.IMP_GEN_ADDRESS,
                        S.IMP_GEN_CITY,
                        S.IMP_GEN_POSTAL_CODE,
                        S.IMP_GEN_PROVINCE,
                        S.IMP_GEN_CNTRY_CODE,
                        S.IMP_GEN_CNTRY_NAME,
                        S.IMP_PORT_CITY,
                        S.IMP_PORT_STATE_CODE,
                        S.IMP_PORT_STATE_NAME,
                        S.PRINTED_DOC_NAME,
                        S.PRINTED_DOC_SIZE,
                        S.PRINTED_DOC_MIME_TYPE,
                        S.FORM_DOC_NAME,
                        S.FORM_DOC_SIZE,
                        S.FORM_DOC_MIME_TYPE,
                        S.ADD_INFO_NEW_MAN_DEST,
                        S.ADD_INFO_CONSENT_NUM,
                        S.ADD_INFO_HAND_INSTR,
                        S.CORR_VERSION_NUM,
                        S.CORR_ACTIVE_IND,
                        S.CORR_EPA_SITE_ID,
                        S.CORR_ES_SIGN_DATE,
                        S.CORR_ES_CROMERR_ACT_ID,
                        S.CORR_ES_CROMERR_DOC_ID,
                        S.CORR_ES_SIGNER_FIRST_NAME,
                        S.CORR_ES_SIGNER_LAST_NAME,
                        S.CORR_ES_SIGNER_USER_ID,
                        S.CORR_ES_DOC_NAME,
                        S.CORR_ES_DOC_SIZE,
                        S.CORR_ES_DOC_MIME_TYPE);
        IF @localTran = 1 AND XACT_STATE() = 1
        COMMIT TRAN LocalTran

END TRY
BEGIN CATCH

    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT

    SELECT  @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE()

    IF @localTran = 1 AND XACT_STATE() <> 0
        ROLLBACK TRAN

    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

END CATCH
    END
GO
/****** Object:  StoredProcedure [dbo].[EM_MERGE_EMANIFEST_COMMENT]    Script Date: 6/12/2019 2:50:58 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*************************************************************************************************
** ObjectName: EM_MERGE_EMANIFEST_COMMENT.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_EM_EMANIFEST_COMMENT table 
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  06/12/2019   ageery      Created.
**
***************************************************************************************************/ --
    CREATE PROCEDURE [dbo].[EM_MERGE_EMANIFEST_COMMENT] @EM_SUBM_ID varchar(40) AS
    BEGIN
        SET NOCOUNT ON;
SET XACT_ABORT,
    QUOTED_IDENTIFIER,
    ANSI_NULLS,
    ANSI_PADDING,
    ANSI_WARNINGS,
    ARITHABORT,
    CONCAT_NULL_YIELDS_NULL ON;
SET NUMERIC_ROUNDABORT OFF;

DECLARE @int INT;

DECLARE @localTran BIT
IF @@TRANCOUNT = 0
BEGIN
    SET @localTran = 1
    BEGIN TRANSACTION LocalTran
END

BEGIN TRY
        DELETE
        FROM RCRA_EM_EMANIFEST_COMMENT
        WHERE EM_EMANIFEST_ID IN (SELECT WH_EM_EMANIFEST_ID
                                  FROM ETL_EM_EMANIFEST_COMMENT_VW
                                  WHERE EM_SUBM_ID = @EM_SUBM_ID);

        INSERT INTO RCRA_EM_EMANIFEST_COMMENT (EM_EMANIFEST_ID,
                                          COMMENT_DESC,
                                          HANDLER_ID,
                                          COMMENT_LABEL)
        SELECT WH_EM_EMANIFEST_ID, COMMENT_DESC, HANDLER_ID, COMMENT_LABEL
        FROM ETL_EM_EMANIFEST_COMMENT_VW
        WHERE EM_SUBM_ID = @EM_SUBM_ID;
        IF @localTran = 1 AND XACT_STATE() = 1
        COMMIT TRAN LocalTran

END TRY
BEGIN CATCH

    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT

    SELECT  @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE()

    IF @localTran = 1 AND XACT_STATE() <> 0
        ROLLBACK TRAN

    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

END CATCH
    END
GO
/****** Object:  StoredProcedure [dbo].[EM_MERGE_HANDLER]    Script Date: 6/12/2019 2:50:58 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*************************************************************************************************
** ObjectName: EM_MERGE_HANDLER.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_EM_HANDLER table 
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  06/12/2019   ageery      Created.
**
***************************************************************************************************/ --
    CREATE PROCEDURE [dbo].[EM_MERGE_HANDLER] @EM_SUBM_ID varchar(40) AS
    BEGIN
        SET NOCOUNT ON;
SET XACT_ABORT,
    QUOTED_IDENTIFIER,
    ANSI_NULLS,
    ANSI_PADDING,
    ANSI_WARNINGS,
    ARITHABORT,
    CONCAT_NULL_YIELDS_NULL ON;
SET NUMERIC_ROUNDABORT OFF;

DECLARE @int INT;

DECLARE @localTran BIT
IF @@TRANCOUNT = 0
BEGIN
    SET @localTran = 1
    BEGIN TRANSACTION LocalTran
END

BEGIN TRY
        DELETE
        FROM RCRA_EM_HANDLER
        WHERE EM_EMANIFEST_ID IN (SELECT WH_EM_EMANIFEST_ID
                                  FROM ETL_EM_HANDLER_VW
                                  WHERE EM_SUBM_ID = @EM_SUBM_ID);
        INSERT INTO RCRA_EM_HANDLER (
            EM_EMANIFEST_ID,
                SITE_TYPE,
EPA_SITE_ID,
MANIFEST_NAME,
ORDER_NUM,
REG_IND,
MOD_IND,
MANIFEST_HANDLER_TYPE,
MAIL_STREET_NUM,
MAIL_STREET1,
MAIL_STREET2,
MAIL_CITY,
MAIL_ZIP,
MAIL_CNTRY_CODE,
MAIL_CNTRY_NAME,
MAIL_STATE_CODE,
MAIL_STATE_NAME,
SITE_STREET_NUM,
SITE_STREET1,
SITE_STREET2,
SITE_CITY,
SITE_ZIP,
SITE_CNTRY_CODE,
SITE_CNTRY_NAME,
SITE_STATE_CODE,
SITE_STATE_NAME,
CONTACT_FIRST_NAME,
CONTACT_MIDDLE_INITIAL,
CONTACT_LAST_NAME,
CONTACT_EMAIL,
CONTACT_COMPANY_NAME,
CONTACT_PHONE_NUM,
CONTACT_PHONE_EXT,
EMERG_PHONE_NUM,
EMERG_PHONE_EXT,
PS_NAME,
PS_DATE,
ES_SIGN_DATE,
ES_CROMERR_ACT_ID,
ES_CROMERR_DOC_ID,
ES_SIGNER_FIRST_NAME,
ES_SIGNER_LAST_NAME,
ES_SIGNER_USER_ID,
ES_DOC_NAME,
ES_DOC_SIZE,
ES_DOC_MIME_TYPE)
        SELECT WH_EM_EMANIFEST_ID,
            SITE_TYPE,
            EPA_SITE_ID,
            MANIFEST_NAME,
            ORDER_NUM,
            REG_IND,
            MOD_IND,
            MANIFEST_HANDLER_TYPE,
            MAIL_STREET_NUM,
            MAIL_STREET1,
            MAIL_STREET2,
            MAIL_CITY,
            MAIL_ZIP,
            MAIL_CNTRY_CODE,
            MAIL_CNTRY_NAME,
            MAIL_STATE_CODE,
            MAIL_STATE_NAME,
            SITE_STREET_NUM,
            SITE_STREET1,
            SITE_STREET2,
            SITE_CITY,
            SITE_ZIP,
            SITE_CNTRY_CODE,
            SITE_CNTRY_NAME,
            SITE_STATE_CODE,
            SITE_STATE_NAME,
            CONTACT_FIRST_NAME,
            CONTACT_MIDDLE_INITIAL,
            CONTACT_LAST_NAME,
            CONTACT_EMAIL,
            CONTACT_COMPANY_NAME,
            CONTACT_PHONE_NUM,
            CONTACT_PHONE_EXT,
            EMERG_PHONE_NUM,
            EMERG_PHONE_EXT,
            PS_NAME,
            PS_DATE,
            ES_SIGN_DATE,
            ES_CROMERR_ACT_ID,
            ES_CROMERR_DOC_ID,
            ES_SIGNER_FIRST_NAME,
            ES_SIGNER_LAST_NAME,
            ES_SIGNER_USER_ID,
            ES_DOC_NAME,
            ES_DOC_SIZE,
            ES_DOC_MIME_TYPE
        FROM ETL_EM_HANDLER_VW WHERE EM_SUBM_ID = @EM_SUBM_ID;
        IF @localTran = 1 AND XACT_STATE() = 1
        COMMIT TRAN LocalTran

END TRY
BEGIN CATCH

    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT

    SELECT  @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE()

    IF @localTran = 1 AND XACT_STATE() <> 0
        ROLLBACK TRAN

    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

END CATCH
    END
GO
/****** Object:  StoredProcedure [dbo].[EM_MERGE_TR_NUM_ORIG]    Script Date: 6/12/2019 2:50:58 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*************************************************************************************************
** ObjectName: EM_MERGE_TR_NUM_ORIG.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_EM_TR_NUM_ORIG table 
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  06/12/2019   ageery      Created.
**
***************************************************************************************************/ --
    CREATE PROCEDURE [dbo].[EM_MERGE_TR_NUM_ORIG] @EM_SUBM_ID varchar(40) AS
    BEGIN
        SET NOCOUNT ON;
SET XACT_ABORT,
    QUOTED_IDENTIFIER,
    ANSI_NULLS,
    ANSI_PADDING,
    ANSI_WARNINGS,
    ARITHABORT,
    CONCAT_NULL_YIELDS_NULL ON;
SET NUMERIC_ROUNDABORT OFF;

DECLARE @int INT;

DECLARE @localTran BIT
IF @@TRANCOUNT = 0
BEGIN
    SET @localTran = 1
    BEGIN TRANSACTION LocalTran
END

BEGIN TRY
        DELETE
        FROM RCRA_EM_TR_NUM_ORIG
        WHERE EM_EMANIFEST_ID IN (SELECT WH_EM_EMANIFEST_ID
                                  FROM ETL_EM_HANDLER_VW
                                  WHERE EM_SUBM_ID = @EM_SUBM_ID);
        INSERT INTO RCRA_EM_TR_NUM_ORIG (EM_EMANIFEST_ID, MANIFEST_TRACKING_NUM)
        SELECT WH_EM_EMANIFEST_ID, MANIFEST_TRACKING_NUM FROM ETL_EM_TR_NUM_ORIG_VW
            WHERE WH_EM_EMANIFEST_ID IN (SELECT WH_EM_EMANIFEST_ID
                                      FROM ETL_EM_HANDLER_VW
                                      WHERE EM_SUBM_ID = @EM_SUBM_ID);
        IF @localTran = 1 AND XACT_STATE() = 1
        COMMIT TRAN LocalTran

END TRY
BEGIN CATCH

    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT

    SELECT  @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE()

    IF @localTran = 1 AND XACT_STATE() <> 0
        ROLLBACK TRAN

    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

END CATCH
    END
GO
/****** Object:  StoredProcedure [dbo].[EM_MERGE_TR_NUM_REJ]    Script Date: 6/12/2019 2:50:58 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*************************************************************************************************
** ObjectName: EM_MERGE_TR_NUM_REJ.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_EM_TR_NUM_REJ table 
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  06/12/2019   ageery      Created.
**
***************************************************************************************************/ --
    CREATE PROCEDURE [dbo].[EM_MERGE_TR_NUM_REJ] @EM_SUBM_ID varchar(40) AS
    BEGIN
        SET NOCOUNT ON;
SET XACT_ABORT,
    QUOTED_IDENTIFIER,
    ANSI_NULLS,
    ANSI_PADDING,
    ANSI_WARNINGS,
    ARITHABORT,
    CONCAT_NULL_YIELDS_NULL ON;
SET NUMERIC_ROUNDABORT OFF;

DECLARE @int INT;

DECLARE @localTran BIT
IF @@TRANCOUNT = 0
BEGIN
    SET @localTran = 1
    BEGIN TRANSACTION LocalTran
END

BEGIN TRY
        DELETE
        FROM RCRA_EM_TR_NUM_REJ
        WHERE EM_EMANIFEST_ID IN (SELECT WH_EM_EMANIFEST_ID
                                  FROM ETL_EM_HANDLER_VW
                                  WHERE EM_SUBM_ID = @EM_SUBM_ID);
        INSERT INTO RCRA_EM_TR_NUM_REJ (EM_EMANIFEST_ID, MANIFEST_TRACKING_NUM)
            SELECT WH_EM_EMANIFEST_ID, MANIFEST_TRACKING_NUM FROM ETL_EM_TR_NUM_REJ_VW
            WHERE WH_EM_EMANIFEST_ID IN (SELECT WH_EM_EMANIFEST_ID
                                      FROM ETL_EM_HANDLER_VW
                                      WHERE EM_SUBM_ID = @EM_SUBM_ID);
        IF @localTran = 1 AND XACT_STATE() = 1
        COMMIT TRAN LocalTran

END TRY
BEGIN CATCH

    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT

    SELECT  @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE()

    IF @localTran = 1 AND XACT_STATE() <> 0
        ROLLBACK TRAN

    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

END CATCH
    END
GO
/****** Object:  StoredProcedure [dbo].[EM_MERGE_TR_NUM_RESIDUE_NEW]    Script Date: 6/12/2019 2:50:58 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*************************************************************************************************
** ObjectName: EM_MERGE_TR_NUM_RESIDUE_NEW.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_EM_TR_NUM_RESIDUE_NEW table 
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  06/12/2019   ageery      Created.
**
***************************************************************************************************/ --
    CREATE PROCEDURE [dbo].[EM_MERGE_TR_NUM_RESIDUE_NEW] @EM_SUBM_ID varchar(40) AS
    BEGIN
        SET NOCOUNT ON;
SET XACT_ABORT,
    QUOTED_IDENTIFIER,
    ANSI_NULLS,
    ANSI_PADDING,
    ANSI_WARNINGS,
    ARITHABORT,
    CONCAT_NULL_YIELDS_NULL ON;
SET NUMERIC_ROUNDABORT OFF;

DECLARE @int INT;

DECLARE @localTran BIT
IF @@TRANCOUNT = 0
BEGIN
    SET @localTran = 1
    BEGIN TRANSACTION LocalTran
END

BEGIN TRY
        DELETE
        FROM RCRA_EM_TR_NUM_RESIDUE_NEW
        WHERE EM_EMANIFEST_ID IN (SELECT WH_EM_EMANIFEST_ID
                                  FROM ETL_EM_HANDLER_VW
                                  WHERE EM_SUBM_ID = @EM_SUBM_ID);
        INSERT INTO RCRA_EM_TR_NUM_RESIDUE_NEW (EM_EMANIFEST_ID, MANIFEST_TRACKING_NUM)
            SELECT WH_EM_EMANIFEST_ID, MANIFEST_TRACKING_NUM FROM ETL_EM_TR_NUM_RESIDUE_NEW_VW
            WHERE WH_EM_EMANIFEST_ID IN (SELECT WH_EM_EMANIFEST_ID
                                      FROM ETL_EM_HANDLER_VW
                                      WHERE EM_SUBM_ID = @EM_SUBM_ID);
        IF @localTran = 1 AND XACT_STATE() = 1
        COMMIT TRAN LocalTran

END TRY
BEGIN CATCH

    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT

    SELECT  @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE()

    IF @localTran = 1 AND XACT_STATE() <> 0
        ROLLBACK TRAN

    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

END CATCH
    END
GO
/****** Object:  StoredProcedure [dbo].[EM_MERGE_TR_NUM_WASTE]    Script Date: 6/12/2019 2:50:58 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*************************************************************************************************
** ObjectName: EM_MERGE_TR_NUM_WASTE.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_EM_TR_NUM_WASTE table 
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  06/12/2019   ageery      Created.
**
***************************************************************************************************/ --
    CREATE PROCEDURE [dbo].[EM_MERGE_TR_NUM_WASTE] @EM_SUBM_ID varchar(40) AS
    BEGIN
        SET NOCOUNT ON;
SET XACT_ABORT,
    QUOTED_IDENTIFIER,
    ANSI_NULLS,
    ANSI_PADDING,
    ANSI_WARNINGS,
    ARITHABORT,
    CONCAT_NULL_YIELDS_NULL ON;
SET NUMERIC_ROUNDABORT OFF;

DECLARE @int INT;

DECLARE @localTran BIT
IF @@TRANCOUNT = 0
BEGIN
    SET @localTran = 1
    BEGIN TRANSACTION LocalTran
END

BEGIN TRY
        DELETE
        FROM RCRA_EM_TR_NUM_WASTE
        WHERE EM_WASTE_ID IN (SELECT WH_EM_WASTE_ID
                                  FROM ETL_EM_WASTE_VW
                                  WHERE EM_SUBM_ID = @EM_SUBM_ID);
        INSERT INTO RCRA_EM_TR_NUM_WASTE (EM_WASTE_ID, MANIFEST_TRACKING_NUM)
            SELECT WH_EM_WASTE_ID, MANIFEST_TRACKING_NUM FROM ETL_EM_TR_NUM_WASTE_VW
            WHERE WH_EM_EMANIFEST_ID IN (SELECT WH_EM_EMANIFEST_ID
                                         FROM ETL_EM_HANDLER_VW
                                         WHERE EM_SUBM_ID = @EM_SUBM_ID);
        IF @localTran = 1 AND XACT_STATE() = 1
        COMMIT TRAN LocalTran

END TRY
BEGIN CATCH

    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT

    SELECT  @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE()

    IF @localTran = 1 AND XACT_STATE() <> 0
        ROLLBACK TRAN

    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

END CATCH
    END
GO
/****** Object:  StoredProcedure [dbo].[EM_MERGE_WASTE]    Script Date: 6/12/2019 2:50:58 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*************************************************************************************************
** ObjectName: EM_MERGE_WASTE.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_EM_WASTE table 
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  06/12/2019   ageery      Created.
**
***************************************************************************************************/ --
    CREATE PROCEDURE [dbo].[EM_MERGE_WASTE] @EM_SUBM_ID varchar(40) AS
    BEGIN
        SET NOCOUNT ON;
SET XACT_ABORT,
    QUOTED_IDENTIFIER,
    ANSI_NULLS,
    ANSI_PADDING,
    ANSI_WARNINGS,
    ARITHABORT,
    CONCAT_NULL_YIELDS_NULL ON;
SET NUMERIC_ROUNDABORT OFF;

DECLARE @int INT;

DECLARE @localTran BIT
IF @@TRANCOUNT = 0
BEGIN
    SET @localTran = 1
    BEGIN TRANSACTION LocalTran
END

BEGIN TRY
        DELETE
        FROM RCRA_EM_WASTE
        WHERE EM_EMANIFEST_ID IN (SELECT WH_EM_EMANIFEST_ID
                                  FROM ETL_EM_HANDLER_VW
                                  WHERE EM_SUBM_ID = @EM_SUBM_ID);
        INSERT RCRA_EM_WASTE (EM_EMANIFEST_ID, DOT_HAZ_IND, WASTES_DESC, BR_IND, PCB_IND, LINE_NUM, EPA_WASTE_IND,
                              DOT_ID_NUM, DOT_PRINTED_INFO, QNT_CONT_NUM, QNT_VAL, QNT_CONT_TYPE_CODE,
                              QNT_CONT_TYPE_DESC, QNT_UOM_CODE, QNT_UOM_DESC, BR_DENSITY, BR_DENSITY_UOM_CODE,
                              BR_DENSITY_UOM_DESC, BR_FORM_CODE, BR_FORM_DESC, BR_SRC_CODE, BR_SRC_DESC, BR_WM_CODE,
                              BR_WM_DESC, DISC_WASTE_QTY_IND, DISC_WASTE_TYPE_IND, DISC_COMMENTS, DISC_RESIDUE_IND,
                              DISC_RESIDUE_COMMENTS, MGMT_METHOD_CODE, MGMT_METHOD_DESC, ADD_INFO_NEW_MAN_DEST,
                              ADD_INFO_CONSENT_NUM, ADD_INFO_HAND_INSTR)
            select WH_EM_EMANIFEST_ID, DOT_HAZ_IND, WASTES_DESC, BR_IND, PCB_IND, LINE_NUM, EPA_WASTE_IND,
            DOT_ID_NUM, DOT_PRINTED_INFO, QNT_CONT_NUM, QNT_VAL, QNT_CONT_TYPE_CODE,
            QNT_CONT_TYPE_DESC, QNT_UOM_CODE, QNT_UOM_DESC, BR_DENSITY, BR_DENSITY_UOM_CODE,
            BR_DENSITY_UOM_DESC, BR_FORM_CODE, BR_FORM_DESC, BR_SRC_CODE, BR_SRC_DESC, BR_WM_CODE,
            BR_WM_DESC, DISC_WASTE_QTY_IND, DISC_WASTE_TYPE_IND, DISC_COMMENTS, DISC_RESIDUE_IND,
            DISC_RESIDUE_COMMENTS, MGMT_METHOD_CODE, MGMT_METHOD_DESC, ADD_INFO_NEW_MAN_DEST,
            ADD_INFO_CONSENT_NUM, ADD_INFO_HAND_INSTR
            FROM ETL_EM_WASTE_VW
            WHERE WH_EM_EMANIFEST_ID IN (SELECT WH_EM_EMANIFEST_ID
                                      FROM ETL_EM_HANDLER_VW
                                      WHERE EM_SUBM_ID = @EM_SUBM_ID);
        IF @localTran = 1 AND XACT_STATE() = 1
        COMMIT TRAN LocalTran

END TRY
BEGIN CATCH

    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT

    SELECT  @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE()

    IF @localTran = 1 AND XACT_STATE() <> 0
        ROLLBACK TRAN

    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

END CATCH
    END
GO
/****** Object:  StoredProcedure [dbo].[EM_MERGE_WASTE_CD_FED]    Script Date: 6/12/2019 2:50:58 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*************************************************************************************************
** ObjectName: EM_MERGE_WASTE_CD_FED.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_EM_WASTE_CD_FED table 
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  06/12/2019   ageery      Created.
**
***************************************************************************************************/ --
    CREATE PROCEDURE [dbo].[EM_MERGE_WASTE_CD_FED] @EM_SUBM_ID varchar(40) AS
    BEGIN
        SET NOCOUNT ON;
SET XACT_ABORT,
    QUOTED_IDENTIFIER,
    ANSI_NULLS,
    ANSI_PADDING,
    ANSI_WARNINGS,
    ARITHABORT,
    CONCAT_NULL_YIELDS_NULL ON;
SET NUMERIC_ROUNDABORT OFF;

DECLARE @int INT;

DECLARE @localTran BIT
IF @@TRANCOUNT = 0
BEGIN
    SET @localTran = 1
    BEGIN TRANSACTION LocalTran
END

BEGIN TRY
        DELETE
        FROM RCRA_EM_WASTE_CD_FED
        WHERE EM_WASTE_ID IN (SELECT WH_EM_WASTE_ID
                              FROM ETL_EM_WASTE_CD_FED_VW
                              WHERE EM_SUBM_ID = @EM_SUBM_ID);
        INSERT INTO RCRA_EM_WASTE_CD_FED (EM_WASTE_ID, WASTE_CODE, WASTE_DESC)
            SELECT WH_EM_WASTE_ID, WASTE_CODE, WASTE_DESC FROM ETL_EM_WASTE_CD_FED_VW
            WHERE WH_EM_EMANIFEST_ID IN (SELECT WH_EM_EMANIFEST_ID
                                         FROM ETL_EM_HANDLER_VW
                                         WHERE EM_SUBM_ID = @EM_SUBM_ID);
        IF @localTran = 1 AND XACT_STATE() = 1
        COMMIT TRAN LocalTran

END TRY
BEGIN CATCH

    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT

    SELECT  @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE()

    IF @localTran = 1 AND XACT_STATE() <> 0
        ROLLBACK TRAN

    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

END CATCH
    END
GO
/****** Object:  StoredProcedure [dbo].[EM_MERGE_WASTE_CD_GEN]    Script Date: 6/12/2019 2:50:58 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*************************************************************************************************
** ObjectName: EM_MERGE_WASTE_CD_GEN.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_EM_WASTE_CD_GEN table 
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  06/12/2019   ageery      Created.
**
***************************************************************************************************/ --
    CREATE PROCEDURE [dbo].[EM_MERGE_WASTE_CD_GEN] @EM_SUBM_ID varchar(40) AS
    BEGIN
        SET NOCOUNT ON;
SET XACT_ABORT,
    QUOTED_IDENTIFIER,
    ANSI_NULLS,
    ANSI_PADDING,
    ANSI_WARNINGS,
    ARITHABORT,
    CONCAT_NULL_YIELDS_NULL ON;
SET NUMERIC_ROUNDABORT OFF;

DECLARE @int INT;

DECLARE @localTran BIT
IF @@TRANCOUNT = 0
BEGIN
    SET @localTran = 1
    BEGIN TRANSACTION LocalTran
END

BEGIN TRY
        DELETE
        FROM RCRA_EM_WASTE_CD_GEN
        WHERE EM_WASTE_ID IN (SELECT WH_EM_WASTE_ID
                              FROM ETL_EM_WASTE_CD_GEN_VW
                              WHERE EM_SUBM_ID = @EM_SUBM_ID);
        INSERT INTO RCRA_EM_WASTE_CD_GEN (EM_WASTE_ID, WASTE_CODE, WASTE_DESC)
            SELECT WH_EM_WASTE_ID, WASTE_CODE, WASTE_DESC FROM ETL_EM_WASTE_CD_GEN_VW
            WHERE WH_EM_EMANIFEST_ID IN (SELECT WH_EM_EMANIFEST_ID
                                         FROM ETL_EM_HANDLER_VW
                                         WHERE EM_SUBM_ID = @EM_SUBM_ID);
        IF @localTran = 1 AND XACT_STATE() = 1
        COMMIT TRAN LocalTran

END TRY
BEGIN CATCH

    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT

    SELECT  @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE()

    IF @localTran = 1 AND XACT_STATE() <> 0
        ROLLBACK TRAN

    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

END CATCH
    END
GO
/****** Object:  StoredProcedure [dbo].[EM_MERGE_WASTE_CD_TRANS]    Script Date: 6/12/2019 2:50:58 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*************************************************************************************************
** ObjectName: EM_MERGE_WASTE_CD_TRANS.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_EM_WASTE_CD_TRANS table 
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  06/12/2019   ageery      Created.
**
***************************************************************************************************/ --
    CREATE PROCEDURE [dbo].[EM_MERGE_WASTE_CD_TRANS] @EM_SUBM_ID varchar(40) AS
    BEGIN
        SET NOCOUNT ON;
SET XACT_ABORT,
    QUOTED_IDENTIFIER,
    ANSI_NULLS,
    ANSI_PADDING,
    ANSI_WARNINGS,
    ARITHABORT,
    CONCAT_NULL_YIELDS_NULL ON;
SET NUMERIC_ROUNDABORT OFF;

DECLARE @int INT;

DECLARE @localTran BIT
IF @@TRANCOUNT = 0
BEGIN
    SET @localTran = 1
    BEGIN TRANSACTION LocalTran
END

BEGIN TRY
        DELETE
        FROM RCRA_EM_WASTE_CD_TRANS
        WHERE EM_WASTE_ID IN (SELECT WH_EM_WASTE_ID
                              FROM ETL_EM_WASTE_CD_TRANS_VW
                              WHERE EM_SUBM_ID = @EM_SUBM_ID);
        INSERT INTO RCRA_EM_WASTE_CD_TRANS (EM_WASTE_ID, WASTE_CODE)
            SELECT WH_EM_WASTE_ID, WASTE_CODE FROM ETL_EM_WASTE_CD_TRANS_VW
            WHERE WH_EM_EMANIFEST_ID IN (SELECT WH_EM_EMANIFEST_ID
                                         FROM ETL_EM_HANDLER_VW
                                         WHERE EM_SUBM_ID = @EM_SUBM_ID);
        IF @localTran = 1 AND XACT_STATE() = 1
        COMMIT TRAN LocalTran

END TRY
BEGIN CATCH

    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT

    SELECT  @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE()

    IF @localTran = 1 AND XACT_STATE() <> 0
        ROLLBACK TRAN

    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

END CATCH
    END
GO
/****** Object:  StoredProcedure [dbo].[EM_MERGE_WASTE_CD_TSDF]    Script Date: 6/12/2019 2:50:58 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*************************************************************************************************
** ObjectName: EM_MERGE_WASTE_CD_TSDF.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_EM_WASTE_CD_TSDF table 
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  06/12/2019   ageery      Created.
**
***************************************************************************************************/ --
    CREATE PROCEDURE [dbo].[EM_MERGE_WASTE_CD_TSDF] @EM_SUBM_ID varchar(40) AS
    BEGIN
        SET NOCOUNT ON;
SET XACT_ABORT,
    QUOTED_IDENTIFIER,
    ANSI_NULLS,
    ANSI_PADDING,
    ANSI_WARNINGS,
    ARITHABORT,
    CONCAT_NULL_YIELDS_NULL ON;
SET NUMERIC_ROUNDABORT OFF;

DECLARE @int INT;

DECLARE @localTran BIT
IF @@TRANCOUNT = 0
BEGIN
    SET @localTran = 1
    BEGIN TRANSACTION LocalTran
END

BEGIN TRY
        DELETE
        FROM RCRA_EM_WASTE_CD_TSDF
        WHERE EM_WASTE_ID IN (SELECT WH_EM_WASTE_ID
                              FROM ETL_EM_WASTE_CD_TSDF_VW
                              WHERE EM_SUBM_ID = @EM_SUBM_ID);
        INSERT INTO RCRA_EM_WASTE_CD_TSDF (EM_WASTE_ID, WASTE_CODE, WASTE_DESC)
            SELECT WH_EM_WASTE_ID, WASTE_CODE, WASTE_DESC FROM ETL_EM_WASTE_CD_TSDF_VW
            WHERE WH_EM_EMANIFEST_ID IN (SELECT WH_EM_EMANIFEST_ID
                                         FROM ETL_EM_HANDLER_VW
                                         WHERE EM_SUBM_ID = @EM_SUBM_ID);
        IF @localTran = 1 AND XACT_STATE() = 1
        COMMIT TRAN LocalTran

END TRY
BEGIN CATCH

    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT

    SELECT  @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE()

    IF @localTran = 1 AND XACT_STATE() <> 0
        ROLLBACK TRAN

    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

END CATCH
    END
GO
/****** Object:  StoredProcedure [dbo].[EM_MERGE_WASTE_COMMENT]    Script Date: 6/12/2019 2:50:58 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*************************************************************************************************
** ObjectName: EM_MERGE_WASTE_COMMENT.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_EM_WASTE_COMMENT table 
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  06/12/2019   ageery      Created.
**
***************************************************************************************************/ --
    CREATE PROCEDURE [dbo].[EM_MERGE_WASTE_COMMENT] @EM_SUBM_ID varchar(40) AS
    BEGIN
        SET NOCOUNT ON;
SET XACT_ABORT,
    QUOTED_IDENTIFIER,
    ANSI_NULLS,
    ANSI_PADDING,
    ANSI_WARNINGS,
    ARITHABORT,
    CONCAT_NULL_YIELDS_NULL ON;
SET NUMERIC_ROUNDABORT OFF;

DECLARE @int INT;

DECLARE @localTran BIT
IF @@TRANCOUNT = 0
BEGIN
    SET @localTran = 1
    BEGIN TRANSACTION LocalTran
END

BEGIN TRY
        DELETE
        FROM RCRA_EM_WASTE_COMMENT
        WHERE EM_WASTE_ID IN (SELECT WH_EM_WASTE_ID
                              FROM ETL_EM_WASTE_COMMENT_VW
                              WHERE EM_SUBM_ID = @EM_SUBM_ID);
        INSERT INTO RCRA_EM_WASTE_COMMENT (EM_WASTE_ID, COMMENT_DESC, HANDLER_ID, COMMENT_LABEL)
            SELECT WH_EM_WASTE_ID, COMMENT_DESC, HANDLER_ID, COMMENT_LABEL FROM ETL_EM_WASTE_COMMENT_VW
            WHERE WH_EM_EMANIFEST_ID IN (SELECT WH_EM_EMANIFEST_ID
                                         FROM ETL_EM_HANDLER_VW
                                         WHERE EM_SUBM_ID = @EM_SUBM_ID);
        IF @localTran = 1 AND XACT_STATE() = 1
        COMMIT TRAN LocalTran

END TRY
BEGIN CATCH

    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT

    SELECT  @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE()

    IF @localTran = 1 AND XACT_STATE() <> 0
        ROLLBACK TRAN

    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

END CATCH
    END
GO
/****** Object:  StoredProcedure [dbo].[EM_MERGE_WASTE_PCB]    Script Date: 6/12/2019 2:50:58 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*************************************************************************************************
** ObjectName: EM_MERGE_WASTE_PCB.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_EM_WASTE_PCB table 
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  06/12/2019   ageery      Created.
**
***************************************************************************************************/ --
    CREATE PROCEDURE [dbo].[EM_MERGE_WASTE_PCB] @EM_SUBM_ID varchar(40) AS
    BEGIN
        SET NOCOUNT ON;
SET XACT_ABORT,
    QUOTED_IDENTIFIER,
    ANSI_NULLS,
    ANSI_PADDING,
    ANSI_WARNINGS,
    ARITHABORT,
    CONCAT_NULL_YIELDS_NULL ON;
SET NUMERIC_ROUNDABORT OFF;

DECLARE @int INT;

DECLARE @localTran BIT
IF @@TRANCOUNT = 0
BEGIN
    SET @localTran = 1
    BEGIN TRANSACTION LocalTran
END

BEGIN TRY
        DELETE
        FROM RCRA_EM_WASTE_PCB
        WHERE EM_WASTE_ID IN (SELECT WH_EM_WASTE_ID
                              FROM ETL_EM_WASTE_PCB_VW
                              WHERE EM_SUBM_ID = @EM_SUBM_ID);
        INSERT INTO RCRA_EM_WASTE_PCB (EM_WASTE_ID, PCB_LOAD_TYPE_CODE, PCB_ARTICLE_CONT_ID, PCB_REMOVAL_DATE,
            PCB_WEIGHT, PCB_WASTE_TYPE, PCB_BULK_IDENTITY)
            SELECT WH_EM_WASTE_ID, PCB_LOAD_TYPE_CODE, PCB_ARTICLE_CONT_ID, PCB_REMOVAL_DATE,
                PCB_WEIGHT, PCB_WASTE_TYPE, PCB_BULK_IDENTITY
            FROM ETL_EM_WASTE_PCB_VW
            WHERE WH_EM_EMANIFEST_ID IN (SELECT WH_EM_EMANIFEST_ID
                                         FROM ETL_EM_HANDLER_VW
                                         WHERE EM_SUBM_ID = @EM_SUBM_ID);
        IF @localTran = 1 AND XACT_STATE() = 1
        COMMIT TRAN LocalTran

END TRY
BEGIN CATCH

    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT

    SELECT  @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE()

    IF @localTran = 1 AND XACT_STATE() <> 0
        ROLLBACK TRAN

    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

END CATCH
    END
GO
/****** Object:  StoredProcedure [dbo].[FA_LOG_HANDLERS]    Script Date: 6/12/2019 2:50:58 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*************************************************************************************************
** ObjectName: CA_LOG_HANDLERS.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Logs information about merged FA handlers
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  06/12/2019   ageery      Created.
**
***************************************************************************************************/ --
    CREATE PROCEDURE [dbo].[FA_LOG_HANDLERS] @FA_SUBM_ID varchar(40) AS
    BEGIN
        SET NOCOUNT ON;
SET XACT_ABORT,
    QUOTED_IDENTIFIER,
    ANSI_NULLS,
    ANSI_PADDING,
    ANSI_WARNINGS,
    ARITHABORT,
    CONCAT_NULL_YIELDS_NULL ON;
SET NUMERIC_ROUNDABORT OFF;

DECLARE @int INT;

DECLARE @localTran BIT
IF @@TRANCOUNT = 0
BEGIN
    SET @localTran = 1
    BEGIN TRANSACTION LocalTran
END

BEGIN TRY
        INSERT INTO ETL_RUN (RUN_DATE, ETL_TYPE, SUBM_ID)
        VALUES (CURRENT_TIMESTAMP, 'FA', @FA_SUBM_ID);
        INSERT INTO ETL_RUN_HANDLER (ETL_RUN_ID, HANDLER_ID, STATUS_TYPE)
        SELECT SCOPE_IDENTITY(), HANDLER_ID,
               CASE
                   WHEN
                       WH_FA_FAC_SUBM_ID IS NULL
                       THEN
                       'I'
                   ELSE
                       'U'
                   END
        FROM ETL_FA_FAC_SUBM_VW
        WHERE FA_SUBM_ID = @FA_SUBM_ID;
        IF @localTran = 1 AND XACT_STATE() = 1
        COMMIT TRAN LocalTran

END TRY
BEGIN CATCH

    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT

    SELECT  @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE()

    IF @localTran = 1 AND XACT_STATE() <> 0
        ROLLBACK TRAN

    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

END CATCH
    END
GO
/****** Object:  StoredProcedure [dbo].[FA_MERGE_COST_EST]    Script Date: 6/12/2019 2:50:58 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*************************************************************************************************
** ObjectName: FA_MERGE_COST_EST.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_FA_COST_EST table 
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  05/31/2019   ageery      Created.
**
***************************************************************************************************/ --
    CREATE PROCEDURE [dbo].[FA_MERGE_COST_EST] @FA_SUBM_ID varchar(40) AS
    BEGIN
        SET NOCOUNT ON;
SET XACT_ABORT,
    QUOTED_IDENTIFIER,
    ANSI_NULLS,
    ANSI_PADDING,
    ANSI_WARNINGS,
    ARITHABORT,
    CONCAT_NULL_YIELDS_NULL ON;
SET NUMERIC_ROUNDABORT OFF;

DECLARE @int INT;

DECLARE @localTran BIT
IF @@TRANCOUNT = 0
BEGIN
    SET @localTran = 1
    BEGIN TRANSACTION LocalTran
END

BEGIN TRY
        MERGE INTO RCRA_FA_COST_EST D
        USING (SELECT *
               FROM ETL_FA_COST_EST_VW
               WHERE FA_SUBM_ID = @FA_SUBM_ID) S
        ON (D.FA_COST_EST_ID = S.WH_FA_COST_EST_ID)
        WHEN MATCHED
            AND (
                    D.TRANS_CODE <> S.TRANS_CODE
                    OR (D.TRANS_CODE IS NULL AND S.TRANS_CODE IS NOT NULL)
                    OR (D.TRANS_CODE IS NULL AND S.TRANS_CODE IS NOT NULL)
                    OR D.ACT_LOC_CODE <> S.ACT_LOC_CODE
                    OR (D.ACT_LOC_CODE IS NULL AND S.ACT_LOC_CODE IS NOT NULL)
                    OR (D.ACT_LOC_CODE IS NULL AND S.ACT_LOC_CODE IS NOT NULL)
                    OR D.COST_ESTIMATE_TYPE_CODE <> S.COST_ESTIMATE_TYPE_CODE
                    OR (D.COST_ESTIMATE_TYPE_CODE IS NULL AND S.COST_ESTIMATE_TYPE_CODE IS NOT NULL)
                    OR (D.COST_ESTIMATE_TYPE_CODE IS NULL AND S.COST_ESTIMATE_TYPE_CODE IS NOT NULL)
                    OR D.COST_ESTIMATE_AGN_CODE <> S.COST_ESTIMATE_AGN_CODE
                    OR (D.COST_ESTIMATE_AGN_CODE IS NULL AND S.COST_ESTIMATE_AGN_CODE IS NOT NULL)
                    OR (D.COST_ESTIMATE_AGN_CODE IS NULL AND S.COST_ESTIMATE_AGN_CODE IS NOT NULL)
                    OR D.COST_ESTIMATE_SEQ_NUM <> S.COST_ESTIMATE_SEQ_NUM
                    OR (D.COST_ESTIMATE_SEQ_NUM IS NULL AND S.COST_ESTIMATE_SEQ_NUM IS NOT NULL)
                    OR (D.COST_ESTIMATE_SEQ_NUM IS NULL AND S.COST_ESTIMATE_SEQ_NUM IS NOT NULL)
                    OR D.RESP_PERSON_DATA_OWNER_CODE <> S.RESP_PERSON_DATA_OWNER_CODE
                    OR (D.RESP_PERSON_DATA_OWNER_CODE IS NULL AND S.RESP_PERSON_DATA_OWNER_CODE IS NOT NULL)
                    OR (D.RESP_PERSON_DATA_OWNER_CODE IS NULL AND S.RESP_PERSON_DATA_OWNER_CODE IS NOT NULL)
                    OR D.RESP_PERSON_ID <> S.RESP_PERSON_ID
                    OR (D.RESP_PERSON_ID IS NULL AND S.RESP_PERSON_ID IS NOT NULL)
                    OR (D.RESP_PERSON_ID IS NULL AND S.RESP_PERSON_ID IS NOT NULL)
                    OR D.COST_ESTIMATE_AMOUNT <> S.COST_ESTIMATE_AMOUNT
                    OR (D.COST_ESTIMATE_AMOUNT IS NULL AND S.COST_ESTIMATE_AMOUNT IS NOT NULL)
                    OR (D.COST_ESTIMATE_AMOUNT IS NULL AND S.COST_ESTIMATE_AMOUNT IS NOT NULL)
                    OR D.COST_ESTIMATE_DATE <> S.COST_ESTIMATE_DATE
                    OR (D.COST_ESTIMATE_DATE IS NULL AND S.COST_ESTIMATE_DATE IS NOT NULL)
                    OR (D.COST_ESTIMATE_DATE IS NULL AND S.COST_ESTIMATE_DATE IS NOT NULL)
                    OR D.COST_ESTIMATE_RSN_CODE <> S.COST_ESTIMATE_RSN_CODE
                    OR (D.COST_ESTIMATE_RSN_CODE IS NULL AND S.COST_ESTIMATE_RSN_CODE IS NOT NULL)
                    OR (D.COST_ESTIMATE_RSN_CODE IS NULL AND S.COST_ESTIMATE_RSN_CODE IS NOT NULL)
                    OR D.AREA_UNIT_NOTES_TXT <> S.AREA_UNIT_NOTES_TXT
                    OR (D.AREA_UNIT_NOTES_TXT IS NULL AND S.AREA_UNIT_NOTES_TXT IS NOT NULL)
                    OR (D.AREA_UNIT_NOTES_TXT IS NULL AND S.AREA_UNIT_NOTES_TXT IS NOT NULL)
                    OR D.SUPP_INFO_TXT <> S.SUPP_INFO_TXT
                    OR (D.SUPP_INFO_TXT IS NULL AND S.SUPP_INFO_TXT IS NOT NULL)
                    OR (D.SUPP_INFO_TXT IS NULL AND S.SUPP_INFO_TXT IS NOT NULL)
                )
            THEN
            UPDATE
            SET D.TRANS_CODE                  = S.TRANS_CODE,
                D.ACT_LOC_CODE                = S.ACT_LOC_CODE,
                D.COST_ESTIMATE_TYPE_CODE     = S.COST_ESTIMATE_TYPE_CODE,
                D.COST_ESTIMATE_AGN_CODE      = S.COST_ESTIMATE_AGN_CODE,
                D.COST_ESTIMATE_SEQ_NUM       = S.COST_ESTIMATE_SEQ_NUM,
                D.RESP_PERSON_DATA_OWNER_CODE = S.RESP_PERSON_DATA_OWNER_CODE,
                D.RESP_PERSON_ID              = S.RESP_PERSON_ID,
                D.COST_ESTIMATE_AMOUNT        = S.COST_ESTIMATE_AMOUNT,
                D.COST_ESTIMATE_DATE          = S.COST_ESTIMATE_DATE,
                D.COST_ESTIMATE_RSN_CODE      = S.COST_ESTIMATE_RSN_CODE,
                D.AREA_UNIT_NOTES_TXT         = S.AREA_UNIT_NOTES_TXT,
                D.SUPP_INFO_TXT               = S.SUPP_INFO_TXT
        WHEN NOT MATCHED THEN
            INSERT (FA_FAC_SUBM_ID,
                    TRANS_CODE,
                    ACT_LOC_CODE,
                    COST_ESTIMATE_TYPE_CODE,
                    COST_ESTIMATE_AGN_CODE,
                    COST_ESTIMATE_SEQ_NUM,
                    RESP_PERSON_DATA_OWNER_CODE,
                    RESP_PERSON_ID,
                    COST_ESTIMATE_AMOUNT,
                    COST_ESTIMATE_DATE,
                    COST_ESTIMATE_RSN_CODE,
                    AREA_UNIT_NOTES_TXT,
                    SUPP_INFO_TXT)
            VALUES (S.WH_FA_FAC_SUBM_ID,
                    S.TRANS_CODE,
                    S.ACT_LOC_CODE,
                    S.COST_ESTIMATE_TYPE_CODE,
                    S.COST_ESTIMATE_AGN_CODE,
                    S.COST_ESTIMATE_SEQ_NUM,
                    S.RESP_PERSON_DATA_OWNER_CODE,
                    S.RESP_PERSON_ID,
                    S.COST_ESTIMATE_AMOUNT,
                    S.COST_ESTIMATE_DATE,
                    S.COST_ESTIMATE_RSN_CODE,
                    S.AREA_UNIT_NOTES_TXT,
                    S.SUPP_INFO_TXT);
        IF @localTran = 1 AND XACT_STATE() = 1
        COMMIT TRAN LocalTran

END TRY
BEGIN CATCH

    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT

    SELECT  @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE()

    IF @localTran = 1 AND XACT_STATE() <> 0
        ROLLBACK TRAN

    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

END CATCH
    END
GO
/****** Object:  StoredProcedure [dbo].[FA_MERGE_COST_EST_REL_MECH]    Script Date: 6/12/2019 2:50:58 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*************************************************************************************************
** ObjectName: FA_MERGE_COST_EST_REL_MECH.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_FA_COST_EST_REL_MECHANISM table 
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  05/31/2019   ageery      Created.
**
***************************************************************************************************/ --
    CREATE PROCEDURE [dbo].[FA_MERGE_COST_EST_REL_MECH] @FA_SUBM_ID varchar(40) AS
    BEGIN
        SET NOCOUNT ON;
SET XACT_ABORT,
    QUOTED_IDENTIFIER,
    ANSI_NULLS,
    ANSI_PADDING,
    ANSI_WARNINGS,
    ARITHABORT,
    CONCAT_NULL_YIELDS_NULL ON;
SET NUMERIC_ROUNDABORT OFF;

DECLARE @int INT;

DECLARE @localTran BIT
IF @@TRANCOUNT = 0
BEGIN
    SET @localTran = 1
    BEGIN TRANSACTION LocalTran
END

BEGIN TRY
        MERGE INTO RCRA_FA_COST_EST_REL_MECHANISM D
        USING (SELECT *
               FROM ETL_FA_COST_EST_REL_MECHANISM_VW
               WHERE FA_SUBM_ID = @FA_SUBM_ID) S
        ON (D.FA_COST_EST_REL_MECHANISM_ID = S.WH_FA_COST_EST_REL_MECHANISM_ID)
        WHEN MATCHED
            AND (
                    D.TRANS_CODE <> S.TRANS_CODE
                    OR (D.TRANS_CODE IS NULL AND S.TRANS_CODE IS NOT NULL)
                    OR (D.TRANS_CODE IS NULL AND S.TRANS_CODE IS NOT NULL)
                    OR D.ACT_LOC_CODE <> S.ACT_LOC_CODE
                    OR (D.ACT_LOC_CODE IS NULL AND S.ACT_LOC_CODE IS NOT NULL)
                    OR (D.ACT_LOC_CODE IS NULL AND S.ACT_LOC_CODE IS NOT NULL)
                    OR D.MECHANISM_AGN_CODE <> S.MECHANISM_AGN_CODE
                    OR (D.MECHANISM_AGN_CODE IS NULL AND S.MECHANISM_AGN_CODE IS NOT NULL)
                    OR (D.MECHANISM_AGN_CODE IS NULL AND S.MECHANISM_AGN_CODE IS NOT NULL)
                    OR D.MECHANISM_SEQ_NUM <> S.MECHANISM_SEQ_NUM
                    OR (D.MECHANISM_SEQ_NUM IS NULL AND S.MECHANISM_SEQ_NUM IS NOT NULL)
                    OR (D.MECHANISM_SEQ_NUM IS NULL AND S.MECHANISM_SEQ_NUM IS NOT NULL)
                    OR D.MECHANISM_DETAIL_SEQ_NUM <> S.MECHANISM_DETAIL_SEQ_NUM
                    OR (D.MECHANISM_DETAIL_SEQ_NUM IS NULL AND S.MECHANISM_DETAIL_SEQ_NUM IS NOT NULL)
                    OR (D.MECHANISM_DETAIL_SEQ_NUM IS NULL AND S.MECHANISM_DETAIL_SEQ_NUM IS NOT NULL)
                )
            THEN
            UPDATE
            SET D.TRANS_CODE               = S.TRANS_CODE,
                D.ACT_LOC_CODE             = S.ACT_LOC_CODE,
                D.MECHANISM_AGN_CODE       = S.MECHANISM_AGN_CODE,
                D.MECHANISM_SEQ_NUM        = S.MECHANISM_SEQ_NUM,
                D.MECHANISM_DETAIL_SEQ_NUM = S.MECHANISM_DETAIL_SEQ_NUM
        WHEN NOT MATCHED THEN
            INSERT (FA_COST_EST_ID,
                    TRANS_CODE,
                    ACT_LOC_CODE,
                    MECHANISM_AGN_CODE,
                    MECHANISM_SEQ_NUM,
                    MECHANISM_DETAIL_SEQ_NUM)
            VALUES (S.WH_FA_COST_EST_ID,
                    S.TRANS_CODE,
                    S.ACT_LOC_CODE,
                    S.MECHANISM_AGN_CODE,
                    S.MECHANISM_SEQ_NUM,
                    S.MECHANISM_DETAIL_SEQ_NUM);
        IF @localTran = 1 AND XACT_STATE() = 1
        COMMIT TRAN LocalTran

END TRY
BEGIN CATCH

    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT

    SELECT  @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE()

    IF @localTran = 1 AND XACT_STATE() <> 0
        ROLLBACK TRAN

    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

END CATCH
    END
GO
/****** Object:  StoredProcedure [dbo].[FA_MERGE_FAC_SUBM]    Script Date: 6/12/2019 2:50:58 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*************************************************************************************************
** ObjectName: FA_MERGE_FAC_SUBM.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_FA_FAC_SUBM table 
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  05/31/2019   ageery      Created.
**
***************************************************************************************************/ --
    CREATE PROCEDURE [dbo].[FA_MERGE_FAC_SUBM] @FA_SUBM_ID varchar(40) AS
    BEGIN
        SET NOCOUNT ON;
SET XACT_ABORT,
    QUOTED_IDENTIFIER,
    ANSI_NULLS,
    ANSI_PADDING,
    ANSI_WARNINGS,
    ARITHABORT,
    CONCAT_NULL_YIELDS_NULL ON;
SET NUMERIC_ROUNDABORT OFF;

DECLARE @int INT;

DECLARE @localTran BIT
IF @@TRANCOUNT = 0
BEGIN
    SET @localTran = 1
    BEGIN TRANSACTION LocalTran
END

BEGIN TRY
        MERGE INTO RCRA_FA_FAC_SUBM D
        USING (SELECT *
               FROM ETL_FA_FAC_SUBM_VW
               WHERE FA_SUBM_ID = @FA_SUBM_ID) S
        ON (D.FA_FAC_SUBM_ID = S.WH_FA_FAC_SUBM_ID)
        WHEN NOT MATCHED THEN
            INSERT (
                HANDLER_ID
            )
            VALUES (
                       S.HANDLER_ID
                   );
        IF @localTran = 1 AND XACT_STATE() = 1
        COMMIT TRAN LocalTran

END TRY
BEGIN CATCH

    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT

    SELECT  @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE()

    IF @localTran = 1 AND XACT_STATE() <> 0
        ROLLBACK TRAN

    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

END CATCH
    END
GO
/****** Object:  StoredProcedure [dbo].[FA_MERGE_MECHANISM]    Script Date: 6/12/2019 2:50:58 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*************************************************************************************************
** ObjectName: FA_MERGE_MECHANISM.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_FA_MECHANISM table 
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  05/31/2019   ageery      Created.
**
***************************************************************************************************/ --
    CREATE PROCEDURE [dbo].[FA_MERGE_MECHANISM] @FA_SUBM_ID varchar(40) AS
    BEGIN
        SET NOCOUNT ON;
SET XACT_ABORT,
    QUOTED_IDENTIFIER,
    ANSI_NULLS,
    ANSI_PADDING,
    ANSI_WARNINGS,
    ARITHABORT,
    CONCAT_NULL_YIELDS_NULL ON;
SET NUMERIC_ROUNDABORT OFF;

DECLARE @int INT;

DECLARE @localTran BIT
IF @@TRANCOUNT = 0
BEGIN
    SET @localTran = 1
    BEGIN TRANSACTION LocalTran
END

BEGIN TRY
        MERGE INTO RCRA_FA_MECHANISM D
        USING (SELECT *
               FROM ETL_FA_MECHANISM_VW
               WHERE FA_SUBM_ID = @FA_SUBM_ID) S
        ON (D.FA_MECHANISM_ID = S.WH_FA_MECHANISM_ID)
        WHEN MATCHED
            AND (
                    D.TRANS_CODE <> S.TRANS_CODE
                    OR (D.TRANS_CODE IS NULL AND S.TRANS_CODE IS NOT NULL)
                    OR (D.TRANS_CODE IS NULL AND S.TRANS_CODE IS NOT NULL)
                    OR D.ACT_LOC_CODE <> S.ACT_LOC_CODE
                    OR (D.ACT_LOC_CODE IS NULL AND S.ACT_LOC_CODE IS NOT NULL)
                    OR (D.ACT_LOC_CODE IS NULL AND S.ACT_LOC_CODE IS NOT NULL)
                    OR D.MECHANISM_AGN_CODE <> S.MECHANISM_AGN_CODE
                    OR (D.MECHANISM_AGN_CODE IS NULL AND S.MECHANISM_AGN_CODE IS NOT NULL)
                    OR (D.MECHANISM_AGN_CODE IS NULL AND S.MECHANISM_AGN_CODE IS NOT NULL)
                    OR D.MECHANISM_SEQ_NUM <> S.MECHANISM_SEQ_NUM
                    OR (D.MECHANISM_SEQ_NUM IS NULL AND S.MECHANISM_SEQ_NUM IS NOT NULL)
                    OR (D.MECHANISM_SEQ_NUM IS NULL AND S.MECHANISM_SEQ_NUM IS NOT NULL)
                    OR D.MECHANISM_TYPE_DATA_OWNER_CODE <> S.MECHANISM_TYPE_DATA_OWNER_CODE
                    OR (D.MECHANISM_TYPE_DATA_OWNER_CODE IS NULL AND S.MECHANISM_TYPE_DATA_OWNER_CODE IS NOT NULL)
                    OR (D.MECHANISM_TYPE_DATA_OWNER_CODE IS NULL AND S.MECHANISM_TYPE_DATA_OWNER_CODE IS NOT NULL)
                    OR D.MECHANISM_TYPE_CODE <> S.MECHANISM_TYPE_CODE
                    OR (D.MECHANISM_TYPE_CODE IS NULL AND S.MECHANISM_TYPE_CODE IS NOT NULL)
                    OR (D.MECHANISM_TYPE_CODE IS NULL AND S.MECHANISM_TYPE_CODE IS NOT NULL)
                    OR D.PROVIDER_TXT <> S.PROVIDER_TXT
                    OR (D.PROVIDER_TXT IS NULL AND S.PROVIDER_TXT IS NOT NULL)
                    OR (D.PROVIDER_TXT IS NULL AND S.PROVIDER_TXT IS NOT NULL)
                    OR D.PROVIDER_FULL_CONTACT_NAME <> S.PROVIDER_FULL_CONTACT_NAME
                    OR (D.PROVIDER_FULL_CONTACT_NAME IS NULL AND S.PROVIDER_FULL_CONTACT_NAME IS NOT NULL)
                    OR (D.PROVIDER_FULL_CONTACT_NAME IS NULL AND S.PROVIDER_FULL_CONTACT_NAME IS NOT NULL)
                    OR D.TELE_NUM_TXT <> S.TELE_NUM_TXT
                    OR (D.TELE_NUM_TXT IS NULL AND S.TELE_NUM_TXT IS NOT NULL)
                    OR (D.TELE_NUM_TXT IS NULL AND S.TELE_NUM_TXT IS NOT NULL)
                    OR D.SUPP_INFO_TXT <> S.SUPP_INFO_TXT
                    OR (D.SUPP_INFO_TXT IS NULL AND S.SUPP_INFO_TXT IS NOT NULL)
                    OR (D.SUPP_INFO_TXT IS NULL AND S.SUPP_INFO_TXT IS NOT NULL)
                )
            THEN
            UPDATE
            SET D.TRANS_CODE                     = S.TRANS_CODE,
                D.ACT_LOC_CODE                   = S.ACT_LOC_CODE,
                D.MECHANISM_AGN_CODE             = S.MECHANISM_AGN_CODE,
                D.MECHANISM_SEQ_NUM              = S.MECHANISM_SEQ_NUM,
                D.MECHANISM_TYPE_DATA_OWNER_CODE = S.MECHANISM_TYPE_DATA_OWNER_CODE,
                D.MECHANISM_TYPE_CODE            = S.MECHANISM_TYPE_CODE,
                D.PROVIDER_TXT                   = S.PROVIDER_TXT,
                D.PROVIDER_FULL_CONTACT_NAME     = S.PROVIDER_FULL_CONTACT_NAME,
                D.TELE_NUM_TXT                   = S.TELE_NUM_TXT,
                D.SUPP_INFO_TXT                  = S.SUPP_INFO_TXT
        WHEN NOT MATCHED THEN
            INSERT (FA_FAC_SUBM_ID,
                    TRANS_CODE,
                    ACT_LOC_CODE,
                    MECHANISM_AGN_CODE,
                    MECHANISM_SEQ_NUM,
                    MECHANISM_TYPE_DATA_OWNER_CODE,
                    MECHANISM_TYPE_CODE,
                    PROVIDER_TXT,
                    PROVIDER_FULL_CONTACT_NAME,
                    TELE_NUM_TXT,
                    SUPP_INFO_TXT)
            VALUES (S.WH_FA_FAC_SUBM_ID,
                    S.TRANS_CODE,
                    S.ACT_LOC_CODE,
                    S.MECHANISM_AGN_CODE,
                    S.MECHANISM_SEQ_NUM,
                    S.MECHANISM_TYPE_DATA_OWNER_CODE,
                    S.MECHANISM_TYPE_CODE,
                    S.PROVIDER_TXT,
                    S.PROVIDER_FULL_CONTACT_NAME,
                    S.TELE_NUM_TXT,
                    S.SUPP_INFO_TXT);
        IF @localTran = 1 AND XACT_STATE() = 1
        COMMIT TRAN LocalTran

END TRY
BEGIN CATCH

    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT

    SELECT  @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE()

    IF @localTran = 1 AND XACT_STATE() <> 0
        ROLLBACK TRAN

    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

END CATCH
    END
GO
/****** Object:  StoredProcedure [dbo].[FA_MERGE_MECHANISM_DETAIL]    Script Date: 6/12/2019 2:50:58 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*************************************************************************************************
** ObjectName: FA_MERGE_MECHANISM_DETAIL.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_FA_MECHANISM_DETAIL table 
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  05/31/2019   ageery      Created.
**
***************************************************************************************************/ --
    CREATE PROCEDURE [dbo].[FA_MERGE_MECHANISM_DETAIL] @FA_SUBM_ID varchar(40) AS
    BEGIN
        SET NOCOUNT ON;
SET XACT_ABORT,
    QUOTED_IDENTIFIER,
    ANSI_NULLS,
    ANSI_PADDING,
    ANSI_WARNINGS,
    ARITHABORT,
    CONCAT_NULL_YIELDS_NULL ON;
SET NUMERIC_ROUNDABORT OFF;

DECLARE @int INT;

DECLARE @localTran BIT
IF @@TRANCOUNT = 0
BEGIN
    SET @localTran = 1
    BEGIN TRANSACTION LocalTran
END

BEGIN TRY
        MERGE INTO RCRA_FA_MECHANISM_DETAIL D
        USING (SELECT *
               FROM ETL_FA_MECHANISM_DETAIL_VW
               WHERE FA_SUBM_ID = @FA_SUBM_ID) S
        ON (D.FA_MECHANISM_DETAIL_ID = S.WH_FA_MECHANISM_DETAIL_ID)
        WHEN MATCHED
            AND
                (D.TRANS_CODE <> S.TRANS_CODE
                    OR (D.TRANS_CODE IS NULL AND S.TRANS_CODE IS NOT NULL)
                    OR (D.TRANS_CODE IS NULL AND S.TRANS_CODE IS NOT NULL)
                    OR D.MECHANISM_DETAIL_SEQ_NUM <> S.MECHANISM_DETAIL_SEQ_NUM
                    OR (D.MECHANISM_DETAIL_SEQ_NUM IS NULL AND S.MECHANISM_DETAIL_SEQ_NUM IS NOT NULL)
                    OR (D.MECHANISM_DETAIL_SEQ_NUM IS NULL AND S.MECHANISM_DETAIL_SEQ_NUM IS NOT NULL)
                    OR D.MECHANISM_IDEN_TXT <> S.MECHANISM_IDEN_TXT
                    OR (D.MECHANISM_IDEN_TXT IS NULL AND S.MECHANISM_IDEN_TXT IS NOT NULL)
                    OR (D.MECHANISM_IDEN_TXT IS NULL AND S.MECHANISM_IDEN_TXT IS NOT NULL)
                    OR D.FACE_VAL_AMOUNT <> S.FACE_VAL_AMOUNT
                    OR (D.FACE_VAL_AMOUNT IS NULL AND S.FACE_VAL_AMOUNT IS NOT NULL)
                    OR (D.FACE_VAL_AMOUNT IS NULL AND S.FACE_VAL_AMOUNT IS NOT NULL)
                    OR D.EFFC_DATE <> S.EFFC_DATE
                    OR (D.EFFC_DATE IS NULL AND S.EFFC_DATE IS NOT NULL)
                    OR (D.EFFC_DATE IS NULL AND S.EFFC_DATE IS NOT NULL)
                    OR D.EXPIRATION_DATE <> S.EXPIRATION_DATE
                    OR (D.EXPIRATION_DATE IS NULL AND S.EXPIRATION_DATE IS NOT NULL)
                    OR (D.EXPIRATION_DATE IS NULL AND S.EXPIRATION_DATE IS NOT NULL)
                    OR D.SUPP_INFO_TXT <> S.SUPP_INFO_TXT
                    OR (D.SUPP_INFO_TXT IS NULL AND S.SUPP_INFO_TXT IS NOT NULL)
                    OR (D.SUPP_INFO_TXT IS NULL AND S.SUPP_INFO_TXT IS NOT NULL))
            THEN
            UPDATE
            SET D.TRANS_CODE               = S.TRANS_CODE,
                D.MECHANISM_DETAIL_SEQ_NUM = S.MECHANISM_DETAIL_SEQ_NUM,
                D.MECHANISM_IDEN_TXT       = S.MECHANISM_IDEN_TXT,
                D.FACE_VAL_AMOUNT          = S.FACE_VAL_AMOUNT,
                D.EFFC_DATE                = S.EFFC_DATE,
                D.EXPIRATION_DATE          = S.EXPIRATION_DATE,
                D.SUPP_INFO_TXT            = S.SUPP_INFO_TXT
        WHEN NOT MATCHED THEN
            INSERT (FA_MECHANISM_ID,
                    TRANS_CODE,
                    MECHANISM_DETAIL_SEQ_NUM,
                    MECHANISM_IDEN_TXT,
                    FACE_VAL_AMOUNT,
                    EFFC_DATE,
                    EXPIRATION_DATE,
                    SUPP_INFO_TXT)
            VALUES (S.WH_FA_MECHANISM_ID,
                    S.TRANS_CODE,
                    S.MECHANISM_DETAIL_SEQ_NUM,
                    S.MECHANISM_IDEN_TXT,
                    S.FACE_VAL_AMOUNT,
                    S.EFFC_DATE,
                    S.EXPIRATION_DATE,
                    S.SUPP_INFO_TXT);
        IF @localTran = 1 AND XACT_STATE() = 1
        COMMIT TRAN LocalTran

END TRY
BEGIN CATCH

    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT

    SELECT  @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE()

    IF @localTran = 1 AND XACT_STATE() <> 0
        ROLLBACK TRAN

    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

END CATCH
    END
GO
/****** Object:  StoredProcedure [dbo].[GIS_LOG_HANDLERS]    Script Date: 6/12/2019 2:50:58 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*************************************************************************************************
** ObjectName: CA_LOG_HANDLERS.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Logs information about merged GIS handlers
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  06/12/2019   ageery      Created.
**
***************************************************************************************************/ --
    CREATE PROCEDURE [dbo].[GIS_LOG_HANDLERS] @GIS_SUBM_ID varchar(40) AS
    BEGIN
        SET NOCOUNT ON;
SET XACT_ABORT,
    QUOTED_IDENTIFIER,
    ANSI_NULLS,
    ANSI_PADDING,
    ANSI_WARNINGS,
    ARITHABORT,
    CONCAT_NULL_YIELDS_NULL ON;
SET NUMERIC_ROUNDABORT OFF;

DECLARE @int INT;

DECLARE @localTran BIT
IF @@TRANCOUNT = 0
BEGIN
    SET @localTran = 1
    BEGIN TRANSACTION LocalTran
END

BEGIN TRY
        INSERT INTO ETL_RUN (RUN_DATE, ETL_TYPE, SUBM_ID)
        VALUES (CURRENT_TIMESTAMP, 'GS', @GIS_SUBM_ID);
        INSERT INTO ETL_RUN_HANDLER (ETL_RUN_ID, HANDLER_ID, STATUS_TYPE)
        SELECT SCOPE_IDENTITY(), HANDLER_ID,
               CASE
                   WHEN
                       GIS_FAC_SUBM_ID IS NULL
                       THEN
                       'I'
                   ELSE
                       'U'
                   END
        FROM ETL_GIS_FAC_SUBM_VW
        WHERE GIS_SUBM_ID = @GIS_SUBM_ID;
        IF @localTran = 1 AND XACT_STATE() = 1
        COMMIT TRAN LocalTran

END TRY
BEGIN CATCH

    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT

    SELECT  @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE()

    IF @localTran = 1 AND XACT_STATE() <> 0
        ROLLBACK TRAN

    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

END CATCH
    END
GO
/****** Object:  StoredProcedure [dbo].[GIS_MERGE_FAC_SUBM]    Script Date: 6/12/2019 2:50:58 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*************************************************************************************************
** ObjectName: GIS_MERGE_FAC_SUBM.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_GIS_FAC_SUBM table 
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  05/31/2019   ageery      Created.
**
***************************************************************************************************/ --
    CREATE PROCEDURE [dbo].[GIS_MERGE_FAC_SUBM] @GIS_SUBM_ID varchar(40) AS
    BEGIN
        SET NOCOUNT ON;
SET XACT_ABORT,
    QUOTED_IDENTIFIER,
    ANSI_NULLS,
    ANSI_PADDING,
    ANSI_WARNINGS,
    ARITHABORT,
    CONCAT_NULL_YIELDS_NULL ON;
SET NUMERIC_ROUNDABORT OFF;

DECLARE @int INT;

DECLARE @localTran BIT
IF @@TRANCOUNT = 0
BEGIN
    SET @localTran = 1
    BEGIN TRANSACTION LocalTran
END

BEGIN TRY
        MERGE INTO RCRA_GIS_FAC_SUBM D
        USING (SELECT *
               FROM ETL_GIS_FAC_SUBM_VW
               WHERE GIS_SUBM_ID = @GIS_SUBM_ID) S
        ON (D.GIS_FAC_SUBM_ID = S.WH_GIS_FAC_SUBM_ID)
        WHEN NOT MATCHED THEN
            INSERT (
                HANDLER_ID
            )
            VALUES (
                       S.HANDLER_ID
                   );
        IF @localTran = 1 AND XACT_STATE() = 1
        COMMIT TRAN LocalTran

END TRY
BEGIN CATCH

    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT

    SELECT  @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE()

    IF @localTran = 1 AND XACT_STATE() <> 0
        ROLLBACK TRAN

    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

END CATCH
    END
GO
/****** Object:  StoredProcedure [dbo].[GIS_MERGE_RCRA_GIS_GEO_INFO]    Script Date: 6/12/2019 2:50:58 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*************************************************************************************************
** ObjectName: GIS_MERGE_RCRA_GIS_GEO_INFO.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_GIS_GEO_INFORMATION table 
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  05/31/2019   ageery      Created.
**
***************************************************************************************************/ --
    CREATE PROCEDURE [dbo].[GIS_MERGE_RCRA_GIS_GEO_INFO] @GIS_SUBM_ID varchar(40) AS
    BEGIN
        SET NOCOUNT ON;
SET XACT_ABORT,
    QUOTED_IDENTIFIER,
    ANSI_NULLS,
    ANSI_PADDING,
    ANSI_WARNINGS,
    ARITHABORT,
    CONCAT_NULL_YIELDS_NULL ON;
SET NUMERIC_ROUNDABORT OFF;

DECLARE @int INT;

DECLARE @localTran BIT
IF @@TRANCOUNT = 0
BEGIN
    SET @localTran = 1
    BEGIN TRANSACTION LocalTran
END

BEGIN TRY
        MERGE INTO RCRA_GIS_GEO_INFORMATION D
        USING (SELECT *
               FROM ETL_GIS_GEO_INFORMATION_VW
               WHERE GIS_SUBM_ID = @GIS_SUBM_ID) S
        ON (D.GIS_GEO_INFORMATION_ID = S.WH_GIS_GEO_INFORMATION_ID)
        WHEN MATCHED
            AND
                (D.TRANS_CODE <> S.TRANS_CODE
                    OR (D.TRANS_CODE IS NULL AND S.TRANS_CODE IS NOT NULL)
                    OR (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NULL)
                    OR D.GEO_INFO_OWNER <> S.GEO_INFO_OWNER
                    OR (D.GEO_INFO_OWNER IS NULL AND S.GEO_INFO_OWNER IS NOT NULL)
                    OR (D.GEO_INFO_OWNER IS NOT NULL AND S.GEO_INFO_OWNER IS NULL)
                    OR D.GEO_INFO_SEQ_NUM <> S.GEO_INFO_SEQ_NUM
                    OR (D.GEO_INFO_SEQ_NUM IS NULL AND S.GEO_INFO_SEQ_NUM IS NOT NULL)
                    OR (D.GEO_INFO_SEQ_NUM IS NOT NULL AND S.GEO_INFO_SEQ_NUM IS NULL)
                    OR D.PERMIT_UNIT_SEQ_NUM <> S.PERMIT_UNIT_SEQ_NUM
                    OR (D.PERMIT_UNIT_SEQ_NUM IS NULL AND S.PERMIT_UNIT_SEQ_NUM IS NOT NULL)
                    OR (D.PERMIT_UNIT_SEQ_NUM IS NOT NULL AND S.PERMIT_UNIT_SEQ_NUM IS NULL)
                    OR D.AREA_SEQ_NUM <> S.AREA_SEQ_NUM
                    OR (D.AREA_SEQ_NUM IS NULL AND S.AREA_SEQ_NUM IS NOT NULL)
                    OR (D.AREA_SEQ_NUM IS NULL AND S.AREA_SEQ_NUM IS NOT NULL)
                    OR D.LOC_COMM_TXT <> S.LOC_COMM_TXT
                    OR (D.LOC_COMM_TXT IS NULL AND S.LOC_COMM_TXT IS NOT NULL)
                    OR (D.LOC_COMM_TXT IS NULL AND S.LOC_COMM_TXT IS NOT NULL)
                    OR D.AREA_ACREAGE_MEAS <> S.AREA_ACREAGE_MEAS
                    OR (D.AREA_ACREAGE_MEAS IS NULL AND S.AREA_ACREAGE_MEAS IS NOT NULL)
                    OR (D.AREA_ACREAGE_MEAS IS NULL AND S.AREA_ACREAGE_MEAS IS NOT NULL)
                    OR D.AREA_MEAS_SRC_DATA_OWNER_CODE <> S.AREA_MEAS_SRC_DATA_OWNER_CODE
                    OR (D.AREA_MEAS_SRC_DATA_OWNER_CODE IS NULL AND S.AREA_MEAS_SRC_DATA_OWNER_CODE IS NOT NULL)
                    OR (D.AREA_MEAS_SRC_DATA_OWNER_CODE IS NULL AND S.AREA_MEAS_SRC_DATA_OWNER_CODE IS NOT NULL)
                    OR D.AREA_MEAS_SRC_CODE <> S.AREA_MEAS_SRC_CODE
                    OR (D.AREA_MEAS_SRC_CODE IS NULL AND S.AREA_MEAS_SRC_CODE IS NOT NULL)
                    OR (D.AREA_MEAS_SRC_CODE IS NULL AND S.AREA_MEAS_SRC_CODE IS NOT NULL)
                    OR D.AREA_MEAS_DATE <> S.AREA_MEAS_DATE
                    OR (D.AREA_MEAS_DATE IS NULL AND S.AREA_MEAS_DATE IS NOT NULL)
                    OR (D.AREA_MEAS_DATE IS NULL AND S.AREA_MEAS_DATE IS NOT NULL)
                    OR D.DATA_COLL_DATE <> S.DATA_COLL_DATE
                    OR (D.DATA_COLL_DATE IS NULL AND S.DATA_COLL_DATE IS NOT NULL)
                    OR (D.DATA_COLL_DATE IS NULL AND S.DATA_COLL_DATE IS NOT NULL)
                    OR D.HORZ_ACC_MEAS <> S.HORZ_ACC_MEAS
                    OR (D.HORZ_ACC_MEAS IS NULL AND S.HORZ_ACC_MEAS IS NOT NULL)
                    OR (D.HORZ_ACC_MEAS IS NULL AND S.HORZ_ACC_MEAS IS NOT NULL)
                    OR D.SRC_MAP_SCALE_NUM <> S.SRC_MAP_SCALE_NUM
                    OR (D.SRC_MAP_SCALE_NUM IS NULL AND S.SRC_MAP_SCALE_NUM IS NOT NULL)
                    OR (D.SRC_MAP_SCALE_NUM IS NULL AND S.SRC_MAP_SCALE_NUM IS NOT NULL)
                    OR D.COORD_DATA_SRC_DATA_OWNER_CODE <> S.COORD_DATA_SRC_DATA_OWNER_CODE
                    OR (D.COORD_DATA_SRC_DATA_OWNER_CODE IS NULL AND S.COORD_DATA_SRC_DATA_OWNER_CODE IS NOT NULL)
                    OR (D.COORD_DATA_SRC_DATA_OWNER_CODE IS NULL AND S.COORD_DATA_SRC_DATA_OWNER_CODE IS NOT NULL)
                    OR D.COORD_DATA_SRC_CODE <> S.COORD_DATA_SRC_CODE
                    OR (D.COORD_DATA_SRC_CODE IS NULL AND S.COORD_DATA_SRC_CODE IS NOT NULL)
                    OR (D.COORD_DATA_SRC_CODE IS NULL AND S.COORD_DATA_SRC_CODE IS NOT NULL)
                    OR D.GEO_REF_PT_DATA_OWNER_CODE <> S.GEO_REF_PT_DATA_OWNER_CODE
                    OR (D.GEO_REF_PT_DATA_OWNER_CODE IS NULL AND S.GEO_REF_PT_DATA_OWNER_CODE IS NOT NULL)
                    OR (D.GEO_REF_PT_DATA_OWNER_CODE IS NULL AND S.GEO_REF_PT_DATA_OWNER_CODE IS NOT NULL)
                    OR D.GEO_REF_PT_CODE <> S.GEO_REF_PT_CODE
                    OR (D.GEO_REF_PT_CODE IS NULL AND S.GEO_REF_PT_CODE IS NOT NULL)
                    OR (D.GEO_REF_PT_CODE IS NULL AND S.GEO_REF_PT_CODE IS NOT NULL)
                    OR D.GEOM_TYPE_DATA_OWNER_CODE <> S.GEOM_TYPE_DATA_OWNER_CODE
                    OR (D.GEOM_TYPE_DATA_OWNER_CODE IS NULL AND S.GEOM_TYPE_DATA_OWNER_CODE IS NOT NULL)
                    OR (D.GEOM_TYPE_DATA_OWNER_CODE IS NULL AND S.GEOM_TYPE_DATA_OWNER_CODE IS NOT NULL)
                    OR D.GEOM_TYPE_CODE <> S.GEOM_TYPE_CODE
                    OR (D.GEOM_TYPE_CODE IS NULL AND S.GEOM_TYPE_CODE IS NOT NULL)
                    OR (D.GEOM_TYPE_CODE IS NULL AND S.GEOM_TYPE_CODE IS NOT NULL)
                    OR D.HORZ_COLL_METH_DATA_OWNER_CODE <> S.HORZ_COLL_METH_DATA_OWNER_CODE
                    OR (D.HORZ_COLL_METH_DATA_OWNER_CODE IS NULL AND S.HORZ_COLL_METH_DATA_OWNER_CODE IS NOT NULL)
                    OR (D.HORZ_COLL_METH_DATA_OWNER_CODE IS NULL AND S.HORZ_COLL_METH_DATA_OWNER_CODE IS NOT NULL)
                    OR D.HORZ_COLL_METH_CODE <> S.HORZ_COLL_METH_CODE
                    OR (D.HORZ_COLL_METH_CODE IS NULL AND S.HORZ_COLL_METH_CODE IS NOT NULL)
                    OR (D.HORZ_COLL_METH_CODE IS NULL AND S.HORZ_COLL_METH_CODE IS NOT NULL)
                    OR D.HRZ_CRD_RF_SYS_DTM_DTA_OWN_CDE <> S.HRZ_CRD_RF_SYS_DTM_DTA_OWN_CDE
                    OR (D.HRZ_CRD_RF_SYS_DTM_DTA_OWN_CDE IS NULL AND S.HRZ_CRD_RF_SYS_DTM_DTA_OWN_CDE IS NOT NULL)
                    OR (D.HRZ_CRD_RF_SYS_DTM_DTA_OWN_CDE IS NULL AND S.HRZ_CRD_RF_SYS_DTM_DTA_OWN_CDE IS NOT NULL)
                    OR D.HORZ_COORD_REF_SYS_DATUM_CODE <> S.HORZ_COORD_REF_SYS_DATUM_CODE
                    OR (D.HORZ_COORD_REF_SYS_DATUM_CODE IS NULL AND S.HORZ_COORD_REF_SYS_DATUM_CODE IS NOT NULL)
                    OR (D.HORZ_COORD_REF_SYS_DATUM_CODE IS NULL AND S.HORZ_COORD_REF_SYS_DATUM_CODE IS NOT NULL)
                    OR D.VERF_METH_DATA_OWNER_CODE <> S.VERF_METH_DATA_OWNER_CODE
                    OR (D.VERF_METH_DATA_OWNER_CODE IS NULL AND S.VERF_METH_DATA_OWNER_CODE IS NOT NULL)
                    OR (D.VERF_METH_DATA_OWNER_CODE IS NULL AND S.VERF_METH_DATA_OWNER_CODE IS NOT NULL)
                    OR D.VERF_METH_CODE <> S.VERF_METH_CODE
                    OR (D.VERF_METH_CODE IS NULL AND S.VERF_METH_CODE IS NOT NULL)
                    OR (D.VERF_METH_CODE IS NULL AND S.VERF_METH_CODE IS NOT NULL)
                    OR D.LATITUDE <> S.LATITUDE
                    OR (D.LATITUDE IS NULL AND S.LATITUDE IS NOT NULL)
                    OR (D.LATITUDE IS NULL AND S.LATITUDE IS NOT NULL)
                    OR D.LONGITUDE <> S.LONGITUDE
                    OR (D.LONGITUDE IS NULL AND S.LONGITUDE IS NOT NULL)
                    OR (D.LONGITUDE IS NULL AND S.LONGITUDE IS NOT NULL)
                    OR D.ELEVATION <> S.ELEVATION
                    OR (D.ELEVATION IS NULL AND S.ELEVATION IS NOT NULL)
                    OR (D.ELEVATION IS NULL AND S.ELEVATION IS NOT NULL))
            THEN
            UPDATE
            SET D.TRANS_CODE                     = S.TRANS_CODE,
                D.GEO_INFO_OWNER                 = S.GEO_INFO_OWNER,
                D.GEO_INFO_SEQ_NUM               = S.GEO_INFO_SEQ_NUM,
                D.PERMIT_UNIT_SEQ_NUM            = S.PERMIT_UNIT_SEQ_NUM,
                D.AREA_SEQ_NUM                   = S.AREA_SEQ_NUM,
                D.LOC_COMM_TXT                   = S.LOC_COMM_TXT,
                D.AREA_ACREAGE_MEAS              = S.AREA_ACREAGE_MEAS,
                D.AREA_MEAS_SRC_DATA_OWNER_CODE  = S.AREA_MEAS_SRC_DATA_OWNER_CODE,
                D.AREA_MEAS_SRC_CODE             = S.AREA_MEAS_SRC_CODE,
                D.AREA_MEAS_DATE                 = S.AREA_MEAS_DATE,
                D.DATA_COLL_DATE                 = S.DATA_COLL_DATE,
                D.HORZ_ACC_MEAS                  = S.HORZ_ACC_MEAS,
                D.SRC_MAP_SCALE_NUM              = S.SRC_MAP_SCALE_NUM,
                D.COORD_DATA_SRC_DATA_OWNER_CODE = S.COORD_DATA_SRC_DATA_OWNER_CODE,
                D.COORD_DATA_SRC_CODE            = S.COORD_DATA_SRC_CODE,
                D.GEO_REF_PT_DATA_OWNER_CODE     = S.GEO_REF_PT_DATA_OWNER_CODE,
                D.GEO_REF_PT_CODE                = S.GEO_REF_PT_CODE,
                D.GEOM_TYPE_DATA_OWNER_CODE      = S.GEOM_TYPE_DATA_OWNER_CODE,
                D.GEOM_TYPE_CODE                 = S.GEOM_TYPE_CODE,
                D.HORZ_COLL_METH_DATA_OWNER_CODE = S.HORZ_COLL_METH_DATA_OWNER_CODE,
                D.HORZ_COLL_METH_CODE            = S.HORZ_COLL_METH_CODE,
                D.HRZ_CRD_RF_SYS_DTM_DTA_OWN_CDE = S.HRZ_CRD_RF_SYS_DTM_DTA_OWN_CDE,
                D.HORZ_COORD_REF_SYS_DATUM_CODE  = S.HORZ_COORD_REF_SYS_DATUM_CODE,
                D.VERF_METH_DATA_OWNER_CODE      = S.VERF_METH_DATA_OWNER_CODE,
                D.VERF_METH_CODE                 = S.VERF_METH_CODE,
                D.LATITUDE                       = S.LATITUDE,
                D.LONGITUDE                      = S.LONGITUDE,
                D.ELEVATION                      = S.ELEVATION
        WHEN NOT MATCHED THEN
            INSERT (GIS_FAC_SUBM_ID,
                    TRANS_CODE,
                    GEO_INFO_OWNER,
                    GEO_INFO_SEQ_NUM,
                    PERMIT_UNIT_SEQ_NUM,
                    AREA_SEQ_NUM,
                    LOC_COMM_TXT,
                    AREA_ACREAGE_MEAS,
                    AREA_MEAS_SRC_DATA_OWNER_CODE,
                    AREA_MEAS_SRC_CODE,
                    AREA_MEAS_DATE,
                    DATA_COLL_DATE,
                    HORZ_ACC_MEAS,
                    SRC_MAP_SCALE_NUM,
                    COORD_DATA_SRC_DATA_OWNER_CODE,
                    COORD_DATA_SRC_CODE,
                    GEO_REF_PT_DATA_OWNER_CODE,
                    GEO_REF_PT_CODE,
                    GEOM_TYPE_DATA_OWNER_CODE,
                    GEOM_TYPE_CODE,
                    HORZ_COLL_METH_DATA_OWNER_CODE,
                    HORZ_COLL_METH_CODE,
                    HRZ_CRD_RF_SYS_DTM_DTA_OWN_CDE,
                    HORZ_COORD_REF_SYS_DATUM_CODE,
                    VERF_METH_DATA_OWNER_CODE,
                    VERF_METH_CODE,
                    LATITUDE,
                    LONGITUDE,
                    ELEVATION)
            VALUES (S.WH_GIS_FAC_SUBM_ID,
                    S.TRANS_CODE,
                    S.GEO_INFO_OWNER,
                    S.GEO_INFO_SEQ_NUM,
                    S.PERMIT_UNIT_SEQ_NUM,
                    S.AREA_SEQ_NUM,
                    S.LOC_COMM_TXT,
                    S.AREA_ACREAGE_MEAS,
                    S.AREA_MEAS_SRC_DATA_OWNER_CODE,
                    S.AREA_MEAS_SRC_CODE,
                    S.AREA_MEAS_DATE,
                    S.DATA_COLL_DATE,
                    S.HORZ_ACC_MEAS,
                    S.SRC_MAP_SCALE_NUM,
                    S.COORD_DATA_SRC_DATA_OWNER_CODE,
                    S.COORD_DATA_SRC_CODE,
                    S.GEO_REF_PT_DATA_OWNER_CODE,
                    S.GEO_REF_PT_CODE,
                    S.GEOM_TYPE_DATA_OWNER_CODE,
                    S.GEOM_TYPE_CODE,
                    S.HORZ_COLL_METH_DATA_OWNER_CODE,
                    S.HORZ_COLL_METH_CODE,
                    S.HRZ_CRD_RF_SYS_DTM_DTA_OWN_CDE,
                    S.HORZ_COORD_REF_SYS_DATUM_CODE,
                    S.VERF_METH_DATA_OWNER_CODE,
                    S.VERF_METH_CODE,
                    S.LATITUDE,
                    S.LONGITUDE,
                    S.ELEVATION);
        IF @localTran = 1 AND XACT_STATE() = 1
        COMMIT TRAN LocalTran

END TRY
BEGIN CATCH

    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT

    SELECT  @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE()

    IF @localTran = 1 AND XACT_STATE() <> 0
        ROLLBACK TRAN

    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

END CATCH
    END
GO
/****** Object:  StoredProcedure [dbo].[HD_LOG_HANDLERS]    Script Date: 6/12/2019 2:50:58 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*************************************************************************************************
** ObjectName: CA_LOG_HANDLERS.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Logs information about merged HD handlers
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  06/12/2019   ageery      Created.
**
***************************************************************************************************/ --
    CREATE PROCEDURE [dbo].[HD_LOG_HANDLERS] @HD_SUBM_ID varchar(40) AS
    BEGIN
        SET NOCOUNT ON;
SET XACT_ABORT,
    QUOTED_IDENTIFIER,
    ANSI_NULLS,
    ANSI_PADDING,
    ANSI_WARNINGS,
    ARITHABORT,
    CONCAT_NULL_YIELDS_NULL ON;
SET NUMERIC_ROUNDABORT OFF;

DECLARE @int INT;

DECLARE @localTran BIT
IF @@TRANCOUNT = 0
BEGIN
    SET @localTran = 1
    BEGIN TRANSACTION LocalTran
END

BEGIN TRY
        INSERT INTO ETL_RUN
        (RUN_DATE, ETL_TYPE, SUBM_ID)
        VALUES (CURRENT_TIMESTAMP, 'HD', @HD_SUBM_ID);
        INSERT INTO ETL_RUN_HANDLER (ETL_RUN_ID, HANDLER_ID, STATUS_TYPE)
        SELECT SCOPE_IDENTITY(),
               HANDLER_ID,
               CASE
                   WHEN
                       WH_HD_HBASIC_ID IS NULL
                       THEN
                       'I'
                   ELSE
                       'U'
                   END
        FROM ETL_HD_BASIC_VW
        WHERE HD_SUBM_ID = @HD_SUBM_ID;
        IF @localTran = 1 AND XACT_STATE() = 1
        COMMIT TRAN LocalTran

END TRY
BEGIN CATCH

    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT

    SELECT  @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE()

    IF @localTran = 1 AND XACT_STATE() <> 0
        ROLLBACK TRAN

    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

END CATCH
    END
GO
/****** Object:  StoredProcedure [dbo].[HD_MERGE_CERTIFICATION]    Script Date: 6/12/2019 2:50:58 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*************************************************************************************************
** ObjectName: HD_MERGE_CERTIFICATION.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_HD_CERTIFICATION table 
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  05/31/2019   ageery      Created.
**
***************************************************************************************************/ --
    CREATE PROCEDURE [dbo].[HD_MERGE_CERTIFICATION] @HD_SUBM_ID varchar(40) AS
    BEGIN
        SET NOCOUNT ON;
SET XACT_ABORT,
    QUOTED_IDENTIFIER,
    ANSI_NULLS,
    ANSI_PADDING,
    ANSI_WARNINGS,
    ARITHABORT,
    CONCAT_NULL_YIELDS_NULL ON;
SET NUMERIC_ROUNDABORT OFF;

DECLARE @int INT;

DECLARE @localTran BIT
IF @@TRANCOUNT = 0
BEGIN
    SET @localTran = 1
    BEGIN TRANSACTION LocalTran
END

BEGIN TRY
        MERGE INTO RCRA_HD_CERTIFICATION D
        USING (SELECT *
               FROM ETL_HD_CERT_VW
               WHERE HD_SUBM_ID = @HD_SUBM_ID) S
        ON (D.HD_CERTIFICATION_ID = S.WH_HD_CERTIFICATION_ID)
        WHEN MATCHED
            AND (
                    (D.TRANSACTION_CODE IS NOT NULL AND S.TRANSACTION_CODE IS NOT NULL AND
                     D.TRANSACTION_CODE <> S.TRANSACTION_CODE)
                    OR (D.TRANSACTION_CODE IS NULL AND S.TRANSACTION_CODE IS NOT NULL)
                    OR (D.TRANSACTION_CODE IS NOT NULL AND S.TRANSACTION_CODE IS NULL)
                    OR
                    (D.CERT_SIGNED_DATE IS NOT NULL AND S.CERT_SIGNED_DATE IS NOT NULL AND
                     D.CERT_SIGNED_DATE <> S.CERT_SIGNED_DATE)
                    OR (D.CERT_SIGNED_DATE IS NULL AND S.CERT_SIGNED_DATE IS NOT NULL)
                    OR (D.CERT_SIGNED_DATE IS NOT NULL AND S.CERT_SIGNED_DATE IS NULL)
                    OR (D.CERT_TITLE IS NOT NULL AND S.CERT_TITLE IS NOT NULL AND D.CERT_TITLE <> S.CERT_TITLE)
                    OR (D.CERT_TITLE IS NULL AND S.CERT_TITLE IS NOT NULL)
                    OR (D.CERT_TITLE IS NOT NULL AND S.CERT_TITLE IS NULL)
                    OR (D.CERT_FIRST_NAME IS NOT NULL AND S.CERT_FIRST_NAME IS NOT NULL AND
                        D.CERT_FIRST_NAME <> S.CERT_FIRST_NAME)
                    OR (D.CERT_FIRST_NAME IS NULL AND S.CERT_FIRST_NAME IS NOT NULL)
                    OR (D.CERT_FIRST_NAME IS NOT NULL AND S.CERT_FIRST_NAME IS NULL)
                    OR (D.CERT_MIDDLE_INITIAL IS NOT NULL AND S.CERT_MIDDLE_INITIAL IS NOT NULL AND
                        D.CERT_MIDDLE_INITIAL <> S.CERT_MIDDLE_INITIAL)
                    OR (D.CERT_MIDDLE_INITIAL IS NULL AND S.CERT_MIDDLE_INITIAL IS NOT NULL)
                    OR (D.CERT_MIDDLE_INITIAL IS NOT NULL AND S.CERT_MIDDLE_INITIAL IS NULL)
                    OR
                    (D.CERT_LAST_NAME IS NOT NULL AND S.CERT_LAST_NAME IS NOT NULL AND
                     D.CERT_LAST_NAME <> S.CERT_LAST_NAME)
                    OR (D.CERT_LAST_NAME IS NULL AND S.CERT_LAST_NAME IS NOT NULL)
                    OR (D.CERT_LAST_NAME IS NOT NULL AND S.CERT_LAST_NAME IS NULL)
                    OR (D.CERT_EMAIL_TEXT IS NOT NULL AND S.CERT_EMAIL_TEXT IS NOT NULL AND
                        D.CERT_EMAIL_TEXT <> S.CERT_EMAIL_TEXT)
                    OR (D.CERT_EMAIL_TEXT IS NULL AND S.CERT_EMAIL_TEXT IS NOT NULL)
                    OR (D.CERT_EMAIL_TEXT IS NOT NULL AND S.CERT_EMAIL_TEXT IS NULL)
                )
            THEN
            UPDATE
            SET D.TRANSACTION_CODE    = S.TRANSACTION_CODE,
                D.CERT_SIGNED_DATE    = S.CERT_SIGNED_DATE,
                D.CERT_TITLE          = S.CERT_TITLE,
                D.CERT_FIRST_NAME     = S.CERT_FIRST_NAME,
                D.CERT_MIDDLE_INITIAL = S.CERT_MIDDLE_INITIAL,
                D.CERT_LAST_NAME      = S.CERT_LAST_NAME,
                D.CERT_EMAIL_TEXT     = S.CERT_EMAIL_TEXT
        WHEN NOT MATCHED THEN
            INSERT (HD_HANDLER_ID,
                    CERT_SEQ,
                    TRANSACTION_CODE,
                    CERT_SIGNED_DATE,
                    CERT_TITLE,
                    CERT_FIRST_NAME,
                    CERT_MIDDLE_INITIAL,
                    CERT_LAST_NAME,
                    CERT_EMAIL_TEXT)
            VALUES (S.WH_HD_HANDLER_ID,
                    S.CERT_SEQ,
                    S.TRANSACTION_CODE,
                    S.CERT_SIGNED_DATE,
                    S.CERT_TITLE,
                    S.CERT_FIRST_NAME,
                    S.CERT_MIDDLE_INITIAL,
                    S.CERT_LAST_NAME,
                    S.CERT_EMAIL_TEXT);
        IF @localTran = 1 AND XACT_STATE() = 1
        COMMIT TRAN LocalTran

END TRY
BEGIN CATCH

    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT

    SELECT  @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE()

    IF @localTran = 1 AND XACT_STATE() <> 0
        ROLLBACK TRAN

    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

END CATCH
    END
GO
/****** Object:  StoredProcedure [dbo].[HD_MERGE_ENV_PERMIT]    Script Date: 6/12/2019 2:50:58 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*************************************************************************************************
** ObjectName: HD_MERGE_ENV_PERMIT.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_HD_ENV_PERMIT table 
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  05/31/2019   ageery      Created.
**
***************************************************************************************************/ --
    CREATE PROCEDURE [dbo].[HD_MERGE_ENV_PERMIT] @HD_SUBM_ID varchar(40) AS
    BEGIN
        SET NOCOUNT ON;
SET XACT_ABORT,
    QUOTED_IDENTIFIER,
    ANSI_NULLS,
    ANSI_PADDING,
    ANSI_WARNINGS,
    ARITHABORT,
    CONCAT_NULL_YIELDS_NULL ON;
SET NUMERIC_ROUNDABORT OFF;

DECLARE @int INT;

DECLARE @localTran BIT
IF @@TRANCOUNT = 0
BEGIN
    SET @localTran = 1
    BEGIN TRANSACTION LocalTran
END

BEGIN TRY
        MERGE INTO RCRA_HD_ENV_PERMIT D
        USING (SELECT *
               FROM ETL_HD_ENV_PERMIT_VW
               WHERE HD_SUBM_ID = @HD_SUBM_ID) S
        ON (D.HD_ENV_PERMIT_ID = S.WH_HD_ENV_PERMIT_ID)
        WHEN MATCHED
            AND (
                    (D.TRANSACTION_CODE IS NOT NULL AND S.TRANSACTION_CODE IS NOT NULL AND
                     D.TRANSACTION_CODE <> S.TRANSACTION_CODE)
                    OR (D.TRANSACTION_CODE IS NULL AND S.TRANSACTION_CODE IS NOT NULL)
                    OR (D.TRANSACTION_CODE IS NOT NULL AND S.TRANSACTION_CODE IS NULL)
                    OR (D.ENV_PERMIT_NUMBER IS NOT NULL AND S.ENV_PERMIT_NUMBER IS NOT NULL AND
                        D.ENV_PERMIT_NUMBER <> S.ENV_PERMIT_NUMBER)
                    OR (D.ENV_PERMIT_NUMBER IS NULL AND S.ENV_PERMIT_NUMBER IS NOT NULL)
                    OR (D.ENV_PERMIT_NUMBER IS NOT NULL AND S.ENV_PERMIT_NUMBER IS NULL)
                    OR
                    (D.ENV_PERMIT_OWNER IS NOT NULL AND S.ENV_PERMIT_OWNER IS NOT NULL AND
                     D.ENV_PERMIT_OWNER <> S.ENV_PERMIT_OWNER)
                    OR (D.ENV_PERMIT_OWNER IS NULL AND S.ENV_PERMIT_OWNER IS NOT NULL)
                    OR (D.ENV_PERMIT_OWNER IS NOT NULL AND S.ENV_PERMIT_OWNER IS NULL)
                    OR (D.ENV_PERMIT_TYPE IS NOT NULL AND S.ENV_PERMIT_TYPE IS NOT NULL AND
                        D.ENV_PERMIT_TYPE <> S.ENV_PERMIT_TYPE)
                    OR (D.ENV_PERMIT_TYPE IS NULL AND S.ENV_PERMIT_TYPE IS NOT NULL)
                    OR (D.ENV_PERMIT_TYPE IS NOT NULL AND S.ENV_PERMIT_TYPE IS NULL)
                    OR (D.ENV_PERMIT_DESC IS NOT NULL AND S.ENV_PERMIT_DESC IS NOT NULL AND
                        D.ENV_PERMIT_DESC <> S.ENV_PERMIT_DESC)
                    OR (D.ENV_PERMIT_DESC IS NULL AND S.ENV_PERMIT_DESC IS NOT NULL)
                    OR (D.ENV_PERMIT_DESC IS NOT NULL AND S.ENV_PERMIT_DESC IS NULL)
                )
            THEN
            UPDATE
            SET D.TRANSACTION_CODE  = S.TRANSACTION_CODE,
                D.ENV_PERMIT_NUMBER = S.ENV_PERMIT_NUMBER,
                D.ENV_PERMIT_OWNER  = S.ENV_PERMIT_OWNER,
                D.ENV_PERMIT_TYPE   = S.ENV_PERMIT_TYPE,
                D.ENV_PERMIT_DESC   = S.ENV_PERMIT_DESC
        WHEN NOT MATCHED THEN
            INSERT (HD_HANDLER_ID,
                    TRANSACTION_CODE,
                    ENV_PERMIT_NUMBER,
                    ENV_PERMIT_OWNER,
                    ENV_PERMIT_TYPE,
                    ENV_PERMIT_DESC)
            VALUES (S.WH_HD_HANDLER_ID,
                    S.TRANSACTION_CODE,
                    S.ENV_PERMIT_NUMBER,
                    S.ENV_PERMIT_OWNER,
                    S.ENV_PERMIT_TYPE,
                    S.ENV_PERMIT_DESC);
        IF @localTran = 1 AND XACT_STATE() = 1
        COMMIT TRAN LocalTran

END TRY
BEGIN CATCH

    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT

    SELECT  @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE()

    IF @localTran = 1 AND XACT_STATE() <> 0
        ROLLBACK TRAN

    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

END CATCH
    END
GO
/****** Object:  StoredProcedure [dbo].[HD_MERGE_EPISODIC_EVENT]    Script Date: 6/12/2019 2:50:58 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*************************************************************************************************
** ObjectName: HD_MERGE_EPISODIC_EVENT.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_HD_EPISODIC_EVENT table 
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  05/31/2019   ageery      Created.
**
***************************************************************************************************/ --
    CREATE PROCEDURE [dbo].[HD_MERGE_EPISODIC_EVENT] @HD_SUBM_ID varchar(40) AS
    BEGIN
        SET NOCOUNT ON;
SET XACT_ABORT,
    QUOTED_IDENTIFIER,
    ANSI_NULLS,
    ANSI_PADDING,
    ANSI_WARNINGS,
    ARITHABORT,
    CONCAT_NULL_YIELDS_NULL ON;
SET NUMERIC_ROUNDABORT OFF;

DECLARE @int INT;

DECLARE @localTran BIT
IF @@TRANCOUNT = 0
BEGIN
    SET @localTran = 1
    BEGIN TRANSACTION LocalTran
END

BEGIN TRY
        MERGE INTO RCRA_HD_EPISODIC_EVENT D
        USING (SELECT *
               FROM ETL_HD_EPISODIC_EVENT
               WHERE HD_SUBM_ID = @HD_SUBM_ID) S
        ON (D.HD_EPISODIC_EVENT_ID = S.WH_HD_EPISODIC_EVENT_ID)
        WHEN MATCHED
            AND (
                    (D.TRANSACTION_CODE IS NOT NULL AND S.TRANSACTION_CODE IS NOT NULL AND
                     D.TRANSACTION_CODE <> S.TRANSACTION_CODE)
                    OR (D.TRANSACTION_CODE IS NULL AND S.TRANSACTION_CODE IS NOT NULL)
                    OR (D.TRANSACTION_CODE IS NOT NULL AND S.TRANSACTION_CODE IS NULL)
                    OR (D.EVENT_OWNER IS NOT NULL AND S.EVENT_OWNER IS NOT NULL AND D.EVENT_OWNER <> S.EVENT_OWNER)
                    OR (D.EVENT_OWNER IS NULL AND S.EVENT_OWNER IS NOT NULL)
                    OR (D.EVENT_OWNER IS NOT NULL AND S.EVENT_OWNER IS NULL)
                    OR (D.EVENT_TYPE IS NOT NULL AND S.EVENT_TYPE IS NOT NULL AND D.EVENT_TYPE <> S.EVENT_TYPE)
                    OR (D.EVENT_TYPE IS NULL AND S.EVENT_TYPE IS NOT NULL)
                    OR (D.EVENT_TYPE IS NOT NULL AND S.EVENT_TYPE IS NULL)
                    OR
                    (D.EVENT_OTHER_DESC IS NOT NULL AND S.EVENT_OTHER_DESC IS NOT NULL AND
                     D.EVENT_OTHER_DESC <> S.EVENT_OTHER_DESC)
                    OR (D.EVENT_OTHER_DESC IS NULL AND S.EVENT_OTHER_DESC IS NOT NULL)
                    OR (D.EVENT_OTHER_DESC IS NOT NULL AND S.EVENT_OTHER_DESC IS NULL)
                    OR (D.CONTACT_FIRST_NAME IS NOT NULL AND S.CONTACT_FIRST_NAME IS NOT NULL AND
                        D.CONTACT_FIRST_NAME <> S.CONTACT_FIRST_NAME)
                    OR (D.CONTACT_FIRST_NAME IS NULL AND S.CONTACT_FIRST_NAME IS NOT NULL)
                    OR (D.CONTACT_FIRST_NAME IS NOT NULL AND S.CONTACT_FIRST_NAME IS NULL)
                    OR (D.CONTACT_MIDDLE_INITIAL IS NOT NULL AND S.CONTACT_MIDDLE_INITIAL IS NOT NULL AND
                        D.CONTACT_MIDDLE_INITIAL <> S.CONTACT_MIDDLE_INITIAL)
                    OR (D.CONTACT_MIDDLE_INITIAL IS NULL AND S.CONTACT_MIDDLE_INITIAL IS NOT NULL)
                    OR (D.CONTACT_MIDDLE_INITIAL IS NOT NULL AND S.CONTACT_MIDDLE_INITIAL IS NULL)
                    OR (D.CONTACT_LAST_NAME IS NOT NULL AND S.CONTACT_LAST_NAME IS NOT NULL AND
                        D.CONTACT_LAST_NAME <> S.CONTACT_LAST_NAME)
                    OR (D.CONTACT_LAST_NAME IS NULL AND S.CONTACT_LAST_NAME IS NOT NULL)
                    OR (D.CONTACT_LAST_NAME IS NOT NULL AND S.CONTACT_LAST_NAME IS NULL)
                    OR
                    (D.CONTACT_ORG_NAME IS NOT NULL AND S.CONTACT_ORG_NAME IS NOT NULL AND
                     D.CONTACT_ORG_NAME <> S.CONTACT_ORG_NAME)
                    OR (D.CONTACT_ORG_NAME IS NULL AND S.CONTACT_ORG_NAME IS NOT NULL)
                    OR (D.CONTACT_ORG_NAME IS NOT NULL AND S.CONTACT_ORG_NAME IS NULL)
                    OR
                    (D.CONTACT_TITLE IS NOT NULL AND S.CONTACT_TITLE IS NOT NULL AND D.CONTACT_TITLE <> S.CONTACT_TITLE)
                    OR (D.CONTACT_TITLE IS NULL AND S.CONTACT_TITLE IS NOT NULL)
                    OR (D.CONTACT_TITLE IS NOT NULL AND S.CONTACT_TITLE IS NULL)
                    OR (D.CONTACT_EMAIL_ADDRESS IS NOT NULL AND S.CONTACT_EMAIL_ADDRESS IS NOT NULL AND
                        D.CONTACT_EMAIL_ADDRESS <> S.CONTACT_EMAIL_ADDRESS)
                    OR (D.CONTACT_EMAIL_ADDRESS IS NULL AND S.CONTACT_EMAIL_ADDRESS IS NOT NULL)
                    OR (D.CONTACT_EMAIL_ADDRESS IS NOT NULL AND S.CONTACT_EMAIL_ADDRESS IS NULL)
                    OR
                    (D.CONTACT_PHONE IS NOT NULL AND S.CONTACT_PHONE IS NOT NULL AND D.CONTACT_PHONE <> S.CONTACT_PHONE)
                    OR (D.CONTACT_PHONE IS NULL AND S.CONTACT_PHONE IS NOT NULL)
                    OR (D.CONTACT_PHONE IS NOT NULL AND S.CONTACT_PHONE IS NULL)
                    OR (D.CONTACT_PHONE_EXT IS NOT NULL AND S.CONTACT_PHONE_EXT IS NOT NULL AND
                        D.CONTACT_PHONE_EXT <> S.CONTACT_PHONE_EXT)
                    OR (D.CONTACT_PHONE_EXT IS NULL AND S.CONTACT_PHONE_EXT IS NOT NULL)
                    OR (D.CONTACT_PHONE_EXT IS NOT NULL AND S.CONTACT_PHONE_EXT IS NULL)
                    OR (D.CONTACT_FAX IS NOT NULL AND S.CONTACT_FAX IS NOT NULL AND D.CONTACT_FAX <> S.CONTACT_FAX)
                    OR (D.CONTACT_FAX IS NULL AND S.CONTACT_FAX IS NOT NULL)
                    OR (D.CONTACT_FAX IS NOT NULL AND S.CONTACT_FAX IS NULL)
                    OR (D.START_DATE IS NOT NULL AND S.START_DATE IS NOT NULL AND D.START_DATE <> S.START_DATE)
                    OR (D.START_DATE IS NULL AND S.START_DATE IS NOT NULL)
                    OR (D.START_DATE IS NOT NULL AND S.START_DATE IS NULL)
                    OR (D.END_DATE IS NOT NULL AND S.END_DATE IS NOT NULL AND D.END_DATE <> S.END_DATE)
                    OR (D.END_DATE IS NULL AND S.END_DATE IS NOT NULL)
                    OR (D.END_DATE IS NOT NULL AND S.END_DATE IS NULL)
                ) THEN
            UPDATE
            SET D.TRANSACTION_CODE       = S.TRANSACTION_CODE,
                D.EVENT_OWNER            = S.EVENT_OWNER,
                D.EVENT_TYPE             = S.EVENT_TYPE,
                D.EVENT_OTHER_DESC       = S.EVENT_OTHER_DESC,
                D.CONTACT_FIRST_NAME     = S.CONTACT_FIRST_NAME,
                D.CONTACT_MIDDLE_INITIAL = S.CONTACT_MIDDLE_INITIAL,
                D.CONTACT_LAST_NAME      = S.CONTACT_LAST_NAME,
                D.CONTACT_ORG_NAME       = S.CONTACT_ORG_NAME,
                D.CONTACT_TITLE          = S.CONTACT_TITLE,
                D.CONTACT_EMAIL_ADDRESS  = S.CONTACT_EMAIL_ADDRESS,
                D.CONTACT_PHONE          = S.CONTACT_PHONE,
                D.CONTACT_PHONE_EXT      = S.CONTACT_PHONE_EXT,
                D.CONTACT_FAX            = S.CONTACT_FAX,
                D.START_DATE             = S.START_DATE,
                D.END_DATE               = S.END_DATE
        WHEN NOT MATCHED THEN
            INSERT (TRANSACTION_CODE,
                    HD_HANDLER_ID,
                    EVENT_OWNER,
                    EVENT_TYPE,
                    EVENT_OTHER_DESC,
                    CONTACT_FIRST_NAME,
                    CONTACT_MIDDLE_INITIAL,
                    CONTACT_LAST_NAME,
                    CONTACT_ORG_NAME,
                    CONTACT_TITLE,
                    CONTACT_EMAIL_ADDRESS,
                    CONTACT_PHONE,
                    CONTACT_PHONE_EXT,
                    CONTACT_FAX,
                    START_DATE,
                    END_DATE)
            VALUES (S.TRANSACTION_CODE,
                    S.WH_HD_HANDLER_ID,
                    S.EVENT_OWNER,
                    S.EVENT_TYPE,
                    S.EVENT_OTHER_DESC,
                    S.CONTACT_FIRST_NAME,
                    S.CONTACT_MIDDLE_INITIAL,
                    S.CONTACT_LAST_NAME,
                    S.CONTACT_ORG_NAME,
                    S.CONTACT_TITLE,
                    S.CONTACT_EMAIL_ADDRESS,
                    S.CONTACT_PHONE,
                    S.CONTACT_PHONE_EXT,
                    S.CONTACT_FAX,
                    S.START_DATE,
                    S.END_DATE);
        IF @localTran = 1 AND XACT_STATE() = 1
        COMMIT TRAN LocalTran

END TRY
BEGIN CATCH

    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT

    SELECT  @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE()

    IF @localTran = 1 AND XACT_STATE() <> 0
        ROLLBACK TRAN

    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

END CATCH
    END
GO
/****** Object:  StoredProcedure [dbo].[HD_MERGE_EPISODIC_WASTE]    Script Date: 6/12/2019 2:50:58 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*************************************************************************************************
** ObjectName: HD_MERGE_EPISODIC_WASTE.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_HD_EPISODIC_WASTE table 
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  05/31/2019   ageery      Created.
**
***************************************************************************************************/ --
    CREATE PROCEDURE [dbo].[HD_MERGE_EPISODIC_WASTE] @HD_SUBM_ID varchar(40) AS
    BEGIN
        SET NOCOUNT ON;
SET XACT_ABORT,
    QUOTED_IDENTIFIER,
    ANSI_NULLS,
    ANSI_PADDING,
    ANSI_WARNINGS,
    ARITHABORT,
    CONCAT_NULL_YIELDS_NULL ON;
SET NUMERIC_ROUNDABORT OFF;

DECLARE @int INT;

DECLARE @localTran BIT
IF @@TRANCOUNT = 0
BEGIN
    SET @localTran = 1
    BEGIN TRANSACTION LocalTran
END

BEGIN TRY
        MERGE INTO RCRA_HD_EPISODIC_WASTE D
        USING (SELECT *
               FROM ETL_HD_EPISODIC_WASTE
               WHERE HD_SUBM_ID = @HD_SUBM_ID) S
        ON (D.HD_EPISODIC_WASTE_ID = S.WH_HD_EPISODIC_WASTE_ID)
        WHEN MATCHED
            AND (
                    (D.HD_EPISODIC_EVENT_ID IS NOT NULL AND S.WH_HD_EPISODIC_EVENT_ID IS NOT NULL AND
                     D.HD_EPISODIC_EVENT_ID <> S.WH_HD_EPISODIC_EVENT_ID)
                    OR (D.HD_EPISODIC_EVENT_ID IS NULL AND S.WH_HD_EPISODIC_EVENT_ID IS NOT NULL)
                    OR (D.HD_EPISODIC_EVENT_ID IS NOT NULL AND S.WH_HD_EPISODIC_EVENT_ID IS NULL)
                    OR
                    (D.TRANSACTION_CODE IS NOT NULL AND S.TRANSACTION_CODE IS NOT NULL AND
                     D.TRANSACTION_CODE <> S.TRANSACTION_CODE)
                    OR (D.TRANSACTION_CODE IS NULL AND S.TRANSACTION_CODE IS NOT NULL)
                    OR (D.TRANSACTION_CODE IS NOT NULL AND S.TRANSACTION_CODE IS NULL)
                    OR (D.SEQ_NUMBER IS NOT NULL AND S.SEQ_NUMBER IS NOT NULL AND D.SEQ_NUMBER <> S.SEQ_NUMBER)
                    OR (D.SEQ_NUMBER IS NULL AND S.SEQ_NUMBER IS NOT NULL)
                    OR (D.SEQ_NUMBER IS NOT NULL AND S.SEQ_NUMBER IS NULL)
                    OR (D.WASTE_DESC IS NOT NULL AND S.WASTE_DESC IS NOT NULL AND D.WASTE_DESC <> S.WASTE_DESC)
                    OR (D.WASTE_DESC IS NULL AND S.WASTE_DESC IS NOT NULL)
                    OR (D.WASTE_DESC IS NOT NULL AND S.WASTE_DESC IS NULL)
                    OR (D.EST_QNTY IS NOT NULL AND S.EST_QNTY IS NOT NULL AND D.EST_QNTY <> S.EST_QNTY)
                    OR (D.EST_QNTY IS NULL AND S.EST_QNTY IS NOT NULL)
                    OR (D.EST_QNTY IS NOT NULL AND S.EST_QNTY IS NULL)
                ) THEN
            UPDATE
            SET D.TRANSACTION_CODE = S.TRANSACTION_CODE,
                D.SEQ_NUMBER       = S.SEQ_NUMBER,
                D.WASTE_DESC       = S.WASTE_DESC,
                D.EST_QNTY         = S.EST_QNTY
        WHEN NOT MATCHED THEN
            INSERT (HD_EPISODIC_EVENT_ID,
                    TRANSACTION_CODE,
                    SEQ_NUMBER,
                    WASTE_DESC,
                    EST_QNTY)
            VALUES (S.WH_HD_EPISODIC_EVENT_ID,
                    S.TRANSACTION_CODE,
                    S.SEQ_NUMBER,
                    S.WASTE_DESC,
                    S.EST_QNTY);
        IF @localTran = 1 AND XACT_STATE() = 1
        COMMIT TRAN LocalTran

END TRY
BEGIN CATCH

    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT

    SELECT  @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE()

    IF @localTran = 1 AND XACT_STATE() <> 0
        ROLLBACK TRAN

    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

END CATCH
    END
GO
/****** Object:  StoredProcedure [dbo].[HD_MERGE_EPISODIC_WASTE_CODE]    Script Date: 6/12/2019 2:50:58 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*************************************************************************************************
** ObjectName: HD_MERGE_EPISODIC_WASTE_CODE.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_HD_EPISODIC_WASTE_CODE table 
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  05/31/2019   ageery      Created.
**
***************************************************************************************************/ --
    CREATE PROCEDURE [dbo].[HD_MERGE_EPISODIC_WASTE_CODE] @HD_SUBM_ID varchar(40) AS
    BEGIN
        SET NOCOUNT ON;
SET XACT_ABORT,
    QUOTED_IDENTIFIER,
    ANSI_NULLS,
    ANSI_PADDING,
    ANSI_WARNINGS,
    ARITHABORT,
    CONCAT_NULL_YIELDS_NULL ON;
SET NUMERIC_ROUNDABORT OFF;

DECLARE @int INT;

DECLARE @localTran BIT
IF @@TRANCOUNT = 0
BEGIN
    SET @localTran = 1
    BEGIN TRANSACTION LocalTran
END

BEGIN TRY
        MERGE INTO RCRA_HD_EPISODIC_WASTE_CODE D
        USING (SELECT *
               FROM ETL_HD_EPISODIC_WASTE_CODE
               WHERE HD_SUBM_ID = @HD_SUBM_ID) S
        ON (D.HD_EPISODIC_WASTE_CODE_ID = S.WH_HD_EPISODIC_WASTE_CODE_ID)
        WHEN MATCHED
            AND (
                    (D.TRANSACTION_CODE IS NOT NULL AND S.TRANSACTION_CODE IS NOT NULL AND
                     D.TRANSACTION_CODE <> S.TRANSACTION_CODE)
                    OR (D.TRANSACTION_CODE IS NULL AND S.TRANSACTION_CODE IS NOT NULL)
                    OR (D.TRANSACTION_CODE IS NOT NULL AND S.TRANSACTION_CODE IS NULL)
                    OR
                    (D.WASTE_CODE_OWNER IS NOT NULL AND S.WASTE_CODE_OWNER IS NOT NULL AND
                     D.WASTE_CODE_OWNER <> S.WASTE_CODE_OWNER)
                    OR (D.WASTE_CODE_OWNER IS NULL AND S.WASTE_CODE_OWNER IS NOT NULL)
                    OR (D.WASTE_CODE_OWNER IS NOT NULL AND S.WASTE_CODE_OWNER IS NULL)
                    OR (D.WASTE_CODE IS NOT NULL AND S.WASTE_CODE IS NOT NULL AND D.WASTE_CODE <> S.WASTE_CODE)
                    OR (D.WASTE_CODE IS NULL AND S.WASTE_CODE IS NOT NULL)
                    OR (D.WASTE_CODE IS NOT NULL AND S.WASTE_CODE IS NULL)
                    OR (D.WASTE_CODE_TEXT IS NOT NULL AND S.WASTE_CODE_TEXT IS NOT NULL AND
                        D.WASTE_CODE_TEXT <> S.WASTE_CODE_TEXT)
                    OR (D.WASTE_CODE_TEXT IS NULL AND S.WASTE_CODE_TEXT IS NOT NULL)
                    OR (D.WASTE_CODE_TEXT IS NOT NULL AND S.WASTE_CODE_TEXT IS NULL)
                ) THEN
            UPDATE
            SET D.TRANSACTION_CODE = S.TRANSACTION_CODE,
                D.WASTE_CODE_OWNER = S.WASTE_CODE_OWNER,
                D.WASTE_CODE       = S.WASTE_CODE,
                D.WASTE_CODE_TEXT  = S.WASTE_CODE_TEXT
        WHEN NOT MATCHED THEN
            INSERT (HD_EPISODIC_WASTE_ID,
                    TRANSACTION_CODE,
                    WASTE_CODE_OWNER,
                    WASTE_CODE,
                    WASTE_CODE_TEXT)
            VALUES (S.WH_HD_EPISODIC_WASTE_ID,
                    S.TRANSACTION_CODE,
                    S.WASTE_CODE_OWNER,
                    S.WASTE_CODE,
                    S.WASTE_CODE_TEXT);
        IF @localTran = 1 AND XACT_STATE() = 1
        COMMIT TRAN LocalTran

END TRY
BEGIN CATCH

    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT

    SELECT  @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE()

    IF @localTran = 1 AND XACT_STATE() <> 0
        ROLLBACK TRAN

    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

END CATCH
    END
GO
/****** Object:  StoredProcedure [dbo].[HD_MERGE_HANDLER]    Script Date: 6/12/2019 2:50:58 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*************************************************************************************************
** ObjectName: HD_MERGE_HANDLER.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_HD_HANDLER table 
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  06/12/2019   ageery      Created.
**
***************************************************************************************************/ --
    CREATE PROCEDURE [dbo].[HD_MERGE_HANDLER] @HD_SUBM_ID varchar(40) AS
    BEGIN
        SET NOCOUNT ON;
SET XACT_ABORT,
    QUOTED_IDENTIFIER,
    ANSI_NULLS,
    ANSI_PADDING,
    ANSI_WARNINGS,
    ARITHABORT,
    CONCAT_NULL_YIELDS_NULL ON;
SET NUMERIC_ROUNDABORT OFF;

DECLARE @int INT;

DECLARE @localTran BIT
IF @@TRANCOUNT = 0
BEGIN
    SET @localTran = 1
    BEGIN TRANSACTION LocalTran
END

BEGIN TRY
        MERGE INTO RCRA_HD_HANDLER D
        USING (SELECT *
               FROM ETL_HD_HANDLER_VW
               WHERE HD_SUBM_ID = @HD_SUBM_ID) S
        ON (D.HD_HANDLER_ID = S.WH_HD_HANDLER_ID)
        WHEN MATCHED
            AND (
                    (D.TRANSACTION_CODE IS NOT NULL AND S.TRANSACTION_CODE IS NOT NULL AND
                     D.TRANSACTION_CODE <> S.TRANSACTION_CODE)
                    OR (D.TRANSACTION_CODE IS NULL AND S.TRANSACTION_CODE IS NOT NULL)
                    OR (D.TRANSACTION_CODE IS NOT NULL AND S.TRANSACTION_CODE IS NULL)
                    OR (D.ACTIVITY_LOCATION IS NOT NULL AND S.ACTIVITY_LOCATION IS NOT NULL AND
                        D.ACTIVITY_LOCATION <> S.ACTIVITY_LOCATION)
                    OR (D.ACTIVITY_LOCATION IS NULL AND S.ACTIVITY_LOCATION IS NOT NULL)
                    OR (D.ACTIVITY_LOCATION IS NOT NULL AND S.ACTIVITY_LOCATION IS NULL)
                    OR (D.SOURCE_TYPE IS NOT NULL AND S.SOURCE_TYPE IS NOT NULL AND D.SOURCE_TYPE <> S.SOURCE_TYPE)
                    OR (D.SOURCE_TYPE IS NULL AND S.SOURCE_TYPE IS NOT NULL)
                    OR (D.SOURCE_TYPE IS NOT NULL AND S.SOURCE_TYPE IS NULL)
                    OR (D.RECEIVE_DATE IS NOT NULL AND S.RECEIVE_DATE IS NOT NULL AND D.RECEIVE_DATE <> S.RECEIVE_DATE)
                    OR (D.RECEIVE_DATE IS NULL AND S.RECEIVE_DATE IS NOT NULL)
                    OR (D.RECEIVE_DATE IS NOT NULL AND S.RECEIVE_DATE IS NULL)
                    OR (D.HANDLER_NAME IS NOT NULL AND S.HANDLER_NAME IS NOT NULL AND D.HANDLER_NAME <> S.HANDLER_NAME)
                    OR (D.HANDLER_NAME IS NULL AND S.HANDLER_NAME IS NOT NULL)
                    OR (D.HANDLER_NAME IS NOT NULL AND S.HANDLER_NAME IS NULL)
                    OR
                    (D.ACKNOWLEDGE_DATE IS NOT NULL AND S.ACKNOWLEDGE_DATE IS NOT NULL AND
                     D.ACKNOWLEDGE_DATE <> S.ACKNOWLEDGE_DATE)
                    OR (D.ACKNOWLEDGE_DATE IS NULL AND S.ACKNOWLEDGE_DATE IS NOT NULL)
                    OR (D.ACKNOWLEDGE_DATE IS NOT NULL AND S.ACKNOWLEDGE_DATE IS NULL)
                    OR (D.NON_NOTIFIER IS NOT NULL AND S.NON_NOTIFIER IS NOT NULL AND D.NON_NOTIFIER <> S.NON_NOTIFIER)
                    OR (D.NON_NOTIFIER IS NULL AND S.NON_NOTIFIER IS NOT NULL)
                    OR (D.NON_NOTIFIER IS NOT NULL AND S.NON_NOTIFIER IS NULL)
                    OR
                    (D.OFF_SITE_RECEIPT IS NOT NULL AND S.OFF_SITE_RECEIPT IS NOT NULL AND
                     D.OFF_SITE_RECEIPT <> S.OFF_SITE_RECEIPT)
                    OR (D.OFF_SITE_RECEIPT IS NULL AND S.OFF_SITE_RECEIPT IS NOT NULL)
                    OR (D.OFF_SITE_RECEIPT IS NOT NULL AND S.OFF_SITE_RECEIPT IS NULL)
                    OR
                    (D.ACCESSIBILITY IS NOT NULL AND S.ACCESSIBILITY IS NOT NULL AND D.ACCESSIBILITY <> S.ACCESSIBILITY)
                    OR (D.ACCESSIBILITY IS NULL AND S.ACCESSIBILITY IS NOT NULL)
                    OR (D.ACCESSIBILITY IS NOT NULL AND S.ACCESSIBILITY IS NULL)
                    OR (D.COUNTY_CODE_OWNER IS NOT NULL AND S.COUNTY_CODE_OWNER IS NOT NULL AND
                        D.COUNTY_CODE_OWNER <> S.COUNTY_CODE_OWNER)
                    OR (D.COUNTY_CODE_OWNER IS NULL AND S.COUNTY_CODE_OWNER IS NOT NULL)
                    OR (D.COUNTY_CODE_OWNER IS NOT NULL AND S.COUNTY_CODE_OWNER IS NULL)
                    OR (D.COUNTY_CODE IS NOT NULL AND S.COUNTY_CODE IS NOT NULL AND D.COUNTY_CODE <> S.COUNTY_CODE)
                    OR (D.COUNTY_CODE IS NULL AND S.COUNTY_CODE IS NOT NULL)
                    OR (D.COUNTY_CODE IS NOT NULL AND S.COUNTY_CODE IS NULL)
                    OR (D.NOTES IS NOT NULL AND S.NOTES IS NOT NULL AND D.NOTES <> S.NOTES)
                    OR (D.NOTES IS NULL AND S.NOTES IS NOT NULL)
                    OR (D.NOTES IS NOT NULL AND S.NOTES IS NULL)
                    OR
                    (D.ACKNOWLEDGE_FLAG IS NOT NULL AND S.ACKNOWLEDGE_FLAG IS NOT NULL AND
                     D.ACKNOWLEDGE_FLAG <> S.ACKNOWLEDGE_FLAG)
                    OR (D.ACKNOWLEDGE_FLAG IS NULL AND S.ACKNOWLEDGE_FLAG IS NOT NULL)
                    OR (D.ACKNOWLEDGE_FLAG IS NOT NULL AND S.ACKNOWLEDGE_FLAG IS NULL)
                    OR
                    (D.LOCATION_STREET1 IS NOT NULL AND S.LOCATION_STREET1 IS NOT NULL AND
                     D.LOCATION_STREET1 <> S.LOCATION_STREET1)
                    OR (D.LOCATION_STREET1 IS NULL AND S.LOCATION_STREET1 IS NOT NULL)
                    OR (D.LOCATION_STREET1 IS NOT NULL AND S.LOCATION_STREET1 IS NULL)
                    OR
                    (D.LOCATION_STREET2 IS NOT NULL AND S.LOCATION_STREET2 IS NOT NULL AND
                     D.LOCATION_STREET2 <> S.LOCATION_STREET2)
                    OR (D.LOCATION_STREET2 IS NULL AND S.LOCATION_STREET2 IS NOT NULL)
                    OR (D.LOCATION_STREET2 IS NOT NULL AND S.LOCATION_STREET2 IS NULL)
                    OR
                    (D.LOCATION_CITY IS NOT NULL AND S.LOCATION_CITY IS NOT NULL AND D.LOCATION_CITY <> S.LOCATION_CITY)
                    OR (D.LOCATION_CITY IS NULL AND S.LOCATION_CITY IS NOT NULL)
                    OR (D.LOCATION_CITY IS NOT NULL AND S.LOCATION_CITY IS NULL)
                    OR
                    (D.LOCATION_STATE IS NOT NULL AND S.LOCATION_STATE IS NOT NULL AND
                     D.LOCATION_STATE <> S.LOCATION_STATE)
                    OR (D.LOCATION_STATE IS NULL AND S.LOCATION_STATE IS NOT NULL)
                    OR (D.LOCATION_STATE IS NOT NULL AND S.LOCATION_STATE IS NULL)
                    OR
                    (D.LOCATION_COUNTRY IS NOT NULL AND S.LOCATION_COUNTRY IS NOT NULL AND
                     D.LOCATION_COUNTRY <> S.LOCATION_COUNTRY)
                    OR (D.LOCATION_COUNTRY IS NULL AND S.LOCATION_COUNTRY IS NOT NULL)
                    OR (D.LOCATION_COUNTRY IS NOT NULL AND S.LOCATION_COUNTRY IS NULL)
                    OR (D.LOCATION_ZIP IS NOT NULL AND S.LOCATION_ZIP IS NOT NULL AND D.LOCATION_ZIP <> S.LOCATION_ZIP)
                    OR (D.LOCATION_ZIP IS NULL AND S.LOCATION_ZIP IS NOT NULL)
                    OR (D.LOCATION_ZIP IS NOT NULL AND S.LOCATION_ZIP IS NULL)
                    OR (D.MAIL_STREET1 IS NOT NULL AND S.MAIL_STREET1 IS NOT NULL AND D.MAIL_STREET1 <> S.MAIL_STREET1)
                    OR (D.MAIL_STREET1 IS NULL AND S.MAIL_STREET1 IS NOT NULL)
                    OR (D.MAIL_STREET1 IS NOT NULL AND S.MAIL_STREET1 IS NULL)
                    OR (D.MAIL_STREET2 IS NOT NULL AND S.MAIL_STREET2 IS NOT NULL AND D.MAIL_STREET2 <> S.MAIL_STREET2)
                    OR (D.MAIL_STREET2 IS NULL AND S.MAIL_STREET2 IS NOT NULL)
                    OR (D.MAIL_STREET2 IS NOT NULL AND S.MAIL_STREET2 IS NULL)
                    OR (D.MAIL_CITY IS NOT NULL AND S.MAIL_CITY IS NOT NULL AND D.MAIL_CITY <> S.MAIL_CITY)
                    OR (D.MAIL_CITY IS NULL AND S.MAIL_CITY IS NOT NULL)
                    OR (D.MAIL_CITY IS NOT NULL AND S.MAIL_CITY IS NULL)
                    OR (D.MAIL_STATE IS NOT NULL AND S.MAIL_STATE IS NOT NULL AND D.MAIL_STATE <> S.MAIL_STATE)
                    OR (D.MAIL_STATE IS NULL AND S.MAIL_STATE IS NOT NULL)
                    OR (D.MAIL_STATE IS NOT NULL AND S.MAIL_STATE IS NULL)
                    OR (D.MAIL_COUNTRY IS NOT NULL AND S.MAIL_COUNTRY IS NOT NULL AND D.MAIL_COUNTRY <> S.MAIL_COUNTRY)
                    OR (D.MAIL_COUNTRY IS NULL AND S.MAIL_COUNTRY IS NOT NULL)
                    OR (D.MAIL_COUNTRY IS NOT NULL AND S.MAIL_COUNTRY IS NULL)
                    OR (D.MAIL_ZIP IS NOT NULL AND S.MAIL_ZIP IS NOT NULL AND D.MAIL_ZIP <> S.MAIL_ZIP)
                    OR (D.MAIL_ZIP IS NULL AND S.MAIL_ZIP IS NOT NULL)
                    OR (D.MAIL_ZIP IS NOT NULL AND S.MAIL_ZIP IS NULL)
                    OR (D.CONTACT_FIRST_NAME IS NOT NULL AND S.CONTACT_FIRST_NAME IS NOT NULL AND
                        D.CONTACT_FIRST_NAME <> S.CONTACT_FIRST_NAME)
                    OR (D.CONTACT_FIRST_NAME IS NULL AND S.CONTACT_FIRST_NAME IS NOT NULL)
                    OR (D.CONTACT_FIRST_NAME IS NOT NULL AND S.CONTACT_FIRST_NAME IS NULL)
                    OR (D.CONTACT_MIDDLE_INITIAL IS NOT NULL AND S.CONTACT_MIDDLE_INITIAL IS NOT NULL AND
                        D.CONTACT_MIDDLE_INITIAL <> S.CONTACT_MIDDLE_INITIAL)
                    OR (D.CONTACT_MIDDLE_INITIAL IS NULL AND S.CONTACT_MIDDLE_INITIAL IS NOT NULL)
                    OR (D.CONTACT_MIDDLE_INITIAL IS NOT NULL AND S.CONTACT_MIDDLE_INITIAL IS NULL)
                    OR (D.CONTACT_LAST_NAME IS NOT NULL AND S.CONTACT_LAST_NAME IS NOT NULL AND
                        D.CONTACT_LAST_NAME <> S.CONTACT_LAST_NAME)
                    OR (D.CONTACT_LAST_NAME IS NULL AND S.CONTACT_LAST_NAME IS NOT NULL)
                    OR (D.CONTACT_LAST_NAME IS NOT NULL AND S.CONTACT_LAST_NAME IS NULL)
                    OR
                    (D.CONTACT_ORG_NAME IS NOT NULL AND S.CONTACT_ORG_NAME IS NOT NULL AND
                     D.CONTACT_ORG_NAME <> S.CONTACT_ORG_NAME)
                    OR (D.CONTACT_ORG_NAME IS NULL AND S.CONTACT_ORG_NAME IS NOT NULL)
                    OR (D.CONTACT_ORG_NAME IS NOT NULL AND S.CONTACT_ORG_NAME IS NULL)
                    OR
                    (D.CONTACT_TITLE IS NOT NULL AND S.CONTACT_TITLE IS NOT NULL AND D.CONTACT_TITLE <> S.CONTACT_TITLE)
                    OR (D.CONTACT_TITLE IS NULL AND S.CONTACT_TITLE IS NOT NULL)
                    OR (D.CONTACT_TITLE IS NOT NULL AND S.CONTACT_TITLE IS NULL)
                    OR (D.CONTACT_EMAIL_ADDRESS IS NOT NULL AND S.CONTACT_EMAIL_ADDRESS IS NOT NULL AND
                        D.CONTACT_EMAIL_ADDRESS <> S.CONTACT_EMAIL_ADDRESS)
                    OR (D.CONTACT_EMAIL_ADDRESS IS NULL AND S.CONTACT_EMAIL_ADDRESS IS NOT NULL)
                    OR (D.CONTACT_EMAIL_ADDRESS IS NOT NULL AND S.CONTACT_EMAIL_ADDRESS IS NULL)
                    OR
                    (D.CONTACT_PHONE IS NOT NULL AND S.CONTACT_PHONE IS NOT NULL AND D.CONTACT_PHONE <> S.CONTACT_PHONE)
                    OR (D.CONTACT_PHONE IS NULL AND S.CONTACT_PHONE IS NOT NULL)
                    OR (D.CONTACT_PHONE IS NOT NULL AND S.CONTACT_PHONE IS NULL)
                    OR (D.CONTACT_PHONE_EXT IS NOT NULL AND S.CONTACT_PHONE_EXT IS NOT NULL AND
                        D.CONTACT_PHONE_EXT <> S.CONTACT_PHONE_EXT)
                    OR (D.CONTACT_PHONE_EXT IS NULL AND S.CONTACT_PHONE_EXT IS NOT NULL)
                    OR (D.CONTACT_PHONE_EXT IS NOT NULL AND S.CONTACT_PHONE_EXT IS NULL)
                    OR (D.CONTACT_FAX IS NOT NULL AND S.CONTACT_FAX IS NOT NULL AND D.CONTACT_FAX <> S.CONTACT_FAX)
                    OR (D.CONTACT_FAX IS NULL AND S.CONTACT_FAX IS NOT NULL)
                    OR (D.CONTACT_FAX IS NOT NULL AND S.CONTACT_FAX IS NULL)
                    OR (D.CONTACT_STREET1 IS NOT NULL AND S.CONTACT_STREET1 IS NOT NULL AND
                        D.CONTACT_STREET1 <> S.CONTACT_STREET1)
                    OR (D.CONTACT_STREET1 IS NULL AND S.CONTACT_STREET1 IS NOT NULL)
                    OR (D.CONTACT_STREET1 IS NOT NULL AND S.CONTACT_STREET1 IS NULL)
                    OR (D.CONTACT_STREET2 IS NOT NULL AND S.CONTACT_STREET2 IS NOT NULL AND
                        D.CONTACT_STREET2 <> S.CONTACT_STREET2)
                    OR (D.CONTACT_STREET2 IS NULL AND S.CONTACT_STREET2 IS NOT NULL)
                    OR (D.CONTACT_STREET2 IS NOT NULL AND S.CONTACT_STREET2 IS NULL)
                    OR (D.CONTACT_CITY IS NOT NULL AND S.CONTACT_CITY IS NOT NULL AND D.CONTACT_CITY <> S.CONTACT_CITY)
                    OR (D.CONTACT_CITY IS NULL AND S.CONTACT_CITY IS NOT NULL)
                    OR (D.CONTACT_CITY IS NOT NULL AND S.CONTACT_CITY IS NULL)
                    OR
                    (D.CONTACT_STATE IS NOT NULL AND S.CONTACT_STATE IS NOT NULL AND D.CONTACT_STATE <> S.CONTACT_STATE)
                    OR (D.CONTACT_STATE IS NULL AND S.CONTACT_STATE IS NOT NULL)
                    OR (D.CONTACT_STATE IS NOT NULL AND S.CONTACT_STATE IS NULL)
                    OR (D.CONTACT_COUNTRY IS NOT NULL AND S.CONTACT_COUNTRY IS NOT NULL AND
                        D.CONTACT_COUNTRY <> S.CONTACT_COUNTRY)
                    OR (D.CONTACT_COUNTRY IS NULL AND S.CONTACT_COUNTRY IS NOT NULL)
                    OR (D.CONTACT_COUNTRY IS NOT NULL AND S.CONTACT_COUNTRY IS NULL)
                    OR (D.CONTACT_ZIP IS NOT NULL AND S.CONTACT_ZIP IS NOT NULL AND D.CONTACT_ZIP <> S.CONTACT_ZIP)
                    OR (D.CONTACT_ZIP IS NULL AND S.CONTACT_ZIP IS NOT NULL)
                    OR (D.CONTACT_ZIP IS NOT NULL AND S.CONTACT_ZIP IS NULL)
                    OR (D.PCONTACT_FIRST_NAME IS NOT NULL AND S.PCONTACT_FIRST_NAME IS NOT NULL AND
                        D.PCONTACT_FIRST_NAME <> S.PCONTACT_FIRST_NAME)
                    OR (D.PCONTACT_FIRST_NAME IS NULL AND S.PCONTACT_FIRST_NAME IS NOT NULL)
                    OR (D.PCONTACT_FIRST_NAME IS NOT NULL AND S.PCONTACT_FIRST_NAME IS NULL)
                    OR (D.PCONTACT_MIDDLE_NAME IS NOT NULL AND S.PCONTACT_MIDDLE_NAME IS NOT NULL AND
                        D.PCONTACT_MIDDLE_NAME <> S.PCONTACT_MIDDLE_NAME)
                    OR (D.PCONTACT_MIDDLE_NAME IS NULL AND S.PCONTACT_MIDDLE_NAME IS NOT NULL)
                    OR (D.PCONTACT_MIDDLE_NAME IS NOT NULL AND S.PCONTACT_MIDDLE_NAME IS NULL)
                    OR (D.PCONTACT_LAST_NAME IS NOT NULL AND S.PCONTACT_LAST_NAME IS NOT NULL AND
                        D.PCONTACT_LAST_NAME <> S.PCONTACT_LAST_NAME)
                    OR (D.PCONTACT_LAST_NAME IS NULL AND S.PCONTACT_LAST_NAME IS NOT NULL)
                    OR (D.PCONTACT_LAST_NAME IS NOT NULL AND S.PCONTACT_LAST_NAME IS NULL)
                    OR (D.PCONTACT_ORG_NAME IS NOT NULL AND S.PCONTACT_ORG_NAME IS NOT NULL AND
                        D.PCONTACT_ORG_NAME <> S.PCONTACT_ORG_NAME)
                    OR (D.PCONTACT_ORG_NAME IS NULL AND S.PCONTACT_ORG_NAME IS NOT NULL)
                    OR (D.PCONTACT_ORG_NAME IS NOT NULL AND S.PCONTACT_ORG_NAME IS NULL)
                    OR
                    (D.PCONTACT_TITLE IS NOT NULL AND S.PCONTACT_TITLE IS NOT NULL AND
                     D.PCONTACT_TITLE <> S.PCONTACT_TITLE)
                    OR (D.PCONTACT_TITLE IS NULL AND S.PCONTACT_TITLE IS NOT NULL)
                    OR (D.PCONTACT_TITLE IS NOT NULL AND S.PCONTACT_TITLE IS NULL)
                    OR (D.PCONTACT_EMAIL_ADDRESS IS NOT NULL AND S.PCONTACT_EMAIL_ADDRESS IS NOT NULL AND
                        D.PCONTACT_EMAIL_ADDRESS <> S.PCONTACT_EMAIL_ADDRESS)
                    OR (D.PCONTACT_EMAIL_ADDRESS IS NULL AND S.PCONTACT_EMAIL_ADDRESS IS NOT NULL)
                    OR (D.PCONTACT_EMAIL_ADDRESS IS NOT NULL AND S.PCONTACT_EMAIL_ADDRESS IS NULL)
                    OR
                    (D.PCONTACT_PHONE IS NOT NULL AND S.PCONTACT_PHONE IS NOT NULL AND
                     D.PCONTACT_PHONE <> S.PCONTACT_PHONE)
                    OR (D.PCONTACT_PHONE IS NULL AND S.PCONTACT_PHONE IS NOT NULL)
                    OR (D.PCONTACT_PHONE IS NOT NULL AND S.PCONTACT_PHONE IS NULL)
                    OR (D.PCONTACT_PHONE_EXT IS NOT NULL AND S.PCONTACT_PHONE_EXT IS NOT NULL AND
                        D.PCONTACT_PHONE_EXT <> S.PCONTACT_PHONE_EXT)
                    OR (D.PCONTACT_PHONE_EXT IS NULL AND S.PCONTACT_PHONE_EXT IS NOT NULL)
                    OR (D.PCONTACT_PHONE_EXT IS NOT NULL AND S.PCONTACT_PHONE_EXT IS NULL)
                    OR (D.PCONTACT_FAX IS NOT NULL AND S.PCONTACT_FAX IS NOT NULL AND D.PCONTACT_FAX <> S.PCONTACT_FAX)
                    OR (D.PCONTACT_FAX IS NULL AND S.PCONTACT_FAX IS NOT NULL)
                    OR (D.PCONTACT_FAX IS NOT NULL AND S.PCONTACT_FAX IS NULL)
                    OR
                    (D.PCONTACT_STREET1 IS NOT NULL AND S.PCONTACT_STREET1 IS NOT NULL AND
                     D.PCONTACT_STREET1 <> S.PCONTACT_STREET1)
                    OR (D.PCONTACT_STREET1 IS NULL AND S.PCONTACT_STREET1 IS NOT NULL)
                    OR (D.PCONTACT_STREET1 IS NOT NULL AND S.PCONTACT_STREET1 IS NULL)
                    OR
                    (D.PCONTACT_STREET2 IS NOT NULL AND S.PCONTACT_STREET2 IS NOT NULL AND
                     D.PCONTACT_STREET2 <> S.PCONTACT_STREET2)
                    OR (D.PCONTACT_STREET2 IS NULL AND S.PCONTACT_STREET2 IS NOT NULL)
                    OR (D.PCONTACT_STREET2 IS NOT NULL AND S.PCONTACT_STREET2 IS NULL)
                    OR
                    (D.PCONTACT_CITY IS NOT NULL AND S.PCONTACT_CITY IS NOT NULL AND D.PCONTACT_CITY <> S.PCONTACT_CITY)
                    OR (D.PCONTACT_CITY IS NULL AND S.PCONTACT_CITY IS NOT NULL)
                    OR (D.PCONTACT_CITY IS NOT NULL AND S.PCONTACT_CITY IS NULL)
                    OR
                    (D.PCONTACT_STATE IS NOT NULL AND S.PCONTACT_STATE IS NOT NULL AND
                     D.PCONTACT_STATE <> S.PCONTACT_STATE)
                    OR (D.PCONTACT_STATE IS NULL AND S.PCONTACT_STATE IS NOT NULL)
                    OR (D.PCONTACT_STATE IS NOT NULL AND S.PCONTACT_STATE IS NULL)
                    OR
                    (D.PCONTACT_COUNTRY IS NOT NULL AND S.PCONTACT_COUNTRY IS NOT NULL AND
                     D.PCONTACT_COUNTRY <> S.PCONTACT_COUNTRY)
                    OR (D.PCONTACT_COUNTRY IS NULL AND S.PCONTACT_COUNTRY IS NOT NULL)
                    OR (D.PCONTACT_COUNTRY IS NOT NULL AND S.PCONTACT_COUNTRY IS NULL)
                    OR (D.PCONTACT_ZIP IS NOT NULL AND S.PCONTACT_ZIP IS NOT NULL AND D.PCONTACT_ZIP <> S.PCONTACT_ZIP)
                    OR (D.PCONTACT_ZIP IS NULL AND S.PCONTACT_ZIP IS NOT NULL)
                    OR (D.PCONTACT_ZIP IS NOT NULL AND S.PCONTACT_ZIP IS NULL)
                    OR (D.USED_OIL_BURNER IS NOT NULL AND S.USED_OIL_BURNER IS NOT NULL AND
                        D.USED_OIL_BURNER <> S.USED_OIL_BURNER)
                    OR (D.USED_OIL_BURNER IS NULL AND S.USED_OIL_BURNER IS NOT NULL)
                    OR (D.USED_OIL_BURNER IS NOT NULL AND S.USED_OIL_BURNER IS NULL)
                    OR (D.USED_OIL_PROCESSOR IS NOT NULL AND S.USED_OIL_PROCESSOR IS NOT NULL AND
                        D.USED_OIL_PROCESSOR <> S.USED_OIL_PROCESSOR)
                    OR (D.USED_OIL_PROCESSOR IS NULL AND S.USED_OIL_PROCESSOR IS NOT NULL)
                    OR (D.USED_OIL_PROCESSOR IS NOT NULL AND S.USED_OIL_PROCESSOR IS NULL)
                    OR
                    (D.USED_OIL_REFINER IS NOT NULL AND S.USED_OIL_REFINER IS NOT NULL AND
                     D.USED_OIL_REFINER <> S.USED_OIL_REFINER)
                    OR (D.USED_OIL_REFINER IS NULL AND S.USED_OIL_REFINER IS NOT NULL)
                    OR (D.USED_OIL_REFINER IS NOT NULL AND S.USED_OIL_REFINER IS NULL)
                    OR (D.USED_OIL_MARKET_BURNER IS NOT NULL AND S.USED_OIL_MARKET_BURNER IS NOT NULL AND
                        D.USED_OIL_MARKET_BURNER <> S.USED_OIL_MARKET_BURNER)
                    OR (D.USED_OIL_MARKET_BURNER IS NULL AND S.USED_OIL_MARKET_BURNER IS NOT NULL)
                    OR (D.USED_OIL_MARKET_BURNER IS NOT NULL AND S.USED_OIL_MARKET_BURNER IS NULL)
                    OR (D.USED_OIL_SPEC_MARKETER IS NOT NULL AND S.USED_OIL_SPEC_MARKETER IS NOT NULL AND
                        D.USED_OIL_SPEC_MARKETER <> S.USED_OIL_SPEC_MARKETER)
                    OR (D.USED_OIL_SPEC_MARKETER IS NULL AND S.USED_OIL_SPEC_MARKETER IS NOT NULL)
                    OR (D.USED_OIL_SPEC_MARKETER IS NOT NULL AND S.USED_OIL_SPEC_MARKETER IS NULL)
                    OR (D.USED_OIL_TRANSFER_FACILITY IS NOT NULL AND S.USED_OIL_TRANSFER_FACILITY IS NOT NULL AND
                        D.USED_OIL_TRANSFER_FACILITY <> S.USED_OIL_TRANSFER_FACILITY)
                    OR (D.USED_OIL_TRANSFER_FACILITY IS NULL AND S.USED_OIL_TRANSFER_FACILITY IS NOT NULL)
                    OR (D.USED_OIL_TRANSFER_FACILITY IS NOT NULL AND S.USED_OIL_TRANSFER_FACILITY IS NULL)
                    OR (D.USED_OIL_TRANSPORTER IS NOT NULL AND S.USED_OIL_TRANSPORTER IS NOT NULL AND
                        D.USED_OIL_TRANSPORTER <> S.USED_OIL_TRANSPORTER)
                    OR (D.USED_OIL_TRANSPORTER IS NULL AND S.USED_OIL_TRANSPORTER IS NOT NULL)
                    OR (D.USED_OIL_TRANSPORTER IS NOT NULL AND S.USED_OIL_TRANSPORTER IS NULL)
                    OR (D.LAND_TYPE IS NOT NULL AND S.LAND_TYPE IS NOT NULL AND D.LAND_TYPE <> S.LAND_TYPE)
                    OR (D.LAND_TYPE IS NULL AND S.LAND_TYPE IS NOT NULL)
                    OR (D.LAND_TYPE IS NOT NULL AND S.LAND_TYPE IS NULL)
                    OR (D.STATE_DISTRICT_OWNER IS NOT NULL AND S.STATE_DISTRICT_OWNER IS NOT NULL AND
                        D.STATE_DISTRICT_OWNER <> S.STATE_DISTRICT_OWNER)
                    OR (D.STATE_DISTRICT_OWNER IS NULL AND S.STATE_DISTRICT_OWNER IS NOT NULL)
                    OR (D.STATE_DISTRICT_OWNER IS NOT NULL AND S.STATE_DISTRICT_OWNER IS NULL)
                    OR
                    (D.STATE_DISTRICT IS NOT NULL AND S.STATE_DISTRICT IS NOT NULL AND
                     D.STATE_DISTRICT <> S.STATE_DISTRICT)
                    OR (D.STATE_DISTRICT IS NULL AND S.STATE_DISTRICT IS NOT NULL)
                    OR (D.STATE_DISTRICT IS NOT NULL AND S.STATE_DISTRICT IS NULL)
                    OR (D.IMPORTER_ACTIVITY IS NOT NULL AND S.IMPORTER_ACTIVITY IS NOT NULL AND
                        D.IMPORTER_ACTIVITY <> S.IMPORTER_ACTIVITY)
                    OR (D.IMPORTER_ACTIVITY IS NULL AND S.IMPORTER_ACTIVITY IS NOT NULL)
                    OR (D.IMPORTER_ACTIVITY IS NOT NULL AND S.IMPORTER_ACTIVITY IS NULL)
                    OR (D.MIXED_WASTE_GENERATOR IS NOT NULL AND S.MIXED_WASTE_GENERATOR IS NOT NULL AND
                        D.MIXED_WASTE_GENERATOR <> S.MIXED_WASTE_GENERATOR)
                    OR (D.MIXED_WASTE_GENERATOR IS NULL AND S.MIXED_WASTE_GENERATOR IS NOT NULL)
                    OR (D.MIXED_WASTE_GENERATOR IS NOT NULL AND S.MIXED_WASTE_GENERATOR IS NULL)
                    OR (D.RECYCLER_ACTIVITY IS NOT NULL AND S.RECYCLER_ACTIVITY IS NOT NULL AND
                        D.RECYCLER_ACTIVITY <> S.RECYCLER_ACTIVITY)
                    OR (D.RECYCLER_ACTIVITY IS NULL AND S.RECYCLER_ACTIVITY IS NOT NULL)
                    OR (D.RECYCLER_ACTIVITY IS NOT NULL AND S.RECYCLER_ACTIVITY IS NULL)
                    OR (D.TRANSPORTER_ACTIVITY IS NOT NULL AND S.TRANSPORTER_ACTIVITY IS NOT NULL AND
                        D.TRANSPORTER_ACTIVITY <> S.TRANSPORTER_ACTIVITY)
                    OR (D.TRANSPORTER_ACTIVITY IS NULL AND S.TRANSPORTER_ACTIVITY IS NOT NULL)
                    OR (D.TRANSPORTER_ACTIVITY IS NOT NULL AND S.TRANSPORTER_ACTIVITY IS NULL)
                    OR (D.TSD_ACTIVITY IS NOT NULL AND S.TSD_ACTIVITY IS NOT NULL AND D.TSD_ACTIVITY <> S.TSD_ACTIVITY)
                    OR (D.TSD_ACTIVITY IS NULL AND S.TSD_ACTIVITY IS NOT NULL)
                    OR (D.TSD_ACTIVITY IS NOT NULL AND S.TSD_ACTIVITY IS NULL)
                    OR
                    (D.UNDERGROUND_INJECTION_ACTIVITY IS NOT NULL AND S.UNDERGROUND_INJECTION_ACTIVITY IS NOT NULL AND
                     D.UNDERGROUND_INJECTION_ACTIVITY <> S.UNDERGROUND_INJECTION_ACTIVITY)
                    OR (D.UNDERGROUND_INJECTION_ACTIVITY IS NULL AND S.UNDERGROUND_INJECTION_ACTIVITY IS NOT NULL)
                    OR (D.UNDERGROUND_INJECTION_ACTIVITY IS NOT NULL AND S.UNDERGROUND_INJECTION_ACTIVITY IS NULL)
                    OR (D.ONSITE_BURNER_EXEMPTION IS NOT NULL AND S.ONSITE_BURNER_EXEMPTION IS NOT NULL AND
                        D.ONSITE_BURNER_EXEMPTION <> S.ONSITE_BURNER_EXEMPTION)
                    OR (D.ONSITE_BURNER_EXEMPTION IS NULL AND S.ONSITE_BURNER_EXEMPTION IS NOT NULL)
                    OR (D.ONSITE_BURNER_EXEMPTION IS NOT NULL AND S.ONSITE_BURNER_EXEMPTION IS NULL)
                    OR (D.FURNACE_EXEMPTION IS NOT NULL AND S.FURNACE_EXEMPTION IS NOT NULL AND
                        D.FURNACE_EXEMPTION <> S.FURNACE_EXEMPTION)
                    OR (D.FURNACE_EXEMPTION IS NULL AND S.FURNACE_EXEMPTION IS NOT NULL)
                    OR (D.FURNACE_EXEMPTION IS NOT NULL AND S.FURNACE_EXEMPTION IS NULL)
                    OR (D.SHORT_TERM_GEN_IND IS NOT NULL AND S.SHORT_TERM_GEN_IND IS NOT NULL AND
                        D.SHORT_TERM_GEN_IND <> S.SHORT_TERM_GEN_IND)
                    OR (D.SHORT_TERM_GEN_IND IS NULL AND S.SHORT_TERM_GEN_IND IS NOT NULL)
                    OR (D.SHORT_TERM_GEN_IND IS NOT NULL AND S.SHORT_TERM_GEN_IND IS NULL)
                    OR (D.TRANSFER_FACILITY_IND IS NOT NULL AND S.TRANSFER_FACILITY_IND IS NOT NULL AND
                        D.TRANSFER_FACILITY_IND <> S.TRANSFER_FACILITY_IND)
                    OR (D.TRANSFER_FACILITY_IND IS NULL AND S.TRANSFER_FACILITY_IND IS NOT NULL)
                    OR (D.TRANSFER_FACILITY_IND IS NOT NULL AND S.TRANSFER_FACILITY_IND IS NULL)
                    OR (D.COLLEGE_IND IS NOT NULL AND S.COLLEGE_IND IS NOT NULL AND D.COLLEGE_IND <> S.COLLEGE_IND)
                    OR (D.COLLEGE_IND IS NULL AND S.COLLEGE_IND IS NOT NULL)
                    OR (D.COLLEGE_IND IS NOT NULL AND S.COLLEGE_IND IS NULL)
                    OR (D.HOSPITAL_IND IS NOT NULL AND S.HOSPITAL_IND IS NOT NULL AND D.HOSPITAL_IND <> S.HOSPITAL_IND)
                    OR (D.HOSPITAL_IND IS NULL AND S.HOSPITAL_IND IS NOT NULL)
                    OR (D.HOSPITAL_IND IS NOT NULL AND S.HOSPITAL_IND IS NULL)
                    OR
                    (D.NON_PROFIT_IND IS NOT NULL AND S.NON_PROFIT_IND IS NOT NULL AND
                     D.NON_PROFIT_IND <> S.NON_PROFIT_IND)
                    OR (D.NON_PROFIT_IND IS NULL AND S.NON_PROFIT_IND IS NOT NULL)
                    OR (D.NON_PROFIT_IND IS NOT NULL AND S.NON_PROFIT_IND IS NULL)
                    OR
                    (D.WITHDRAWAL_IND IS NOT NULL AND S.WITHDRAWAL_IND IS NOT NULL AND
                     D.WITHDRAWAL_IND <> S.WITHDRAWAL_IND)
                    OR (D.WITHDRAWAL_IND IS NULL AND S.WITHDRAWAL_IND IS NOT NULL)
                    OR (D.WITHDRAWAL_IND IS NOT NULL AND S.WITHDRAWAL_IND IS NULL)
                    OR (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NOT NULL AND D.TRANS_CODE <> S.TRANS_CODE)
                    OR (D.TRANS_CODE IS NULL AND S.TRANS_CODE IS NOT NULL)
                    OR (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NULL)
                    OR (D.NOTIFICATION_RSN_CODE IS NOT NULL AND S.NOTIFICATION_RSN_CODE IS NOT NULL AND
                        D.NOTIFICATION_RSN_CODE <> S.NOTIFICATION_RSN_CODE)
                    OR (D.NOTIFICATION_RSN_CODE IS NULL AND S.NOTIFICATION_RSN_CODE IS NOT NULL)
                    OR (D.NOTIFICATION_RSN_CODE IS NOT NULL AND S.NOTIFICATION_RSN_CODE IS NULL)
                    OR (D.EFFC_DATE IS NOT NULL AND S.EFFC_DATE IS NOT NULL AND D.EFFC_DATE <> S.EFFC_DATE)
                    OR (D.EFFC_DATE IS NULL AND S.EFFC_DATE IS NOT NULL)
                    OR (D.EFFC_DATE IS NOT NULL AND S.EFFC_DATE IS NULL)
                    OR (D.FINANCIAL_ASSURANCE_IND IS NOT NULL AND S.FINANCIAL_ASSURANCE_IND IS NOT NULL AND
                        D.FINANCIAL_ASSURANCE_IND <> S.FINANCIAL_ASSURANCE_IND)
                    OR (D.FINANCIAL_ASSURANCE_IND IS NULL AND S.FINANCIAL_ASSURANCE_IND IS NOT NULL)
                    OR (D.FINANCIAL_ASSURANCE_IND IS NOT NULL AND S.FINANCIAL_ASSURANCE_IND IS NULL)
                    OR (D.MAIL_STREET_NUMBER IS NOT NULL AND S.MAIL_STREET_NUMBER IS NOT NULL AND
                        D.MAIL_STREET_NUMBER <> S.MAIL_STREET_NUMBER)
                    OR (D.MAIL_STREET_NUMBER IS NULL AND S.MAIL_STREET_NUMBER IS NOT NULL)
                    OR (D.MAIL_STREET_NUMBER IS NOT NULL AND S.MAIL_STREET_NUMBER IS NULL)
                    OR (D.LOCATION_STREET_NUMBER IS NOT NULL AND S.LOCATION_STREET_NUMBER IS NOT NULL AND
                        D.LOCATION_STREET_NUMBER <> S.LOCATION_STREET_NUMBER)
                    OR (D.LOCATION_STREET_NUMBER IS NULL AND S.LOCATION_STREET_NUMBER IS NOT NULL)
                    OR (D.LOCATION_STREET_NUMBER IS NOT NULL AND S.LOCATION_STREET_NUMBER IS NULL)
                    OR (D.NON_NOTIFIER_TEXT IS NOT NULL AND S.NON_NOTIFIER_TEXT IS NOT NULL AND
                        D.NON_NOTIFIER_TEXT <> S.NON_NOTIFIER_TEXT)
                    OR (D.NON_NOTIFIER_TEXT IS NULL AND S.NON_NOTIFIER_TEXT IS NOT NULL)
                    OR (D.NON_NOTIFIER_TEXT IS NOT NULL AND S.NON_NOTIFIER_TEXT IS NULL)
                    OR (D.ACCESSIBILITY_TEXT IS NOT NULL AND S.ACCESSIBILITY_TEXT IS NOT NULL AND
                        D.ACCESSIBILITY_TEXT <> S.ACCESSIBILITY_TEXT)
                    OR (D.ACCESSIBILITY_TEXT IS NULL AND S.ACCESSIBILITY_TEXT IS NOT NULL)
                    OR (D.ACCESSIBILITY_TEXT IS NOT NULL AND S.ACCESSIBILITY_TEXT IS NULL)
                    OR (D.STATE_DISTRICT_TEXT IS NOT NULL AND S.STATE_DISTRICT_TEXT IS NOT NULL AND
                        D.STATE_DISTRICT_TEXT <> S.STATE_DISTRICT_TEXT)
                    OR (D.STATE_DISTRICT_TEXT IS NULL AND S.STATE_DISTRICT_TEXT IS NOT NULL)
                    OR (D.STATE_DISTRICT_TEXT IS NOT NULL AND S.STATE_DISTRICT_TEXT IS NULL)
                    OR (D.INTRNL_NOTES IS NOT NULL AND S.INTRNL_NOTES IS NOT NULL AND D.INTRNL_NOTES <> S.INTRNL_NOTES)
                    OR (D.INTRNL_NOTES IS NULL AND S.INTRNL_NOTES IS NOT NULL)
                    OR (D.INTRNL_NOTES IS NOT NULL AND S.INTRNL_NOTES IS NULL)
                    OR (D.SHORT_TERM_INTRNL_NOTES IS NOT NULL AND S.SHORT_TERM_INTRNL_NOTES IS NOT NULL AND
                        D.SHORT_TERM_INTRNL_NOTES <> S.SHORT_TERM_INTRNL_NOTES)
                    OR (D.SHORT_TERM_INTRNL_NOTES IS NULL AND S.SHORT_TERM_INTRNL_NOTES IS NOT NULL)
                    OR (D.SHORT_TERM_INTRNL_NOTES IS NOT NULL AND S.SHORT_TERM_INTRNL_NOTES IS NULL)
                    OR (D.NATURE_OF_BUSINESS_TEXT IS NOT NULL AND S.NATURE_OF_BUSINESS_TEXT IS NOT NULL AND
                        D.NATURE_OF_BUSINESS_TEXT <> S.NATURE_OF_BUSINESS_TEXT)
                    OR (D.NATURE_OF_BUSINESS_TEXT IS NULL AND S.NATURE_OF_BUSINESS_TEXT IS NOT NULL)
                    OR (D.NATURE_OF_BUSINESS_TEXT IS NOT NULL AND S.NATURE_OF_BUSINESS_TEXT IS NULL)
                    OR
                    (D.RECOGNIZED_TRADER_EXPORTER_IND IS NOT NULL AND S.RECOGNIZED_TRADER_EXPORTER_IND IS NOT NULL AND
                     D.RECOGNIZED_TRADER_EXPORTER_IND <> S.RECOGNIZED_TRADER_EXPORTER_IND)
                    OR (D.RECOGNIZED_TRADER_EXPORTER_IND IS NULL AND S.RECOGNIZED_TRADER_EXPORTER_IND IS NOT NULL)
                    OR (D.RECOGNIZED_TRADER_EXPORTER_IND IS NOT NULL AND S.RECOGNIZED_TRADER_EXPORTER_IND IS NULL)
                    OR
                    (D.RECOGNIZED_TRADER_IMPORTER_IND IS NOT NULL AND S.RECOGNIZED_TRADER_IMPORTER_IND IS NOT NULL AND
                     D.RECOGNIZED_TRADER_IMPORTER_IND <> S.RECOGNIZED_TRADER_IMPORTER_IND)
                    OR (D.RECOGNIZED_TRADER_IMPORTER_IND IS NULL AND S.RECOGNIZED_TRADER_IMPORTER_IND IS NOT NULL)
                    OR (D.RECOGNIZED_TRADER_IMPORTER_IND IS NOT NULL AND S.RECOGNIZED_TRADER_IMPORTER_IND IS NULL)
                    OR (D.SLAB_EXPORTER_IND IS NOT NULL AND S.SLAB_EXPORTER_IND IS NOT NULL AND
                        D.SLAB_EXPORTER_IND <> S.SLAB_EXPORTER_IND)
                    OR (D.SLAB_EXPORTER_IND IS NULL AND S.SLAB_EXPORTER_IND IS NOT NULL)
                    OR (D.SLAB_EXPORTER_IND IS NOT NULL AND S.SLAB_EXPORTER_IND IS NULL)
                    OR (D.SLAB_IMPORTER_IND IS NOT NULL AND S.SLAB_IMPORTER_IND IS NOT NULL AND
                        D.SLAB_IMPORTER_IND <> S.SLAB_IMPORTER_IND)
                    OR (D.SLAB_IMPORTER_IND IS NULL AND S.SLAB_IMPORTER_IND IS NOT NULL)
                    OR (D.SLAB_IMPORTER_IND IS NOT NULL AND S.SLAB_IMPORTER_IND IS NULL)
                    OR (D.TSD_DATE IS NOT NULL AND S.TSD_DATE IS NOT NULL AND D.TSD_DATE <> S.TSD_DATE)
                    OR (D.TSD_DATE IS NULL AND S.TSD_DATE IS NOT NULL)
                    OR (D.TSD_DATE IS NOT NULL AND S.TSD_DATE IS NULL)
                    OR (D.UNIVERSAL_WASTE_DEST_FACILITY IS NOT NULL AND S.UNIVERSAL_WASTE_DEST_FACILITY IS NOT NULL AND
                        D.UNIVERSAL_WASTE_DEST_FACILITY <> S.UNIVERSAL_WASTE_DEST_FACILITY)
                    OR (D.UNIVERSAL_WASTE_DEST_FACILITY IS NULL AND S.UNIVERSAL_WASTE_DEST_FACILITY IS NOT NULL)
                    OR (D.UNIVERSAL_WASTE_DEST_FACILITY IS NOT NULL AND S.UNIVERSAL_WASTE_DEST_FACILITY IS NULL)
                    OR (D.STATE_WASTE_GENERATOR_OWNER IS NOT NULL AND S.STATE_WASTE_GENERATOR_OWNER IS NOT NULL AND
                        D.STATE_WASTE_GENERATOR_OWNER <> S.STATE_WASTE_GENERATOR_OWNER)
                    OR (D.STATE_WASTE_GENERATOR_OWNER IS NULL AND S.STATE_WASTE_GENERATOR_OWNER IS NOT NULL)
                    OR (D.STATE_WASTE_GENERATOR_OWNER IS NOT NULL AND S.STATE_WASTE_GENERATOR_OWNER IS NULL)
                    OR (D.STATE_WASTE_GENERATOR IS NOT NULL AND S.STATE_WASTE_GENERATOR IS NOT NULL AND
                        D.STATE_WASTE_GENERATOR <> S.STATE_WASTE_GENERATOR)
                    OR (D.STATE_WASTE_GENERATOR IS NULL AND S.STATE_WASTE_GENERATOR IS NOT NULL)
                    OR (D.STATE_WASTE_GENERATOR IS NOT NULL AND S.STATE_WASTE_GENERATOR IS NULL)
                    OR (D.FED_WASTE_GENERATOR_OWNER IS NOT NULL AND S.FED_WASTE_GENERATOR_OWNER IS NOT NULL AND
                        D.FED_WASTE_GENERATOR_OWNER <> S.FED_WASTE_GENERATOR_OWNER)
                    OR (D.FED_WASTE_GENERATOR_OWNER IS NULL AND S.FED_WASTE_GENERATOR_OWNER IS NOT NULL)
                    OR (D.FED_WASTE_GENERATOR_OWNER IS NOT NULL AND S.FED_WASTE_GENERATOR_OWNER IS NULL)
                    OR (D.FED_WASTE_GENERATOR IS NOT NULL AND S.FED_WASTE_GENERATOR IS NOT NULL AND
                        D.FED_WASTE_GENERATOR <> S.FED_WASTE_GENERATOR)
                    OR (D.FED_WASTE_GENERATOR IS NULL AND S.FED_WASTE_GENERATOR IS NOT NULL)
                    OR (D.FED_WASTE_GENERATOR IS NOT NULL AND S.FED_WASTE_GENERATOR IS NULL)
                    OR
                    (D.RECOGNIZED_TRADER_IMPORTER_IND IS NOT NULL AND S.RECOGNIZED_TRADER_IMPORTER_IND IS NOT NULL AND
                     D.RECOGNIZED_TRADER_IMPORTER_IND <> S.RECOGNIZED_TRADER_IMPORTER_IND)
                    OR (D.RECOGNIZED_TRADER_IMPORTER_IND IS NULL AND S.RECOGNIZED_TRADER_IMPORTER_IND IS NOT NULL)
                    OR (D.RECOGNIZED_TRADER_IMPORTER_IND IS NOT NULL AND S.RECOGNIZED_TRADER_IMPORTER_IND IS NULL)
                    OR
                    (D.RECOGNIZED_TRADER_EXPORTER_IND IS NOT NULL AND S.RECOGNIZED_TRADER_EXPORTER_IND IS NOT NULL AND
                     D.RECOGNIZED_TRADER_EXPORTER_IND <> S.RECOGNIZED_TRADER_EXPORTER_IND)
                    OR (D.RECOGNIZED_TRADER_EXPORTER_IND IS NULL AND S.RECOGNIZED_TRADER_EXPORTER_IND IS NOT NULL)
                    OR (D.RECOGNIZED_TRADER_EXPORTER_IND IS NOT NULL AND S.RECOGNIZED_TRADER_EXPORTER_IND IS NULL)
                    OR (D.SLAB_IMPORTER_IND IS NOT NULL AND S.SLAB_IMPORTER_IND IS NOT NULL AND
                        D.SLAB_IMPORTER_IND <> S.SLAB_IMPORTER_IND)
                    OR (D.SLAB_IMPORTER_IND IS NULL AND S.SLAB_IMPORTER_IND IS NOT NULL)
                    OR (D.SLAB_IMPORTER_IND IS NOT NULL AND S.SLAB_IMPORTER_IND IS NULL)
                    OR (D.SLAB_EXPORTER_IND IS NOT NULL AND S.SLAB_EXPORTER_IND IS NOT NULL AND
                        D.SLAB_EXPORTER_IND <> S.SLAB_EXPORTER_IND)
                    OR (D.SLAB_EXPORTER_IND IS NULL AND S.SLAB_EXPORTER_IND IS NOT NULL)
                    OR (D.SLAB_EXPORTER_IND IS NOT NULL AND S.SLAB_EXPORTER_IND IS NULL)
                    OR (D.RECYCLER_ACT_NONSTORAGE IS NOT NULL AND S.RECYCLER_ACT_NONSTORAGE IS NOT NULL AND
                        D.RECYCLER_ACT_NONSTORAGE <> S.RECYCLER_ACT_NONSTORAGE)
                    OR (D.RECYCLER_ACT_NONSTORAGE IS NULL AND S.RECYCLER_ACT_NONSTORAGE IS NOT NULL)
                    OR (D.RECYCLER_ACT_NONSTORAGE IS NOT NULL AND S.RECYCLER_ACT_NONSTORAGE IS NULL)
                    OR (D.MANIFEST_BROKER IS NOT NULL AND S.MANIFEST_BROKER IS NOT NULL AND
                        D.MANIFEST_BROKER <> S.MANIFEST_BROKER)
                    OR (D.MANIFEST_BROKER IS NULL AND S.MANIFEST_BROKER IS NOT NULL)
                    OR (D.MANIFEST_BROKER IS NOT NULL AND S.MANIFEST_BROKER IS NULL)
                    OR (D.ACKNOWLEDGE_FLAG_IND IS NOT NULL AND S.ACKNOWLEDGE_FLAG_IND IS NOT NULL AND
                        D.ACKNOWLEDGE_FLAG_IND <> S.ACKNOWLEDGE_FLAG_IND)
                    OR (D.ACKNOWLEDGE_FLAG_IND IS NULL AND S.ACKNOWLEDGE_FLAG_IND IS NOT NULL)
                    OR (D.ACKNOWLEDGE_FLAG_IND IS NOT NULL AND S.ACKNOWLEDGE_FLAG_IND IS NULL)
                    OR
                    (D.INCLUDE_IN_NATIONAL_REPORT_IND IS NOT NULL AND S.INCLUDE_IN_NATIONAL_REPORT_IND IS NOT NULL AND
                     D.INCLUDE_IN_NATIONAL_REPORT_IND <> S.INCLUDE_IN_NATIONAL_REPORT_IND)
                    OR (D.INCLUDE_IN_NATIONAL_REPORT_IND IS NULL AND S.INCLUDE_IN_NATIONAL_REPORT_IND IS NOT NULL)
                    OR (D.INCLUDE_IN_NATIONAL_REPORT_IND IS NOT NULL AND S.INCLUDE_IN_NATIONAL_REPORT_IND IS NULL)
                    OR (D.LQHUW_IND IS NOT NULL AND S.LQHUW_IND IS NOT NULL AND
                        D.LQHUW_IND <> S.LQHUW_IND)
                    OR (D.LQHUW_IND IS NULL AND S.LQHUW_IND IS NOT NULL)
                    OR (D.LQHUW_IND IS NOT NULL AND S.LQHUW_IND IS NULL)
                    OR (D.HD_REPORT_CYCLE_YEAR IS NOT NULL AND S.HD_REPORT_CYCLE_YEAR IS NOT NULL AND
                        D.HD_REPORT_CYCLE_YEAR <> S.HD_REPORT_CYCLE_YEAR)
                    OR (D.HD_REPORT_CYCLE_YEAR IS NULL AND S.HD_REPORT_CYCLE_YEAR IS NOT NULL)
                    OR (D.HD_REPORT_CYCLE_YEAR IS NOT NULL AND S.HD_REPORT_CYCLE_YEAR IS NULL)
                    OR (D.HEALTHCARE_FAC IS NOT NULL AND S.HEALTHCARE_FAC IS NOT NULL AND
                        D.HEALTHCARE_FAC <> S.HEALTHCARE_FAC)
                    OR (D.HEALTHCARE_FAC IS NULL AND S.HEALTHCARE_FAC IS NOT NULL)
                    OR (D.HEALTHCARE_FAC IS NOT NULL AND S.HEALTHCARE_FAC IS NULL)
                    OR (D.REVERSE_DISTRIBUTOR IS NOT NULL AND S.REVERSE_DISTRIBUTOR IS NOT NULL AND
                        D.REVERSE_DISTRIBUTOR <> S.REVERSE_DISTRIBUTOR)
                    OR (D.REVERSE_DISTRIBUTOR IS NULL AND S.REVERSE_DISTRIBUTOR IS NOT NULL)
                    OR (D.REVERSE_DISTRIBUTOR IS NOT NULL AND S.REVERSE_DISTRIBUTOR IS NULL)
                    OR (D.SUBPART_P_WITHDRAWAL IS NOT NULL AND S.SUBPART_P_WITHDRAWAL IS NOT NULL AND
                        D.SUBPART_P_WITHDRAWAL <> S.SUBPART_P_WITHDRAWAL)
                    OR (D.SUBPART_P_WITHDRAWAL IS NULL AND S.SUBPART_P_WITHDRAWAL IS NOT NULL)
                    OR (D.SUBPART_P_WITHDRAWAL IS NOT NULL AND S.SUBPART_P_WITHDRAWAL IS NULL)
                    OR (D.RECYCLER_IND IS NOT NULL AND S.RECYCLER_IND IS NOT NULL AND
                        D.RECYCLER_IND <> S.RECYCLER_IND)
                    OR (D.RECYCLER_IND IS NULL AND S.RECYCLER_IND IS NOT NULL)
                    OR (D.RECYCLER_IND IS NOT NULL AND S.RECYCLER_IND IS NULL)
                )
            THEN
            UPDATE
            SET D.TRANSACTION_CODE               = S.TRANSACTION_CODE,
                D.ACTIVITY_LOCATION              = S.ACTIVITY_LOCATION,
                D.SOURCE_TYPE                    = S.SOURCE_TYPE,
                D.RECEIVE_DATE                   = S.RECEIVE_DATE,
                D.HANDLER_NAME                   = S.HANDLER_NAME,
                D.ACKNOWLEDGE_DATE               = S.ACKNOWLEDGE_DATE,
                D.NON_NOTIFIER                   = S.NON_NOTIFIER,
                D.OFF_SITE_RECEIPT               = S.OFF_SITE_RECEIPT,
                D.ACCESSIBILITY                  = S.ACCESSIBILITY,
                D.COUNTY_CODE_OWNER              = S.COUNTY_CODE_OWNER,
                D.COUNTY_CODE                    = S.COUNTY_CODE,
                D.NOTES                          = S.NOTES,
                D.ACKNOWLEDGE_FLAG               = S.ACKNOWLEDGE_FLAG,
                D.LOCATION_STREET1               = S.LOCATION_STREET1,
                D.LOCATION_STREET2               = S.LOCATION_STREET2,
                D.LOCATION_CITY                  = S.LOCATION_CITY,
                D.LOCATION_STATE                 = S.LOCATION_STATE,
                D.LOCATION_COUNTRY               = S.LOCATION_COUNTRY,
                D.LOCATION_ZIP                   = S.LOCATION_ZIP,
                D.MAIL_STREET1                   = S.MAIL_STREET1,
                D.MAIL_STREET2                   = S.MAIL_STREET2,
                D.MAIL_CITY                      = S.MAIL_CITY,
                D.MAIL_STATE                     = S.MAIL_STATE,
                D.MAIL_COUNTRY                   = S.MAIL_COUNTRY,
                D.MAIL_ZIP                       = S.MAIL_ZIP,
                D.CONTACT_FIRST_NAME             = S.CONTACT_FIRST_NAME,
                D.CONTACT_MIDDLE_INITIAL         = S.CONTACT_MIDDLE_INITIAL,
                D.CONTACT_LAST_NAME              = S.CONTACT_LAST_NAME,
                D.CONTACT_ORG_NAME               = S.CONTACT_ORG_NAME,
                D.CONTACT_TITLE                  = D.CONTACT_TITLE,
                D.CONTACT_EMAIL_ADDRESS          = S.CONTACT_EMAIL_ADDRESS,
                D.CONTACT_PHONE                  = S.CONTACT_PHONE,
                D.CONTACT_PHONE_EXT              = S.CONTACT_PHONE_EXT,
                D.CONTACT_FAX                    = S.CONTACT_FAX,
                D.CONTACT_STREET1                = S.CONTACT_STREET1,
                D.CONTACT_STREET2                = S.CONTACT_STREET2,
                D.CONTACT_CITY                   = S.CONTACT_CITY,
                D.CONTACT_STATE                  = S.CONTACT_STATE,
                D.CONTACT_COUNTRY                = S.CONTACT_COUNTRY,
                D.CONTACT_ZIP                    = S.CONTACT_ZIP,
                D.PCONTACT_FIRST_NAME            = S.PCONTACT_FIRST_NAME,
                D.PCONTACT_MIDDLE_NAME           = S.PCONTACT_MIDDLE_NAME,
                D.PCONTACT_LAST_NAME             = S.PCONTACT_LAST_NAME,
                D.PCONTACT_ORG_NAME              = S.PCONTACT_ORG_NAME,
                D.PCONTACT_TITLE                 = S.PCONTACT_TITLE,
                D.PCONTACT_EMAIL_ADDRESS         = S.PCONTACT_EMAIL_ADDRESS,
                D.PCONTACT_PHONE                 = S.PCONTACT_PHONE,
                D.PCONTACT_PHONE_EXT             = S.PCONTACT_PHONE_EXT,
                D.PCONTACT_FAX                   = S.PCONTACT_FAX,
                D.PCONTACT_STREET1               = S.PCONTACT_STREET1,
                D.PCONTACT_STREET2               = S.PCONTACT_STREET2,
                D.PCONTACT_CITY                  = S.PCONTACT_CITY,
                D.PCONTACT_STATE                 = S.PCONTACT_STATE,
                D.PCONTACT_COUNTRY               = S.PCONTACT_COUNTRY,
                D.PCONTACT_ZIP                   = S.PCONTACT_ZIP,
                D.USED_OIL_BURNER                = S.USED_OIL_BURNER,
                D.USED_OIL_PROCESSOR             = S.USED_OIL_PROCESSOR,
                D.USED_OIL_REFINER               = S.USED_OIL_REFINER,
                D.USED_OIL_MARKET_BURNER         = S.USED_OIL_MARKET_BURNER,
                D.USED_OIL_SPEC_MARKETER         = S.USED_OIL_SPEC_MARKETER,
                D.USED_OIL_TRANSFER_FACILITY     = S.USED_OIL_TRANSFER_FACILITY,
                D.USED_OIL_TRANSPORTER           = S.USED_OIL_TRANSPORTER,
                D.LAND_TYPE                      = S.LAND_TYPE,
                D.STATE_DISTRICT_OWNER           = S.STATE_DISTRICT_OWNER,
                D.STATE_DISTRICT                 = S.STATE_DISTRICT,
                D.IMPORTER_ACTIVITY              = S.IMPORTER_ACTIVITY,
                D.MIXED_WASTE_GENERATOR          = S.MIXED_WASTE_GENERATOR,
                D.RECYCLER_ACTIVITY              = S.RECYCLER_ACTIVITY,
                D.TRANSPORTER_ACTIVITY           = S.TRANSPORTER_ACTIVITY,
                D.TSD_ACTIVITY                   = S.TSD_ACTIVITY,
                D.UNDERGROUND_INJECTION_ACTIVITY = S.UNDERGROUND_INJECTION_ACTIVITY,
                D.ONSITE_BURNER_EXEMPTION        = S.ONSITE_BURNER_EXEMPTION,
                D.FURNACE_EXEMPTION              = S.FURNACE_EXEMPTION,
                D.SHORT_TERM_GEN_IND             = S.SHORT_TERM_GEN_IND,
                D.TRANSFER_FACILITY_IND          = S.TRANSFER_FACILITY_IND,
                D.COLLEGE_IND                    = S.COLLEGE_IND,
                D.HOSPITAL_IND                   = S.HOSPITAL_IND,
                D.NON_PROFIT_IND                 = S.NON_PROFIT_IND,
                D.WITHDRAWAL_IND                 = S.WITHDRAWAL_IND,
                D.TRANS_CODE                     = S.TRANS_CODE,
                D.NOTIFICATION_RSN_CODE          = S.NOTIFICATION_RSN_CODE,
                D.EFFC_DATE                      = S.EFFC_DATE,
                D.FINANCIAL_ASSURANCE_IND        = S.FINANCIAL_ASSURANCE_IND,
                D.MAIL_STREET_NUMBER             = S.MAIL_STREET_NUMBER,
                D.LOCATION_STREET_NUMBER         = S.LOCATION_STREET_NUMBER,
                D.NON_NOTIFIER_TEXT              = S.NON_NOTIFIER_TEXT,
                D.ACCESSIBILITY_TEXT             = S.ACCESSIBILITY_TEXT,
                D.STATE_DISTRICT_TEXT            = S.STATE_DISTRICT_TEXT,
                D.INTRNL_NOTES                   = S.INTRNL_NOTES,
                D.SHORT_TERM_INTRNL_NOTES        = S.SHORT_TERM_INTRNL_NOTES,
                D.NATURE_OF_BUSINESS_TEXT        = S.NATURE_OF_BUSINESS_TEXT,
                D.TSD_DATE                       = S.TSD_DATE,
                D.UNIVERSAL_WASTE_DEST_FACILITY  = S.UNIVERSAL_WASTE_DEST_FACILITY,
                D.STATE_WASTE_GENERATOR_OWNER    = S.STATE_WASTE_GENERATOR_OWNER,
                D.STATE_WASTE_GENERATOR          = S.STATE_WASTE_GENERATOR,
                D.FED_WASTE_GENERATOR_OWNER      = S.FED_WASTE_GENERATOR_OWNER,
                D.FED_WASTE_GENERATOR            = S.FED_WASTE_GENERATOR,
                D.RECOGNIZED_TRADER_IMPORTER_IND = S.RECOGNIZED_TRADER_IMPORTER_IND,
                D.RECOGNIZED_TRADER_EXPORTER_IND = S.RECOGNIZED_TRADER_EXPORTER_IND,
                D.SLAB_IMPORTER_IND              = S.SLAB_IMPORTER_IND,
                D.SLAB_EXPORTER_IND              = S.SLAB_EXPORTER_IND,
                D.RECYCLER_ACT_NONSTORAGE        = S.RECYCLER_ACT_NONSTORAGE,
                D.MANIFEST_BROKER                = S.MANIFEST_BROKER,
                D.ACKNOWLEDGE_FLAG_IND           = S.ACKNOWLEDGE_FLAG_IND,
                D.INCLUDE_IN_NATIONAL_REPORT_IND = S.INCLUDE_IN_NATIONAL_REPORT_IND,
                D.LQHUW_IND                      = S.LQHUW_IND,
                D.HD_REPORT_CYCLE_YEAR           = S.HD_REPORT_CYCLE_YEAR,
                D.HEALTHCARE_FAC                 = S.HEALTHCARE_FAC,
                D.REVERSE_DISTRIBUTOR            = S.REVERSE_DISTRIBUTOR,
                D.SUBPART_P_WITHDRAWAL           = S.SUBPART_P_WITHDRAWAL,
                D.RECYCLER_IND                   = S.RECYCLER_IND
        WHEN NOT MATCHED THEN
            INSERT
            (HD_HBASIC_ID,
             TRANSACTION_CODE,
             ACTIVITY_LOCATION,
             SEQ_NUMBER,
             SOURCE_TYPE,
             RECEIVE_DATE,
             HANDLER_NAME,
             ACKNOWLEDGE_DATE,
             NON_NOTIFIER,
             OFF_SITE_RECEIPT,
             ACCESSIBILITY,
             COUNTY_CODE_OWNER,
             COUNTY_CODE,
             NOTES,
             ACKNOWLEDGE_FLAG,
             LOCATION_STREET1,
             LOCATION_STREET2,
             LOCATION_CITY,
             LOCATION_STATE,
             LOCATION_COUNTRY,
             LOCATION_ZIP,
             MAIL_STREET1,
             MAIL_STREET2,
             MAIL_CITY,
             MAIL_STATE,
             MAIL_COUNTRY,
             MAIL_ZIP,
             CONTACT_FIRST_NAME,
             CONTACT_MIDDLE_INITIAL,
             CONTACT_LAST_NAME,
             CONTACT_ORG_NAME,
             CONTACT_TITLE,
             CONTACT_EMAIL_ADDRESS,
             CONTACT_PHONE,
             CONTACT_PHONE_EXT,
             CONTACT_FAX,
             CONTACT_STREET1,
             CONTACT_STREET2,
             CONTACT_CITY,
             CONTACT_STATE,
             CONTACT_COUNTRY,
             CONTACT_ZIP,
             PCONTACT_FIRST_NAME,
             PCONTACT_MIDDLE_NAME,
             PCONTACT_LAST_NAME,
             PCONTACT_ORG_NAME,
             PCONTACT_TITLE,
             PCONTACT_EMAIL_ADDRESS,
             PCONTACT_PHONE,
             PCONTACT_PHONE_EXT,
             PCONTACT_FAX,
             PCONTACT_STREET1,
             PCONTACT_STREET2,
             PCONTACT_CITY,
             PCONTACT_STATE,
             PCONTACT_COUNTRY,
             PCONTACT_ZIP,
             USED_OIL_BURNER,
             USED_OIL_PROCESSOR,
             USED_OIL_REFINER,
             USED_OIL_MARKET_BURNER,
             USED_OIL_SPEC_MARKETER,
             USED_OIL_TRANSFER_FACILITY,
             USED_OIL_TRANSPORTER,
             LAND_TYPE,
             STATE_DISTRICT_OWNER,
             STATE_DISTRICT,
             IMPORTER_ACTIVITY,
             MIXED_WASTE_GENERATOR,
             RECYCLER_ACTIVITY,
             TRANSPORTER_ACTIVITY,
             TSD_ACTIVITY,
             UNDERGROUND_INJECTION_ACTIVITY,
             ONSITE_BURNER_EXEMPTION,
             FURNACE_EXEMPTION,
             SHORT_TERM_GEN_IND,
             TRANSFER_FACILITY_IND,
             COLLEGE_IND,
             HOSPITAL_IND,
             NON_PROFIT_IND,
             WITHDRAWAL_IND,
             TRANS_CODE,
             NOTIFICATION_RSN_CODE,
             EFFC_DATE,
             FINANCIAL_ASSURANCE_IND,
             MAIL_STREET_NUMBER,
             LOCATION_STREET_NUMBER,
             NON_NOTIFIER_TEXT,
             ACCESSIBILITY_TEXT,
             STATE_DISTRICT_TEXT,
             INTRNL_NOTES,
             SHORT_TERM_INTRNL_NOTES,
             NATURE_OF_BUSINESS_TEXT,
             TSD_DATE,
             UNIVERSAL_WASTE_DEST_FACILITY,
             STATE_WASTE_GENERATOR_OWNER,
             STATE_WASTE_GENERATOR,
             FED_WASTE_GENERATOR_OWNER,
             FED_WASTE_GENERATOR,
             RECOGNIZED_TRADER_IMPORTER_IND,
             RECOGNIZED_TRADER_EXPORTER_IND,
             SLAB_IMPORTER_IND,
             SLAB_EXPORTER_IND,
             RECYCLER_ACT_NONSTORAGE,
             MANIFEST_BROKER,
             ACKNOWLEDGE_FLAG_IND,
             INCLUDE_IN_NATIONAL_REPORT_IND,
             LQHUW_IND,
             HD_REPORT_CYCLE_YEAR,
             HEALTHCARE_FAC,
             REVERSE_DISTRIBUTOR,
             SUBPART_P_WITHDRAWAL,
             RECYCLER_IND)
            VALUES (S.WH_HD_HBASIC_ID,
                    S.TRANSACTION_CODE,
                    S.ACTIVITY_LOCATION,
                    S.SEQ_NUMBER,
                    S.SOURCE_TYPE,
                    S.RECEIVE_DATE,
                    S.HANDLER_NAME,
                    S.ACKNOWLEDGE_DATE,
                    S.NON_NOTIFIER,
                    S.OFF_SITE_RECEIPT,
                    S.ACCESSIBILITY,
                    S.COUNTY_CODE_OWNER,
                    S.COUNTY_CODE,
                    S.NOTES,
                    S.ACKNOWLEDGE_FLAG,
                    S.LOCATION_STREET1,
                    S.LOCATION_STREET2,
                    S.LOCATION_CITY,
                    S.LOCATION_STATE,
                    S.LOCATION_COUNTRY,
                    S.LOCATION_ZIP,
                    S.MAIL_STREET1,
                    S.MAIL_STREET2,
                    S.MAIL_CITY,
                    S.MAIL_STATE,
                    S.MAIL_COUNTRY,
                    S.MAIL_ZIP,
                    S.CONTACT_FIRST_NAME,
                    S.CONTACT_MIDDLE_INITIAL,
                    S.CONTACT_LAST_NAME,
                    S.CONTACT_ORG_NAME,
                    S.CONTACT_TITLE,
                    S.CONTACT_EMAIL_ADDRESS,
                    S.CONTACT_PHONE,
                    S.CONTACT_PHONE_EXT,
                    S.CONTACT_FAX,
                    S.CONTACT_STREET1,
                    S.CONTACT_STREET2,
                    S.CONTACT_CITY,
                    S.CONTACT_STATE,
                    S.CONTACT_COUNTRY,
                    S.CONTACT_ZIP,
                    S.PCONTACT_FIRST_NAME,
                    S.PCONTACT_MIDDLE_NAME,
                    S.PCONTACT_LAST_NAME,
                    S.PCONTACT_ORG_NAME,
                    S.PCONTACT_TITLE,
                    S.PCONTACT_EMAIL_ADDRESS,
                    S.PCONTACT_PHONE,
                    S.PCONTACT_PHONE_EXT,
                    S.PCONTACT_FAX,
                    S.PCONTACT_STREET1,
                    S.PCONTACT_STREET2,
                    S.PCONTACT_CITY,
                    S.PCONTACT_STATE,
                    S.PCONTACT_COUNTRY,
                    S.PCONTACT_ZIP,
                    S.USED_OIL_BURNER,
                    S.USED_OIL_PROCESSOR,
                    S.USED_OIL_REFINER,
                    S.USED_OIL_MARKET_BURNER,
                    S.USED_OIL_SPEC_MARKETER,
                    S.USED_OIL_TRANSFER_FACILITY,
                    S.USED_OIL_TRANSPORTER,
                    S.LAND_TYPE,
                    S.STATE_DISTRICT_OWNER,
                    S.STATE_DISTRICT,
                    S.IMPORTER_ACTIVITY,
                    S.MIXED_WASTE_GENERATOR,
                    S.RECYCLER_ACTIVITY,
                    S.TRANSPORTER_ACTIVITY,
                    S.TSD_ACTIVITY,
                    S.UNDERGROUND_INJECTION_ACTIVITY,
                    S.ONSITE_BURNER_EXEMPTION,
                    S.FURNACE_EXEMPTION,
                    S.SHORT_TERM_GEN_IND,
                    S.TRANSFER_FACILITY_IND,
                    S.COLLEGE_IND,
                    S.HOSPITAL_IND,
                    S.NON_PROFIT_IND,
                    S.WITHDRAWAL_IND,
                    S.TRANS_CODE,
                    S.NOTIFICATION_RSN_CODE,
                    S.EFFC_DATE,
                    S.FINANCIAL_ASSURANCE_IND,
                    S.MAIL_STREET_NUMBER,
                    S.LOCATION_STREET_NUMBER,
                    S.NON_NOTIFIER_TEXT,
                    S.ACCESSIBILITY_TEXT,
                    S.STATE_DISTRICT_TEXT,
                    S.INTRNL_NOTES,
                    S.SHORT_TERM_INTRNL_NOTES,
                    S.NATURE_OF_BUSINESS_TEXT,
                    S.TSD_DATE,
                    S.UNIVERSAL_WASTE_DEST_FACILITY,
                    S.STATE_WASTE_GENERATOR_OWNER,
                    S.STATE_WASTE_GENERATOR,
                    S.FED_WASTE_GENERATOR_OWNER,
                    S.FED_WASTE_GENERATOR,
                    S.RECOGNIZED_TRADER_IMPORTER_IND,
                    S.RECOGNIZED_TRADER_EXPORTER_IND,
                    S.SLAB_IMPORTER_IND,
                    S.SLAB_EXPORTER_IND,
                    S.RECYCLER_ACT_NONSTORAGE,
                    S.MANIFEST_BROKER,
                    S.ACKNOWLEDGE_FLAG_IND,
                    S.INCLUDE_IN_NATIONAL_REPORT_IND,
                    S.LQHUW_IND,
                    S.HD_REPORT_CYCLE_YEAR,
                    S.HEALTHCARE_FAC,
                    S.REVERSE_DISTRIBUTOR,
                    S.SUBPART_P_WITHDRAWAL,
                    S.RECYCLER_IND);
        IF @localTran = 1 AND XACT_STATE() = 1
        COMMIT TRAN LocalTran

END TRY
BEGIN CATCH

    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT

    SELECT  @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE()

    IF @localTran = 1 AND XACT_STATE() <> 0
        ROLLBACK TRAN

    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

END CATCH
    END
GO
/****** Object:  StoredProcedure [dbo].[HD_MERGE_HBASIC]    Script Date: 6/12/2019 2:50:58 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*************************************************************************************************
** ObjectName: HD_MERGE_HBASIC.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_HD_HBASIC table 
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  05/31/2019   ageery      Created.
**
***************************************************************************************************/ --
    CREATE PROCEDURE [dbo].[HD_MERGE_HBASIC] @HD_SUBM_ID varchar(40) AS
    BEGIN
        SET NOCOUNT ON;
SET XACT_ABORT,
    QUOTED_IDENTIFIER,
    ANSI_NULLS,
    ANSI_PADDING,
    ANSI_WARNINGS,
    ARITHABORT,
    CONCAT_NULL_YIELDS_NULL ON;
SET NUMERIC_ROUNDABORT OFF;

DECLARE @int INT;

DECLARE @localTran BIT
IF @@TRANCOUNT = 0
BEGIN
    SET @localTran = 1
    BEGIN TRANSACTION LocalTran
END

BEGIN TRY
        MERGE INTO RCRA_HD_HBASIC D
        USING (
            SELECT *
            FROM ETL_HD_BASIC_VW
            WHERE HD_SUBM_ID = @HD_SUBM_ID
        ) S
        ON (D.HD_HBASIC_ID = S.WH_HD_HBASIC_ID)
        WHEN MATCHED
            AND (
                    (D.FACILITY_IDENTIFIER IS NOT NULL AND S.FACILITY_IDENTIFIER IS NOT NULL AND
                     D.FACILITY_IDENTIFIER <> S.FACILITY_IDENTIFIER)
                    OR (D.FACILITY_IDENTIFIER IS NULL AND S.FACILITY_IDENTIFIER IS NOT NULL)
                    OR (D.FACILITY_IDENTIFIER IS NOT NULL AND S.FACILITY_IDENTIFIER IS NULL)
                    OR (D.EXTRACT_FLAG IS NOT NULL AND S.EXTRACT_FLAG IS NOT NULL AND D.EXTRACT_FLAG <> S.EXTRACT_FLAG)
                    OR (D.EXTRACT_FLAG IS NULL AND S.EXTRACT_FLAG IS NOT NULL)
                    OR (D.EXTRACT_FLAG IS NOT NULL AND S.EXTRACT_FLAG IS NULL)
                    OR
                    (D.TRANSACTION_CODE IS NOT NULL AND S.TRANSACTION_CODE IS NOT NULL AND
                     D.TRANSACTION_CODE <> S.TRANSACTION_CODE)
                    OR (D.TRANSACTION_CODE IS NULL AND S.TRANSACTION_CODE IS NOT NULL)
                    OR (D.TRANSACTION_CODE IS NOT NULL AND S.TRANSACTION_CODE IS NULL)
                )
            THEN
            UPDATE
            SET D.FACILITY_IDENTIFIER = S.FACILITY_IDENTIFIER,
                D.EXTRACT_FLAG        = S.EXTRACT_FLAG,
                D.TRANSACTION_CODE    = S.TRANSACTION_CODE
        WHEN NOT MATCHED THEN
            INSERT
            (TRANSACTION_CODE,
             HANDLER_ID,
             EXTRACT_FLAG,
             FACILITY_IDENTIFIER)
            VALUES (S.TRANSACTION_CODE,
                    S.HANDLER_ID,
                    S.EXTRACT_FLAG,
                    S.FACILITY_IDENTIFIER);
        IF @localTran = 1 AND XACT_STATE() = 1
        COMMIT TRAN LocalTran

END TRY
BEGIN CATCH

    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT

    SELECT  @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE()

    IF @localTran = 1 AND XACT_STATE() <> 0
        ROLLBACK TRAN

    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

END CATCH
    END
GO
/****** Object:  StoredProcedure [dbo].[HD_MERGE_LQG_CLOSURE]    Script Date: 6/12/2019 2:50:58 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*************************************************************************************************
** ObjectName: HD_MERGE_LQG_CLOSURE.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_HD_LQG_CLOSURE table 
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  05/31/2019   ageery      Created.
**
***************************************************************************************************/ --
    CREATE PROCEDURE [dbo].[HD_MERGE_LQG_CLOSURE] @HD_SUBM_ID varchar(40) AS
    BEGIN
        SET NOCOUNT ON;
SET XACT_ABORT,
    QUOTED_IDENTIFIER,
    ANSI_NULLS,
    ANSI_PADDING,
    ANSI_WARNINGS,
    ARITHABORT,
    CONCAT_NULL_YIELDS_NULL ON;
SET NUMERIC_ROUNDABORT OFF;

DECLARE @int INT;

DECLARE @localTran BIT
IF @@TRANCOUNT = 0
BEGIN
    SET @localTran = 1
    BEGIN TRANSACTION LocalTran
END

BEGIN TRY
        MERGE INTO RCRA_HD_LQG_CLOSURE D
        USING (SELECT *
               FROM ETL_HD_LQG_CLOSURE
               WHERE HD_SUBM_ID = @HD_SUBM_ID) S
        ON (D.HD_LQG_CLOSURE_ID = S.WH_HD_LQG_CLOSURE_ID)
        WHEN MATCHED
            AND (
                    (D.TRANSACTION_CODE IS NOT NULL AND S.TRANSACTION_CODE IS NOT NULL AND
                     D.TRANSACTION_CODE <> S.TRANSACTION_CODE)
                    OR (D.TRANSACTION_CODE IS NULL AND S.TRANSACTION_CODE IS NOT NULL)
                    OR (D.TRANSACTION_CODE IS NOT NULL AND S.TRANSACTION_CODE IS NULL)
                    OR (D.CLOSURE_TYPE IS NOT NULL AND S.CLOSURE_TYPE IS NOT NULL AND D.CLOSURE_TYPE <> S.CLOSURE_TYPE)
                    OR (D.CLOSURE_TYPE IS NULL AND S.CLOSURE_TYPE IS NOT NULL)
                    OR (D.CLOSURE_TYPE IS NOT NULL AND S.CLOSURE_TYPE IS NULL)
                    OR (D.EXPECTED_CLOSURE_DATE IS NOT NULL AND S.EXPECTED_CLOSURE_DATE IS NOT NULL AND
                        D.EXPECTED_CLOSURE_DATE <> S.EXPECTED_CLOSURE_DATE)
                    OR (D.EXPECTED_CLOSURE_DATE IS NULL AND S.EXPECTED_CLOSURE_DATE IS NOT NULL)
                    OR (D.EXPECTED_CLOSURE_DATE IS NOT NULL AND S.EXPECTED_CLOSURE_DATE IS NULL)
                    OR
                    (D.NEW_CLOSURE_DATE IS NOT NULL AND S.NEW_CLOSURE_DATE IS NOT NULL AND
                     D.NEW_CLOSURE_DATE <> S.NEW_CLOSURE_DATE)
                    OR (D.NEW_CLOSURE_DATE IS NULL AND S.NEW_CLOSURE_DATE IS NOT NULL)
                    OR (D.NEW_CLOSURE_DATE IS NOT NULL AND S.NEW_CLOSURE_DATE IS NULL)
                    OR (D.DATE_CLOSED IS NOT NULL AND S.DATE_CLOSED IS NOT NULL AND D.DATE_CLOSED <> S.DATE_CLOSED)
                    OR (D.DATE_CLOSED IS NULL AND S.DATE_CLOSED IS NOT NULL)
                    OR (D.DATE_CLOSED IS NOT NULL AND S.DATE_CLOSED IS NULL)
                    OR (D.IN_COMPLIANCE_IND IS NOT NULL AND S.IN_COMPLIANCE_IND IS NOT NULL AND
                        D.IN_COMPLIANCE_IND <> S.IN_COMPLIANCE_IND)
                    OR (D.IN_COMPLIANCE_IND IS NULL AND S.IN_COMPLIANCE_IND IS NOT NULL)
                    OR (D.IN_COMPLIANCE_IND IS NOT NULL AND S.IN_COMPLIANCE_IND IS NULL)
                ) THEN
            UPDATE
            SET D.TRANSACTION_CODE      = S.TRANSACTION_CODE,
                D.CLOSURE_TYPE          = S.CLOSURE_TYPE,
                D.EXPECTED_CLOSURE_DATE = S.EXPECTED_CLOSURE_DATE,
                D.NEW_CLOSURE_DATE      = S.NEW_CLOSURE_DATE,
                D.DATE_CLOSED           = S.DATE_CLOSED,
                D.IN_COMPLIANCE_IND     = s.IN_COMPLIANCE_IND
        WHEN NOT MATCHED THEN
            INSERT (HD_HANDLER_ID,
                    TRANSACTION_CODE,
                    CLOSURE_TYPE,
                    EXPECTED_CLOSURE_DATE,
                    NEW_CLOSURE_DATE,
                    DATE_CLOSED,
                    IN_COMPLIANCE_IND)
            VALUES (S.WH_HD_HANDLER_ID,
                    S.TRANSACTION_CODE,
                    S.CLOSURE_TYPE,
                    S.EXPECTED_CLOSURE_DATE,
                    S.NEW_CLOSURE_DATE,
                    S.DATE_CLOSED,
                    S.IN_COMPLIANCE_IND);
        IF @localTran = 1 AND XACT_STATE() = 1
        COMMIT TRAN LocalTran

END TRY
BEGIN CATCH

    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT

    SELECT  @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE()

    IF @localTran = 1 AND XACT_STATE() <> 0
        ROLLBACK TRAN

    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

END CATCH
    END
GO
/****** Object:  StoredProcedure [dbo].[HD_MERGE_LQG_CONSOLIDATION]    Script Date: 6/12/2019 2:50:58 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*************************************************************************************************
** ObjectName: HD_MERGE_LQG_CONSOLIDATION.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_HD_LQG_CONSOLIDATION table 
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  05/31/2019   ageery      Created.
**
***************************************************************************************************/ --
    CREATE PROCEDURE [dbo].[HD_MERGE_LQG_CONSOLIDATION] @HD_SUBM_ID varchar(40) AS
    BEGIN
        SET NOCOUNT ON;
SET XACT_ABORT,
    QUOTED_IDENTIFIER,
    ANSI_NULLS,
    ANSI_PADDING,
    ANSI_WARNINGS,
    ARITHABORT,
    CONCAT_NULL_YIELDS_NULL ON;
SET NUMERIC_ROUNDABORT OFF;

DECLARE @int INT;

DECLARE @localTran BIT
IF @@TRANCOUNT = 0
BEGIN
    SET @localTran = 1
    BEGIN TRANSACTION LocalTran
END

BEGIN TRY
        MERGE INTO RCRA_HD_LQG_CONSOLIDATION D
        USING (SELECT *
               FROM ETL_HD_LQG_CONSOLIDATION_VW
               WHERE HD_SUBM_ID = @HD_SUBM_ID) S
        ON (D.HD_LQG_CONSOLIDATION_ID = S.HD_LQG_CONSOLIDATION_ID)
        WHEN MATCHED
            AND (
                    (D.TRANSACTION_CODE IS NOT NULL AND S.TRANSACTION_CODE IS NOT NULL AND
                     D.TRANSACTION_CODE <> S.TRANSACTION_CODE)
                    OR (D.TRANSACTION_CODE IS NULL AND S.TRANSACTION_CODE IS NOT NULL)
                    OR (D.TRANSACTION_CODE IS NOT NULL AND S.TRANSACTION_CODE IS NULL)
                    OR (D.SEQ_NUMBER IS NOT NULL AND S.SEQ_NUMBER IS NOT NULL AND D.SEQ_NUMBER <> S.SEQ_NUMBER)
                    OR (D.SEQ_NUMBER IS NULL AND S.SEQ_NUMBER IS NOT NULL)
                    OR (D.SEQ_NUMBER IS NOT NULL AND S.SEQ_NUMBER IS NULL)
                    OR (D.HANDLER_ID IS NOT NULL AND S.HANDLER_ID IS NOT NULL AND D.HANDLER_ID <> S.HANDLER_ID)
                    OR (D.HANDLER_ID IS NULL AND S.HANDLER_ID IS NOT NULL)
                    OR (D.HANDLER_ID IS NOT NULL AND S.HANDLER_ID IS NULL)
                    OR (D.HANDLER_NAME IS NOT NULL AND S.HANDLER_NAME IS NOT NULL AND D.HANDLER_NAME <> S.HANDLER_NAME)
                    OR (D.HANDLER_NAME IS NULL AND S.HANDLER_NAME IS NOT NULL)
                    OR (D.HANDLER_NAME IS NOT NULL AND S.HANDLER_NAME IS NULL)
                    OR (D.MAIL_STREET_NUMBER IS NOT NULL AND S.MAIL_STREET_NUMBER IS NOT NULL AND
                        D.MAIL_STREET_NUMBER <> S.MAIL_STREET_NUMBER)
                    OR (D.MAIL_STREET_NUMBER IS NULL AND S.MAIL_STREET_NUMBER IS NOT NULL)
                    OR (D.MAIL_STREET_NUMBER IS NOT NULL AND S.MAIL_STREET_NUMBER IS NULL)
                    OR (D.MAIL_STREET1 IS NOT NULL AND S.MAIL_STREET1 IS NOT NULL AND D.MAIL_STREET1 <> S.MAIL_STREET1)
                    OR (D.MAIL_STREET1 IS NULL AND S.MAIL_STREET1 IS NOT NULL)
                    OR (D.MAIL_STREET1 IS NOT NULL AND S.MAIL_STREET1 IS NULL)
                    OR (D.MAIL_STREET2 IS NOT NULL AND S.MAIL_STREET2 IS NOT NULL AND D.MAIL_STREET2 <> S.MAIL_STREET2)
                    OR (D.MAIL_STREET2 IS NULL AND S.MAIL_STREET2 IS NOT NULL)
                    OR (D.MAIL_STREET2 IS NOT NULL AND S.MAIL_STREET2 IS NULL)
                    OR (D.MAIL_CITY IS NOT NULL AND S.MAIL_CITY IS NOT NULL AND D.MAIL_CITY <> S.MAIL_CITY)
                    OR (D.MAIL_CITY IS NULL AND S.MAIL_CITY IS NOT NULL)
                    OR (D.MAIL_CITY IS NOT NULL AND S.MAIL_CITY IS NULL)
                    OR (D.MAIL_STATE IS NOT NULL AND S.MAIL_STATE IS NOT NULL AND D.MAIL_STATE <> S.MAIL_STATE)
                    OR (D.MAIL_STATE IS NULL AND S.MAIL_STATE IS NOT NULL)
                    OR (D.MAIL_STATE IS NOT NULL AND S.MAIL_STATE IS NULL)
                    OR (D.MAIL_COUNTRY IS NOT NULL AND S.MAIL_COUNTRY IS NOT NULL AND D.MAIL_COUNTRY <> S.MAIL_COUNTRY)
                    OR (D.MAIL_COUNTRY IS NULL AND S.MAIL_COUNTRY IS NOT NULL)
                    OR (D.MAIL_COUNTRY IS NOT NULL AND S.MAIL_COUNTRY IS NULL)
                    OR (D.MAIL_ZIP IS NOT NULL AND S.MAIL_ZIP IS NOT NULL AND D.MAIL_ZIP <> S.MAIL_ZIP)
                    OR (D.MAIL_ZIP IS NULL AND S.MAIL_ZIP IS NOT NULL)
                    OR (D.MAIL_ZIP IS NOT NULL AND S.MAIL_ZIP IS NULL)
                    OR
                    (D.CONTACT_TITLE IS NOT NULL AND S.CONTACT_TITLE IS NOT NULL AND D.CONTACT_TITLE <> S.CONTACT_TITLE)
                    OR (D.CONTACT_TITLE IS NULL AND S.CONTACT_TITLE IS NOT NULL)
                    OR (D.CONTACT_TITLE IS NOT NULL AND S.CONTACT_TITLE IS NULL)
                    OR (D.CONTACT_EMAIL_ADDRESS IS NOT NULL AND S.CONTACT_EMAIL_ADDRESS IS NOT NULL AND
                        D.CONTACT_EMAIL_ADDRESS <> S.CONTACT_EMAIL_ADDRESS)
                    OR (D.CONTACT_EMAIL_ADDRESS IS NULL AND S.CONTACT_EMAIL_ADDRESS IS NOT NULL)
                    OR (D.CONTACT_EMAIL_ADDRESS IS NOT NULL AND S.CONTACT_EMAIL_ADDRESS IS NULL)
                    OR
                    (D.CONTACT_PHONE IS NOT NULL AND S.CONTACT_PHONE IS NOT NULL AND D.CONTACT_PHONE <> S.CONTACT_PHONE)
                    OR (D.CONTACT_PHONE IS NULL AND S.CONTACT_PHONE IS NOT NULL)
                    OR (D.CONTACT_PHONE IS NOT NULL AND S.CONTACT_PHONE IS NULL)
                    OR (D.CONTACT_PHONE_EXT IS NOT NULL AND S.CONTACT_PHONE_EXT IS NOT NULL AND
                        D.CONTACT_PHONE_EXT <> S.CONTACT_PHONE_EXT)
                    OR (D.CONTACT_PHONE_EXT IS NULL AND S.CONTACT_PHONE_EXT IS NOT NULL)
                    OR (D.CONTACT_PHONE_EXT IS NOT NULL AND S.CONTACT_PHONE_EXT IS NULL)
                    OR (D.CONTACT_FAX IS NOT NULL AND S.CONTACT_FAX IS NOT NULL AND D.CONTACT_FAX <> S.CONTACT_FAX)
                    OR (D.CONTACT_FAX IS NULL AND S.CONTACT_FAX IS NOT NULL)
                    OR (D.CONTACT_FAX IS NOT NULL AND S.CONTACT_FAX IS NULL)
                ) THEN
            UPDATE
            SET D.TRANSACTION_CODE      = S.TRANSACTION_CODE,
                D.SEQ_NUMBER            = S.SEQ_NUMBER,
                D.HANDLER_ID            = S.HANDLER_ID,
                D.HANDLER_NAME          = S.HANDLER_NAME,
                D.MAIL_STREET_NUMBER    = S.MAIL_STREET_NUMBER,
                D.MAIL_STREET1          = S.MAIL_STREET1,
                D.MAIL_STREET2          = S.MAIL_STREET2,
                D.MAIL_CITY             = S.MAIL_CITY,
                D.MAIL_STATE            = S.MAIL_STATE,
                D.MAIL_COUNTRY          = S.MAIL_COUNTRY,
                D.MAIL_ZIP              = S.MAIL_ZIP,
                D.CONTACT_TITLE         = S.CONTACT_TITLE,
                D.CONTACT_EMAIL_ADDRESS = S.CONTACT_EMAIL_ADDRESS,
                D.CONTACT_PHONE         = S.CONTACT_PHONE,
                D.CONTACT_PHONE_EXT     = S.CONTACT_PHONE_EXT,
                D.CONTACT_FAX           = S.CONTACT_FAX
        WHEN NOT MATCHED THEN
            INSERT (HD_HANDLER_ID,
                    TRANSACTION_CODE,
                    SEQ_NUMBER,
                    HANDLER_ID,
                    HANDLER_NAME,
                    MAIL_STREET_NUMBER,
                    MAIL_STREET1,
                    MAIL_STREET2,
                    MAIL_CITY,
                    MAIL_STATE,
                    MAIL_COUNTRY,
                    MAIL_ZIP,
                    CONTACT_TITLE,
                    CONTACT_EMAIL_ADDRESS,
                    CONTACT_PHONE,
                    CONTACT_PHONE_EXT,
                    CONTACT_FAX)
            VALUES (S.HD_HANDLER_ID,
                    S.TRANSACTION_CODE,
                    S.SEQ_NUMBER,
                    S.HANDLER_ID,
                    S.HANDLER_NAME,
                    S.MAIL_STREET_NUMBER,
                    S.MAIL_STREET1,
                    S.MAIL_STREET2,
                    S.MAIL_CITY,
                    S.MAIL_STATE,
                    S.MAIL_COUNTRY,
                    S.MAIL_ZIP,
                    S.CONTACT_TITLE,
                    S.CONTACT_EMAIL_ADDRESS,
                    S.CONTACT_PHONE,
                    S.CONTACT_PHONE_EXT,
                    S.CONTACT_FAX);
        IF @localTran = 1 AND XACT_STATE() = 1
        COMMIT TRAN LocalTran

END TRY
BEGIN CATCH

    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT

    SELECT  @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE()

    IF @localTran = 1 AND XACT_STATE() <> 0
        ROLLBACK TRAN

    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

END CATCH
    END
GO
/****** Object:  StoredProcedure [dbo].[HD_MERGE_NAICS]    Script Date: 6/12/2019 2:50:58 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*************************************************************************************************
** ObjectName: HD_MERGE_NAICS.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_HD_NAICS table 
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  05/31/2019   ageery      Created.
**
***************************************************************************************************/ --
    CREATE PROCEDURE [dbo].[HD_MERGE_NAICS] @HD_SUBM_ID varchar(40) AS
    BEGIN
        SET NOCOUNT ON;
SET XACT_ABORT,
    QUOTED_IDENTIFIER,
    ANSI_NULLS,
    ANSI_PADDING,
    ANSI_WARNINGS,
    ARITHABORT,
    CONCAT_NULL_YIELDS_NULL ON;
SET NUMERIC_ROUNDABORT OFF;

DECLARE @int INT;

DECLARE @localTran BIT
IF @@TRANCOUNT = 0
BEGIN
    SET @localTran = 1
    BEGIN TRANSACTION LocalTran
END

BEGIN TRY
        MERGE INTO RCRA_HD_NAICS D
        USING (SELECT *
               FROM ETL_HD_NAICS_VW
               WHERE HD_SUBM_ID = @HD_SUBM_ID) S
        ON (D.HD_NAICS_ID = S.WH_HD_NAICS_ID)
        WHEN MATCHED
            AND (
                    (D.TRANSACTION_CODE IS NOT NULL AND S.TRANSACTION_CODE IS NOT NULL AND
                     D.TRANSACTION_CODE <> S.TRANSACTION_CODE)
                    OR (D.TRANSACTION_CODE IS NULL AND S.TRANSACTION_CODE IS NOT NULL)
                    OR (D.TRANSACTION_CODE IS NOT NULL AND S.TRANSACTION_CODE IS NULL)
                    OR (D.NAICS_OWNER IS NOT NULL AND S.NAICS_OWNER IS NOT NULL AND D.NAICS_OWNER <> S.NAICS_OWNER)
                    OR (D.NAICS_OWNER IS NULL AND S.NAICS_OWNER IS NOT NULL)
                    OR (D.NAICS_OWNER IS NOT NULL AND S.NAICS_OWNER IS NULL)
                    OR (D.NAICS_CODE IS NOT NULL AND S.NAICS_CODE IS NOT NULL AND D.NAICS_CODE <> S.NAICS_CODE)
                    OR (D.NAICS_CODE IS NULL AND S.NAICS_CODE IS NOT NULL)
                    OR (D.NAICS_CODE IS NOT NULL AND S.NAICS_CODE IS NULL)
                ) THEN
            UPDATE
            SET D.TRANSACTION_CODE = S.TRANSACTION_CODE,
                D.NAICS_OWNER      = S.NAICS_OWNER,
                D.NAICS_CODE       = S.NAICS_CODE
        WHEN NOT MATCHED THEN
            INSERT (HD_HANDLER_ID,
                    TRANSACTION_CODE,
                    NAICS_SEQ,
                    NAICS_OWNER,
                    NAICS_CODE)
            VALUES (S.WH_HD_HANDLER_ID,
                    S.TRANSACTION_CODE,
                    S.NAICS_SEQ,
                    S.NAICS_OWNER,
                    S.NAICS_CODE);
        IF @localTran = 1 AND XACT_STATE() = 1
        COMMIT TRAN LocalTran

END TRY
BEGIN CATCH

    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT

    SELECT  @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE()

    IF @localTran = 1 AND XACT_STATE() <> 0
        ROLLBACK TRAN

    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

END CATCH
    END
GO
/****** Object:  StoredProcedure [dbo].[HD_MERGE_OTHER_ID]    Script Date: 6/12/2019 2:50:58 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*************************************************************************************************
** ObjectName: HD_MERGE_OTHER_ID.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_HD_OTHER_ID table 
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  05/31/2019   ageery      Created.
**
***************************************************************************************************/ --
    CREATE PROCEDURE [dbo].[HD_MERGE_OTHER_ID] @HD_SUBM_ID varchar(40) AS
    BEGIN
        SET NOCOUNT ON;
SET XACT_ABORT,
    QUOTED_IDENTIFIER,
    ANSI_NULLS,
    ANSI_PADDING,
    ANSI_WARNINGS,
    ARITHABORT,
    CONCAT_NULL_YIELDS_NULL ON;
SET NUMERIC_ROUNDABORT OFF;

DECLARE @int INT;

DECLARE @localTran BIT
IF @@TRANCOUNT = 0
BEGIN
    SET @localTran = 1
    BEGIN TRANSACTION LocalTran
END

BEGIN TRY
        MERGE INTO RCRA_HD_OTHER_ID D
        USING (SELECT *
               FROM ETL_HD_OTHER_ID_VW
               WHERE HD_SUBM_ID = @HD_SUBM_ID) S
        ON (D.HD_OTHER_ID_ID = S.WH_HD_OTHER_ID_ID)
        WHEN MATCHED
            AND (
                    (D.TRANSACTION_CODE IS NOT NULL AND S.TRANSACTION_CODE IS NOT NULL AND
                     D.TRANSACTION_CODE <> S.TRANSACTION_CODE)
                    OR (D.TRANSACTION_CODE IS NULL AND S.TRANSACTION_CODE IS NOT NULL)
                    OR (D.TRANSACTION_CODE IS NOT NULL AND S.TRANSACTION_CODE IS NULL)
                    OR (D.RELATIONSHIP_OWNER IS NOT NULL AND S.RELATIONSHIP_OWNER IS NOT NULL AND
                        D.RELATIONSHIP_OWNER <> S.RELATIONSHIP_OWNER)
                    OR (D.RELATIONSHIP_OWNER IS NULL AND S.RELATIONSHIP_OWNER IS NOT NULL)
                    OR (D.RELATIONSHIP_OWNER IS NOT NULL AND S.RELATIONSHIP_OWNER IS NULL)
                    OR (D.RELATIONSHIP_TYPE IS NOT NULL AND S.RELATIONSHIP_TYPE IS NOT NULL AND
                        D.RELATIONSHIP_TYPE <> S.RELATIONSHIP_TYPE)
                    OR (D.RELATIONSHIP_TYPE IS NULL AND S.RELATIONSHIP_TYPE IS NOT NULL)
                    OR (D.RELATIONSHIP_TYPE IS NOT NULL AND S.RELATIONSHIP_TYPE IS NULL)
                    OR
                    (D.SAME_FACILITY IS NOT NULL AND S.SAME_FACILITY IS NOT NULL AND D.SAME_FACILITY <> S.SAME_FACILITY)
                    OR (D.SAME_FACILITY IS NULL AND S.SAME_FACILITY IS NOT NULL)
                    OR (D.SAME_FACILITY IS NOT NULL AND S.SAME_FACILITY IS NULL)
                    OR (D.NOTES IS NOT NULL AND S.NOTES IS NOT NULL AND D.NOTES <> S.NOTES)
                    OR (D.NOTES IS NULL AND S.NOTES IS NOT NULL)
                    OR (D.NOTES IS NOT NULL AND S.NOTES IS NULL)
                ) THEN
            UPDATE
            SET D.TRANSACTION_CODE   = S.TRANSACTION_CODE,
                D.RELATIONSHIP_OWNER = S.RELATIONSHIP_OWNER,
                D.RELATIONSHIP_TYPE  = S.RELATIONSHIP_TYPE,
                D.SAME_FACILITY      = S.SAME_FACILITY,
                D.NOTES              = S.NOTES
        WHEN NOT MATCHED THEN
            INSERT (HD_HBASIC_ID,
                    TRANSACTION_CODE,
                    OTHER_ID,
                    RELATIONSHIP_OWNER,
                    RELATIONSHIP_TYPE,
                    SAME_FACILITY,
                    NOTES)
            VALUES (S.WH_HD_HBASIC_ID,
                    S.TRANSACTION_CODE,
                    S.OTHER_ID,
                    S.RELATIONSHIP_OWNER,
                    S.RELATIONSHIP_TYPE,
                    S.SAME_FACILITY,
                    S.NOTES);
        IF @localTran = 1 AND XACT_STATE() = 1
        COMMIT TRAN LocalTran

END TRY
BEGIN CATCH

    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT

    SELECT  @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE()

    IF @localTran = 1 AND XACT_STATE() <> 0
        ROLLBACK TRAN

    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

END CATCH
    END
GO
/****** Object:  StoredProcedure [dbo].[HD_MERGE_OWNEROP]    Script Date: 6/12/2019 2:50:58 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*************************************************************************************************
** ObjectName: HD_MERGE_OWNEROP.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_HD_OWNEROP table 
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  05/31/2019   ageery      Created.
**
***************************************************************************************************/ --
    CREATE PROCEDURE [dbo].[HD_MERGE_OWNEROP] @HD_SUBM_ID varchar(40) AS
    BEGIN
        SET NOCOUNT ON;
SET XACT_ABORT,
    QUOTED_IDENTIFIER,
    ANSI_NULLS,
    ANSI_PADDING,
    ANSI_WARNINGS,
    ARITHABORT,
    CONCAT_NULL_YIELDS_NULL ON;
SET NUMERIC_ROUNDABORT OFF;

DECLARE @int INT;

DECLARE @localTran BIT
IF @@TRANCOUNT = 0
BEGIN
    SET @localTran = 1
    BEGIN TRANSACTION LocalTran
END

BEGIN TRY
        MERGE INTO RCRA_HD_OWNEROP D
        USING (SELECT *
               FROM ETL_HD_OWNEROP_VW
               WHERE HD_SUBM_ID = @HD_SUBM_ID) S
        ON (D.HD_OWNEROP_ID = S.WH_HD_OWNEROP_ID)
        WHEN MATCHED
            AND (
                    (D.TRANSACTION_CODE IS NOT NULL AND S.TRANSACTION_CODE IS NOT NULL AND
                     D.TRANSACTION_CODE <> S.TRANSACTION_CODE)
                    OR (D.TRANSACTION_CODE IS NULL AND S.TRANSACTION_CODE IS NOT NULL)
                    OR (D.TRANSACTION_CODE IS NOT NULL AND S.TRANSACTION_CODE IS NULL)
                    OR (D.OWNER_OP_SEQ IS NOT NULL AND S.OWNER_OP_SEQ IS NOT NULL AND D.OWNER_OP_SEQ <> S.OWNER_OP_SEQ)
                    OR (D.OWNER_OP_SEQ IS NULL AND S.OWNER_OP_SEQ IS NOT NULL)
                    OR (D.OWNER_OP_SEQ IS NOT NULL AND S.OWNER_OP_SEQ IS NULL)
                    OR (D.OWNER_OP_IND IS NOT NULL AND S.OWNER_OP_IND IS NOT NULL AND D.OWNER_OP_IND <> S.OWNER_OP_IND)
                    OR (D.OWNER_OP_IND IS NULL AND S.OWNER_OP_IND IS NOT NULL)
                    OR (D.OWNER_OP_IND IS NOT NULL AND S.OWNER_OP_IND IS NULL)
                    OR
                    (D.OWNER_OP_TYPE IS NOT NULL AND S.OWNER_OP_TYPE IS NOT NULL AND D.OWNER_OP_TYPE <> S.OWNER_OP_TYPE)
                    OR (D.OWNER_OP_TYPE IS NULL AND S.OWNER_OP_TYPE IS NOT NULL)
                    OR (D.OWNER_OP_TYPE IS NOT NULL AND S.OWNER_OP_TYPE IS NULL)
                    OR (D.DATE_BECAME_CURRENT IS NOT NULL AND S.DATE_BECAME_CURRENT IS NOT NULL AND
                        D.DATE_BECAME_CURRENT <> S.DATE_BECAME_CURRENT)
                    OR (D.DATE_BECAME_CURRENT IS NULL AND S.DATE_BECAME_CURRENT IS NOT NULL)
                    OR (D.DATE_BECAME_CURRENT IS NOT NULL AND S.DATE_BECAME_CURRENT IS NULL)
                    OR (D.DATE_ENDED_CURRENT IS NOT NULL AND S.DATE_ENDED_CURRENT IS NOT NULL AND
                        D.DATE_ENDED_CURRENT <> S.DATE_ENDED_CURRENT)
                    OR (D.DATE_ENDED_CURRENT IS NULL AND S.DATE_ENDED_CURRENT IS NOT NULL)
                    OR (D.DATE_ENDED_CURRENT IS NOT NULL AND S.DATE_ENDED_CURRENT IS NULL)
                    OR (D.NOTES IS NOT NULL AND S.NOTES IS NOT NULL AND D.NOTES <> S.NOTES)
                    OR (D.NOTES IS NULL AND S.NOTES IS NOT NULL)
                    OR (D.NOTES IS NOT NULL AND S.NOTES IS NULL)
                    OR (D.FIRST_NAME IS NOT NULL AND S.FIRST_NAME IS NOT NULL AND D.FIRST_NAME <> S.FIRST_NAME)
                    OR (D.FIRST_NAME IS NULL AND S.FIRST_NAME IS NOT NULL)
                    OR (D.FIRST_NAME IS NOT NULL AND S.FIRST_NAME IS NULL)
                    OR
                    (D.MIDDLE_INITIAL IS NOT NULL AND S.MIDDLE_INITIAL IS NOT NULL AND
                     D.MIDDLE_INITIAL <> S.MIDDLE_INITIAL)
                    OR (D.MIDDLE_INITIAL IS NULL AND S.MIDDLE_INITIAL IS NOT NULL)
                    OR (D.MIDDLE_INITIAL IS NOT NULL AND S.MIDDLE_INITIAL IS NULL)
                    OR (D.LAST_NAME IS NOT NULL AND S.LAST_NAME IS NOT NULL AND D.LAST_NAME <> S.LAST_NAME)
                    OR (D.LAST_NAME IS NULL AND S.LAST_NAME IS NOT NULL)
                    OR (D.LAST_NAME IS NOT NULL AND S.LAST_NAME IS NULL)
                    OR (D.ORG_NAME IS NOT NULL AND S.ORG_NAME IS NOT NULL AND D.ORG_NAME <> S.ORG_NAME)
                    OR (D.ORG_NAME IS NULL AND S.ORG_NAME IS NOT NULL)
                    OR (D.ORG_NAME IS NOT NULL AND S.ORG_NAME IS NULL)
                    OR (D.TITLE IS NOT NULL AND S.TITLE IS NOT NULL AND D.TITLE <> S.TITLE)
                    OR (D.TITLE IS NULL AND S.TITLE IS NOT NULL)
                    OR (D.TITLE IS NOT NULL AND S.TITLE IS NULL)
                    OR
                    (D.EMAIL_ADDRESS IS NOT NULL AND S.EMAIL_ADDRESS IS NOT NULL AND D.EMAIL_ADDRESS <> S.EMAIL_ADDRESS)
                    OR (D.EMAIL_ADDRESS IS NULL AND S.EMAIL_ADDRESS IS NOT NULL)
                    OR (D.EMAIL_ADDRESS IS NOT NULL AND S.EMAIL_ADDRESS IS NULL)
                    OR (D.PHONE IS NOT NULL AND S.PHONE IS NOT NULL AND D.PHONE <> S.PHONE)
                    OR (D.PHONE IS NULL AND S.PHONE IS NOT NULL)
                    OR (D.PHONE IS NOT NULL AND S.PHONE IS NULL)
                    OR (D.PHONE_EXT IS NOT NULL AND S.PHONE_EXT IS NOT NULL AND D.PHONE_EXT <> S.PHONE_EXT)
                    OR (D.PHONE_EXT IS NULL AND S.PHONE_EXT IS NOT NULL)
                    OR (D.PHONE_EXT IS NOT NULL AND S.PHONE_EXT IS NULL)
                    OR (D.FAX IS NOT NULL AND S.FAX IS NOT NULL AND D.FAX <> S.FAX)
                    OR (D.FAX IS NULL AND S.FAX IS NOT NULL)
                    OR (D.FAX IS NOT NULL AND S.FAX IS NULL)
                    OR (D.MAIL_ADDR_NUM_TXT IS NOT NULL AND S.MAIL_ADDR_NUM_TXT IS NOT NULL AND
                        D.MAIL_ADDR_NUM_TXT <> S.MAIL_ADDR_NUM_TXT)
                    OR (D.MAIL_ADDR_NUM_TXT IS NULL AND S.MAIL_ADDR_NUM_TXT IS NOT NULL)
                    OR (D.MAIL_ADDR_NUM_TXT IS NOT NULL AND S.MAIL_ADDR_NUM_TXT IS NULL)
                    OR (D.STREET1 IS NOT NULL AND S.STREET1 IS NOT NULL AND D.STREET1 <> S.STREET1)
                    OR (D.STREET1 IS NULL AND S.STREET1 IS NOT NULL)
                    OR (D.STREET1 IS NOT NULL AND S.STREET1 IS NULL)
                    OR (D.STREET2 IS NOT NULL AND S.STREET2 IS NOT NULL AND D.STREET2 <> S.STREET2)
                    OR (D.STREET2 IS NULL AND S.STREET2 IS NOT NULL)
                    OR (D.STREET2 IS NOT NULL AND S.STREET2 IS NULL)
                    OR (D.CITY IS NOT NULL AND S.CITY IS NOT NULL AND D.CITY <> S.CITY)
                    OR (D.CITY IS NULL AND S.CITY IS NOT NULL)
                    OR (D.CITY IS NOT NULL AND S.CITY IS NULL)
                    OR (D.STATE IS NOT NULL AND S.STATE IS NOT NULL AND D.STATE <> S.STATE)
                    OR (D.STATE IS NULL AND S.STATE IS NOT NULL)
                    OR (D.STATE IS NOT NULL AND S.STATE IS NULL)
                    OR (D.COUNTRY IS NOT NULL AND S.COUNTRY IS NOT NULL AND D.COUNTRY <> S.COUNTRY)
                    OR (D.COUNTRY IS NULL AND S.COUNTRY IS NOT NULL)
                    OR (D.COUNTRY IS NOT NULL AND S.COUNTRY IS NULL)
                    OR (D.ZIP IS NOT NULL AND S.ZIP IS NOT NULL AND D.ZIP <> S.ZIP)
                    OR (D.ZIP IS NULL AND S.ZIP IS NOT NULL)
                    OR (D.ZIP IS NOT NULL AND S.ZIP IS NULL)
                )
            THEN
            UPDATE
            SET D.TRANSACTION_CODE    = S.TRANSACTION_CODE,
                D.OWNER_OP_IND        = S.OWNER_OP_IND,
                D.OWNER_OP_TYPE       = S.OWNER_OP_TYPE,
                D.DATE_BECAME_CURRENT = S.DATE_BECAME_CURRENT,
                D.DATE_ENDED_CURRENT  = S.DATE_ENDED_CURRENT,
                D.NOTES               = S.NOTES,
                D.FIRST_NAME          = S.FIRST_NAME,
                D.MIDDLE_INITIAL      = S.MIDDLE_INITIAL,
                D.LAST_NAME           = S.LAST_NAME,
                D.ORG_NAME            = S.ORG_NAME,
                D.TITLE               = S.TITLE,
                D.EMAIL_ADDRESS       = S.EMAIL_ADDRESS,
                D.PHONE               = S.PHONE,
                D.PHONE_EXT           = S.PHONE_EXT,
                D.FAX                 = S.FAX,
                D.MAIL_ADDR_NUM_TXT   = S.MAIL_ADDR_NUM_TXT,
                D.STREET1             = S.STREET1,
                D.STREET2             = S.STREET2,
                D.CITY                = S.CITY,
                D.STATE               = S.STATE,
                D.COUNTRY             = S.COUNTRY,
                D.ZIP                 = S.ZIP
        WHEN NOT MATCHED THEN
            INSERT (HD_HANDLER_ID,
                    TRANSACTION_CODE,
                    OWNER_OP_SEQ,
                    OWNER_OP_IND,
                    OWNER_OP_TYPE,
                    DATE_BECAME_CURRENT,
                    DATE_ENDED_CURRENT,
                    NOTES,
                    FIRST_NAME,
                    MIDDLE_INITIAL,
                    LAST_NAME,
                    ORG_NAME,
                    TITLE,
                    EMAIL_ADDRESS,
                    PHONE,
                    PHONE_EXT,
                    FAX,
                    MAIL_ADDR_NUM_TXT,
                    STREET1,
                    STREET2,
                    CITY,
                    STATE,
                    COUNTRY,
                    ZIP)
            VALUES (S.WH_HD_HANDLER_ID,
                    S.TRANSACTION_CODE,
                    S.OWNER_OP_SEQ,
                    S.OWNER_OP_IND,
                    S.OWNER_OP_TYPE,
                    S.DATE_BECAME_CURRENT,
                    S.DATE_ENDED_CURRENT,
                    S.NOTES,
                    S.FIRST_NAME,
                    S.MIDDLE_INITIAL,
                    S.LAST_NAME,
                    S.ORG_NAME,
                    S.TITLE,
                    S.EMAIL_ADDRESS,
                    S.PHONE,
                    S.PHONE_EXT,
                    S.FAX,
                    S.MAIL_ADDR_NUM_TXT,
                    S.STREET1,
                    S.STREET2,
                    S.CITY,
                    S.STATE,
                    S.COUNTRY,
                    S.ZIP);
        IF @localTran = 1 AND XACT_STATE() = 1
        COMMIT TRAN LocalTran

END TRY
BEGIN CATCH

    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT

    SELECT  @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE()

    IF @localTran = 1 AND XACT_STATE() <> 0
        ROLLBACK TRAN

    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

END CATCH
    END
GO
/****** Object:  StoredProcedure [dbo].[HD_MERGE_SEC_MATERIAL_ACTIVITY]    Script Date: 6/12/2019 2:50:58 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*************************************************************************************************
** ObjectName: HD_MERGE_SEC_MATERIAL_ACTIVITY.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_HD_SEC_MATERIAL_ACTIVITY table 
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  05/31/2019   ageery      Created.
**
***************************************************************************************************/ --
    CREATE PROCEDURE [dbo].[HD_MERGE_SEC_MATERIAL_ACTIVITY] @HD_SUBM_ID varchar(40) AS
    BEGIN
        SET NOCOUNT ON;
SET XACT_ABORT,
    QUOTED_IDENTIFIER,
    ANSI_NULLS,
    ANSI_PADDING,
    ANSI_WARNINGS,
    ARITHABORT,
    CONCAT_NULL_YIELDS_NULL ON;
SET NUMERIC_ROUNDABORT OFF;

DECLARE @int INT;

DECLARE @localTran BIT
IF @@TRANCOUNT = 0
BEGIN
    SET @localTran = 1
    BEGIN TRANSACTION LocalTran
END

BEGIN TRY
        MERGE INTO RCRA_HD_SEC_MATERIAL_ACTIVITY D
        USING (SELECT *
               FROM ETL_HD_SEC_MAT_ACT_VW
               WHERE HD_SUBM_ID = @HD_SUBM_ID) S
        ON (D.HD_SEC_MATERIAL_ACTIVITY_ID = S.WH_HD_SEC_MATERIAL_ACTIVITY_ID)
        WHEN MATCHED
            AND (
                    (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NOT NULL AND D.TRANS_CODE <> S.TRANS_CODE)
                    OR (D.TRANS_CODE IS NULL AND S.TRANS_CODE IS NOT NULL)
                    OR (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NULL)
                    OR (D.HSM_SEQ_NUM IS NOT NULL AND S.HSM_SEQ_NUM IS NOT NULL AND D.HSM_SEQ_NUM <> S.HSM_SEQ_NUM)
                    OR (D.HSM_SEQ_NUM IS NULL AND S.HSM_SEQ_NUM IS NOT NULL)
                    OR (D.HSM_SEQ_NUM IS NOT NULL AND S.HSM_SEQ_NUM IS NULL)
                    OR (D.FAC_CODE_OWNER_NAME IS NOT NULL AND S.FAC_CODE_OWNER_NAME IS NOT NULL AND
                        D.FAC_CODE_OWNER_NAME <> S.FAC_CODE_OWNER_NAME)
                    OR (D.FAC_CODE_OWNER_NAME IS NULL AND S.FAC_CODE_OWNER_NAME IS NOT NULL)
                    OR (D.FAC_CODE_OWNER_NAME IS NOT NULL AND S.FAC_CODE_OWNER_NAME IS NULL)
                    OR
                    (D.FAC_TYPE_CODE IS NOT NULL AND S.FAC_TYPE_CODE IS NOT NULL AND D.FAC_TYPE_CODE <> S.FAC_TYPE_CODE)
                    OR (D.FAC_TYPE_CODE IS NULL AND S.FAC_TYPE_CODE IS NOT NULL)
                    OR (D.FAC_TYPE_CODE IS NOT NULL AND S.FAC_TYPE_CODE IS NULL)
                    OR (D.ESTIMATED_SHORT_TONS_QNTY IS NOT NULL AND S.ESTIMATED_SHORT_TONS_QNTY IS NOT NULL AND
                        D.ESTIMATED_SHORT_TONS_QNTY <> S.ESTIMATED_SHORT_TONS_QNTY)
                    OR (D.ESTIMATED_SHORT_TONS_QNTY IS NULL AND S.ESTIMATED_SHORT_TONS_QNTY IS NOT NULL)
                    OR (D.ESTIMATED_SHORT_TONS_QNTY IS NOT NULL AND S.ESTIMATED_SHORT_TONS_QNTY IS NULL)
                    OR (D.ACTL_SHORT_TONS_QNTY IS NOT NULL AND S.ACTL_SHORT_TONS_QNTY IS NOT NULL AND
                        D.ACTL_SHORT_TONS_QNTY <> S.ACTL_SHORT_TONS_QNTY)
                    OR (D.ACTL_SHORT_TONS_QNTY IS NULL AND S.ACTL_SHORT_TONS_QNTY IS NOT NULL)
                    OR (D.ACTL_SHORT_TONS_QNTY IS NOT NULL AND S.ACTL_SHORT_TONS_QNTY IS NULL)
                    OR (D.LAND_BASED_UNIT_IND IS NOT NULL AND S.LAND_BASED_UNIT_IND IS NOT NULL AND
                        D.LAND_BASED_UNIT_IND <> S.LAND_BASED_UNIT_IND)
                    OR (D.LAND_BASED_UNIT_IND IS NULL AND S.LAND_BASED_UNIT_IND IS NOT NULL)
                    OR (D.LAND_BASED_UNIT_IND IS NOT NULL AND S.LAND_BASED_UNIT_IND IS NULL)
                    OR (D.LAND_BASED_UNIT_IND_TEXT IS NOT NULL AND S.LAND_BASED_UNIT_IND_TEXT IS NOT NULL AND
                        D.LAND_BASED_UNIT_IND_TEXT <> S.LAND_BASED_UNIT_IND_TEXT)
                    OR (D.LAND_BASED_UNIT_IND_TEXT IS NULL AND S.LAND_BASED_UNIT_IND_TEXT IS NOT NULL)
                    OR (D.LAND_BASED_UNIT_IND_TEXT IS NOT NULL AND S.LAND_BASED_UNIT_IND_TEXT IS NULL)
                )
            THEN
            UPDATE
            SET D.TRANS_CODE                = S.TRANS_CODE,
                D.HSM_SEQ_NUM               = S.HSM_SEQ_NUM,
                D.FAC_CODE_OWNER_NAME       = S.FAC_CODE_OWNER_NAME,
                D.FAC_TYPE_CODE             = S.FAC_TYPE_CODE,
                D.ESTIMATED_SHORT_TONS_QNTY = S.ESTIMATED_SHORT_TONS_QNTY,
                D.ACTL_SHORT_TONS_QNTY      = S.ACTL_SHORT_TONS_QNTY,
                D.LAND_BASED_UNIT_IND       = S.LAND_BASED_UNIT_IND,
                D.LAND_BASED_UNIT_IND_TEXT  = S.LAND_BASED_UNIT_IND_TEXT
        WHEN NOT MATCHED THEN
            INSERT (HD_HANDLER_ID,
                    TRANS_CODE,
                    HSM_SEQ_NUM,
                    FAC_CODE_OWNER_NAME,
                    FAC_TYPE_CODE,
                    ESTIMATED_SHORT_TONS_QNTY,
                    ACTL_SHORT_TONS_QNTY,
                    LAND_BASED_UNIT_IND,
                    LAND_BASED_UNIT_IND_TEXT)
            VALUES (S.WH_HD_HANDLER_ID,
                    S.TRANS_CODE,
                    S.HSM_SEQ_NUM,
                    S.FAC_CODE_OWNER_NAME,
                    S.FAC_TYPE_CODE,
                    S.ESTIMATED_SHORT_TONS_QNTY,
                    S.ACTL_SHORT_TONS_QNTY,
                    S.LAND_BASED_UNIT_IND,
                    S.LAND_BASED_UNIT_IND_TEXT);
        IF @localTran = 1 AND XACT_STATE() = 1
        COMMIT TRAN LocalTran

END TRY
BEGIN CATCH

    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT

    SELECT  @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE()

    IF @localTran = 1 AND XACT_STATE() <> 0
        ROLLBACK TRAN

    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

END CATCH
    END
GO
/****** Object:  StoredProcedure [dbo].[HD_MERGE_SEC_WASTE_CODE]    Script Date: 6/12/2019 2:50:58 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*************************************************************************************************
** ObjectName: HD_MERGE_SEC_WASTE_CODE.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_HD_SEC_WASTE_CODE table 
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  05/31/2019   ageery      Created.
**
***************************************************************************************************/ --
    CREATE PROCEDURE [dbo].[HD_MERGE_SEC_WASTE_CODE] @HD_SUBM_ID varchar(40) AS
    BEGIN
        SET NOCOUNT ON;
SET XACT_ABORT,
    QUOTED_IDENTIFIER,
    ANSI_NULLS,
    ANSI_PADDING,
    ANSI_WARNINGS,
    ARITHABORT,
    CONCAT_NULL_YIELDS_NULL ON;
SET NUMERIC_ROUNDABORT OFF;

DECLARE @int INT;

DECLARE @localTran BIT
IF @@TRANCOUNT = 0
BEGIN
    SET @localTran = 1
    BEGIN TRANSACTION LocalTran
END

BEGIN TRY
        MERGE INTO RCRA_HD_SEC_WASTE_CODE D
        USING (SELECT *
               FROM ETL_HD_SEC_WASTE_CD_VW
               WHERE HD_SUBM_ID = @HD_SUBM_ID) S
        ON (D.HD_SEC_WASTE_CODE_ID = S.WH_HD_SEC_WASTE_CODE_ID)
        WHEN MATCHED
            AND (
                    (D.TRANSACTION_CODE IS NOT NULL AND S.TRANSACTION_CODE IS NOT NULL AND
                     D.TRANSACTION_CODE <> S.TRANSACTION_CODE)
                    OR (D.TRANSACTION_CODE IS NULL AND S.TRANSACTION_CODE IS NOT NULL)
                    OR (D.TRANSACTION_CODE IS NOT NULL AND S.TRANSACTION_CODE IS NULL)
                    OR
                    (D.WASTE_CODE_OWNER IS NOT NULL AND S.WASTE_CODE_OWNER IS NOT NULL AND
                     D.WASTE_CODE_OWNER <> S.WASTE_CODE_OWNER)
                    OR (D.WASTE_CODE_OWNER IS NULL AND S.WASTE_CODE_OWNER IS NOT NULL)
                    OR (D.WASTE_CODE_OWNER IS NOT NULL AND S.WASTE_CODE_OWNER IS NULL)
                    OR (D.WASTE_CODE_TYPE IS NOT NULL AND S.WASTE_CODE_TYPE IS NOT NULL AND
                        D.WASTE_CODE_TYPE <> S.WASTE_CODE_TYPE)
                    OR (D.WASTE_CODE_TYPE IS NULL AND S.WASTE_CODE_TYPE IS NOT NULL)
                    OR (D.WASTE_CODE_TYPE IS NOT NULL AND S.WASTE_CODE_TYPE IS NULL)
                )
            THEN
            UPDATE
            SET D.TRANSACTION_CODE = S.TRANSACTION_CODE,
                D.WASTE_CODE_OWNER = S.WASTE_CODE_OWNER,
                D.WASTE_CODE_TYPE  = S.WASTE_CODE_TYPE
        WHEN NOT MATCHED THEN
            INSERT (HD_SEC_MATERIAL_ACTIVITY_ID,
                    TRANSACTION_CODE,
                    WASTE_CODE_OWNER,
                    WASTE_CODE_TYPE)
            VALUES (S.WH_HD_SEC_MATERIAL_ACTIVITY_ID,
                    S.TRANSACTION_CODE,
                    S.WASTE_CODE_OWNER,
                    S.WASTE_CODE_TYPE);
        IF @localTran = 1 AND XACT_STATE() = 1
        COMMIT TRAN LocalTran

END TRY
BEGIN CATCH

    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT

    SELECT  @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE()

    IF @localTran = 1 AND XACT_STATE() <> 0
        ROLLBACK TRAN

    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

END CATCH
    END
GO
/****** Object:  StoredProcedure [dbo].[HD_MERGE_STATE_ACTIVITY]    Script Date: 6/12/2019 2:50:58 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*************************************************************************************************
** ObjectName: HD_MERGE_STATE_ACTIVITY.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_HD_STATE_ACTIVITY table 
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  05/31/2019   ageery      Created.
**
***************************************************************************************************/ --
    CREATE PROCEDURE [dbo].[HD_MERGE_STATE_ACTIVITY] @HD_SUBM_ID varchar(40) AS
    BEGIN
        SET NOCOUNT ON;
SET XACT_ABORT,
    QUOTED_IDENTIFIER,
    ANSI_NULLS,
    ANSI_PADDING,
    ANSI_WARNINGS,
    ARITHABORT,
    CONCAT_NULL_YIELDS_NULL ON;
SET NUMERIC_ROUNDABORT OFF;

DECLARE @int INT;

DECLARE @localTran BIT
IF @@TRANCOUNT = 0
BEGIN
    SET @localTran = 1
    BEGIN TRANSACTION LocalTran
END

BEGIN TRY
        MERGE INTO RCRA_HD_STATE_ACTIVITY D
        USING (SELECT *
               FROM ETL_HD_STATE_ACT_VW
               WHERE HD_SUBM_ID = @HD_SUBM_ID) S
        ON (D.HD_STATE_ACTIVITY_ID = S.WH_HD_STATE_ACTIVITY_ID)
        WHEN MATCHED
            AND (
                    (D.TRANSACTION_CODE IS NOT NULL AND S.TRANSACTION_CODE IS NOT NULL AND
                     D.TRANSACTION_CODE <> S.TRANSACTION_CODE)
                    OR (D.TRANSACTION_CODE IS NULL AND S.TRANSACTION_CODE IS NOT NULL)
                    OR (D.TRANSACTION_CODE IS NOT NULL AND S.TRANSACTION_CODE IS NULL)
                    OR (D.STATE_ACTIVITY_OWNER IS NOT NULL AND S.STATE_ACTIVITY_OWNER IS NOT NULL AND
                        D.STATE_ACTIVITY_OWNER <> S.STATE_ACTIVITY_OWNER)
                    OR (D.STATE_ACTIVITY_OWNER IS NULL AND S.STATE_ACTIVITY_OWNER IS NOT NULL)
                    OR (D.STATE_ACTIVITY_OWNER IS NOT NULL AND S.STATE_ACTIVITY_OWNER IS NULL)
                    OR (D.STATE_ACTIVITY_TYPE IS NOT NULL AND S.STATE_ACTIVITY_TYPE IS NOT NULL AND
                        D.STATE_ACTIVITY_TYPE <> S.STATE_ACTIVITY_TYPE)
                    OR (D.STATE_ACTIVITY_TYPE IS NULL AND S.STATE_ACTIVITY_TYPE IS NOT NULL)
                    OR (D.STATE_ACTIVITY_TYPE IS NOT NULL AND S.STATE_ACTIVITY_TYPE IS NULL)
                ) THEN
            UPDATE
            SET D.TRANSACTION_CODE     = S.TRANSACTION_CODE,
                D.STATE_ACTIVITY_OWNER = S.STATE_ACTIVITY_OWNER,
                D.STATE_ACTIVITY_TYPE  = S.STATE_ACTIVITY_TYPE
        WHEN NOT MATCHED THEN
            INSERT (HD_HANDLER_ID,
                    TRANSACTION_CODE,
                    STATE_ACTIVITY_OWNER,
                    STATE_ACTIVITY_TYPE)
            VALUES (S.WH_HD_HANDLER_ID,
                    S.TRANSACTION_CODE,
                    S.STATE_ACTIVITY_OWNER,
                    S.STATE_ACTIVITY_TYPE);
        IF @localTran = 1 AND XACT_STATE() = 1
        COMMIT TRAN LocalTran

END TRY
BEGIN CATCH

    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT

    SELECT  @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE()

    IF @localTran = 1 AND XACT_STATE() <> 0
        ROLLBACK TRAN

    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

END CATCH
    END
GO
/****** Object:  StoredProcedure [dbo].[HD_MERGE_UNIVERSAL_WASTE]    Script Date: 6/12/2019 2:50:58 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*************************************************************************************************
** ObjectName: HD_MERGE_UNIVERSAL_WASTE.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_HD_UNIVERSAL_WASTE table 
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  05/31/2019   ageery      Created.
**
***************************************************************************************************/ --
    CREATE PROCEDURE [dbo].[HD_MERGE_UNIVERSAL_WASTE] @HD_SUBM_ID varchar(40) AS
    BEGIN
        SET NOCOUNT ON;
SET XACT_ABORT,
    QUOTED_IDENTIFIER,
    ANSI_NULLS,
    ANSI_PADDING,
    ANSI_WARNINGS,
    ARITHABORT,
    CONCAT_NULL_YIELDS_NULL ON;
SET NUMERIC_ROUNDABORT OFF;

DECLARE @int INT;

DECLARE @localTran BIT
IF @@TRANCOUNT = 0
BEGIN
    SET @localTran = 1
    BEGIN TRANSACTION LocalTran
END

BEGIN TRY
        MERGE INTO RCRA_HD_UNIVERSAL_WASTE D
        USING (SELECT *
               FROM ETL_HD_UNIV_WASTE_VW
               WHERE HD_SUBM_ID = @HD_SUBM_ID) S
        ON (D.HD_UNIVERSAL_WASTE_ID = S.WH_HD_UNIVERSAL_WASTE_ID)
        WHEN MATCHED
            AND (
                    (D.TRANSACTION_CODE IS NOT NULL AND S.TRANSACTION_CODE IS NOT NULL AND
                     D.TRANSACTION_CODE <> S.TRANSACTION_CODE)
                    OR (D.TRANSACTION_CODE IS NULL AND S.TRANSACTION_CODE IS NOT NULL)
                    OR (D.TRANSACTION_CODE IS NOT NULL AND S.TRANSACTION_CODE IS NULL)
                    OR (D.UNIVERSAL_WASTE_OWNER IS NOT NULL AND S.UNIVERSAL_WASTE_OWNER IS NOT NULL AND
                        D.UNIVERSAL_WASTE_OWNER <> S.UNIVERSAL_WASTE_OWNER)
                    OR (D.UNIVERSAL_WASTE_OWNER IS NULL AND S.UNIVERSAL_WASTE_OWNER IS NOT NULL)
                    OR (D.UNIVERSAL_WASTE_OWNER IS NOT NULL AND S.UNIVERSAL_WASTE_OWNER IS NULL)
                    OR (D.UNIVERSAL_WASTE_TYPE IS NOT NULL AND S.UNIVERSAL_WASTE_TYPE IS NOT NULL AND
                        D.UNIVERSAL_WASTE_TYPE <> S.UNIVERSAL_WASTE_TYPE)
                    OR (D.UNIVERSAL_WASTE_TYPE IS NULL AND S.UNIVERSAL_WASTE_TYPE IS NOT NULL)
                    OR (D.UNIVERSAL_WASTE_TYPE IS NOT NULL AND S.UNIVERSAL_WASTE_TYPE IS NULL)
                    OR (D.ACCUMULATED IS NOT NULL AND S.ACCUMULATED IS NOT NULL AND D.ACCUMULATED <> S.ACCUMULATED)
                    OR (D.ACCUMULATED IS NULL AND S.ACCUMULATED IS NOT NULL)
                    OR (D.ACCUMULATED IS NOT NULL AND S.ACCUMULATED IS NULL)
                    OR (D.GENERATED IS NOT NULL AND S.GENERATED IS NOT NULL AND D.GENERATED <> S.GENERATED)
                    OR (D.GENERATED IS NULL AND S.GENERATED IS NOT NULL)
                    OR (D.GENERATED IS NOT NULL AND S.GENERATED IS NULL)
                )
            THEN
            UPDATE
            SET D.TRANSACTION_CODE      = S.TRANSACTION_CODE,
                D.UNIVERSAL_WASTE_OWNER = S.UNIVERSAL_WASTE_OWNER,
                D.UNIVERSAL_WASTE_TYPE  = S.UNIVERSAL_WASTE_TYPE,
                D.ACCUMULATED           = S.ACCUMULATED,
                D.GENERATED             = S.GENERATED
        WHEN NOT MATCHED THEN
            INSERT (HD_HANDLER_ID,
                    TRANSACTION_CODE,
                    UNIVERSAL_WASTE_OWNER,
                    UNIVERSAL_WASTE_TYPE,
                    ACCUMULATED,
                    GENERATED)
            VALUES (S.WH_HD_HANDLER_ID,
                    S.TRANSACTION_CODE,
                    S.UNIVERSAL_WASTE_OWNER,
                    S.UNIVERSAL_WASTE_TYPE,
                    S.ACCUMULATED,
                    S.GENERATED);
        IF @localTran = 1 AND XACT_STATE() = 1
        COMMIT TRAN LocalTran

END TRY
BEGIN CATCH

    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT

    SELECT  @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE()

    IF @localTran = 1 AND XACT_STATE() <> 0
        ROLLBACK TRAN

    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

END CATCH
    END
GO
/****** Object:  StoredProcedure [dbo].[HD_MERGE_WASTE_CODE]    Script Date: 6/12/2019 2:50:58 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*************************************************************************************************
** ObjectName: HD_MERGE_WASTE_CODE.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_HD_WASTE_CODE table 
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  05/31/2019   ageery      Created.
**
***************************************************************************************************/ --
    CREATE PROCEDURE [dbo].[HD_MERGE_WASTE_CODE] @HD_SUBM_ID varchar(40) AS
    BEGIN
        SET NOCOUNT ON;
SET XACT_ABORT,
    QUOTED_IDENTIFIER,
    ANSI_NULLS,
    ANSI_PADDING,
    ANSI_WARNINGS,
    ARITHABORT,
    CONCAT_NULL_YIELDS_NULL ON;
SET NUMERIC_ROUNDABORT OFF;

DECLARE @int INT;

DECLARE @localTran BIT
IF @@TRANCOUNT = 0
BEGIN
    SET @localTran = 1
    BEGIN TRANSACTION LocalTran
END

BEGIN TRY
        MERGE INTO RCRA_HD_WASTE_CODE D
        USING (SELECT *
               FROM ETL_HD_WASTE_CODE_VW
               WHERE HD_SUBM_ID = @HD_SUBM_ID) S
        ON (D.HD_WASTE_CODE_ID = S.WH_HD_WASTE_CODE_ID)
        WHEN MATCHED
            AND (
                    (D.TRANSACTION_CODE IS NOT NULL AND S.TRANSACTION_CODE IS NOT NULL AND
                     D.TRANSACTION_CODE <> S.TRANSACTION_CODE)
                    OR (D.TRANSACTION_CODE IS NULL AND S.TRANSACTION_CODE IS NOT NULL)
                    OR (D.TRANSACTION_CODE IS NOT NULL AND S.TRANSACTION_CODE IS NULL)
                    OR
                    (D.WASTE_CODE_OWNER IS NOT NULL AND S.WASTE_CODE_OWNER IS NOT NULL AND
                     D.WASTE_CODE_OWNER <> S.WASTE_CODE_OWNER)
                    OR (D.WASTE_CODE_OWNER IS NULL AND S.WASTE_CODE_OWNER IS NOT NULL)
                    OR (D.WASTE_CODE_OWNER IS NOT NULL AND S.WASTE_CODE_OWNER IS NULL)
                    OR (D.WASTE_CODE_TYPE IS NOT NULL AND S.WASTE_CODE_TYPE IS NOT NULL AND
                        D.WASTE_CODE_TYPE <> S.WASTE_CODE_TYPE)
                    OR (D.WASTE_CODE_TYPE IS NULL AND S.WASTE_CODE_TYPE IS NOT NULL)
                    OR (D.WASTE_CODE_TYPE IS NOT NULL AND S.WASTE_CODE_TYPE IS NULL)
                )
            THEN
            UPDATE
            SET D.TRANSACTION_CODE = S.TRANSACTION_CODE,
                D.WASTE_CODE_OWNER = S.WASTE_CODE_OWNER,
                D.WASTE_CODE_TYPE  = S.WASTE_CODE_TYPE
        WHEN NOT MATCHED THEN
            INSERT (HD_HANDLER_ID,
                    TRANSACTION_CODE,
                    WASTE_CODE_TYPE,
                    WASTE_CODE_OWNER)
            VALUES (S.WH_HD_HANDLER_ID,
                    S.TRANSACTION_CODE,
                    S.WASTE_CODE_TYPE,
                    S.WASTE_CODE_OWNER);
        IF @localTran = 1 AND XACT_STATE() = 1
        COMMIT TRAN LocalTran

END TRY
BEGIN CATCH

    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT

    SELECT  @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE()

    IF @localTran = 1 AND XACT_STATE() <> 0
        ROLLBACK TRAN

    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

END CATCH
    END
GO
/****** Object:  StoredProcedure [dbo].[PRM_LOG_HANDLERS]    Script Date: 6/12/2019 2:50:58 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*************************************************************************************************
** ObjectName: PRM_LOG_HANDLERS.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Logs information about merged PRM handlers
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  06/12/2019   ageery      Created.
**
***************************************************************************************************/ --
    CREATE PROCEDURE [dbo].[PRM_LOG_HANDLERS] @PRM_SUBM_ID varchar(40) AS
    BEGIN
        SET NOCOUNT ON;
SET XACT_ABORT,
    QUOTED_IDENTIFIER,
    ANSI_NULLS,
    ANSI_PADDING,
    ANSI_WARNINGS,
    ARITHABORT,
    CONCAT_NULL_YIELDS_NULL ON;
SET NUMERIC_ROUNDABORT OFF;

DECLARE @int INT;

DECLARE @localTran BIT
IF @@TRANCOUNT = 0
BEGIN
    SET @localTran = 1
    BEGIN TRANSACTION LocalTran
END

BEGIN TRY
        INSERT INTO ETL_RUN (RUN_DATE, ETL_TYPE, SUBM_ID)
        VALUES (CURRENT_TIMESTAMP, 'PM', @PRM_SUBM_ID);
        INSERT INTO ETL_RUN_HANDLER (ETL_RUN_ID, HANDLER_ID, STATUS_TYPE)
        SELECT SCOPE_IDENTITY(),
               HANDLER_ID,
               CASE
                   WHEN
                       PRM_FAC_SUBM_ID IS NULL
                       THEN
                       'I'
                   ELSE
                       'U'
                   END
        FROM ETL_PRM_FAC_SUBM_VW
        WHERE PRM_SUBM_ID = @PRM_SUBM_ID;
        IF @localTran = 1 AND XACT_STATE() = 1
        COMMIT TRAN LocalTran

END TRY
BEGIN CATCH

    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT

    SELECT  @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE()

    IF @localTran = 1 AND XACT_STATE() <> 0
        ROLLBACK TRAN

    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

END CATCH
    END
GO
/****** Object:  StoredProcedure [dbo].[PRM_MERGE_EVENT]    Script Date: 6/12/2019 2:50:58 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*************************************************************************************************
** ObjectName: PRM_MERGE_EVENT.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_PRM_EVENT table 
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  05/31/2019   ageery      Created.
**
***************************************************************************************************/ --
    CREATE PROCEDURE [dbo].[PRM_MERGE_EVENT] @PRM_SUBM_ID varchar(40) AS
    BEGIN
        SET NOCOUNT ON;
SET XACT_ABORT,
    QUOTED_IDENTIFIER,
    ANSI_NULLS,
    ANSI_PADDING,
    ANSI_WARNINGS,
    ARITHABORT,
    CONCAT_NULL_YIELDS_NULL ON;
SET NUMERIC_ROUNDABORT OFF;

DECLARE @int INT;

DECLARE @localTran BIT
IF @@TRANCOUNT = 0
BEGIN
    SET @localTran = 1
    BEGIN TRANSACTION LocalTran
END

BEGIN TRY
        MERGE INTO RCRA_PRM_EVENT D
        USING (SELECT *
               FROM ETL_PRM_EVENT_VW
               WHERE PRM_SUBM_ID = @PRM_SUBM_ID) S
        ON (D.PRM_EVENT_ID = S.WH_PRM_EVENT_ID)
        WHEN MATCHED
            AND (
                    (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NOT NULL AND D.TRANS_CODE <> S.TRANS_CODE)
                    OR (D.TRANS_CODE IS NULL AND S.TRANS_CODE IS NOT NULL)
                    OR (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NULL)
                    OR (D.ACT_LOC_CODE IS NOT NULL AND S.ACT_LOC_CODE IS NOT NULL AND D.ACT_LOC_CODE <> S.ACT_LOC_CODE)
                    OR (D.ACT_LOC_CODE IS NULL AND S.ACT_LOC_CODE IS NOT NULL)
                    OR (D.ACT_LOC_CODE IS NOT NULL AND S.ACT_LOC_CODE IS NULL)
                    OR (D.PERMIT_EVENT_DATA_OWNER_CODE IS NOT NULL AND S.PERMIT_EVENT_DATA_OWNER_CODE IS NOT NULL AND
                        D.PERMIT_EVENT_DATA_OWNER_CODE <> S.PERMIT_EVENT_DATA_OWNER_CODE)
                    OR (D.PERMIT_EVENT_DATA_OWNER_CODE IS NULL AND S.PERMIT_EVENT_DATA_OWNER_CODE IS NOT NULL)
                    OR (D.PERMIT_EVENT_DATA_OWNER_CODE IS NOT NULL AND S.PERMIT_EVENT_DATA_OWNER_CODE IS NULL)
                    OR (D.PERMIT_EVENT_CODE IS NOT NULL AND S.PERMIT_EVENT_CODE IS NOT NULL AND
                        D.PERMIT_EVENT_CODE <> S.PERMIT_EVENT_CODE)
                    OR (D.PERMIT_EVENT_CODE IS NULL AND S.PERMIT_EVENT_CODE IS NOT NULL)
                    OR (D.PERMIT_EVENT_CODE IS NOT NULL AND S.PERMIT_EVENT_CODE IS NULL)
                    OR
                    (D.EVENT_AGN_CODE IS NOT NULL AND S.EVENT_AGN_CODE IS NOT NULL AND
                     D.EVENT_AGN_CODE <> S.EVENT_AGN_CODE)
                    OR (D.EVENT_AGN_CODE IS NULL AND S.EVENT_AGN_CODE IS NOT NULL)
                    OR (D.EVENT_AGN_CODE IS NOT NULL AND S.EVENT_AGN_CODE IS NULL)
                    OR
                    (D.EVENT_SEQ_NUM IS NOT NULL AND S.EVENT_SEQ_NUM IS NOT NULL AND D.EVENT_SEQ_NUM <> S.EVENT_SEQ_NUM)
                    OR (D.EVENT_SEQ_NUM IS NULL AND S.EVENT_SEQ_NUM IS NOT NULL)
                    OR (D.EVENT_SEQ_NUM IS NOT NULL AND S.EVENT_SEQ_NUM IS NULL)
                    OR (D.ACTL_DATE IS NOT NULL AND S.ACTL_DATE IS NOT NULL AND D.ACTL_DATE <> S.ACTL_DATE)
                    OR (D.ACTL_DATE IS NULL AND S.ACTL_DATE IS NOT NULL)
                    OR (D.ACTL_DATE IS NOT NULL AND S.ACTL_DATE IS NULL)
                    OR (D.ORIGINAL_SCHEDULE_DATE IS NOT NULL AND S.ORIGINAL_SCHEDULE_DATE IS NOT NULL AND
                        D.ORIGINAL_SCHEDULE_DATE <> S.ORIGINAL_SCHEDULE_DATE)
                    OR (D.ORIGINAL_SCHEDULE_DATE IS NULL AND S.ORIGINAL_SCHEDULE_DATE IS NOT NULL)
                    OR (D.ORIGINAL_SCHEDULE_DATE IS NOT NULL AND S.ORIGINAL_SCHEDULE_DATE IS NULL)
                    OR (D.NEW_SCHEDULE_DATE IS NOT NULL AND S.NEW_SCHEDULE_DATE IS NOT NULL AND
                        D.NEW_SCHEDULE_DATE <> S.NEW_SCHEDULE_DATE)
                    OR (D.NEW_SCHEDULE_DATE IS NULL AND S.NEW_SCHEDULE_DATE IS NOT NULL)
                    OR (D.NEW_SCHEDULE_DATE IS NOT NULL AND S.NEW_SCHEDULE_DATE IS NULL)
                    OR (D.RESP_PERSON_DATA_OWNER_CODE IS NOT NULL AND S.RESP_PERSON_DATA_OWNER_CODE IS NOT NULL AND
                        D.RESP_PERSON_DATA_OWNER_CODE <> S.RESP_PERSON_DATA_OWNER_CODE)
                    OR (D.RESP_PERSON_DATA_OWNER_CODE IS NULL AND S.RESP_PERSON_DATA_OWNER_CODE IS NOT NULL)
                    OR (D.RESP_PERSON_DATA_OWNER_CODE IS NOT NULL AND S.RESP_PERSON_DATA_OWNER_CODE IS NULL)
                    OR
                    (D.RESP_PERSON_ID IS NOT NULL AND S.RESP_PERSON_ID IS NOT NULL AND
                     D.RESP_PERSON_ID <> S.RESP_PERSON_ID)
                    OR (D.RESP_PERSON_ID IS NULL AND S.RESP_PERSON_ID IS NOT NULL)
                    OR (D.RESP_PERSON_ID IS NOT NULL AND S.RESP_PERSON_ID IS NULL)
                    OR (D.EVENT_SUBORG_DATA_OWNER_CODE IS NOT NULL AND S.EVENT_SUBORG_DATA_OWNER_CODE IS NOT NULL AND
                        D.EVENT_SUBORG_DATA_OWNER_CODE <> S.EVENT_SUBORG_DATA_OWNER_CODE)
                    OR (D.EVENT_SUBORG_DATA_OWNER_CODE IS NULL AND S.EVENT_SUBORG_DATA_OWNER_CODE IS NOT NULL)
                    OR (D.EVENT_SUBORG_DATA_OWNER_CODE IS NOT NULL AND S.EVENT_SUBORG_DATA_OWNER_CODE IS NULL)
                    OR (D.EVENT_SUBORG_CODE IS NOT NULL AND S.EVENT_SUBORG_CODE IS NOT NULL AND
                        D.EVENT_SUBORG_CODE <> S.EVENT_SUBORG_CODE)
                    OR (D.EVENT_SUBORG_CODE IS NULL AND S.EVENT_SUBORG_CODE IS NOT NULL)
                    OR (D.EVENT_SUBORG_CODE IS NOT NULL AND S.EVENT_SUBORG_CODE IS NULL)
                    OR
                    (D.SUPP_INFO_TXT IS NOT NULL AND S.SUPP_INFO_TXT IS NOT NULL AND D.SUPP_INFO_TXT <> S.SUPP_INFO_TXT)
                    OR (D.SUPP_INFO_TXT IS NULL AND S.SUPP_INFO_TXT IS NOT NULL)
                    OR (D.SUPP_INFO_TXT IS NOT NULL AND S.SUPP_INFO_TXT IS NULL)
                ) THEN
            UPDATE
            SET D.TRANS_CODE                   = S.TRANS_CODE,
                D.ACT_LOC_CODE                 = S.ACT_LOC_CODE,
                D.PERMIT_EVENT_DATA_OWNER_CODE = S.PERMIT_EVENT_DATA_OWNER_CODE,
                D.PERMIT_EVENT_CODE            = S.PERMIT_EVENT_CODE,
                D.EVENT_AGN_CODE               = S.EVENT_AGN_CODE,
                D.EVENT_SEQ_NUM                = S.EVENT_SEQ_NUM,
                D.ACTL_DATE                    = S.ACTL_DATE,
                D.ORIGINAL_SCHEDULE_DATE       = S.ORIGINAL_SCHEDULE_DATE,
                D.NEW_SCHEDULE_DATE            = S.NEW_SCHEDULE_DATE,
                D.RESP_PERSON_DATA_OWNER_CODE  = S.RESP_PERSON_DATA_OWNER_CODE,
                D.RESP_PERSON_ID               = S.RESP_PERSON_ID,
                D.EVENT_SUBORG_DATA_OWNER_CODE = S.EVENT_SUBORG_DATA_OWNER_CODE,
                D.EVENT_SUBORG_CODE            = S.EVENT_SUBORG_CODE,
                D.SUPP_INFO_TXT                = S.SUPP_INFO_TXT
        WHEN NOT MATCHED THEN
            INSERT (PRM_SERIES_ID,
                    TRANS_CODE,
                    ACT_LOC_CODE,
                    PERMIT_EVENT_DATA_OWNER_CODE,
                    PERMIT_EVENT_CODE,
                    EVENT_AGN_CODE,
                    EVENT_SEQ_NUM,
                    ACTL_DATE,
                    ORIGINAL_SCHEDULE_DATE,
                    NEW_SCHEDULE_DATE,
                    RESP_PERSON_DATA_OWNER_CODE,
                    RESP_PERSON_ID,
                    EVENT_SUBORG_DATA_OWNER_CODE,
                    EVENT_SUBORG_CODE,
                    SUPP_INFO_TXT)
            VALUES (S.WH_PRM_SERIES_ID,
                    S.TRANS_CODE,
                    S.ACT_LOC_CODE,
                    S.PERMIT_EVENT_DATA_OWNER_CODE,
                    S.PERMIT_EVENT_CODE,
                    S.EVENT_AGN_CODE,
                    S.EVENT_SEQ_NUM,
                    S.ACTL_DATE,
                    S.ORIGINAL_SCHEDULE_DATE,
                    S.NEW_SCHEDULE_DATE,
                    S.RESP_PERSON_DATA_OWNER_CODE,
                    S.RESP_PERSON_ID,
                    S.EVENT_SUBORG_DATA_OWNER_CODE,
                    S.EVENT_SUBORG_CODE,
                    S.SUPP_INFO_TXT);
        IF @localTran = 1 AND XACT_STATE() = 1
        COMMIT TRAN LocalTran

END TRY
BEGIN CATCH

    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT

    SELECT  @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE()

    IF @localTran = 1 AND XACT_STATE() <> 0
        ROLLBACK TRAN

    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

END CATCH
    END
GO
/****** Object:  StoredProcedure [dbo].[PRM_MERGE_EVENT_COMMITMENT]    Script Date: 6/12/2019 2:50:58 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*************************************************************************************************
** ObjectName: PRM_MERGE_EVENT_COMMITMENT.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_PRM_EVENT_COMMITMENT table 
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  05/31/2019   ageery      Created.
**
***************************************************************************************************/ --
    CREATE PROCEDURE [dbo].[PRM_MERGE_EVENT_COMMITMENT] @PRM_SUBM_ID varchar(40) AS
    BEGIN
        SET NOCOUNT ON;
SET XACT_ABORT,
    QUOTED_IDENTIFIER,
    ANSI_NULLS,
    ANSI_PADDING,
    ANSI_WARNINGS,
    ARITHABORT,
    CONCAT_NULL_YIELDS_NULL ON;
SET NUMERIC_ROUNDABORT OFF;

DECLARE @int INT;

DECLARE @localTran BIT
IF @@TRANCOUNT = 0
BEGIN
    SET @localTran = 1
    BEGIN TRANSACTION LocalTran
END

BEGIN TRY
        MERGE INTO RCRA_PRM_EVENT_COMMITMENT D
        USING (SELECT *
               FROM ETL_PRM_EVENT_COMM_VW
               WHERE PRM_SUBM_ID = @PRM_SUBM_ID) S
        ON (D.PRM_EVENT_COMMITMENT_ID = S.WH_PRM_EVENT_COMMITMENT_ID)
        WHEN MATCHED
            AND (
                    (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NOT NULL AND D.TRANS_CODE <> S.TRANS_CODE)
                    OR (D.TRANS_CODE IS NULL AND S.TRANS_CODE IS NOT NULL)
                    OR (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NULL)
                    OR (D.COMMIT_LEAD IS NOT NULL AND S.COMMIT_LEAD IS NOT NULL AND D.COMMIT_LEAD <> S.COMMIT_LEAD)
                    OR (D.COMMIT_LEAD IS NULL AND S.COMMIT_LEAD IS NOT NULL)
                    OR (D.COMMIT_LEAD IS NOT NULL AND S.COMMIT_LEAD IS NULL)
                    OR
                    (D.COMMIT_SEQ_NUM IS NOT NULL AND S.COMMIT_SEQ_NUM IS NOT NULL AND
                     D.COMMIT_SEQ_NUM <> S.COMMIT_SEQ_NUM)
                    OR (D.COMMIT_SEQ_NUM IS NULL AND S.COMMIT_SEQ_NUM IS NOT NULL)
                    OR (D.COMMIT_SEQ_NUM IS NOT NULL AND S.COMMIT_SEQ_NUM IS NULL)
                ) THEN
            UPDATE
            SET D.TRANS_CODE     = S.TRANS_CODE,
                D.COMMIT_LEAD    = S.COMMIT_LEAD,
                D.COMMIT_SEQ_NUM = S.COMMIT_SEQ_NUM
        WHEN NOT MATCHED THEN
            INSERT (PRM_EVENT_ID,
                    TRANS_CODE,
                    COMMIT_LEAD,
                    COMMIT_SEQ_NUM)
            VALUES (S.WH_PRM_EVENT_ID,
                    S.TRANS_CODE,
                    S.COMMIT_LEAD,
                    S.COMMIT_SEQ_NUM);
        IF @localTran = 1 AND XACT_STATE() = 1
        COMMIT TRAN LocalTran

END TRY
BEGIN CATCH

    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT

    SELECT  @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE()

    IF @localTran = 1 AND XACT_STATE() <> 0
        ROLLBACK TRAN

    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

END CATCH
    END
GO
/****** Object:  StoredProcedure [dbo].[PRM_MERGE_FAC_SUBM]    Script Date: 6/12/2019 2:50:58 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*************************************************************************************************
** ObjectName: PRM_MERGE_FAC_SUBM.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_PRM_FAC_SUBM table 
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  05/31/2019   ageery      Created.
**
***************************************************************************************************/ --
    CREATE PROCEDURE [dbo].[PRM_MERGE_FAC_SUBM] @PRM_SUBM_ID varchar(40) AS
    BEGIN
        SET NOCOUNT ON;
SET XACT_ABORT,
    QUOTED_IDENTIFIER,
    ANSI_NULLS,
    ANSI_PADDING,
    ANSI_WARNINGS,
    ARITHABORT,
    CONCAT_NULL_YIELDS_NULL ON;
SET NUMERIC_ROUNDABORT OFF;

DECLARE @int INT;

DECLARE @localTran BIT
IF @@TRANCOUNT = 0
BEGIN
    SET @localTran = 1
    BEGIN TRANSACTION LocalTran
END

BEGIN TRY
        MERGE INTO RCRA_PRM_FAC_SUBM D
        USING (SELECT *
               FROM ETL_PRM_FAC_SUBM_VW
               WHERE PRM_SUBM_ID = @PRM_SUBM_ID) S
        ON (D.PRM_FAC_SUBM_ID = S.WH_PRM_FAC_SUBM_ID)
        WHEN NOT MATCHED THEN
            INSERT (
                HANDLER_ID
            )
            VALUES (
                       S.HANDLER_ID
                   );
        IF @localTran = 1 AND XACT_STATE() = 1
        COMMIT TRAN LocalTran

END TRY
BEGIN CATCH

    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT

    SELECT  @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE()

    IF @localTran = 1 AND XACT_STATE() <> 0
        ROLLBACK TRAN

    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

END CATCH
    END
GO
/****** Object:  StoredProcedure [dbo].[PRM_MERGE_RELATED_EVENT]    Script Date: 6/12/2019 2:50:58 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*************************************************************************************************
** ObjectName: PRM_MERGE_RELATED_EVENT.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_PRM_RELATED_EVENT table 
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  05/31/2019   ageery      Created.
**
***************************************************************************************************/ --
    CREATE PROCEDURE [dbo].[PRM_MERGE_RELATED_EVENT] @PRM_SUBM_ID varchar(40) AS
    BEGIN
        SET NOCOUNT ON;
SET XACT_ABORT,
    QUOTED_IDENTIFIER,
    ANSI_NULLS,
    ANSI_PADDING,
    ANSI_WARNINGS,
    ARITHABORT,
    CONCAT_NULL_YIELDS_NULL ON;
SET NUMERIC_ROUNDABORT OFF;

DECLARE @int INT;

DECLARE @localTran BIT
IF @@TRANCOUNT = 0
BEGIN
    SET @localTran = 1
    BEGIN TRANSACTION LocalTran
END

BEGIN TRY
        MERGE INTO RCRA_PRM_RELATED_EVENT D
        USING (SELECT *
               FROM ETL_PRM_REL_EVENT_VW
               WHERE PRM_SUBM_ID = @PRM_SUBM_ID) S
        ON (D.PRM_RELATED_EVENT_ID = S.WH_PRM_RELATED_EVENT_ID)
        WHEN MATCHED
            AND (
                    (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NOT NULL AND D.TRANS_CODE <> S.TRANS_CODE)
                    OR (D.TRANS_CODE IS NULL AND S.TRANS_CODE IS NOT NULL)
                    OR (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NULL)
                    OR (D.ACT_LOC_CODE IS NOT NULL AND S.ACT_LOC_CODE IS NOT NULL AND D.ACT_LOC_CODE <> S.ACT_LOC_CODE)
                    OR (D.ACT_LOC_CODE IS NULL AND S.ACT_LOC_CODE IS NOT NULL)
                    OR (D.ACT_LOC_CODE IS NOT NULL AND S.ACT_LOC_CODE IS NULL)
                    OR (D.PERMIT_SERIES_SEQ_NUM IS NOT NULL AND S.PERMIT_SERIES_SEQ_NUM IS NOT NULL AND
                        D.PERMIT_SERIES_SEQ_NUM <> S.PERMIT_SERIES_SEQ_NUM)
                    OR (D.PERMIT_SERIES_SEQ_NUM IS NULL AND S.PERMIT_SERIES_SEQ_NUM IS NOT NULL)
                    OR (D.PERMIT_SERIES_SEQ_NUM IS NOT NULL AND S.PERMIT_SERIES_SEQ_NUM IS NULL)
                    OR (D.PERMIT_EVENT_DATA_OWNER_CODE IS NOT NULL AND S.PERMIT_EVENT_DATA_OWNER_CODE IS NOT NULL AND
                        D.PERMIT_EVENT_DATA_OWNER_CODE <> S.PERMIT_EVENT_DATA_OWNER_CODE)
                    OR (D.PERMIT_EVENT_DATA_OWNER_CODE IS NULL AND S.PERMIT_EVENT_DATA_OWNER_CODE IS NOT NULL)
                    OR (D.PERMIT_EVENT_DATA_OWNER_CODE IS NOT NULL AND S.PERMIT_EVENT_DATA_OWNER_CODE IS NULL)
                    OR (D.PERMIT_EVENT_CODE IS NOT NULL AND S.PERMIT_EVENT_CODE IS NOT NULL AND
                        D.PERMIT_EVENT_CODE <> S.PERMIT_EVENT_CODE)
                    OR (D.PERMIT_EVENT_CODE IS NULL AND S.PERMIT_EVENT_CODE IS NOT NULL)
                    OR (D.PERMIT_EVENT_CODE IS NOT NULL AND S.PERMIT_EVENT_CODE IS NULL)
                    OR
                    (D.EVENT_AGN_CODE IS NOT NULL AND S.EVENT_AGN_CODE IS NOT NULL AND
                     D.EVENT_AGN_CODE <> S.EVENT_AGN_CODE)
                    OR (D.EVENT_AGN_CODE IS NULL AND S.EVENT_AGN_CODE IS NOT NULL)
                    OR (D.EVENT_AGN_CODE IS NOT NULL AND S.EVENT_AGN_CODE IS NULL)
                    OR
                    (D.EVENT_SEQ_NUM IS NOT NULL AND S.EVENT_SEQ_NUM IS NOT NULL AND D.EVENT_SEQ_NUM <> S.EVENT_SEQ_NUM)
                    OR (D.EVENT_SEQ_NUM IS NULL AND S.EVENT_SEQ_NUM IS NOT NULL)
                    OR (D.EVENT_SEQ_NUM IS NOT NULL AND S.EVENT_SEQ_NUM IS NULL)
                ) THEN
            UPDATE
            SET D.TRANS_CODE                   = S.TRANS_CODE,
                D.ACT_LOC_CODE                 = S.ACT_LOC_CODE,
                D.PERMIT_SERIES_SEQ_NUM        = S.PERMIT_SERIES_SEQ_NUM,
                D.PERMIT_EVENT_DATA_OWNER_CODE = S.PERMIT_EVENT_DATA_OWNER_CODE,
                D.PERMIT_EVENT_CODE            = S.PERMIT_EVENT_CODE,
                D.EVENT_AGN_CODE               = S.EVENT_AGN_CODE,
                D.EVENT_SEQ_NUM                = S.EVENT_SEQ_NUM
        WHEN NOT MATCHED THEN
            INSERT (PRM_UNIT_DETAIL_ID,
                    TRANS_CODE,
                    ACT_LOC_CODE,
                    PERMIT_SERIES_SEQ_NUM,
                    PERMIT_EVENT_DATA_OWNER_CODE,
                    PERMIT_EVENT_CODE,
                    EVENT_AGN_CODE,
                    EVENT_SEQ_NUM)
            VALUES (S.WH_PRM_UNIT_DETAIL_ID,
                    S.TRANS_CODE,
                    S.ACT_LOC_CODE,
                    S.PERMIT_SERIES_SEQ_NUM,
                    S.PERMIT_EVENT_DATA_OWNER_CODE,
                    S.PERMIT_EVENT_CODE,
                    S.EVENT_AGN_CODE,
                    S.EVENT_SEQ_NUM);
        IF @localTran = 1 AND XACT_STATE() = 1
        COMMIT TRAN LocalTran

END TRY
BEGIN CATCH

    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT

    SELECT  @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE()

    IF @localTran = 1 AND XACT_STATE() <> 0
        ROLLBACK TRAN

    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

END CATCH
    END
GO
/****** Object:  StoredProcedure [dbo].[PRM_MERGE_SERIES]    Script Date: 6/12/2019 2:50:58 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*************************************************************************************************
** ObjectName: PRM_MERGE_SERIES.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_PRM_SERIES table 
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  05/31/2019   ageery      Created.
**
***************************************************************************************************/ --
    CREATE PROCEDURE [dbo].[PRM_MERGE_SERIES] @PRM_SUBM_ID varchar(40) AS
    BEGIN
        SET NOCOUNT ON;
SET XACT_ABORT,
    QUOTED_IDENTIFIER,
    ANSI_NULLS,
    ANSI_PADDING,
    ANSI_WARNINGS,
    ARITHABORT,
    CONCAT_NULL_YIELDS_NULL ON;
SET NUMERIC_ROUNDABORT OFF;

DECLARE @int INT;

DECLARE @localTran BIT
IF @@TRANCOUNT = 0
BEGIN
    SET @localTran = 1
    BEGIN TRANSACTION LocalTran
END

BEGIN TRY
        MERGE INTO RCRA_PRM_SERIES D
        USING (SELECT *
               FROM ETL_PRM_SERIES_VW
               WHERE PRM_SUBM_ID = @PRM_SUBM_ID) S
        ON (D.PRM_SERIES_ID = S.WH_PRM_SERIES_ID)
        WHEN MATCHED
            AND (
                    (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NOT NULL AND D.TRANS_CODE <> S.TRANS_CODE)
                    OR (D.TRANS_CODE IS NULL AND S.TRANS_CODE IS NOT NULL)
                    OR (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NULL)
                    OR (D.PERMIT_SERIES_SEQ_NUM IS NOT NULL AND S.PERMIT_SERIES_SEQ_NUM IS NOT NULL AND
                        D.PERMIT_SERIES_SEQ_NUM <> S.PERMIT_SERIES_SEQ_NUM)
                    OR (D.PERMIT_SERIES_SEQ_NUM IS NULL AND S.PERMIT_SERIES_SEQ_NUM IS NOT NULL)
                    OR (D.PERMIT_SERIES_SEQ_NUM IS NOT NULL AND S.PERMIT_SERIES_SEQ_NUM IS NULL)
                    OR (D.PERMIT_SERIES_NAME IS NOT NULL AND S.PERMIT_SERIES_NAME IS NOT NULL AND
                        D.PERMIT_SERIES_NAME <> S.PERMIT_SERIES_NAME)
                    OR (D.PERMIT_SERIES_NAME IS NULL AND S.PERMIT_SERIES_NAME IS NOT NULL)
                    OR (D.PERMIT_SERIES_NAME IS NOT NULL AND S.PERMIT_SERIES_NAME IS NULL)
                    OR (D.RESP_PERSON_DATA_OWNER_CODE IS NOT NULL AND S.RESP_PERSON_DATA_OWNER_CODE IS NOT NULL AND
                        D.RESP_PERSON_DATA_OWNER_CODE <> S.RESP_PERSON_DATA_OWNER_CODE)
                    OR (D.RESP_PERSON_DATA_OWNER_CODE IS NULL AND S.RESP_PERSON_DATA_OWNER_CODE IS NOT NULL)
                    OR (D.RESP_PERSON_DATA_OWNER_CODE IS NOT NULL AND S.RESP_PERSON_DATA_OWNER_CODE IS NULL)
                    OR
                    (D.RESP_PERSON_ID IS NOT NULL AND S.RESP_PERSON_ID IS NOT NULL AND
                     D.RESP_PERSON_ID <> S.RESP_PERSON_ID)
                    OR (D.RESP_PERSON_ID IS NULL AND S.RESP_PERSON_ID IS NOT NULL)
                    OR (D.RESP_PERSON_ID IS NOT NULL AND S.RESP_PERSON_ID IS NULL)
                    OR
                    (D.SUPP_INFO_TXT IS NOT NULL AND S.SUPP_INFO_TXT IS NOT NULL AND D.SUPP_INFO_TXT <> S.SUPP_INFO_TXT)
                    OR (D.SUPP_INFO_TXT IS NULL AND S.SUPP_INFO_TXT IS NOT NULL)
                    OR (D.SUPP_INFO_TXT IS NOT NULL AND S.SUPP_INFO_TXT IS NULL)
                ) THEN
            UPDATE
            SET D.TRANS_CODE                  = S.TRANS_CODE,
                D.PERMIT_SERIES_SEQ_NUM       = S.PERMIT_SERIES_SEQ_NUM,
                D.PERMIT_SERIES_NAME          = S.PERMIT_SERIES_NAME,
                D.RESP_PERSON_DATA_OWNER_CODE = S.RESP_PERSON_DATA_OWNER_CODE,
                D.RESP_PERSON_ID              = S.RESP_PERSON_ID,
                D.SUPP_INFO_TXT               = S.SUPP_INFO_TXT
        WHEN NOT MATCHED THEN
            INSERT (PRM_FAC_SUBM_ID,
                    TRANS_CODE,
                    PERMIT_SERIES_SEQ_NUM,
                    PERMIT_SERIES_NAME,
                    RESP_PERSON_DATA_OWNER_CODE,
                    RESP_PERSON_ID,
                    SUPP_INFO_TXT)
            VALUES (S.WH_PRM_FAC_SUBM_ID,
                    S.TRANS_CODE,
                    S.PERMIT_SERIES_SEQ_NUM,
                    S.PERMIT_SERIES_NAME,
                    S.RESP_PERSON_DATA_OWNER_CODE,
                    S.RESP_PERSON_ID,
                    S.SUPP_INFO_TXT);
        IF @localTran = 1 AND XACT_STATE() = 1
        COMMIT TRAN LocalTran

END TRY
BEGIN CATCH

    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT

    SELECT  @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE()

    IF @localTran = 1 AND XACT_STATE() <> 0
        ROLLBACK TRAN

    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

END CATCH
    END
GO
/****** Object:  StoredProcedure [dbo].[PRM_MERGE_UNIT]    Script Date: 6/12/2019 2:50:58 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*************************************************************************************************
** ObjectName: PRM_MERGE_UNIT.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_PRM_UNIT table 
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  05/31/2019   ageery      Created.
**
***************************************************************************************************/ --
    CREATE PROCEDURE [dbo].[PRM_MERGE_UNIT] @PRM_SUBM_ID varchar(40) AS
    BEGIN
        SET NOCOUNT ON;
SET XACT_ABORT,
    QUOTED_IDENTIFIER,
    ANSI_NULLS,
    ANSI_PADDING,
    ANSI_WARNINGS,
    ARITHABORT,
    CONCAT_NULL_YIELDS_NULL ON;
SET NUMERIC_ROUNDABORT OFF;

DECLARE @int INT;

DECLARE @localTran BIT
IF @@TRANCOUNT = 0
BEGIN
    SET @localTran = 1
    BEGIN TRANSACTION LocalTran
END

BEGIN TRY
        MERGE INTO RCRA_PRM_UNIT D
        USING (SELECT *
               FROM ETL_PRM_UNIT_VW
               WHERE PRM_SUBM_ID = @PRM_SUBM_ID) S
        ON (D.PRM_UNIT_ID = S.WH_PRM_UNIT_ID)
        WHEN MATCHED
            AND (
                    (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NOT NULL AND D.TRANS_CODE <> S.TRANS_CODE)
                    OR (D.TRANS_CODE IS NULL AND S.TRANS_CODE IS NOT NULL)
                    OR (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NULL)
                    OR (D.PERMIT_UNIT_SEQ_NUM IS NOT NULL AND S.PERMIT_UNIT_SEQ_NUM IS NOT NULL AND
                        D.PERMIT_UNIT_SEQ_NUM <> S.PERMIT_UNIT_SEQ_NUM)
                    OR (D.PERMIT_UNIT_SEQ_NUM IS NULL AND S.PERMIT_UNIT_SEQ_NUM IS NOT NULL)
                    OR (D.PERMIT_UNIT_SEQ_NUM IS NOT NULL AND S.PERMIT_UNIT_SEQ_NUM IS NULL)
                    OR
                    (D.PERMIT_UNIT_NAME IS NOT NULL AND S.PERMIT_UNIT_NAME IS NOT NULL AND
                     D.PERMIT_UNIT_NAME <> S.PERMIT_UNIT_NAME)
                    OR (D.PERMIT_UNIT_NAME IS NULL AND S.PERMIT_UNIT_NAME IS NOT NULL)
                    OR (D.PERMIT_UNIT_NAME IS NOT NULL AND S.PERMIT_UNIT_NAME IS NULL)
                    OR
                    (D.SUPP_INFO_TXT IS NOT NULL AND S.SUPP_INFO_TXT IS NOT NULL AND D.SUPP_INFO_TXT <> S.SUPP_INFO_TXT)
                    OR (D.SUPP_INFO_TXT IS NULL AND S.SUPP_INFO_TXT IS NOT NULL)
                    OR (D.SUPP_INFO_TXT IS NOT NULL AND S.SUPP_INFO_TXT IS NULL)
                ) THEN
            UPDATE
            SET D.TRANS_CODE          = S.TRANS_CODE,
                D.PERMIT_UNIT_SEQ_NUM = S.PERMIT_UNIT_SEQ_NUM,
                D.PERMIT_UNIT_NAME    = S.PERMIT_UNIT_NAME,
                D.SUPP_INFO_TXT       = S.SUPP_INFO_TXT
        WHEN NOT MATCHED THEN
            INSERT (PRM_FAC_SUBM_ID,
                    TRANS_CODE,
                    PERMIT_UNIT_SEQ_NUM,
                    PERMIT_UNIT_NAME,
                    SUPP_INFO_TXT)
            VALUES (S.WH_PRM_FAC_SUBM_ID,
                    S.TRANS_CODE,
                    S.PERMIT_UNIT_SEQ_NUM,
                    S.PERMIT_UNIT_NAME,
                    S.SUPP_INFO_TXT);
        IF @localTran = 1 AND XACT_STATE() = 1
        COMMIT TRAN LocalTran

END TRY
BEGIN CATCH

    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT

    SELECT  @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE()

    IF @localTran = 1 AND XACT_STATE() <> 0
        ROLLBACK TRAN

    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

END CATCH
    END
GO
/****** Object:  StoredProcedure [dbo].[PRM_MERGE_UNIT_DETAIL]    Script Date: 6/12/2019 2:50:58 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*************************************************************************************************
** ObjectName: PRM_MERGE_UNIT_DETAIL.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_PRM_UNIT_DETAIL table 
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  05/31/2019   ageery      Created.
**
***************************************************************************************************/ --
    CREATE PROCEDURE [dbo].[PRM_MERGE_UNIT_DETAIL] @PRM_SUBM_ID varchar(40) AS
    BEGIN
        SET NOCOUNT ON;
SET XACT_ABORT,
    QUOTED_IDENTIFIER,
    ANSI_NULLS,
    ANSI_PADDING,
    ANSI_WARNINGS,
    ARITHABORT,
    CONCAT_NULL_YIELDS_NULL ON;
SET NUMERIC_ROUNDABORT OFF;

DECLARE @int INT;

DECLARE @localTran BIT
IF @@TRANCOUNT = 0
BEGIN
    SET @localTran = 1
    BEGIN TRANSACTION LocalTran
END

BEGIN TRY
        MERGE INTO RCRA_PRM_UNIT_DETAIL D
        USING (SELECT *
               FROM ETL_PRM_UNIT_DETAIL_VW
               WHERE PRM_SUBM_ID = @PRM_SUBM_ID) S
        ON (D.PRM_UNIT_DETAIL_ID = S.WH_PRM_UNIT_DETAIL_ID)
        WHEN MATCHED
            AND (
                    (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NOT NULL AND D.TRANS_CODE <> S.TRANS_CODE)
                    OR (D.TRANS_CODE IS NULL AND S.TRANS_CODE IS NOT NULL)
                    OR (D.TRANS_CODE IS NOT NULL AND S.TRANS_CODE IS NULL)
                    OR (D.PERMIT_UNIT_DETAIL_SEQ_NUM IS NOT NULL AND S.PERMIT_UNIT_DETAIL_SEQ_NUM IS NOT NULL AND
                        D.PERMIT_UNIT_DETAIL_SEQ_NUM <> S.PERMIT_UNIT_DETAIL_SEQ_NUM)
                    OR (D.PERMIT_UNIT_DETAIL_SEQ_NUM IS NULL AND S.PERMIT_UNIT_DETAIL_SEQ_NUM IS NOT NULL)
                    OR (D.PERMIT_UNIT_DETAIL_SEQ_NUM IS NOT NULL AND S.PERMIT_UNIT_DETAIL_SEQ_NUM IS NULL)
                    OR (D.PROC_UNIT_DATA_OWNER_CODE IS NOT NULL AND S.PROC_UNIT_DATA_OWNER_CODE IS NOT NULL AND
                        D.PROC_UNIT_DATA_OWNER_CODE <> S.PROC_UNIT_DATA_OWNER_CODE)
                    OR (D.PROC_UNIT_DATA_OWNER_CODE IS NULL AND S.PROC_UNIT_DATA_OWNER_CODE IS NOT NULL)
                    OR (D.PROC_UNIT_DATA_OWNER_CODE IS NOT NULL AND S.PROC_UNIT_DATA_OWNER_CODE IS NULL)
                    OR
                    (D.PROC_UNIT_CODE IS NOT NULL AND S.PROC_UNIT_CODE IS NOT NULL AND
                     D.PROC_UNIT_CODE <> S.PROC_UNIT_CODE)
                    OR (D.PROC_UNIT_CODE IS NULL AND S.PROC_UNIT_CODE IS NOT NULL)
                    OR (D.PROC_UNIT_CODE IS NOT NULL AND S.PROC_UNIT_CODE IS NULL)
                    OR (D.PERMIT_STAT_EFFC_DATE IS NOT NULL AND S.PERMIT_STAT_EFFC_DATE IS NOT NULL AND
                        D.PERMIT_STAT_EFFC_DATE <> S.PERMIT_STAT_EFFC_DATE)
                    OR (D.PERMIT_STAT_EFFC_DATE IS NULL AND S.PERMIT_STAT_EFFC_DATE IS NOT NULL)
                    OR (D.PERMIT_STAT_EFFC_DATE IS NOT NULL AND S.PERMIT_STAT_EFFC_DATE IS NULL)
                    OR (D.PERMIT_UNIT_CAP_QNTY IS NOT NULL AND S.PERMIT_UNIT_CAP_QNTY IS NOT NULL AND
                        D.PERMIT_UNIT_CAP_QNTY <> S.PERMIT_UNIT_CAP_QNTY)
                    OR (D.PERMIT_UNIT_CAP_QNTY IS NULL AND S.PERMIT_UNIT_CAP_QNTY IS NOT NULL)
                    OR (D.PERMIT_UNIT_CAP_QNTY IS NOT NULL AND S.PERMIT_UNIT_CAP_QNTY IS NULL)
                    OR
                    (D.CAP_TYPE_CODE IS NOT NULL AND S.CAP_TYPE_CODE IS NOT NULL AND D.CAP_TYPE_CODE <> S.CAP_TYPE_CODE)
                    OR (D.CAP_TYPE_CODE IS NULL AND S.CAP_TYPE_CODE IS NOT NULL)
                    OR (D.CAP_TYPE_CODE IS NOT NULL AND S.CAP_TYPE_CODE IS NULL)
                    OR
                    (D.COMMER_STAT_CODE IS NOT NULL AND S.COMMER_STAT_CODE IS NOT NULL AND
                     D.COMMER_STAT_CODE <> S.COMMER_STAT_CODE)
                    OR (D.COMMER_STAT_CODE IS NULL AND S.COMMER_STAT_CODE IS NOT NULL)
                    OR (D.COMMER_STAT_CODE IS NOT NULL AND S.COMMER_STAT_CODE IS NULL)
                    OR
                    (D.LEGAL_OPER_STAT_DATA_OWNER_CDE IS NOT NULL AND S.LEGAL_OPER_STAT_DATA_OWNER_CDE IS NOT NULL AND
                     D.LEGAL_OPER_STAT_DATA_OWNER_CDE <> S.LEGAL_OPER_STAT_DATA_OWNER_CDE)
                    OR (D.LEGAL_OPER_STAT_DATA_OWNER_CDE IS NULL AND S.LEGAL_OPER_STAT_DATA_OWNER_CDE IS NOT NULL)
                    OR (D.LEGAL_OPER_STAT_DATA_OWNER_CDE IS NOT NULL AND S.LEGAL_OPER_STAT_DATA_OWNER_CDE IS NULL)
                    OR (D.LEGAL_OPER_STAT_CODE IS NOT NULL AND S.LEGAL_OPER_STAT_CODE IS NOT NULL AND
                        D.LEGAL_OPER_STAT_CODE <> S.LEGAL_OPER_STAT_CODE)
                    OR (D.LEGAL_OPER_STAT_CODE IS NULL AND S.LEGAL_OPER_STAT_CODE IS NOT NULL)
                    OR (D.LEGAL_OPER_STAT_CODE IS NOT NULL AND S.LEGAL_OPER_STAT_CODE IS NULL)
                    OR
                    (D.MEASUREMENT_UNIT_DATA_OWNR_CDE IS NOT NULL AND S.MEASUREMENT_UNIT_DATA_OWNR_CDE IS NOT NULL AND
                     D.MEASUREMENT_UNIT_DATA_OWNR_CDE <> S.MEASUREMENT_UNIT_DATA_OWNR_CDE)
                    OR (D.MEASUREMENT_UNIT_DATA_OWNR_CDE IS NULL AND S.MEASUREMENT_UNIT_DATA_OWNR_CDE IS NOT NULL)
                    OR (D.MEASUREMENT_UNIT_DATA_OWNR_CDE IS NOT NULL AND S.MEASUREMENT_UNIT_DATA_OWNR_CDE IS NULL)
                    OR (D.MEASUREMENT_UNIT_CODE IS NOT NULL AND S.MEASUREMENT_UNIT_CODE IS NOT NULL AND
                        D.MEASUREMENT_UNIT_CODE <> S.MEASUREMENT_UNIT_CODE)
                    OR (D.MEASUREMENT_UNIT_CODE IS NULL AND S.MEASUREMENT_UNIT_CODE IS NOT NULL)
                    OR (D.MEASUREMENT_UNIT_CODE IS NOT NULL AND S.MEASUREMENT_UNIT_CODE IS NULL)
                    OR (D.NUM_OF_UNITS_COUNT IS NOT NULL AND S.NUM_OF_UNITS_COUNT IS NOT NULL AND
                        D.NUM_OF_UNITS_COUNT <> S.NUM_OF_UNITS_COUNT)
                    OR (D.NUM_OF_UNITS_COUNT IS NULL AND S.NUM_OF_UNITS_COUNT IS NOT NULL)
                    OR (D.NUM_OF_UNITS_COUNT IS NOT NULL AND S.NUM_OF_UNITS_COUNT IS NULL)
                    OR (D.STANDARD_PERMIT_IND IS NOT NULL AND S.STANDARD_PERMIT_IND IS NOT NULL AND
                        D.STANDARD_PERMIT_IND <> S.STANDARD_PERMIT_IND)
                    OR (D.STANDARD_PERMIT_IND IS NULL AND S.STANDARD_PERMIT_IND IS NOT NULL)
                    OR (D.STANDARD_PERMIT_IND IS NOT NULL AND S.STANDARD_PERMIT_IND IS NULL)
                    OR
                    (D.SUPP_INFO_TXT IS NOT NULL AND S.SUPP_INFO_TXT IS NOT NULL AND D.SUPP_INFO_TXT <> S.SUPP_INFO_TXT)
                    OR (D.SUPP_INFO_TXT IS NULL AND S.SUPP_INFO_TXT IS NOT NULL)
                    OR (D.SUPP_INFO_TXT IS NOT NULL AND S.SUPP_INFO_TXT IS NULL)
                ) THEN
            UPDATE
            SET D.TRANS_CODE                     = S.TRANS_CODE,
                D.PROC_UNIT_DATA_OWNER_CODE      = S.PROC_UNIT_DATA_OWNER_CODE,
                D.PROC_UNIT_CODE                 = S.PROC_UNIT_CODE,
                D.PERMIT_STAT_EFFC_DATE          = S.PERMIT_STAT_EFFC_DATE,
                D.PERMIT_UNIT_CAP_QNTY           = S.PERMIT_UNIT_CAP_QNTY,
                D.CAP_TYPE_CODE                  = S.CAP_TYPE_CODE,
                D.COMMER_STAT_CODE               = S.COMMER_STAT_CODE,
                D.LEGAL_OPER_STAT_DATA_OWNER_CDE = S.LEGAL_OPER_STAT_DATA_OWNER_CDE,
                D.LEGAL_OPER_STAT_CODE           = S.LEGAL_OPER_STAT_CODE,
                D.MEASUREMENT_UNIT_DATA_OWNR_CDE = S.MEASUREMENT_UNIT_DATA_OWNR_CDE,
                D.MEASUREMENT_UNIT_CODE          = S.MEASUREMENT_UNIT_CODE,
                D.NUM_OF_UNITS_COUNT             = S.NUM_OF_UNITS_COUNT,
                D.STANDARD_PERMIT_IND            = S.STANDARD_PERMIT_IND,
                D.SUPP_INFO_TXT                  = S.SUPP_INFO_TXT
        WHEN NOT MATCHED THEN
            INSERT (PRM_UNIT_ID,
                    TRANS_CODE,
                    PERMIT_UNIT_DETAIL_SEQ_NUM,
                    PROC_UNIT_DATA_OWNER_CODE,
                    PROC_UNIT_CODE,
                    PERMIT_STAT_EFFC_DATE,
                    PERMIT_UNIT_CAP_QNTY,
                    CAP_TYPE_CODE,
                    COMMER_STAT_CODE,
                    LEGAL_OPER_STAT_DATA_OWNER_CDE,
                    LEGAL_OPER_STAT_CODE,
                    MEASUREMENT_UNIT_DATA_OWNR_CDE,
                    MEASUREMENT_UNIT_CODE,
                    NUM_OF_UNITS_COUNT,
                    STANDARD_PERMIT_IND,
                    SUPP_INFO_TXT)
            VALUES (S.WH_PRM_UNIT_ID,
                    S.TRANS_CODE,
                    S.PERMIT_UNIT_DETAIL_SEQ_NUM,
                    S.PROC_UNIT_DATA_OWNER_CODE,
                    S.PROC_UNIT_CODE,
                    S.PERMIT_STAT_EFFC_DATE,
                    S.PERMIT_UNIT_CAP_QNTY,
                    S.CAP_TYPE_CODE,
                    S.COMMER_STAT_CODE,
                    S.LEGAL_OPER_STAT_DATA_OWNER_CDE,
                    S.LEGAL_OPER_STAT_CODE,
                    S.MEASUREMENT_UNIT_DATA_OWNR_CDE,
                    S.MEASUREMENT_UNIT_CODE,
                    S.NUM_OF_UNITS_COUNT,
                    S.STANDARD_PERMIT_IND,
                    S.SUPP_INFO_TXT);
        IF @localTran = 1 AND XACT_STATE() = 1
        COMMIT TRAN LocalTran

END TRY
BEGIN CATCH

    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT

    SELECT  @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE()

    IF @localTran = 1 AND XACT_STATE() <> 0
        ROLLBACK TRAN

    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

END CATCH
    END
GO
/****** Object:  StoredProcedure [dbo].[PRM_MERGE_WASTE_CODE]    Script Date: 6/12/2019 2:50:58 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*************************************************************************************************
** ObjectName: PRM_MERGE_WASTE_CODE.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_PRM_WASTE_CODE table 
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  05/31/2019   ageery      Created.
**
***************************************************************************************************/ --
    CREATE PROCEDURE [dbo].[PRM_MERGE_WASTE_CODE] @PRM_SUBM_ID varchar(40) AS
    BEGIN
        SET NOCOUNT ON;
SET XACT_ABORT,
    QUOTED_IDENTIFIER,
    ANSI_NULLS,
    ANSI_PADDING,
    ANSI_WARNINGS,
    ARITHABORT,
    CONCAT_NULL_YIELDS_NULL ON;
SET NUMERIC_ROUNDABORT OFF;

DECLARE @int INT;

DECLARE @localTran BIT
IF @@TRANCOUNT = 0
BEGIN
    SET @localTran = 1
    BEGIN TRANSACTION LocalTran
END

BEGIN TRY
        MERGE INTO RCRA_PRM_WASTE_CODE D
        USING (SELECT *
               FROM ETL_PRM_WASTE_CODE_VW
               WHERE PRM_SUBM_ID = @PRM_SUBM_ID) S
        ON (D.PRM_WASTE_CODE_ID = S.WH_PRM_WASTE_CODE_ID)
        WHEN MATCHED
            AND (
                    (D.TRANSACTION_CODE IS NOT NULL AND S.TRANSACTION_CODE IS NOT NULL AND
                     D.TRANSACTION_CODE <> S.TRANSACTION_CODE)
                    OR (D.TRANSACTION_CODE IS NULL AND S.TRANSACTION_CODE IS NOT NULL)
                    OR (D.TRANSACTION_CODE IS NOT NULL AND S.TRANSACTION_CODE IS NULL)
                    OR
                    (D.WASTE_CODE_OWNER IS NOT NULL AND S.WASTE_CODE_OWNER IS NOT NULL AND
                     D.WASTE_CODE_OWNER <> S.WASTE_CODE_OWNER)
                    OR (D.WASTE_CODE_OWNER IS NULL AND S.WASTE_CODE_OWNER IS NOT NULL)
                    OR (D.WASTE_CODE_OWNER IS NOT NULL AND S.WASTE_CODE_OWNER IS NULL)
                    OR (D.WASTE_CODE_TYPE IS NOT NULL AND S.WASTE_CODE_TYPE IS NOT NULL AND
                        D.WASTE_CODE_TYPE <> S.WASTE_CODE_TYPE)
                    OR (D.WASTE_CODE_TYPE IS NULL AND S.WASTE_CODE_TYPE IS NOT NULL)
                    OR (D.WASTE_CODE_TYPE IS NOT NULL AND S.WASTE_CODE_TYPE IS NULL)
                ) THEN
            UPDATE
            SET D.TRANSACTION_CODE = S.TRANSACTION_CODE,
                D.WASTE_CODE_OWNER = S.WASTE_CODE_OWNER,
                D.WASTE_CODE_TYPE  = S.WASTE_CODE_TYPE
        WHEN NOT MATCHED THEN
            INSERT (PRM_UNIT_DETAIL_ID,
                    TRANSACTION_CODE,
                    WASTE_CODE_OWNER,
                    WASTE_CODE_TYPE)
            VALUES (S.WH_PRM_UNIT_DETAIL_ID,
                    S.TRANSACTION_CODE,
                    S.WASTE_CODE_OWNER,
                    S.WASTE_CODE_TYPE);
        IF @localTran = 1 AND XACT_STATE() = 1
        COMMIT TRAN LocalTran

END TRY
BEGIN CATCH

    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT

    SELECT  @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE()

    IF @localTran = 1 AND XACT_STATE() <> 0
        ROLLBACK TRAN

    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

END CATCH
    END
GO
/****** Object:  StoredProcedure [dbo].[RU_LOG_HANDLERS]    Script Date: 6/12/2019 2:50:58 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*************************************************************************************************
** ObjectName: RU_LOG_HANDLERS.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Logs information about merged RU handlers
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  06/12/2019   ageery      Created.
**
***************************************************************************************************/ --
    CREATE PROCEDURE [dbo].[RU_LOG_HANDLERS] @RU_SUBM_ID varchar(40) AS
    BEGIN
        SET NOCOUNT ON;
SET XACT_ABORT,
    QUOTED_IDENTIFIER,
    ANSI_NULLS,
    ANSI_PADDING,
    ANSI_WARNINGS,
    ARITHABORT,
    CONCAT_NULL_YIELDS_NULL ON;
SET NUMERIC_ROUNDABORT OFF;

DECLARE @int INT;

DECLARE @localTran BIT
IF @@TRANCOUNT = 0
BEGIN
    SET @localTran = 1
    BEGIN TRANSACTION LocalTran
END

BEGIN TRY
        INSERT INTO ETL_RUN (RUN_DATE, ETL_TYPE, SUBM_ID)
        VALUES (CURRENT_TIMESTAMP, 'RU', @RU_SUBM_ID);
        INSERT INTO ETL_RUN_HANDLER (ETL_RUN_ID, HANDLER_ID, STATUS_TYPE)
        SELECT SCOPE_IDENTITY(),
               HANDLER_ID,
               CASE
                   WHEN
                       WH_RU_REPORT_UNIV_ID IS NULL
                       THEN
                       'I'
                   ELSE
                       'U'
                   END
        FROM ETL_RU_REPORT_UNIV_VW
        WHERE RU_SUBM_ID = @RU_SUBM_ID;
        IF @localTran = 1 AND XACT_STATE() = 1
        COMMIT TRAN LocalTran

END TRY
BEGIN CATCH

    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT

    SELECT  @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE()

    IF @localTran = 1 AND XACT_STATE() <> 0
        ROLLBACK TRAN

    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

END CATCH
    END
GO
/****** Object:  StoredProcedure [dbo].[RU_MERGE_FAC_SUBM]    Script Date: 6/12/2019 2:50:58 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*************************************************************************************************
** ObjectName: RU_MERGE_FAC_SUBM.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_RU_REPORT_UNIV_SUBM table 
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  05/31/2019   ageery      Created.
**
***************************************************************************************************/ --
    CREATE PROCEDURE [dbo].[RU_MERGE_FAC_SUBM] @RU_SUBM_ID varchar(40) AS
    BEGIN
        SET NOCOUNT ON;
SET XACT_ABORT,
    QUOTED_IDENTIFIER,
    ANSI_NULLS,
    ANSI_PADDING,
    ANSI_WARNINGS,
    ARITHABORT,
    CONCAT_NULL_YIELDS_NULL ON;
SET NUMERIC_ROUNDABORT OFF;

DECLARE @int INT;

DECLARE @localTran BIT
IF @@TRANCOUNT = 0
BEGIN
    SET @localTran = 1
    BEGIN TRANSACTION LocalTran
END

BEGIN TRY
        MERGE INTO RCRA_RU_REPORT_UNIV_SUBM D
        USING (SELECT *
               FROM ETL_RU_REPORT_UNIV_SUBM_VW
               WHERE RU_SUBM_ID = @RU_SUBM_ID) S
        ON (D.RU_SUBM_ID = S.RU_SUBM_ID)
        WHEN NOT MATCHED THEN
            INSERT (
                HANDLER_ID
            )
            VALUES (
                       S.HANDLER_ID
                   );
        IF @localTran = 1 AND XACT_STATE() = 1
        COMMIT TRAN LocalTran

END TRY
BEGIN CATCH

    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT

    SELECT  @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE()

    IF @localTran = 1 AND XACT_STATE() <> 0
        ROLLBACK TRAN

    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

END CATCH
    END
GO
/****** Object:  StoredProcedure [dbo].[RU_MERGE_REPORT_UNIV]    Script Date: 6/12/2019 2:50:58 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*************************************************************************************************
** ObjectName: RU_MERGE_REPORT_UNIV.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the RCRA_RU_REPORT_UNIV table 
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  06/12/2019   ageery      Created.
**
***************************************************************************************************/ --
    CREATE PROCEDURE [dbo].[RU_MERGE_REPORT_UNIV] @RU_SUBM_ID varchar(40) AS
    BEGIN
        SET NOCOUNT ON;
SET XACT_ABORT,
    QUOTED_IDENTIFIER,
    ANSI_NULLS,
    ANSI_PADDING,
    ANSI_WARNINGS,
    ARITHABORT,
    CONCAT_NULL_YIELDS_NULL ON;
SET NUMERIC_ROUNDABORT OFF;

DECLARE @int INT;

DECLARE @localTran BIT
IF @@TRANCOUNT = 0
BEGIN
    SET @localTran = 1
    BEGIN TRANSACTION LocalTran
END

BEGIN TRY
        MERGE INTO RCRA_RU_REPORT_UNIV D
        USING (SELECT *
               FROM ETL_RU_REPORT_UNIV_VW
               WHERE RU_SUBM_ID = @RU_SUBM_ID) S
        ON (D.RU_REPORT_UNIV_ID = S.WH_RU_REPORT_UNIV_ID)
        WHEN MATCHED
            AND (
                    (D.HANDLER_ID IS NOT NULL AND S.HANDLER_ID IS NOT NULL AND D.HANDLER_ID <> S.HANDLER_ID)
                    OR (D.HANDLER_ID IS NULL AND S.HANDLER_ID IS NOT NULL)
                    OR (D.HANDLER_ID IS NOT NULL AND S.HANDLER_ID IS NULL)
                    OR (D.ACTIVITY_LOCATION IS NOT NULL AND S.ACTIVITY_LOCATION IS NOT NULL AND
                        D.ACTIVITY_LOCATION <> S.ACTIVITY_LOCATION)
                    OR (D.ACTIVITY_LOCATION IS NULL AND S.ACTIVITY_LOCATION IS NOT NULL)
                    OR (D.ACTIVITY_LOCATION IS NOT NULL AND S.ACTIVITY_LOCATION IS NULL)
                    OR (D.SOURCE_TYPE IS NOT NULL AND S.SOURCE_TYPE IS NOT NULL AND D.SOURCE_TYPE <> S.SOURCE_TYPE)
                    OR (D.SOURCE_TYPE IS NULL AND S.SOURCE_TYPE IS NOT NULL)
                    OR (D.SOURCE_TYPE IS NOT NULL AND S.SOURCE_TYPE IS NULL)
                    OR (D.SEQ_NUMBER IS NOT NULL AND S.SEQ_NUMBER IS NOT NULL AND D.SEQ_NUMBER <> S.SEQ_NUMBER)
                    OR (D.SEQ_NUMBER IS NULL AND S.SEQ_NUMBER IS NOT NULL)
                    OR (D.SEQ_NUMBER IS NOT NULL AND S.SEQ_NUMBER IS NULL)
                    OR (D.RECEIVE_DATE IS NOT NULL AND S.RECEIVE_DATE IS NOT NULL AND D.RECEIVE_DATE <> S.RECEIVE_DATE)
                    OR (D.RECEIVE_DATE IS NULL AND S.RECEIVE_DATE IS NOT NULL)
                    OR (D.RECEIVE_DATE IS NOT NULL AND S.RECEIVE_DATE IS NULL)
                    OR (D.HANDLER_NAME IS NOT NULL AND S.HANDLER_NAME IS NOT NULL AND D.HANDLER_NAME <> S.HANDLER_NAME)
                    OR (D.HANDLER_NAME IS NULL AND S.HANDLER_NAME IS NOT NULL)
                    OR (D.HANDLER_NAME IS NOT NULL AND S.HANDLER_NAME IS NULL)
                    OR
                    (D.NON_NOTIFIER_IND IS NOT NULL AND S.NON_NOTIFIER_IND IS NOT NULL AND
                     D.NON_NOTIFIER_IND <> S.NON_NOTIFIER_IND)
                    OR (D.NON_NOTIFIER_IND IS NULL AND S.NON_NOTIFIER_IND IS NOT NULL)
                    OR (D.NON_NOTIFIER_IND IS NOT NULL AND S.NON_NOTIFIER_IND IS NULL)
                    OR
                    (D.ACCESSIBILITY IS NOT NULL AND S.ACCESSIBILITY IS NOT NULL AND D.ACCESSIBILITY <> S.ACCESSIBILITY)
                    OR (D.ACCESSIBILITY IS NULL AND S.ACCESSIBILITY IS NOT NULL)
                    OR (D.ACCESSIBILITY IS NOT NULL AND S.ACCESSIBILITY IS NULL)
                    OR (D.REPORT_CYCLE IS NOT NULL AND S.REPORT_CYCLE IS NOT NULL AND D.REPORT_CYCLE <> S.REPORT_CYCLE)
                    OR (D.REPORT_CYCLE IS NULL AND S.REPORT_CYCLE IS NOT NULL)
                    OR (D.REPORT_CYCLE IS NOT NULL AND S.REPORT_CYCLE IS NULL)
                    OR (D.REGION IS NOT NULL AND S.REGION IS NOT NULL AND D.REGION <> S.REGION)
                    OR (D.REGION IS NULL AND S.REGION IS NOT NULL)
                    OR (D.REGION IS NOT NULL AND S.REGION IS NULL)
                    OR (D.STATE IS NOT NULL AND S.STATE IS NOT NULL AND D.STATE <> S.STATE)
                    OR (D.STATE IS NULL AND S.STATE IS NOT NULL)
                    OR (D.STATE IS NOT NULL AND S.STATE IS NULL)
                    OR (D.EXTRACT_FLAG IS NOT NULL AND S.EXTRACT_FLAG IS NOT NULL AND D.EXTRACT_FLAG <> S.EXTRACT_FLAG)
                    OR (D.EXTRACT_FLAG IS NULL AND S.EXTRACT_FLAG IS NOT NULL)
                    OR (D.EXTRACT_FLAG IS NOT NULL AND S.EXTRACT_FLAG IS NULL)
                    OR (D.ACTIVE_SITE IS NOT NULL AND S.ACTIVE_SITE IS NOT NULL AND D.ACTIVE_SITE <> S.ACTIVE_SITE)
                    OR (D.ACTIVE_SITE IS NULL AND S.ACTIVE_SITE IS NOT NULL)
                    OR (D.ACTIVE_SITE IS NOT NULL AND S.ACTIVE_SITE IS NULL)
                    OR (D.COUNTY_CODE IS NOT NULL AND S.COUNTY_CODE IS NOT NULL AND D.COUNTY_CODE <> S.COUNTY_CODE)
                    OR (D.COUNTY_CODE IS NULL AND S.COUNTY_CODE IS NOT NULL)
                    OR (D.COUNTY_CODE IS NOT NULL AND S.COUNTY_CODE IS NULL)
                    OR (D.COUNTY_NAME IS NOT NULL AND S.COUNTY_NAME IS NOT NULL AND D.COUNTY_NAME <> S.COUNTY_NAME)
                    OR (D.COUNTY_NAME IS NULL AND S.COUNTY_NAME IS NOT NULL)
                    OR (D.COUNTY_NAME IS NOT NULL AND S.COUNTY_NAME IS NULL)
                    OR (D.LOCATION_STREET_NUMBER IS NOT NULL AND S.LOCATION_STREET_NUMBER IS NOT NULL AND
                        D.LOCATION_STREET_NUMBER <> S.LOCATION_STREET_NUMBER)
                    OR (D.LOCATION_STREET_NUMBER IS NULL AND S.LOCATION_STREET_NUMBER IS NOT NULL)
                    OR (D.LOCATION_STREET_NUMBER IS NOT NULL AND S.LOCATION_STREET_NUMBER IS NULL)
                    OR
                    (D.LOCATION_STREET1 IS NOT NULL AND S.LOCATION_STREET1 IS NOT NULL AND
                     D.LOCATION_STREET1 <> S.LOCATION_STREET1)
                    OR (D.LOCATION_STREET1 IS NULL AND S.LOCATION_STREET1 IS NOT NULL)
                    OR (D.LOCATION_STREET1 IS NOT NULL AND S.LOCATION_STREET1 IS NULL)
                    OR
                    (D.LOCATION_STREET2 IS NOT NULL AND S.LOCATION_STREET2 IS NOT NULL AND
                     D.LOCATION_STREET2 <> S.LOCATION_STREET2)
                    OR (D.LOCATION_STREET2 IS NULL AND S.LOCATION_STREET2 IS NOT NULL)
                    OR (D.LOCATION_STREET2 IS NOT NULL AND S.LOCATION_STREET2 IS NULL)
                    OR
                    (D.LOCATION_CITY IS NOT NULL AND S.LOCATION_CITY IS NOT NULL AND D.LOCATION_CITY <> S.LOCATION_CITY)
                    OR (D.LOCATION_CITY IS NULL AND S.LOCATION_CITY IS NOT NULL)
                    OR (D.LOCATION_CITY IS NOT NULL AND S.LOCATION_CITY IS NULL)
                    OR
                    (D.LOCATION_STATE IS NOT NULL AND S.LOCATION_STATE IS NOT NULL AND
                     D.LOCATION_STATE <> S.LOCATION_STATE)
                    OR (D.LOCATION_STATE IS NULL AND S.LOCATION_STATE IS NOT NULL)
                    OR (D.LOCATION_STATE IS NOT NULL AND S.LOCATION_STATE IS NULL)
                    OR
                    (D.LOCATION_COUNTRY IS NOT NULL AND S.LOCATION_COUNTRY IS NOT NULL AND
                     D.LOCATION_COUNTRY <> S.LOCATION_COUNTRY)
                    OR (D.LOCATION_COUNTRY IS NULL AND S.LOCATION_COUNTRY IS NOT NULL)
                    OR (D.LOCATION_COUNTRY IS NOT NULL AND S.LOCATION_COUNTRY IS NULL)
                    OR (D.LOCATION_ZIP IS NOT NULL AND S.LOCATION_ZIP IS NOT NULL AND D.LOCATION_ZIP <> S.LOCATION_ZIP)
                    OR (D.LOCATION_ZIP IS NULL AND S.LOCATION_ZIP IS NOT NULL)
                    OR (D.LOCATION_ZIP IS NOT NULL AND S.LOCATION_ZIP IS NULL)
                    OR (D.MAIL_STREET_NUMBER IS NOT NULL AND S.MAIL_STREET_NUMBER IS NOT NULL AND
                        D.MAIL_STREET_NUMBER <> S.MAIL_STREET_NUMBER)
                    OR (D.MAIL_STREET_NUMBER IS NULL AND S.MAIL_STREET_NUMBER IS NOT NULL)
                    OR (D.MAIL_STREET_NUMBER IS NOT NULL AND S.MAIL_STREET_NUMBER IS NULL)
                    OR (D.MAIL_STREET1 IS NOT NULL AND S.MAIL_STREET1 IS NOT NULL AND D.MAIL_STREET1 <> S.MAIL_STREET1)
                    OR (D.MAIL_STREET1 IS NULL AND S.MAIL_STREET1 IS NOT NULL)
                    OR (D.MAIL_STREET1 IS NOT NULL AND S.MAIL_STREET1 IS NULL)
                    OR (D.MAIL_STREET2 IS NOT NULL AND S.MAIL_STREET2 IS NOT NULL AND D.MAIL_STREET2 <> S.MAIL_STREET2)
                    OR (D.MAIL_STREET2 IS NULL AND S.MAIL_STREET2 IS NOT NULL)
                    OR (D.MAIL_STREET2 IS NOT NULL AND S.MAIL_STREET2 IS NULL)
                    OR (D.MAIL_CITY IS NOT NULL AND S.MAIL_CITY IS NOT NULL AND D.MAIL_CITY <> S.MAIL_CITY)
                    OR (D.MAIL_CITY IS NULL AND S.MAIL_CITY IS NOT NULL)
                    OR (D.MAIL_CITY IS NOT NULL AND S.MAIL_CITY IS NULL)
                    OR (D.MAIL_STATE IS NOT NULL AND S.MAIL_STATE IS NOT NULL AND D.MAIL_STATE <> S.MAIL_STATE)
                    OR (D.MAIL_STATE IS NULL AND S.MAIL_STATE IS NOT NULL)
                    OR (D.MAIL_STATE IS NOT NULL AND S.MAIL_STATE IS NULL)
                    OR (D.MAIL_COUNTRY IS NOT NULL AND S.MAIL_COUNTRY IS NOT NULL AND D.MAIL_COUNTRY <> S.MAIL_COUNTRY)
                    OR (D.MAIL_COUNTRY IS NULL AND S.MAIL_COUNTRY IS NOT NULL)
                    OR (D.MAIL_COUNTRY IS NOT NULL AND S.MAIL_COUNTRY IS NULL)
                    OR (D.MAIL_ZIP IS NOT NULL AND S.MAIL_ZIP IS NOT NULL AND D.MAIL_ZIP <> S.MAIL_ZIP)
                    OR (D.MAIL_ZIP IS NULL AND S.MAIL_ZIP IS NOT NULL)
                    OR (D.MAIL_ZIP IS NOT NULL AND S.MAIL_ZIP IS NULL)
                    OR (D.CONTACT_STREET_NUMBER IS NOT NULL AND S.CONTACT_STREET_NUMBER IS NOT NULL AND
                        D.CONTACT_STREET_NUMBER <> S.CONTACT_STREET_NUMBER)
                    OR (D.CONTACT_STREET_NUMBER IS NULL AND S.CONTACT_STREET_NUMBER IS NOT NULL)
                    OR (D.CONTACT_STREET_NUMBER IS NOT NULL AND S.CONTACT_STREET_NUMBER IS NULL)
                    OR (D.CONTACT_STREET1 IS NOT NULL AND S.CONTACT_STREET1 IS NOT NULL AND
                        D.CONTACT_STREET1 <> S.CONTACT_STREET1)
                    OR (D.CONTACT_STREET1 IS NULL AND S.CONTACT_STREET1 IS NOT NULL)
                    OR (D.CONTACT_STREET1 IS NOT NULL AND S.CONTACT_STREET1 IS NULL)
                    OR (D.CONTACT_STREET2 IS NOT NULL AND S.CONTACT_STREET2 IS NOT NULL AND
                        D.CONTACT_STREET2 <> S.CONTACT_STREET2)
                    OR (D.CONTACT_STREET2 IS NULL AND S.CONTACT_STREET2 IS NOT NULL)
                    OR (D.CONTACT_STREET2 IS NOT NULL AND S.CONTACT_STREET2 IS NULL)
                    OR (D.CONTACT_CITY IS NOT NULL AND S.CONTACT_CITY IS NOT NULL AND D.CONTACT_CITY <> S.CONTACT_CITY)
                    OR (D.CONTACT_CITY IS NULL AND S.CONTACT_CITY IS NOT NULL)
                    OR (D.CONTACT_CITY IS NOT NULL AND S.CONTACT_CITY IS NULL)
                    OR
                    (D.CONTACT_STATE IS NOT NULL AND S.CONTACT_STATE IS NOT NULL AND D.CONTACT_STATE <> S.CONTACT_STATE)
                    OR (D.CONTACT_STATE IS NULL AND S.CONTACT_STATE IS NOT NULL)
                    OR (D.CONTACT_STATE IS NOT NULL AND S.CONTACT_STATE IS NULL)
                    OR (D.CONTACT_COUNTRY IS NOT NULL AND S.CONTACT_COUNTRY IS NOT NULL AND
                        D.CONTACT_COUNTRY <> S.CONTACT_COUNTRY)
                    OR (D.CONTACT_COUNTRY IS NULL AND S.CONTACT_COUNTRY IS NOT NULL)
                    OR (D.CONTACT_COUNTRY IS NOT NULL AND S.CONTACT_COUNTRY IS NULL)
                    OR (D.CONTACT_ZIP IS NOT NULL AND S.CONTACT_ZIP IS NOT NULL AND D.CONTACT_ZIP <> S.CONTACT_ZIP)
                    OR (D.CONTACT_ZIP IS NULL AND S.CONTACT_ZIP IS NOT NULL)
                    OR (D.CONTACT_ZIP IS NOT NULL AND S.CONTACT_ZIP IS NULL)
                    OR (D.CONTACT_NAME IS NOT NULL AND S.CONTACT_NAME IS NOT NULL AND D.CONTACT_NAME <> S.CONTACT_NAME)
                    OR (D.CONTACT_NAME IS NULL AND S.CONTACT_NAME IS NOT NULL)
                    OR (D.CONTACT_NAME IS NOT NULL AND S.CONTACT_NAME IS NULL)
                    OR
                    (D.CONTACT_PHONE IS NOT NULL AND S.CONTACT_PHONE IS NOT NULL AND D.CONTACT_PHONE <> S.CONTACT_PHONE)
                    OR (D.CONTACT_PHONE IS NULL AND S.CONTACT_PHONE IS NOT NULL)
                    OR (D.CONTACT_PHONE IS NOT NULL AND S.CONTACT_PHONE IS NULL)
                    OR (D.CONTACT_FAX IS NOT NULL AND S.CONTACT_FAX IS NOT NULL AND D.CONTACT_FAX <> S.CONTACT_FAX)
                    OR (D.CONTACT_FAX IS NULL AND S.CONTACT_FAX IS NOT NULL)
                    OR (D.CONTACT_FAX IS NOT NULL AND S.CONTACT_FAX IS NULL)
                    OR
                    (D.CONTACT_EMAIL IS NOT NULL AND S.CONTACT_EMAIL IS NOT NULL AND D.CONTACT_EMAIL <> S.CONTACT_EMAIL)
                    OR (D.CONTACT_EMAIL IS NULL AND S.CONTACT_EMAIL IS NOT NULL)
                    OR (D.CONTACT_EMAIL IS NOT NULL AND S.CONTACT_EMAIL IS NULL)
                    OR
                    (D.CONTACT_TITLE IS NOT NULL AND S.CONTACT_TITLE IS NOT NULL AND D.CONTACT_TITLE <> S.CONTACT_TITLE)
                    OR (D.CONTACT_TITLE IS NULL AND S.CONTACT_TITLE IS NOT NULL)
                    OR (D.CONTACT_TITLE IS NOT NULL AND S.CONTACT_TITLE IS NULL)
                    OR (D.OWNER_NAME IS NOT NULL AND S.OWNER_NAME IS NOT NULL AND D.OWNER_NAME <> S.OWNER_NAME)
                    OR (D.OWNER_NAME IS NULL AND S.OWNER_NAME IS NOT NULL)
                    OR (D.OWNER_NAME IS NOT NULL AND S.OWNER_NAME IS NULL)
                    OR (D.OWNER_TYPE IS NOT NULL AND S.OWNER_TYPE IS NOT NULL AND D.OWNER_TYPE <> S.OWNER_TYPE)
                    OR (D.OWNER_TYPE IS NULL AND S.OWNER_TYPE IS NOT NULL)
                    OR (D.OWNER_TYPE IS NOT NULL AND S.OWNER_TYPE IS NULL)
                    OR
                    (D.OWNER_SEQ_NUM IS NOT NULL AND S.OWNER_SEQ_NUM IS NOT NULL AND D.OWNER_SEQ_NUM <> S.OWNER_SEQ_NUM)
                    OR (D.OWNER_SEQ_NUM IS NULL AND S.OWNER_SEQ_NUM IS NOT NULL)
                    OR (D.OWNER_SEQ_NUM IS NOT NULL AND S.OWNER_SEQ_NUM IS NULL)
                    OR (D.OPER_NAME IS NOT NULL AND S.OPER_NAME IS NOT NULL AND D.OPER_NAME <> S.OPER_NAME)
                    OR (D.OPER_NAME IS NULL AND S.OPER_NAME IS NOT NULL)
                    OR (D.OPER_NAME IS NOT NULL AND S.OPER_NAME IS NULL)
                    OR (D.OPER_TYPE IS NOT NULL AND S.OPER_TYPE IS NOT NULL AND D.OPER_TYPE <> S.OPER_TYPE)
                    OR (D.OPER_TYPE IS NULL AND S.OPER_TYPE IS NOT NULL)
                    OR (D.OPER_TYPE IS NOT NULL AND S.OPER_TYPE IS NULL)
                    OR (D.OPER_SEQ_NUM IS NOT NULL AND S.OPER_SEQ_NUM IS NOT NULL AND D.OPER_SEQ_NUM <> S.OPER_SEQ_NUM)
                    OR (D.OPER_SEQ_NUM IS NULL AND S.OPER_SEQ_NUM IS NOT NULL)
                    OR (D.OPER_SEQ_NUM IS NOT NULL AND S.OPER_SEQ_NUM IS NULL)
                    OR (D.NAIC1_CODE IS NOT NULL AND S.NAIC1_CODE IS NOT NULL AND D.NAIC1_CODE <> S.NAIC1_CODE)
                    OR (D.NAIC1_CODE IS NULL AND S.NAIC1_CODE IS NOT NULL)
                    OR (D.NAIC1_CODE IS NOT NULL AND S.NAIC1_CODE IS NULL)
                    OR (D.NAIC2_CODE IS NOT NULL AND S.NAIC2_CODE IS NOT NULL AND D.NAIC2_CODE <> S.NAIC2_CODE)
                    OR (D.NAIC2_CODE IS NULL AND S.NAIC2_CODE IS NOT NULL)
                    OR (D.NAIC2_CODE IS NOT NULL AND S.NAIC2_CODE IS NULL)
                    OR (D.NAIC3_CODE IS NOT NULL AND S.NAIC3_CODE IS NOT NULL AND D.NAIC3_CODE <> S.NAIC3_CODE)
                    OR (D.NAIC3_CODE IS NULL AND S.NAIC3_CODE IS NOT NULL)
                    OR (D.NAIC3_CODE IS NOT NULL AND S.NAIC3_CODE IS NULL)
                    OR (D.NAIC4_CODE IS NOT NULL AND S.NAIC4_CODE IS NOT NULL AND D.NAIC4_CODE <> S.NAIC4_CODE)
                    OR (D.NAIC4_CODE IS NULL AND S.NAIC4_CODE IS NOT NULL)
                    OR (D.NAIC4_CODE IS NOT NULL AND S.NAIC4_CODE IS NULL)
                    OR (D.IN_HANDLER_UNIVERSE IS NOT NULL AND S.IN_HANDLER_UNIVERSE IS NOT NULL AND
                        D.IN_HANDLER_UNIVERSE <> S.IN_HANDLER_UNIVERSE)
                    OR (D.IN_HANDLER_UNIVERSE IS NULL AND S.IN_HANDLER_UNIVERSE IS NOT NULL)
                    OR (D.IN_HANDLER_UNIVERSE IS NOT NULL AND S.IN_HANDLER_UNIVERSE IS NULL)
                    OR
                    (D.IN_A_UNIVERSE IS NOT NULL AND S.IN_A_UNIVERSE IS NOT NULL AND D.IN_A_UNIVERSE <> S.IN_A_UNIVERSE)
                    OR (D.IN_A_UNIVERSE IS NULL AND S.IN_A_UNIVERSE IS NOT NULL)
                    OR (D.IN_A_UNIVERSE IS NOT NULL AND S.IN_A_UNIVERSE IS NULL)
                    OR (D.FED_WASTE_GENERATOR_OWNER IS NOT NULL AND S.FED_WASTE_GENERATOR_OWNER IS NOT NULL AND
                        D.FED_WASTE_GENERATOR_OWNER <> S.FED_WASTE_GENERATOR_OWNER)
                    OR (D.FED_WASTE_GENERATOR_OWNER IS NULL AND S.FED_WASTE_GENERATOR_OWNER IS NOT NULL)
                    OR (D.FED_WASTE_GENERATOR_OWNER IS NOT NULL AND S.FED_WASTE_GENERATOR_OWNER IS NULL)
                    OR (D.FED_WASTE_GENERATOR IS NOT NULL AND S.FED_WASTE_GENERATOR IS NOT NULL AND
                        D.FED_WASTE_GENERATOR <> S.FED_WASTE_GENERATOR)
                    OR (D.FED_WASTE_GENERATOR IS NULL AND S.FED_WASTE_GENERATOR IS NOT NULL)
                    OR (D.FED_WASTE_GENERATOR IS NOT NULL AND S.FED_WASTE_GENERATOR IS NULL)
                    OR (D.STATE_WASTE_GENERATOR_OWNER IS NOT NULL AND S.STATE_WASTE_GENERATOR_OWNER IS NOT NULL AND
                        D.STATE_WASTE_GENERATOR_OWNER <> S.STATE_WASTE_GENERATOR_OWNER)
                    OR (D.STATE_WASTE_GENERATOR_OWNER IS NULL AND S.STATE_WASTE_GENERATOR_OWNER IS NOT NULL)
                    OR (D.STATE_WASTE_GENERATOR_OWNER IS NOT NULL AND S.STATE_WASTE_GENERATOR_OWNER IS NULL)
                    OR (D.STATE_WASTE_GENERATOR IS NOT NULL AND S.STATE_WASTE_GENERATOR IS NOT NULL AND
                        D.STATE_WASTE_GENERATOR <> S.STATE_WASTE_GENERATOR)
                    OR (D.STATE_WASTE_GENERATOR IS NULL AND S.STATE_WASTE_GENERATOR IS NOT NULL)
                    OR (D.STATE_WASTE_GENERATOR IS NOT NULL AND S.STATE_WASTE_GENERATOR IS NULL)
                    OR (D.GEN_STATUS IS NOT NULL AND S.GEN_STATUS IS NOT NULL AND D.GEN_STATUS <> S.GEN_STATUS)
                    OR (D.GEN_STATUS IS NULL AND S.GEN_STATUS IS NOT NULL)
                    OR (D.GEN_STATUS IS NOT NULL AND S.GEN_STATUS IS NULL)
                    OR (D.UNIV_WASTE IS NOT NULL AND S.UNIV_WASTE IS NOT NULL AND D.UNIV_WASTE <> S.UNIV_WASTE)
                    OR (D.UNIV_WASTE IS NULL AND S.UNIV_WASTE IS NOT NULL)
                    OR (D.UNIV_WASTE IS NOT NULL AND S.UNIV_WASTE IS NULL)
                    OR (D.LAND_TYPE IS NOT NULL AND S.LAND_TYPE IS NOT NULL AND D.LAND_TYPE <> S.LAND_TYPE)
                    OR (D.LAND_TYPE IS NULL AND S.LAND_TYPE IS NOT NULL)
                    OR (D.LAND_TYPE IS NOT NULL AND S.LAND_TYPE IS NULL)
                    OR (D.STATE_DISTRICT_OWNER IS NOT NULL AND S.STATE_DISTRICT_OWNER IS NOT NULL AND
                        D.STATE_DISTRICT_OWNER <> S.STATE_DISTRICT_OWNER)
                    OR (D.STATE_DISTRICT_OWNER IS NULL AND S.STATE_DISTRICT_OWNER IS NOT NULL)
                    OR (D.STATE_DISTRICT_OWNER IS NOT NULL AND S.STATE_DISTRICT_OWNER IS NULL)
                    OR
                    (D.STATE_DISTRICT IS NOT NULL AND S.STATE_DISTRICT IS NOT NULL AND
                     D.STATE_DISTRICT <> S.STATE_DISTRICT)
                    OR (D.STATE_DISTRICT IS NULL AND S.STATE_DISTRICT IS NOT NULL)
                    OR (D.STATE_DISTRICT IS NOT NULL AND S.STATE_DISTRICT IS NULL)
                    OR (D.SHORT_TERM_GEN_IND IS NOT NULL AND S.SHORT_TERM_GEN_IND IS NOT NULL AND
                        D.SHORT_TERM_GEN_IND <> S.SHORT_TERM_GEN_IND)
                    OR (D.SHORT_TERM_GEN_IND IS NULL AND S.SHORT_TERM_GEN_IND IS NOT NULL)
                    OR (D.SHORT_TERM_GEN_IND IS NOT NULL AND S.SHORT_TERM_GEN_IND IS NULL)
                    OR (D.IMPORTER_ACTIVITY IS NOT NULL AND S.IMPORTER_ACTIVITY IS NOT NULL AND
                        D.IMPORTER_ACTIVITY <> S.IMPORTER_ACTIVITY)
                    OR (D.IMPORTER_ACTIVITY IS NULL AND S.IMPORTER_ACTIVITY IS NOT NULL)
                    OR (D.IMPORTER_ACTIVITY IS NOT NULL AND S.IMPORTER_ACTIVITY IS NULL)
                    OR (D.MIXED_WASTE_GENERATOR IS NOT NULL AND S.MIXED_WASTE_GENERATOR IS NOT NULL AND
                        D.MIXED_WASTE_GENERATOR <> S.MIXED_WASTE_GENERATOR)
                    OR (D.MIXED_WASTE_GENERATOR IS NULL AND S.MIXED_WASTE_GENERATOR IS NOT NULL)
                    OR (D.MIXED_WASTE_GENERATOR IS NOT NULL AND S.MIXED_WASTE_GENERATOR IS NULL)
                    OR (D.TRANSPORTER_ACTIVITY IS NOT NULL AND S.TRANSPORTER_ACTIVITY IS NOT NULL AND
                        D.TRANSPORTER_ACTIVITY <> S.TRANSPORTER_ACTIVITY)
                    OR (D.TRANSPORTER_ACTIVITY IS NULL AND S.TRANSPORTER_ACTIVITY IS NOT NULL)
                    OR (D.TRANSPORTER_ACTIVITY IS NOT NULL AND S.TRANSPORTER_ACTIVITY IS NULL)
                    OR (D.TRANSFER_FACILITY_IND IS NOT NULL AND S.TRANSFER_FACILITY_IND IS NOT NULL AND
                        D.TRANSFER_FACILITY_IND <> S.TRANSFER_FACILITY_IND)
                    OR (D.TRANSFER_FACILITY_IND IS NULL AND S.TRANSFER_FACILITY_IND IS NOT NULL)
                    OR (D.TRANSFER_FACILITY_IND IS NOT NULL AND S.TRANSFER_FACILITY_IND IS NULL)
                    OR (D.RECYCLER_ACTIVITY IS NOT NULL AND S.RECYCLER_ACTIVITY IS NOT NULL AND
                        D.RECYCLER_ACTIVITY <> S.RECYCLER_ACTIVITY)
                    OR (D.RECYCLER_ACTIVITY IS NULL AND S.RECYCLER_ACTIVITY IS NOT NULL)
                    OR (D.RECYCLER_ACTIVITY IS NOT NULL AND S.RECYCLER_ACTIVITY IS NULL)
                    OR (D.ONSITE_BURNER_EXEMPTION IS NOT NULL AND S.ONSITE_BURNER_EXEMPTION IS NOT NULL AND
                        D.ONSITE_BURNER_EXEMPTION <> S.ONSITE_BURNER_EXEMPTION)
                    OR (D.ONSITE_BURNER_EXEMPTION IS NULL AND S.ONSITE_BURNER_EXEMPTION IS NOT NULL)
                    OR (D.ONSITE_BURNER_EXEMPTION IS NOT NULL AND S.ONSITE_BURNER_EXEMPTION IS NULL)
                    OR (D.FURNACE_EXEMPTION IS NOT NULL AND S.FURNACE_EXEMPTION IS NOT NULL AND
                        D.FURNACE_EXEMPTION <> S.FURNACE_EXEMPTION)
                    OR (D.FURNACE_EXEMPTION IS NULL AND S.FURNACE_EXEMPTION IS NOT NULL)
                    OR (D.FURNACE_EXEMPTION IS NOT NULL AND S.FURNACE_EXEMPTION IS NULL)
                    OR
                    (D.UNDERGROUND_INJECTION_ACTIVITY IS NOT NULL AND S.UNDERGROUND_INJECTION_ACTIVITY IS NOT NULL AND
                     D.UNDERGROUND_INJECTION_ACTIVITY <> S.UNDERGROUND_INJECTION_ACTIVITY)
                    OR (D.UNDERGROUND_INJECTION_ACTIVITY IS NULL AND S.UNDERGROUND_INJECTION_ACTIVITY IS NOT NULL)
                    OR (D.UNDERGROUND_INJECTION_ACTIVITY IS NOT NULL AND S.UNDERGROUND_INJECTION_ACTIVITY IS NULL)
                    OR (D.UNIVERSAL_WASTE_DEST_FACILITY IS NOT NULL AND S.UNIVERSAL_WASTE_DEST_FACILITY IS NOT NULL AND
                        D.UNIVERSAL_WASTE_DEST_FACILITY <> S.UNIVERSAL_WASTE_DEST_FACILITY)
                    OR (D.UNIVERSAL_WASTE_DEST_FACILITY IS NULL AND S.UNIVERSAL_WASTE_DEST_FACILITY IS NOT NULL)
                    OR (D.UNIVERSAL_WASTE_DEST_FACILITY IS NOT NULL AND S.UNIVERSAL_WASTE_DEST_FACILITY IS NULL)
                    OR (D.OFFSITE_WASTE_RECEIPT IS NOT NULL AND S.OFFSITE_WASTE_RECEIPT IS NOT NULL AND
                        D.OFFSITE_WASTE_RECEIPT <> S.OFFSITE_WASTE_RECEIPT)
                    OR (D.OFFSITE_WASTE_RECEIPT IS NULL AND S.OFFSITE_WASTE_RECEIPT IS NOT NULL)
                    OR (D.OFFSITE_WASTE_RECEIPT IS NOT NULL AND S.OFFSITE_WASTE_RECEIPT IS NULL)
                    OR (D.USED_OIL IS NOT NULL AND S.USED_OIL IS NOT NULL AND D.USED_OIL <> S.USED_OIL)
                    OR (D.USED_OIL IS NULL AND S.USED_OIL IS NOT NULL)
                    OR (D.USED_OIL IS NOT NULL AND S.USED_OIL IS NULL)
                    OR (D.FEDERAL_UNIVERSAL_WASTE IS NOT NULL AND S.FEDERAL_UNIVERSAL_WASTE IS NOT NULL AND
                        D.FEDERAL_UNIVERSAL_WASTE <> S.FEDERAL_UNIVERSAL_WASTE)
                    OR (D.FEDERAL_UNIVERSAL_WASTE IS NULL AND S.FEDERAL_UNIVERSAL_WASTE IS NOT NULL)
                    OR (D.FEDERAL_UNIVERSAL_WASTE IS NOT NULL AND S.FEDERAL_UNIVERSAL_WASTE IS NULL)
                    OR (D.AS_FEDERAL_REGULATED_TSDF IS NOT NULL AND S.AS_FEDERAL_REGULATED_TSDF IS NOT NULL AND
                        D.AS_FEDERAL_REGULATED_TSDF <> S.AS_FEDERAL_REGULATED_TSDF)
                    OR (D.AS_FEDERAL_REGULATED_TSDF IS NULL AND S.AS_FEDERAL_REGULATED_TSDF IS NOT NULL)
                    OR (D.AS_FEDERAL_REGULATED_TSDF IS NOT NULL AND S.AS_FEDERAL_REGULATED_TSDF IS NULL)
                    OR (D.AS_CONVERTED_TSDF IS NOT NULL AND S.AS_CONVERTED_TSDF IS NOT NULL AND
                        D.AS_CONVERTED_TSDF <> S.AS_CONVERTED_TSDF)
                    OR (D.AS_CONVERTED_TSDF IS NULL AND S.AS_CONVERTED_TSDF IS NOT NULL)
                    OR (D.AS_CONVERTED_TSDF IS NOT NULL AND S.AS_CONVERTED_TSDF IS NULL)
                    OR (D.AS_STATE_REGULATED_TSDF IS NOT NULL AND S.AS_STATE_REGULATED_TSDF IS NOT NULL AND
                        D.AS_STATE_REGULATED_TSDF <> S.AS_STATE_REGULATED_TSDF)
                    OR (D.AS_STATE_REGULATED_TSDF IS NULL AND S.AS_STATE_REGULATED_TSDF IS NOT NULL)
                    OR (D.AS_STATE_REGULATED_TSDF IS NOT NULL AND S.AS_STATE_REGULATED_TSDF IS NULL)
                    OR (D.FEDERAL_IND IS NOT NULL AND S.FEDERAL_IND IS NOT NULL AND D.FEDERAL_IND <> S.FEDERAL_IND)
                    OR (D.FEDERAL_IND IS NULL AND S.FEDERAL_IND IS NOT NULL)
                    OR (D.FEDERAL_IND IS NOT NULL AND S.FEDERAL_IND IS NULL)
                    OR (D.HSM IS NOT NULL AND S.HSM IS NOT NULL AND D.HSM <> S.HSM)
                    OR (D.HSM IS NULL AND S.HSM IS NOT NULL)
                    OR (D.HSM IS NOT NULL AND S.HSM IS NULL)
                    OR (D.SUBPART_K IS NULL AND S.SUBPART_K IS NOT NULL)
                    OR (D.SUBPART_K IS NOT NULL AND S.SUBPART_K IS NOT NULL AND D.SUBPART_K <> S.SUBPART_K)
                    OR (D.SUBPART_K IS NOT NULL AND S.SUBPART_K IS NULL)
                    OR
                    (D.COMMERCIAL_TSD IS NOT NULL AND S.COMMERCIAL_TSD IS NOT NULL AND
                     D.COMMERCIAL_TSD <> S.COMMERCIAL_TSD)
                    OR (D.COMMERCIAL_TSD IS NULL AND S.COMMERCIAL_TSD IS NOT NULL)
                    OR (D.COMMERCIAL_TSD IS NOT NULL AND S.COMMERCIAL_TSD IS NULL)
                    OR (D.TSD IS NOT NULL AND S.TSD IS NOT NULL AND D.TSD <> S.TSD)
                    OR (D.TSD IS NULL AND S.TSD IS NOT NULL)
                    OR (D.TSD IS NOT NULL AND S.TSD IS NULL)
                    OR (D.GPRA_PERMIT IS NOT NULL AND S.GPRA_PERMIT IS NOT NULL AND D.GPRA_PERMIT <> S.GPRA_PERMIT)
                    OR (D.GPRA_PERMIT IS NULL AND S.GPRA_PERMIT IS NOT NULL)
                    OR (D.GPRA_PERMIT IS NOT NULL AND S.GPRA_PERMIT IS NULL)
                    OR (D.GPRA_RENEWAL IS NOT NULL AND S.GPRA_RENEWAL IS NOT NULL AND D.GPRA_RENEWAL <> S.GPRA_RENEWAL)
                    OR (D.GPRA_RENEWAL IS NULL AND S.GPRA_RENEWAL IS NOT NULL)
                    OR (D.GPRA_RENEWAL IS NOT NULL AND S.GPRA_RENEWAL IS NULL)
                    OR (D.PERMIT_RENEWAL_WRKLD IS NOT NULL AND S.PERMIT_RENEWAL_WRKLD IS NOT NULL AND
                        D.PERMIT_RENEWAL_WRKLD <> S.PERMIT_RENEWAL_WRKLD)
                    OR (D.PERMIT_RENEWAL_WRKLD IS NULL AND S.PERMIT_RENEWAL_WRKLD IS NOT NULL)
                    OR (D.PERMIT_RENEWAL_WRKLD IS NOT NULL AND S.PERMIT_RENEWAL_WRKLD IS NULL)
                    OR (D.PERM_WRKLD IS NOT NULL AND S.PERM_WRKLD IS NOT NULL AND D.PERM_WRKLD <> S.PERM_WRKLD)
                    OR (D.PERM_WRKLD IS NULL AND S.PERM_WRKLD IS NOT NULL)
                    OR (D.PERM_WRKLD IS NOT NULL AND S.PERM_WRKLD IS NULL)
                    OR (D.PERM_PROG IS NOT NULL AND S.PERM_PROG IS NOT NULL AND D.PERM_PROG <> S.PERM_PROG)
                    OR (D.PERM_PROG IS NULL AND S.PERM_PROG IS NOT NULL)
                    OR (D.PERM_PROG IS NOT NULL AND S.PERM_PROG IS NULL)
                    OR (D.PC_WRKLD IS NOT NULL AND S.PC_WRKLD IS NOT NULL AND D.PC_WRKLD <> S.PC_WRKLD)
                    OR (D.PC_WRKLD IS NULL AND S.PC_WRKLD IS NOT NULL)
                    OR (D.PC_WRKLD IS NOT NULL AND S.PC_WRKLD IS NULL)
                    OR (D.CLOS_WRKLD IS NOT NULL AND S.CLOS_WRKLD IS NOT NULL AND D.CLOS_WRKLD <> S.CLOS_WRKLD)
                    OR (D.CLOS_WRKLD IS NULL AND S.CLOS_WRKLD IS NOT NULL)
                    OR (D.CLOS_WRKLD IS NOT NULL AND S.CLOS_WRKLD IS NULL)
                    OR (D.GPRACA IS NOT NULL AND S.GPRACA IS NOT NULL AND D.GPRACA <> S.GPRACA)
                    OR (D.GPRACA IS NULL AND S.GPRACA IS NOT NULL)
                    OR (D.GPRACA IS NOT NULL AND S.GPRACA IS NULL)
                    OR (D.CA_WRKLD IS NOT NULL AND S.CA_WRKLD IS NOT NULL AND D.CA_WRKLD <> S.CA_WRKLD)
                    OR (D.CA_WRKLD IS NULL AND S.CA_WRKLD IS NOT NULL)
                    OR (D.CA_WRKLD IS NOT NULL AND S.CA_WRKLD IS NULL)
                    OR (D.SUBJ_CA IS NOT NULL AND S.SUBJ_CA IS NOT NULL AND D.SUBJ_CA <> S.SUBJ_CA)
                    OR (D.SUBJ_CA IS NULL AND S.SUBJ_CA IS NOT NULL)
                    OR (D.SUBJ_CA IS NOT NULL AND S.SUBJ_CA IS NULL)
                    OR (D.SUBJ_CA_NON_TSD IS NOT NULL AND S.SUBJ_CA_NON_TSD IS NOT NULL AND
                        D.SUBJ_CA_NON_TSD <> S.SUBJ_CA_NON_TSD)
                    OR (D.SUBJ_CA_NON_TSD IS NULL AND S.SUBJ_CA_NON_TSD IS NOT NULL)
                    OR (D.SUBJ_CA_NON_TSD IS NOT NULL AND S.SUBJ_CA_NON_TSD IS NULL)
                    OR
                    (D.SUBJ_CA_TSD_3004 IS NOT NULL AND S.SUBJ_CA_TSD_3004 IS NOT NULL AND
                     D.SUBJ_CA_TSD_3004 <> S.SUBJ_CA_TSD_3004)
                    OR (D.SUBJ_CA_TSD_3004 IS NULL AND S.SUBJ_CA_TSD_3004 IS NOT NULL)
                    OR (D.SUBJ_CA_TSD_3004 IS NOT NULL AND S.SUBJ_CA_TSD_3004 IS NULL)
                    OR (D.SUBJ_CA_DISCRETION IS NOT NULL AND S.SUBJ_CA_DISCRETION IS NOT NULL AND
                        D.SUBJ_CA_DISCRETION <> S.SUBJ_CA_DISCRETION)
                    OR (D.SUBJ_CA_DISCRETION IS NULL AND S.SUBJ_CA_DISCRETION IS NOT NULL)
                    OR (D.SUBJ_CA_DISCRETION IS NOT NULL AND S.SUBJ_CA_DISCRETION IS NULL)
                    OR (D.NCAPS IS NOT NULL AND S.NCAPS IS NOT NULL AND D.NCAPS <> S.NCAPS)
                    OR (D.NCAPS IS NULL AND S.NCAPS IS NOT NULL)
                    OR (D.NCAPS IS NOT NULL AND S.NCAPS IS NULL)
                    OR (D.EC_IND IS NOT NULL AND S.EC_IND IS NOT NULL AND D.EC_IND <> S.EC_IND)
                    OR (D.EC_IND IS NULL AND S.EC_IND IS NOT NULL)
                    OR (D.EC_IND IS NOT NULL AND S.EC_IND IS NULL)
                    OR (D.IC_IND IS NOT NULL AND S.IC_IND IS NOT NULL AND D.IC_IND <> S.IC_IND)
                    OR (D.IC_IND IS NULL AND S.IC_IND IS NOT NULL)
                    OR (D.IC_IND IS NOT NULL AND S.IC_IND IS NULL)
                    OR (D.CA_725_IND IS NOT NULL AND S.CA_725_IND IS NOT NULL AND D.CA_725_IND <> S.CA_725_IND)
                    OR (D.CA_725_IND IS NULL AND S.CA_725_IND IS NOT NULL)
                    OR (D.CA_725_IND IS NOT NULL AND S.CA_725_IND IS NULL)
                    OR (D.CA_750_IND IS NOT NULL AND S.CA_750_IND IS NOT NULL AND D.CA_750_IND <> S.CA_750_IND)
                    OR (D.CA_750_IND IS NULL AND S.CA_750_IND IS NOT NULL)
                    OR (D.CA_750_IND IS NOT NULL AND S.CA_750_IND IS NULL)
                    OR
                    (D.OPERATING_TSDF IS NOT NULL AND S.OPERATING_TSDF IS NOT NULL AND
                     D.OPERATING_TSDF <> S.OPERATING_TSDF)
                    OR (D.OPERATING_TSDF IS NULL AND S.OPERATING_TSDF IS NOT NULL)
                    OR (D.OPERATING_TSDF IS NOT NULL AND S.OPERATING_TSDF IS NULL)
                    OR
                    (D.FULL_ENFORCEMENT IS NOT NULL AND S.FULL_ENFORCEMENT IS NOT NULL AND
                     D.FULL_ENFORCEMENT <> S.FULL_ENFORCEMENT)
                    OR (D.FULL_ENFORCEMENT IS NULL AND S.FULL_ENFORCEMENT IS NOT NULL)
                    OR (D.FULL_ENFORCEMENT IS NOT NULL AND S.FULL_ENFORCEMENT IS NULL)
                    OR (D.SNC IS NOT NULL AND S.SNC IS NOT NULL AND D.SNC <> S.SNC)
                    OR (D.SNC IS NULL AND S.SNC IS NOT NULL)
                    OR (D.SNC IS NOT NULL AND S.SNC IS NULL)
                    OR (D.BOY_SNC IS NOT NULL AND S.BOY_SNC IS NOT NULL AND D.BOY_SNC <> S.BOY_SNC)
                    OR (D.BOY_SNC IS NULL AND S.BOY_SNC IS NOT NULL)
                    OR (D.BOY_SNC IS NOT NULL AND S.BOY_SNC IS NULL)
                    OR (D.BOY_STATE_UNADDRESSED_SNC IS NOT NULL AND S.BOY_STATE_UNADDRESSED_SNC IS NOT NULL AND
                        D.BOY_STATE_UNADDRESSED_SNC <> S.BOY_STATE_UNADDRESSED_SNC)
                    OR (D.BOY_STATE_UNADDRESSED_SNC IS NULL AND S.BOY_STATE_UNADDRESSED_SNC IS NOT NULL)
                    OR (D.BOY_STATE_UNADDRESSED_SNC IS NOT NULL AND S.BOY_STATE_UNADDRESSED_SNC IS NULL)
                    OR (D.STATE_UNADDRESSED IS NOT NULL AND S.STATE_UNADDRESSED IS NOT NULL AND
                        D.STATE_UNADDRESSED <> S.STATE_UNADDRESSED)
                    OR (D.STATE_UNADDRESSED IS NULL AND S.STATE_UNADDRESSED IS NOT NULL)
                    OR (D.STATE_UNADDRESSED IS NOT NULL AND S.STATE_UNADDRESSED IS NULL)
                    OR (D.STATE_ADDRESSED IS NOT NULL AND S.STATE_ADDRESSED IS NOT NULL AND
                        D.STATE_ADDRESSED <> S.STATE_ADDRESSED)
                    OR (D.STATE_ADDRESSED IS NULL AND S.STATE_ADDRESSED IS NOT NULL)
                    OR (D.STATE_ADDRESSED IS NOT NULL AND S.STATE_ADDRESSED IS NULL)
                    OR (D.BOY_STATE_ADDRESSED IS NOT NULL AND S.BOY_STATE_ADDRESSED IS NOT NULL AND
                        D.BOY_STATE_ADDRESSED <> S.BOY_STATE_ADDRESSED)
                    OR (D.BOY_STATE_ADDRESSED IS NULL AND S.BOY_STATE_ADDRESSED IS NOT NULL)
                    OR (D.BOY_STATE_ADDRESSED IS NOT NULL AND S.BOY_STATE_ADDRESSED IS NULL)
                    OR (D.STATE_SNC_WITH_COMP_SCHED IS NOT NULL AND S.STATE_SNC_WITH_COMP_SCHED IS NOT NULL AND
                        D.STATE_SNC_WITH_COMP_SCHED <> S.STATE_SNC_WITH_COMP_SCHED)
                    OR (D.STATE_SNC_WITH_COMP_SCHED IS NULL AND S.STATE_SNC_WITH_COMP_SCHED IS NOT NULL)
                    OR (D.STATE_SNC_WITH_COMP_SCHED IS NOT NULL AND S.STATE_SNC_WITH_COMP_SCHED IS NULL)
                    OR (D.BOY_STATE_SNC_WITH_COMP_SCHED IS NOT NULL AND S.BOY_STATE_SNC_WITH_COMP_SCHED IS NOT NULL AND
                        D.BOY_STATE_SNC_WITH_COMP_SCHED <> S.BOY_STATE_SNC_WITH_COMP_SCHED)
                    OR (D.BOY_STATE_SNC_WITH_COMP_SCHED IS NULL AND S.BOY_STATE_SNC_WITH_COMP_SCHED IS NOT NULL)
                    OR (D.BOY_STATE_SNC_WITH_COMP_SCHED IS NOT NULL AND S.BOY_STATE_SNC_WITH_COMP_SCHED IS NULL)
                    OR (D.EPA_UNADDRESSED IS NOT NULL AND S.EPA_UNADDRESSED IS NOT NULL AND
                        D.EPA_UNADDRESSED <> S.EPA_UNADDRESSED)
                    OR (D.EPA_UNADDRESSED IS NULL AND S.EPA_UNADDRESSED IS NOT NULL)
                    OR (D.EPA_UNADDRESSED IS NOT NULL AND S.EPA_UNADDRESSED IS NULL)
                    OR (D.BOY_EPA_UNADDRESSED IS NOT NULL AND S.BOY_EPA_UNADDRESSED IS NOT NULL AND
                        D.BOY_EPA_UNADDRESSED <> S.BOY_EPA_UNADDRESSED)
                    OR (D.BOY_EPA_UNADDRESSED IS NULL AND S.BOY_EPA_UNADDRESSED IS NOT NULL)
                    OR (D.BOY_EPA_UNADDRESSED IS NOT NULL AND S.BOY_EPA_UNADDRESSED IS NULL)
                    OR
                    (D.EPA_ADDRESSED IS NOT NULL AND S.EPA_ADDRESSED IS NOT NULL AND D.EPA_ADDRESSED <> S.EPA_ADDRESSED)
                    OR (D.EPA_ADDRESSED IS NULL AND S.EPA_ADDRESSED IS NOT NULL)
                    OR (D.EPA_ADDRESSED IS NOT NULL AND S.EPA_ADDRESSED IS NULL)
                    OR (D.BOY_EPA_ADDRESSED IS NOT NULL AND S.BOY_EPA_ADDRESSED IS NOT NULL AND
                        D.BOY_EPA_ADDRESSED <> S.BOY_EPA_ADDRESSED)
                    OR (D.BOY_EPA_ADDRESSED IS NULL AND S.BOY_EPA_ADDRESSED IS NOT NULL)
                    OR (D.BOY_EPA_ADDRESSED IS NOT NULL AND S.BOY_EPA_ADDRESSED IS NULL)
                    OR (D.EPA_SNC_WITH_COMP_SCHED IS NOT NULL AND S.EPA_SNC_WITH_COMP_SCHED IS NOT NULL AND
                        D.EPA_SNC_WITH_COMP_SCHED <> S.EPA_SNC_WITH_COMP_SCHED)
                    OR (D.EPA_SNC_WITH_COMP_SCHED IS NULL AND S.EPA_SNC_WITH_COMP_SCHED IS NOT NULL)
                    OR (D.EPA_SNC_WITH_COMP_SCHED IS NOT NULL AND S.EPA_SNC_WITH_COMP_SCHED IS NULL)
                    OR (D.BOY_EPA_SNC_WITH_COMP_SCHED IS NOT NULL AND S.BOY_EPA_SNC_WITH_COMP_SCHED IS NOT NULL AND
                        D.BOY_EPA_SNC_WITH_COMP_SCHED <> S.BOY_EPA_SNC_WITH_COMP_SCHED)
                    OR (D.BOY_EPA_SNC_WITH_COMP_SCHED IS NULL AND S.BOY_EPA_SNC_WITH_COMP_SCHED IS NOT NULL)
                    OR (D.BOY_EPA_SNC_WITH_COMP_SCHED IS NOT NULL AND S.BOY_EPA_SNC_WITH_COMP_SCHED IS NULL)
                    OR (D.FA_REQUIRED IS NOT NULL AND S.FA_REQUIRED IS NOT NULL AND D.FA_REQUIRED <> S.FA_REQUIRED)
                    OR (D.FA_REQUIRED IS NULL AND S.FA_REQUIRED IS NOT NULL)
                    OR (D.FA_REQUIRED IS NOT NULL AND S.FA_REQUIRED IS NULL)
                    OR (D.HHANDLER_LAST_CHANGE_DATE IS NOT NULL AND S.HHANDLER_LAST_CHANGE_DATE IS NOT NULL AND
                        D.HHANDLER_LAST_CHANGE_DATE <> S.HHANDLER_LAST_CHANGE_DATE)
                    OR (D.HHANDLER_LAST_CHANGE_DATE IS NULL AND S.HHANDLER_LAST_CHANGE_DATE IS NOT NULL)
                    OR (D.HHANDLER_LAST_CHANGE_DATE IS NOT NULL AND S.HHANDLER_LAST_CHANGE_DATE IS NULL)
                    OR (D.PUBLIC_NOTES IS NOT NULL AND S.PUBLIC_NOTES IS NOT NULL AND D.PUBLIC_NOTES <> S.PUBLIC_NOTES)
                    OR (D.PUBLIC_NOTES IS NULL AND S.PUBLIC_NOTES IS NOT NULL)
                    OR (D.PUBLIC_NOTES IS NOT NULL AND S.PUBLIC_NOTES IS NULL)
                    OR (D.NOTES IS NOT NULL AND S.NOTES IS NOT NULL AND D.NOTES <> S.NOTES)
                    OR (D.NOTES IS NULL AND S.NOTES IS NOT NULL)
                    OR (D.NOTES IS NOT NULL AND S.NOTES IS NULL)
                    OR
                    (D.RECOGNIZED_TRADER_IMPORTER_IND IS NOT NULL AND S.RECOGNIZED_TRADER_IMPORTER_IND IS NOT NULL AND
                     D.RECOGNIZED_TRADER_IMPORTER_IND <> S.RECOGNIZED_TRADER_IMPORTER_IND)
                    OR (D.RECOGNIZED_TRADER_IMPORTER_IND IS NULL AND S.RECOGNIZED_TRADER_IMPORTER_IND IS NOT NULL)
                    OR (D.RECOGNIZED_TRADER_IMPORTER_IND IS NOT NULL AND S.RECOGNIZED_TRADER_IMPORTER_IND IS NULL)
                    OR
                    (D.RECOGNIZED_TRADER_EXPORTER_IND IS NOT NULL AND S.RECOGNIZED_TRADER_EXPORTER_IND IS NOT NULL AND
                     D.RECOGNIZED_TRADER_EXPORTER_IND <> S.RECOGNIZED_TRADER_EXPORTER_IND)
                    OR (D.RECOGNIZED_TRADER_EXPORTER_IND IS NULL AND S.RECOGNIZED_TRADER_EXPORTER_IND IS NOT NULL)
                    OR (D.RECOGNIZED_TRADER_EXPORTER_IND IS NOT NULL AND S.RECOGNIZED_TRADER_EXPORTER_IND IS NULL)
                    OR (D.SLAB_IMPORTER_IND IS NOT NULL AND S.SLAB_IMPORTER_IND IS NOT NULL AND
                        D.SLAB_IMPORTER_IND <> S.SLAB_IMPORTER_IND)
                    OR (D.SLAB_IMPORTER_IND IS NULL AND S.SLAB_IMPORTER_IND IS NOT NULL)
                    OR (D.SLAB_IMPORTER_IND IS NOT NULL AND S.SLAB_IMPORTER_IND IS NULL)
                    OR (D.SLAB_EXPORTER_IND IS NOT NULL AND S.SLAB_EXPORTER_IND IS NOT NULL AND
                        D.SLAB_EXPORTER_IND <> S.SLAB_EXPORTER_IND)
                    OR (D.SLAB_EXPORTER_IND IS NULL AND S.SLAB_EXPORTER_IND IS NOT NULL)
                    OR (D.SLAB_EXPORTER_IND IS NOT NULL AND S.SLAB_EXPORTER_IND IS NULL)
                    OR (D.RECYCLER_NON_STORAGE_IND IS NOT NULL AND S.RECYCLER_NON_STORAGE_IND IS NOT NULL AND
                        D.RECYCLER_NON_STORAGE_IND <> S.RECYCLER_NON_STORAGE_IND)
                    OR (D.RECYCLER_NON_STORAGE_IND IS NULL AND S.RECYCLER_NON_STORAGE_IND IS NOT NULL)
                    OR (D.RECYCLER_NON_STORAGE_IND IS NOT NULL AND S.RECYCLER_NON_STORAGE_IND IS NULL)
                    OR (D.MANIFEST_BROKER_IND IS NOT NULL AND S.MANIFEST_BROKER_IND IS NOT NULL AND
                        D.MANIFEST_BROKER_IND <> S.MANIFEST_BROKER_IND)
                    OR (D.MANIFEST_BROKER_IND IS NULL AND S.MANIFEST_BROKER_IND IS NOT NULL)
                    OR (D.MANIFEST_BROKER_IND IS NOT NULL AND S.MANIFEST_BROKER_IND IS NULL)
                )
            THEN
            UPDATE
            SET D.HANDLER_ID                     = S.HANDLER_ID,
                D.ACTIVITY_LOCATION              = S.ACTIVITY_LOCATION,
                D.SOURCE_TYPE                    = S.SOURCE_TYPE,
                D.SEQ_NUMBER                     = S.SEQ_NUMBER,
                D.RECEIVE_DATE                   = S.RECEIVE_DATE,
                D.HANDLER_NAME                   = S.HANDLER_NAME,
                D.NON_NOTIFIER_IND               = S.NON_NOTIFIER_IND,
                D.ACCESSIBILITY                  = S.ACCESSIBILITY,
                D.REPORT_CYCLE                   = S.REPORT_CYCLE,
                D.REGION                         = S.REGION,
                D.STATE                          = S.STATE,
                D.EXTRACT_FLAG                   = S.EXTRACT_FLAG,
                D.ACTIVE_SITE                    = S.ACTIVE_SITE,
                D.COUNTY_CODE                    = S.COUNTY_CODE,
                D.COUNTY_NAME                    = S.COUNTY_NAME,
                D.LOCATION_STREET_NUMBER         = S.LOCATION_STREET_NUMBER,
                D.LOCATION_STREET1               = S.LOCATION_STREET1,
                D.LOCATION_STREET2               = S.LOCATION_STREET2,
                D.LOCATION_CITY                  = S.LOCATION_CITY,
                D.LOCATION_STATE                 = S.LOCATION_STATE,
                D.LOCATION_COUNTRY               = S.LOCATION_COUNTRY,
                D.LOCATION_ZIP                   = S.LOCATION_ZIP,
                D.MAIL_STREET_NUMBER             = S.MAIL_STREET_NUMBER,
                D.MAIL_STREET1                   = S.MAIL_STREET1,
                D.MAIL_STREET2                   = S.MAIL_STREET2,
                D.MAIL_CITY                      = S.MAIL_CITY,
                D.MAIL_STATE                     = S.MAIL_STATE,
                D.MAIL_COUNTRY                   = S.MAIL_COUNTRY,
                D.MAIL_ZIP                       = S.MAIL_ZIP,
                D.CONTACT_STREET_NUMBER          = S.CONTACT_STREET_NUMBER,
                D.CONTACT_STREET1                = S.CONTACT_STREET1,
                D.CONTACT_STREET2                = S.CONTACT_STREET2,
                D.CONTACT_CITY                   = S.CONTACT_CITY,
                D.CONTACT_STATE                  = S.CONTACT_STATE,
                D.CONTACT_COUNTRY                = S.CONTACT_COUNTRY,
                D.CONTACT_ZIP                    = S.CONTACT_ZIP,
                D.CONTACT_NAME                   = S.CONTACT_NAME,
                D.CONTACT_PHONE                  = S.CONTACT_PHONE,
                D.CONTACT_FAX                    = S.CONTACT_FAX,
                D.CONTACT_EMAIL                  = S.CONTACT_EMAIL,
                D.CONTACT_TITLE                  = S.CONTACT_TITLE,
                D.OWNER_NAME                     = S.OWNER_NAME,
                D.OWNER_TYPE                     = S.OWNER_TYPE,
                D.OWNER_SEQ_NUM                  = S.OWNER_SEQ_NUM,
                D.OPER_NAME                      = S.OPER_NAME,
                D.OPER_TYPE                      = S.OPER_TYPE,
                D.OPER_SEQ_NUM                   = S.OPER_SEQ_NUM,
                D.NAIC1_CODE                     = S.NAIC1_CODE,
                D.NAIC2_CODE                     = S.NAIC2_CODE,
                D.NAIC3_CODE                     = S.NAIC3_CODE,
                D.NAIC4_CODE                     = S.NAIC4_CODE,
                D.IN_HANDLER_UNIVERSE            = S.IN_HANDLER_UNIVERSE,
                D.IN_A_UNIVERSE                  = S.IN_A_UNIVERSE,
                D.FED_WASTE_GENERATOR_OWNER      = S.FED_WASTE_GENERATOR_OWNER,
                D.FED_WASTE_GENERATOR            = S.FED_WASTE_GENERATOR,
                D.STATE_WASTE_GENERATOR_OWNER    = S.STATE_WASTE_GENERATOR_OWNER,
                D.STATE_WASTE_GENERATOR          = S.STATE_WASTE_GENERATOR,
                D.GEN_STATUS                     = S.GEN_STATUS,
                D.UNIV_WASTE                     = S.UNIV_WASTE,
                D.LAND_TYPE                      = S.LAND_TYPE,
                D.STATE_DISTRICT_OWNER           = S.STATE_DISTRICT_OWNER,
                D.STATE_DISTRICT                 = S.STATE_DISTRICT,
                D.SHORT_TERM_GEN_IND             = S.SHORT_TERM_GEN_IND,
                D.IMPORTER_ACTIVITY              = S.IMPORTER_ACTIVITY,
                D.MIXED_WASTE_GENERATOR          = S.MIXED_WASTE_GENERATOR,
                D.TRANSPORTER_ACTIVITY           = S.TRANSPORTER_ACTIVITY,
                D.TRANSFER_FACILITY_IND          = S.TRANSFER_FACILITY_IND,
                D.RECYCLER_ACTIVITY              = S.RECYCLER_ACTIVITY,
                D.ONSITE_BURNER_EXEMPTION        = S.ONSITE_BURNER_EXEMPTION,
                D.FURNACE_EXEMPTION              = S.FURNACE_EXEMPTION,
                D.UNDERGROUND_INJECTION_ACTIVITY = S.UNDERGROUND_INJECTION_ACTIVITY,
                D.UNIVERSAL_WASTE_DEST_FACILITY  = S.UNIVERSAL_WASTE_DEST_FACILITY,
                D.OFFSITE_WASTE_RECEIPT          = S.OFFSITE_WASTE_RECEIPT,
                D.USED_OIL                       = S.USED_OIL,
                D.FEDERAL_UNIVERSAL_WASTE        = S.FEDERAL_UNIVERSAL_WASTE,
                D.AS_FEDERAL_REGULATED_TSDF      = S.AS_FEDERAL_REGULATED_TSDF,
                D.AS_CONVERTED_TSDF              = S.AS_CONVERTED_TSDF,
                D.AS_STATE_REGULATED_TSDF        = S.AS_STATE_REGULATED_TSDF,
                D.FEDERAL_IND                    = S.FEDERAL_IND,
                D.HSM                            = S.HSM,
                D.SUBPART_K                      = S.SUBPART_K,
                D.COMMERCIAL_TSD                 = S.COMMERCIAL_TSD,
                D.TSD                            = S.TSD,
                D.GPRA_PERMIT                    = S.GPRA_PERMIT,
                D.GPRA_RENEWAL                   = S.GPRA_RENEWAL,
                D.PERMIT_RENEWAL_WRKLD           = S.PERMIT_RENEWAL_WRKLD,
                D.PERM_WRKLD                     = S.PERM_WRKLD,
                D.PERM_PROG                      = S.PERM_PROG,
                D.PC_WRKLD                       = S.PC_WRKLD,
                D.CLOS_WRKLD                     = S.CLOS_WRKLD,
                D.GPRACA                         = S.GPRACA,
                D.CA_WRKLD                       = S.CA_WRKLD,
                D.SUBJ_CA                        = S.SUBJ_CA,
                D.SUBJ_CA_NON_TSD                = S.SUBJ_CA_NON_TSD,
                D.SUBJ_CA_TSD_3004               = S.SUBJ_CA_TSD_3004,
                D.SUBJ_CA_DISCRETION             = S.SUBJ_CA_DISCRETION,
                D.NCAPS                          = S.NCAPS,
                D.EC_IND                         = S.EC_IND,
                D.IC_IND                         = S.IC_IND,
                D.CA_725_IND                     = S.CA_725_IND,
                D.CA_750_IND                     = S.CA_750_IND,
                D.OPERATING_TSDF                 = S.OPERATING_TSDF,
                D.FULL_ENFORCEMENT               = S.FULL_ENFORCEMENT,
                D.SNC                            = S.SNC,
                D.BOY_SNC                        = S.BOY_SNC,
                D.BOY_STATE_UNADDRESSED_SNC      = S.BOY_STATE_UNADDRESSED_SNC,
                D.STATE_UNADDRESSED              = S.STATE_UNADDRESSED,
                D.STATE_ADDRESSED                = S.STATE_ADDRESSED,
                D.BOY_STATE_ADDRESSED            = S.BOY_STATE_ADDRESSED,
                D.STATE_SNC_WITH_COMP_SCHED      = S.STATE_SNC_WITH_COMP_SCHED,
                D.BOY_STATE_SNC_WITH_COMP_SCHED  = S.BOY_STATE_SNC_WITH_COMP_SCHED,
                D.EPA_UNADDRESSED                = S.EPA_UNADDRESSED,
                D.BOY_EPA_UNADDRESSED            = S.BOY_EPA_UNADDRESSED,
                D.EPA_ADDRESSED                  = S.EPA_ADDRESSED,
                D.BOY_EPA_ADDRESSED              = S.BOY_EPA_ADDRESSED,
                D.EPA_SNC_WITH_COMP_SCHED        = S.EPA_SNC_WITH_COMP_SCHED,
                D.BOY_EPA_SNC_WITH_COMP_SCHED    = S.BOY_EPA_SNC_WITH_COMP_SCHED,
                D.FA_REQUIRED                    = S.FA_REQUIRED,
                D.HHANDLER_LAST_CHANGE_DATE      = S.HHANDLER_LAST_CHANGE_DATE,
                D.PUBLIC_NOTES                   = S.PUBLIC_NOTES,
                D.NOTES                          = S.NOTES,
                D.RECOGNIZED_TRADER_IMPORTER_IND = S.RECOGNIZED_TRADER_IMPORTER_IND,
                D.RECOGNIZED_TRADER_EXPORTER_IND = S.RECOGNIZED_TRADER_EXPORTER_IND,
                D.SLAB_IMPORTER_IND              = S.SLAB_IMPORTER_IND,
                D.SLAB_EXPORTER_IND              = S.SLAB_EXPORTER_IND,
                D.RECYCLER_NON_STORAGE_IND       = S.RECYCLER_NON_STORAGE_IND,
                D.MANIFEST_BROKER_IND            = S.MANIFEST_BROKER_IND
        WHEN NOT MATCHED THEN
            INSERT (HANDLER_ID,
                    ACTIVITY_LOCATION,
                    SOURCE_TYPE,
                    SEQ_NUMBER,
                    RECEIVE_DATE,
                    HANDLER_NAME,
                    NON_NOTIFIER_IND,
                    ACCESSIBILITY,
                    REPORT_CYCLE,
                    REGION,
                    STATE,
                    EXTRACT_FLAG,
                    ACTIVE_SITE,
                    COUNTY_CODE,
                    COUNTY_NAME,
                    LOCATION_STREET_NUMBER,
                    LOCATION_STREET1,
                    LOCATION_STREET2,
                    LOCATION_CITY,
                    LOCATION_STATE,
                    LOCATION_COUNTRY,
                    LOCATION_ZIP,
                    MAIL_STREET_NUMBER,
                    MAIL_STREET1,
                    MAIL_STREET2,
                    MAIL_CITY,
                    MAIL_STATE,
                    MAIL_COUNTRY,
                    MAIL_ZIP,
                    CONTACT_STREET_NUMBER,
                    CONTACT_STREET1,
                    CONTACT_STREET2,
                    CONTACT_CITY,
                    CONTACT_STATE,
                    CONTACT_COUNTRY,
                    CONTACT_ZIP,
                    CONTACT_NAME,
                    CONTACT_PHONE,
                    CONTACT_FAX,
                    CONTACT_EMAIL,
                    CONTACT_TITLE,
                    OWNER_NAME,
                    OWNER_TYPE,
                    OWNER_SEQ_NUM,
                    OPER_NAME,
                    OPER_TYPE,
                    OPER_SEQ_NUM,
                    NAIC1_CODE,
                    NAIC2_CODE,
                    NAIC3_CODE,
                    NAIC4_CODE,
                    IN_HANDLER_UNIVERSE,
                    IN_A_UNIVERSE,
                    FED_WASTE_GENERATOR_OWNER,
                    FED_WASTE_GENERATOR,
                    STATE_WASTE_GENERATOR_OWNER,
                    STATE_WASTE_GENERATOR,
                    GEN_STATUS,
                    UNIV_WASTE,
                    LAND_TYPE,
                    STATE_DISTRICT_OWNER,
                    STATE_DISTRICT,
                    SHORT_TERM_GEN_IND,
                    IMPORTER_ACTIVITY,
                    MIXED_WASTE_GENERATOR,
                    TRANSPORTER_ACTIVITY,
                    TRANSFER_FACILITY_IND,
                    RECYCLER_ACTIVITY,
                    ONSITE_BURNER_EXEMPTION,
                    FURNACE_EXEMPTION,
                    UNDERGROUND_INJECTION_ACTIVITY,
                    UNIVERSAL_WASTE_DEST_FACILITY,
                    OFFSITE_WASTE_RECEIPT,
                    USED_OIL,
                    FEDERAL_UNIVERSAL_WASTE,
                    AS_FEDERAL_REGULATED_TSDF,
                    AS_CONVERTED_TSDF,
                    AS_STATE_REGULATED_TSDF,
                    FEDERAL_IND,
                    HSM,
                    SUBPART_K,
                    COMMERCIAL_TSD,
                    TSD,
                    GPRA_PERMIT,
                    GPRA_RENEWAL,
                    PERMIT_RENEWAL_WRKLD,
                    PERM_WRKLD,
                    PERM_PROG,
                    PC_WRKLD,
                    CLOS_WRKLD,
                    GPRACA,
                    CA_WRKLD,
                    SUBJ_CA,
                    SUBJ_CA_NON_TSD,
                    SUBJ_CA_TSD_3004,
                    SUBJ_CA_DISCRETION,
                    NCAPS,
                    EC_IND,
                    IC_IND,
                    CA_725_IND,
                    CA_750_IND,
                    OPERATING_TSDF,
                    FULL_ENFORCEMENT,
                    SNC,
                    BOY_SNC,
                    BOY_STATE_UNADDRESSED_SNC,
                    STATE_UNADDRESSED,
                    STATE_ADDRESSED,
                    BOY_STATE_ADDRESSED,
                    STATE_SNC_WITH_COMP_SCHED,
                    BOY_STATE_SNC_WITH_COMP_SCHED,
                    EPA_UNADDRESSED,
                    BOY_EPA_UNADDRESSED,
                    EPA_ADDRESSED,
                    BOY_EPA_ADDRESSED,
                    EPA_SNC_WITH_COMP_SCHED,
                    BOY_EPA_SNC_WITH_COMP_SCHED,
                    FA_REQUIRED,
                    HHANDLER_LAST_CHANGE_DATE,
                    PUBLIC_NOTES,
                    NOTES,
                    RECOGNIZED_TRADER_IMPORTER_IND,
                    RECOGNIZED_TRADER_EXPORTER_IND,
                    SLAB_IMPORTER_IND,
                    SLAB_EXPORTER_IND,
                    RECYCLER_NON_STORAGE_IND,
                    MANIFEST_BROKER_IND)
            VALUES (S.HANDLER_ID,
                    S.ACTIVITY_LOCATION,
                    S.SOURCE_TYPE,
                    S.SEQ_NUMBER,
                    S.RECEIVE_DATE,
                    S.HANDLER_NAME,
                    S.NON_NOTIFIER_IND,
                    S.ACCESSIBILITY,
                    S.REPORT_CYCLE,
                    S.REGION,
                    S.STATE,
                    S.EXTRACT_FLAG,
                    S.ACTIVE_SITE,
                    S.COUNTY_CODE,
                    S.COUNTY_NAME,
                    S.LOCATION_STREET_NUMBER,
                    S.LOCATION_STREET1,
                    S.LOCATION_STREET2,
                    S.LOCATION_CITY,
                    S.LOCATION_STATE,
                    S.LOCATION_COUNTRY,
                    S.LOCATION_ZIP,
                    S.MAIL_STREET_NUMBER,
                    S.MAIL_STREET1,
                    S.MAIL_STREET2,
                    S.MAIL_CITY,
                    S.MAIL_STATE,
                    S.MAIL_COUNTRY,
                    S.MAIL_ZIP,
                    S.CONTACT_STREET_NUMBER,
                    S.CONTACT_STREET1,
                    S.CONTACT_STREET2,
                    S.CONTACT_CITY,
                    S.CONTACT_STATE,
                    S.CONTACT_COUNTRY,
                    S.CONTACT_ZIP,
                    S.CONTACT_NAME,
                    S.CONTACT_PHONE,
                    S.CONTACT_FAX,
                    S.CONTACT_EMAIL,
                    S.CONTACT_TITLE,
                    S.OWNER_NAME,
                    S.OWNER_TYPE,
                    S.OWNER_SEQ_NUM,
                    S.OPER_NAME,
                    S.OPER_TYPE,
                    S.OPER_SEQ_NUM,
                    S.NAIC1_CODE,
                    S.NAIC2_CODE,
                    S.NAIC3_CODE,
                    S.NAIC4_CODE,
                    S.IN_HANDLER_UNIVERSE,
                    S.IN_A_UNIVERSE,
                    S.FED_WASTE_GENERATOR_OWNER,
                    S.FED_WASTE_GENERATOR,
                    S.STATE_WASTE_GENERATOR_OWNER,
                    S.STATE_WASTE_GENERATOR,
                    S.GEN_STATUS,
                    S.UNIV_WASTE,
                    S.LAND_TYPE,
                    S.STATE_DISTRICT_OWNER,
                    S.STATE_DISTRICT,
                    S.SHORT_TERM_GEN_IND,
                    S.IMPORTER_ACTIVITY,
                    S.MIXED_WASTE_GENERATOR,
                    S.TRANSPORTER_ACTIVITY,
                    S.TRANSFER_FACILITY_IND,
                    S.RECYCLER_ACTIVITY,
                    S.ONSITE_BURNER_EXEMPTION,
                    S.FURNACE_EXEMPTION,
                    S.UNDERGROUND_INJECTION_ACTIVITY,
                    S.UNIVERSAL_WASTE_DEST_FACILITY,
                    S.OFFSITE_WASTE_RECEIPT,
                    S.USED_OIL,
                    S.FEDERAL_UNIVERSAL_WASTE,
                    S.AS_FEDERAL_REGULATED_TSDF,
                    S.AS_CONVERTED_TSDF,
                    S.AS_STATE_REGULATED_TSDF,
                    S.FEDERAL_IND,
                    S.HSM,
                    S.SUBPART_K,
                    S.COMMERCIAL_TSD,
                    S.TSD,
                    S.GPRA_PERMIT,
                    S.GPRA_RENEWAL,
                    S.PERMIT_RENEWAL_WRKLD,
                    S.PERM_WRKLD,
                    S.PERM_PROG,
                    S.PC_WRKLD,
                    S.CLOS_WRKLD,
                    S.GPRACA,
                    S.CA_WRKLD,
                    S.SUBJ_CA,
                    S.SUBJ_CA_NON_TSD,
                    S.SUBJ_CA_TSD_3004,
                    S.SUBJ_CA_DISCRETION,
                    S.NCAPS,
                    S.EC_IND,
                    S.IC_IND,
                    S.CA_725_IND,
                    S.CA_750_IND,
                    S.OPERATING_TSDF,
                    S.FULL_ENFORCEMENT,
                    S.SNC,
                    S.BOY_SNC,
                    S.BOY_STATE_UNADDRESSED_SNC,
                    S.STATE_UNADDRESSED,
                    S.STATE_ADDRESSED,
                    S.BOY_STATE_ADDRESSED,
                    S.STATE_SNC_WITH_COMP_SCHED,
                    S.BOY_STATE_SNC_WITH_COMP_SCHED,
                    S.EPA_UNADDRESSED,
                    S.BOY_EPA_UNADDRESSED,
                    S.EPA_ADDRESSED,
                    S.BOY_EPA_ADDRESSED,
                    S.EPA_SNC_WITH_COMP_SCHED,
                    S.BOY_EPA_SNC_WITH_COMP_SCHED,
                    S.FA_REQUIRED,
                    S.HHANDLER_LAST_CHANGE_DATE,
                    S.PUBLIC_NOTES,
                    S.NOTES,
                    S.RECOGNIZED_TRADER_IMPORTER_IND,
                    S.RECOGNIZED_TRADER_EXPORTER_IND,
                    S.SLAB_IMPORTER_IND,
                    S.SLAB_EXPORTER_IND,
                    S.RECYCLER_NON_STORAGE_IND,
                    S.MANIFEST_BROKER_IND);
        IF @localTran = 1 AND XACT_STATE() = 1
        COMMIT TRAN LocalTran

END TRY
BEGIN CATCH

    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT

    SELECT  @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE()

    IF @localTran = 1 AND XACT_STATE() <> 0
        ROLLBACK TRAN

    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

END CATCH
    END
GO
/****** Object:  StoredProcedure [dbo].[CA_MERGE_DATA]    Script Date: 6/12/2019 2:50:58 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*************************************************************************************************
** ObjectName: CA_MERGE_STATUTORY_CITATION.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the CA-related tables 
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  06/12/2019   ageery      Created.
**
***************************************************************************************************/ --
    CREATE PROCEDURE [dbo].[CA_MERGE_DATA] @DeleteStaging bit = 1 AS
    DECLARE
        @CA_SUBM_ID varchar(40);
    DECLARE @getSubmId CURSOR;
    BEGIN
        SET NOCOUNT ON;
SET XACT_ABORT,
    QUOTED_IDENTIFIER,
    ANSI_NULLS,
    ANSI_PADDING,
    ANSI_WARNINGS,
    ARITHABORT,
    CONCAT_NULL_YIELDS_NULL ON;
SET NUMERIC_ROUNDABORT OFF;

DECLARE @int INT;

DECLARE @localTran BIT
IF @@TRANCOUNT = 0
BEGIN
    SET @localTran = 1
    BEGIN TRANSACTION LocalTran
END

BEGIN TRY
        SET @getSubmId = CURSOR FOR
            SELECT CA_SUBM_ID
            FROM NODE_RCRA_CA_SUBM
            WHERE CA_SUBM_ID NOT IN (SELECT SUBM_ID FROM ETL_RUN WHERE SUBM_ID IS NOT NULL AND ETL_TYPE = 'CA');
        OPEN @getSubmId;
        FETCH NEXT FROM @getSubmId
            INTO @CA_SUBM_ID;
        WHILE @@FETCH_STATUS = 0
        BEGIN
            EXEC CA_LOG_HANDLERS @CA_SUBM_ID = @CA_SUBM_ID;
            EXEC CA_MERGE_FAC_SUBM @CA_SUBM_ID = @CA_SUBM_ID;
            EXEC CA_MERGE_EVENT @CA_SUBM_ID = @CA_SUBM_ID;
            EXEC CA_MERGE_EVENT_COMMITMENT @CA_SUBM_ID = @CA_SUBM_ID;
            EXEC CA_MERGE_AREA @CA_SUBM_ID = @CA_SUBM_ID;
            EXEC CA_MERGE_AREA_REL_EVENT @CA_SUBM_ID = @CA_SUBM_ID;
            EXEC CA_MERGE_REL_PERMIT_UNIT @CA_SUBM_ID = @CA_SUBM_ID;
            EXEC CA_MERGE_AUTHORITY @CA_SUBM_ID = @CA_SUBM_ID;
            EXEC CA_MERGE_AUTH_REL_EVENT @CA_SUBM_ID = @CA_SUBM_ID;
            EXEC CA_MERGE_STATUTORY_CITATION @CA_SUBM_ID = @CA_SUBM_ID;
            IF @DeleteStaging = 1
                BEGIN
                    DELETE
                    FROM NODE_RCRA_CA_SUBM
                    WHERE CURRENT OF @getSubmId;
                END;
            FETCH NEXT FROM @getSubmId
                INTO @CA_SUBM_ID;
        END;
        CLOSE @getSubmId;
        DEALLOCATE @getSubmId;
        IF @localTran = 1 AND XACT_STATE() = 1
        COMMIT TRAN LocalTran

END TRY
BEGIN CATCH

    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT

    SELECT  @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE()

    IF @localTran = 1 AND XACT_STATE() <> 0
        ROLLBACK TRAN

    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

END CATCH
    END
GO
/****** Object:  StoredProcedure [dbo].[CME_MERGE_DATA]    Script Date: 6/12/2019 2:50:58 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*************************************************************************************************
** ObjectName: CME_MERGE_DATA.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the CME-related tables 
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  06/12/2019   ageery      Created.
**
***************************************************************************************************/ --
    CREATE PROCEDURE [dbo].[CME_MERGE_DATA] @DeleteStaging bit = 1 AS
    DECLARE
        @CME_SUBM_ID varchar(40);
    DECLARE @getSubmId CURSOR;
    BEGIN
        SET NOCOUNT ON;
SET XACT_ABORT,
    QUOTED_IDENTIFIER,
    ANSI_NULLS,
    ANSI_PADDING,
    ANSI_WARNINGS,
    ARITHABORT,
    CONCAT_NULL_YIELDS_NULL ON;
SET NUMERIC_ROUNDABORT OFF;

DECLARE @int INT;

DECLARE @localTran BIT
IF @@TRANCOUNT = 0
BEGIN
    SET @localTran = 1
    BEGIN TRANSACTION LocalTran
END

BEGIN TRY
        SET @getSubmId = CURSOR FOR
            SELECT CME_SUBM_ID
            FROM NODE_RCRA_CME_SUBM
            WHERE CME_SUBM_ID NOT IN (SELECT SUBM_ID FROM ETL_RUN WHERE SUBM_ID IS NOT NULL AND ETL_TYPE = 'CE');
        OPEN @getSubmId;
        FETCH NEXT FROM @getSubmId
            INTO @CME_SUBM_ID;
        WHILE @@FETCH_STATUS = 0
        BEGIN
            EXEC CME_LOG_HANDLERS @CME_SUBM_ID = @CME_SUBM_ID;
            EXEC CME_MERGE_FAC_SUBM @CME_SUBM_ID = @CME_SUBM_ID;
            EXEC CME_MERGE_VIOL @CME_SUBM_ID = @CME_SUBM_ID;
            EXEC CME_MERGE_CITATION @CME_SUBM_ID = @CME_SUBM_ID;
            EXEC CME_MERGE_EVAL @CME_SUBM_ID = @CME_SUBM_ID;
            EXEC CME_MERGE_EVAL_COMMIT @CME_SUBM_ID = @CME_SUBM_ID;
            EXEC CME_MERGE_EVAL_VIOL @CME_SUBM_ID = @CME_SUBM_ID;
            EXEC CME_MERGE_RQST @CME_SUBM_ID = @CME_SUBM_ID;
            EXEC CME_MERGE_ENFRC_ACT @CME_SUBM_ID = @CME_SUBM_ID;
            EXEC CME_MERGE_CSNY_DATE @CME_SUBM_ID = @CME_SUBM_ID;
            EXEC CME_MERGE_MEDIA @CME_SUBM_ID = @CME_SUBM_ID;
            EXEC CME_MERGE_MILESTONE @CME_SUBM_ID = @CME_SUBM_ID;
            EXEC CME_MERGE_SUPP_ENVR_PRJT @CME_SUBM_ID = @CME_SUBM_ID;
            EXEC CME_MERGE_VIOL_ENFRC @CME_SUBM_ID = @CME_SUBM_ID;
            EXEC CME_MERGE_PNLTY @CME_SUBM_ID = @CME_SUBM_ID;
            EXEC CME_MERGE_PYMT @CME_SUBM_ID = @CME_SUBM_ID;
            IF @DeleteStaging = 1
                BEGIN
                    DELETE
                    FROM NODE_RCRA_CME_SUBM
                    WHERE CURRENT OF @getSubmId;
                END;
            FETCH NEXT FROM @getSubmId
                INTO @CME_SUBM_ID;
        END;
        CLOSE @getSubmId;
        DEALLOCATE @getSubmId;
        IF @localTran = 1 AND XACT_STATE() = 1
        COMMIT TRAN LocalTran

END TRY
BEGIN CATCH

    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT

    SELECT  @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE()

    IF @localTran = 1 AND XACT_STATE() <> 0
        ROLLBACK TRAN

    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

END CATCH
    END
GO
/****** Object:  StoredProcedure [dbo].[FA_MERGE_DATA]    Script Date: 6/12/2019 2:50:58 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*************************************************************************************************
** ObjectName: FA_MERGE_COST_EST_REL_MECH.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the FA-related tables 
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  06/12/2019   ageery      Created.
**
***************************************************************************************************/ --
    CREATE PROCEDURE [dbo].[FA_MERGE_DATA] @DeleteStaging bit = 1 AS
    DECLARE
        @FA_SUBM_ID varchar(40);
    DECLARE @getSubmId CURSOR;
    BEGIN
        SET NOCOUNT ON;
SET XACT_ABORT,
    QUOTED_IDENTIFIER,
    ANSI_NULLS,
    ANSI_PADDING,
    ANSI_WARNINGS,
    ARITHABORT,
    CONCAT_NULL_YIELDS_NULL ON;
SET NUMERIC_ROUNDABORT OFF;

DECLARE @int INT;

DECLARE @localTran BIT
IF @@TRANCOUNT = 0
BEGIN
    SET @localTran = 1
    BEGIN TRANSACTION LocalTran
END

BEGIN TRY
        SET @getSubmId = CURSOR FOR
            SELECT FA_SUBM_ID
            FROM NODE_RCRA_FA_SUBM
            WHERE FA_SUBM_ID NOT IN (SELECT SUBM_ID FROM ETL_RUN WHERE SUBM_ID IS NOT NULL AND ETL_TYPE = 'FA');
        OPEN @getSubmId;
        FETCH NEXT FROM @getSubmId
            INTO @FA_SUBM_ID;
        WHILE @@FETCH_STATUS = 0
        BEGIN
            EXEC FA_LOG_HANDLERS @FA_SUBM_ID = @FA_SUBM_ID;
            EXEC FA_MERGE_FAC_SUBM @FA_SUBM_ID = @FA_SUBM_ID;
            EXEC FA_MERGE_MECHANISM @FA_SUBM_ID = @FA_SUBM_ID;
            EXEC FA_MERGE_MECHANISM_DETAIL @FA_SUBM_ID = @FA_SUBM_ID;
            EXEC FA_MERGE_COST_EST @FA_SUBM_ID = @FA_SUBM_ID;
            EXEC FA_MERGE_COST_EST_REL_MECH @FA_SUBM_ID = @FA_SUBM_ID;
            IF @DeleteStaging = 1
                BEGIN
                    DELETE
                    FROM NODE_RCRA_FA_SUBM
                    WHERE CURRENT OF @getSubmId;
                END
            FETCH NEXT FROM @getSubmId
                INTO @FA_SUBM_ID;
        END;
        CLOSE @getSubmId;
        DEALLOCATE @getSubmId;
        IF @localTran = 1 AND XACT_STATE() = 1
        COMMIT TRAN LocalTran

END TRY
BEGIN CATCH

    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT

    SELECT  @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE()

    IF @localTran = 1 AND XACT_STATE() <> 0
        ROLLBACK TRAN

    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

END CATCH
    END
GO
/****** Object:  StoredProcedure [dbo].[GIS_MERGE_DATA]    Script Date: 6/12/2019 2:50:58 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*************************************************************************************************
** ObjectName: GIS_MERGE_DATA.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the GIS-related tables 
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  06/12/2019   ageery      Created.
**
***************************************************************************************************/ --
    CREATE PROCEDURE [dbo].[GIS_MERGE_DATA] @DeleteStaging bit = 1 AS
    DECLARE
        @GIS_SUBM_ID varchar(40);
    DECLARE @getSubmId CURSOR;
    BEGIN
        SET NOCOUNT ON;
SET XACT_ABORT,
    QUOTED_IDENTIFIER,
    ANSI_NULLS,
    ANSI_PADDING,
    ANSI_WARNINGS,
    ARITHABORT,
    CONCAT_NULL_YIELDS_NULL ON;
SET NUMERIC_ROUNDABORT OFF;

DECLARE @int INT;

DECLARE @localTran BIT
IF @@TRANCOUNT = 0
BEGIN
    SET @localTran = 1
    BEGIN TRANSACTION LocalTran
END

BEGIN TRY
        SET @getSubmId = CURSOR FOR
            SELECT GIS_SUBM_ID
            FROM NODE_RCRA_GIS_SUBM
            WHERE GIS_SUBM_ID NOT IN (SELECT SUBM_ID FROM ETL_RUN WHERE SUBM_ID IS NOT NULL AND ETL_TYPE = 'GS');
        OPEN @getSubmId;
        FETCH NEXT FROM @getSubmId
            INTO @GIS_SUBM_ID;
        WHILE @@FETCH_STATUS = 0
        BEGIN
            EXEC GIS_LOG_HANDLERS @GIS_SUBM_ID = @GIS_SUBM_ID;
            EXEC GIS_MERGE_FAC_SUBM @GIS_SUBM_ID = @GIS_SUBM_ID;
            EXEC GIS_MERGE_RCRA_GIS_GEO_INFO @GIS_SUBM_ID = @GIS_SUBM_ID;
            IF @DeleteStaging = 1
                BEGIN
                    DELETE
                    FROM NODE_RCRA_GIS_SUBM
                    WHERE CURRENT OF @getSubmId;
                END;
            FETCH NEXT FROM @getSubmId
                INTO @GIS_SUBM_ID;
        END;
        CLOSE @getSubmId;
        DEALLOCATE @getSubmId;
        IF @localTran = 1 AND XACT_STATE() = 1
        COMMIT TRAN LocalTran

END TRY
BEGIN CATCH

    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT

    SELECT  @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE()

    IF @localTran = 1 AND XACT_STATE() <> 0
        ROLLBACK TRAN

    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

END CATCH
    END
GO
/****** Object:  StoredProcedure [dbo].[HD_MERGE_DATA]    Script Date: 6/12/2019 2:50:58 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*************************************************************************************************
** ObjectName: HD_MERGE_DATA.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the HD-related tables 
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  06/12/2019   ageery      Created.
**
***************************************************************************************************/ --
    CREATE PROCEDURE [dbo].[HD_MERGE_DATA] @DeleteStaging bit = 1 AS
    DECLARE
        @HD_SUBM_ID varchar(40);
    DECLARE @getSubmId CURSOR;
    BEGIN
        SET NOCOUNT ON;
SET XACT_ABORT,
    QUOTED_IDENTIFIER,
    ANSI_NULLS,
    ANSI_PADDING,
    ANSI_WARNINGS,
    ARITHABORT,
    CONCAT_NULL_YIELDS_NULL ON;
SET NUMERIC_ROUNDABORT OFF;

DECLARE @int INT;

DECLARE @localTran BIT
IF @@TRANCOUNT = 0
BEGIN
    SET @localTran = 1
    BEGIN TRANSACTION LocalTran
END

BEGIN TRY
        SET @getSubmId = CURSOR FOR
            SELECT HD_SUBM_ID
            FROM NODE_RCRA_HD_SUBM
            WHERE HD_SUBM_ID NOT IN (SELECT SUBM_ID FROM ETL_RUN WHERE SUBM_ID IS NOT NULL AND ETL_TYPE = 'HD');
        OPEN @getSubmId;
        FETCH NEXT FROM @getSubmId
            INTO @HD_SUBM_ID;
        WHILE @@FETCH_STATUS = 0
        BEGIN
            EXEC HD_LOG_HANDLERS @HD_SUBM_ID = @HD_SUBM_ID;
            EXEC HD_MERGE_HBASIC @HD_SUBM_ID = @HD_SUBM_ID;
            EXEC HD_MERGE_HANDLER @HD_SUBM_ID = @HD_SUBM_ID;
            EXEC HD_MERGE_NAICS @HD_SUBM_ID = @HD_SUBM_ID;
            EXEC HD_MERGE_CERTIFICATION @HD_SUBM_ID = @HD_SUBM_ID;
            EXEC HD_MERGE_ENV_PERMIT @HD_SUBM_ID = @HD_SUBM_ID;
            EXEC HD_MERGE_WASTE_CODE @HD_SUBM_ID = @HD_SUBM_ID;
            EXEC HD_MERGE_UNIVERSAL_WASTE @HD_SUBM_ID = @HD_SUBM_ID;
            EXEC HD_MERGE_STATE_ACTIVITY @HD_SUBM_ID = @HD_SUBM_ID;
            EXEC HD_MERGE_OWNEROP @HD_SUBM_ID = @HD_SUBM_ID;
            EXEC HD_MERGE_SEC_MATERIAL_ACTIVITY @HD_SUBM_ID = @HD_SUBM_ID;
            EXEC HD_MERGE_SEC_WASTE_CODE @HD_SUBM_ID = @HD_SUBM_ID;
            EXEC HD_MERGE_OTHER_ID @HD_SUBM_ID = @HD_SUBM_ID;
            EXEC HD_MERGE_LQG_CONSOLIDATION @HD_SUBM_ID = @HD_SUBM_ID;
            EXEC HD_MERGE_LQG_CLOSURE @HD_SUBM_ID = @HD_SUBM_ID;
            EXEC HD_MERGE_EPISODIC_EVENT @HD_SUBM_ID = @HD_SUBM_ID;
            EXEC HD_MERGE_EPISODIC_WASTE @HD_SUBM_ID = @HD_SUBM_ID;
            EXEC HD_MERGE_EPISODIC_WASTE_CODE @HD_SUBM_ID = @HD_SUBM_ID;
            IF @DeleteStaging = 1
                BEGIN
                    DELETE
                    FROM NODE_RCRA_HD_SUBM
                    WHERE CURRENT OF @getSubmId;
                END;
            FETCH NEXT FROM @getSubmId
                INTO @HD_SUBM_ID;
        END;
        CLOSE @getSubmId;
        DEALLOCATE @getSubmId;
        IF @localTran = 1 AND XACT_STATE() = 1
        COMMIT TRAN LocalTran

END TRY
BEGIN CATCH

    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT

    SELECT  @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE()

    IF @localTran = 1 AND XACT_STATE() <> 0
        ROLLBACK TRAN

    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

END CATCH
    END
GO
/****** Object:  StoredProcedure [dbo].[PRM_MERGE_DATA]    Script Date: 6/12/2019 2:50:58 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*************************************************************************************************
** ObjectName: PRM_MERGE_RELATED_EVENT.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into the PRM-related tables 
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  06/12/2019   ageery      Created.
**
***************************************************************************************************/ --
    CREATE PROCEDURE [dbo].[PRM_MERGE_DATA] @DeleteStaging bit = 1 AS
    DECLARE
        @PRM_SUBM_ID varchar(40);
    DECLARE @getSubmId CURSOR;
    BEGIN
        SET NOCOUNT ON;
SET XACT_ABORT,
    QUOTED_IDENTIFIER,
    ANSI_NULLS,
    ANSI_PADDING,
    ANSI_WARNINGS,
    ARITHABORT,
    CONCAT_NULL_YIELDS_NULL ON;
SET NUMERIC_ROUNDABORT OFF;

DECLARE @int INT;

DECLARE @localTran BIT
IF @@TRANCOUNT = 0
BEGIN
    SET @localTran = 1
    BEGIN TRANSACTION LocalTran
END

BEGIN TRY
        SET @getSubmId = CURSOR FOR
            SELECT PRM_SUBM_ID
            FROM NODE_RCRA_PRM_SUBM
            WHERE PRM_SUBM_ID NOT IN (SELECT SUBM_ID FROM ETL_RUN WHERE SUBM_ID IS NOT NULL AND ETL_TYPE = 'PM');
        OPEN @getSubmId;
        FETCH NEXT FROM @getSubmId
            INTO @PRM_SUBM_ID;
        WHILE @@FETCH_STATUS = 0
        BEGIN
            EXEC PRM_LOG_HANDLERS @PRM_SUBM_ID = @PRM_SUBM_ID;
            EXEC PRM_MERGE_FAC_SUBM @PRM_SUBM_ID = @PRM_SUBM_ID;
            EXEC PRM_MERGE_SERIES @PRM_SUBM_ID = @PRM_SUBM_ID;
            EXEC PRM_MERGE_UNIT @PRM_SUBM_ID = @PRM_SUBM_ID;
            EXEC PRM_MERGE_UNIT_DETAIL @PRM_SUBM_ID = @PRM_SUBM_ID;
            EXEC PRM_MERGE_WASTE_CODE @PRM_SUBM_ID = @PRM_SUBM_ID;
            EXEC PRM_MERGE_EVENT @PRM_SUBM_ID = @PRM_SUBM_ID;
            EXEC PRM_MERGE_EVENT_COMMITMENT @PRM_SUBM_ID = @PRM_SUBM_ID;
            EXEC PRM_MERGE_RELATED_EVENT @PRM_SUBM_ID = @PRM_SUBM_ID;
            IF @DeleteStaging = 1
                BEGIN
                    DELETE
                    FROM NODE_RCRA_PRM_SUBM
                    WHERE CURRENT OF @getSubmId;
                END;
            FETCH NEXT FROM @getSubmId
                INTO @PRM_SUBM_ID;
        END;
        CLOSE @getSubmId;
        DEALLOCATE @getSubmId;
        IF @localTran = 1 AND XACT_STATE() = 1
        COMMIT TRAN LocalTran

END TRY
BEGIN CATCH

    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT

    SELECT  @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE()

    IF @localTran = 1 AND XACT_STATE() <> 0
        ROLLBACK TRAN

    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

END CATCH
    END
GO
/****** Object:  StoredProcedure [dbo].[RU_MERGE_DATA]    Script Date: 6/12/2019 2:50:58 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*************************************************************************************************
** ObjectName: RU_MERGE_DATA.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into RU-related tables 
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  06/12/2019   ageery      Created.
**
***************************************************************************************************/ --
    CREATE PROCEDURE [dbo].[RU_MERGE_DATA] @DeleteStaging bit = 1 AS
    DECLARE
        @RU_SUBM_ID varchar(40);
    DECLARE @getSubmId CURSOR;
    BEGIN
        SET NOCOUNT ON;
SET XACT_ABORT,
    QUOTED_IDENTIFIER,
    ANSI_NULLS,
    ANSI_PADDING,
    ANSI_WARNINGS,
    ARITHABORT,
    CONCAT_NULL_YIELDS_NULL ON;
SET NUMERIC_ROUNDABORT OFF;

DECLARE @int INT;

DECLARE @localTran BIT
IF @@TRANCOUNT = 0
BEGIN
    SET @localTran = 1
    BEGIN TRANSACTION LocalTran
END

BEGIN TRY
        SET @getSubmId = CURSOR FOR
            SELECT RU_SUBM_ID
            FROM NODE_RCRA_RU_SUBM
            WHERE RU_SUBM_ID NOT IN (SELECT SUBM_ID FROM ETL_RUN WHERE SUBM_ID IS NOT NULL AND ETL_TYPE = 'RU');
        OPEN @getSubmId;
        FETCH NEXT FROM @getSubmId
            INTO @RU_SUBM_ID;
        WHILE @@FETCH_STATUS = 0
        BEGIN
            EXEC RU_LOG_HANDLERS @RU_SUBM_ID = @RU_SUBM_ID;
            EXEC RU_MERGE_REPORT_UNIV @RU_SUBM_ID = @RU_SUBM_ID;
            IF @DeleteStaging = 1
                BEGIN
                    DELETE
                    FROM NODE_RCRA_RU_SUBM
                    WHERE CURRENT OF @getSubmId;
                END;
            FETCH NEXT FROM @getSubmId
                INTO @RU_SUBM_ID;
        END;
        CLOSE @getSubmId;
        DEALLOCATE @getSubmId;
        IF @localTran = 1 AND XACT_STATE() = 1
        COMMIT TRAN LocalTran

END TRY
BEGIN CATCH

    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT

    SELECT  @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE()

    IF @localTran = 1 AND XACT_STATE() <> 0
        ROLLBACK TRAN

    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

END CATCH
    END
GO
/****** Object:  StoredProcedure [dbo].[EM_MERGE_DATA]    Script Date: 6/12/2019 2:50:58 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*************************************************************************************************
** ObjectName: EM_MERGE_DATA.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into EM-related tables 
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  06/12/2019   ageery      Created.
**
***************************************************************************************************/ --
    CREATE PROCEDURE [dbo].[EM_MERGE_DATA] @DeleteStaging bit = 1 AS
    DECLARE
        @EM_SUBM_ID varchar(40);
    DECLARE @getSubmId CURSOR;
    BEGIN
        SET NOCOUNT ON;
SET XACT_ABORT,
    QUOTED_IDENTIFIER,
    ANSI_NULLS,
    ANSI_PADDING,
    ANSI_WARNINGS,
    ARITHABORT,
    CONCAT_NULL_YIELDS_NULL ON;
SET NUMERIC_ROUNDABORT OFF;

DECLARE @int INT;

DECLARE @localTran BIT
IF @@TRANCOUNT = 0
BEGIN
    SET @localTran = 1
    BEGIN TRANSACTION LocalTran
END

BEGIN TRY
        SET @getSubmId = CURSOR FOR
            SELECT EM_SUBM_ID
            FROM NODE_RCRA_EM_SUBM
            WHERE EM_SUBM_ID NOT IN (SELECT SUBM_ID FROM ETL_RUN WHERE SUBM_ID IS NOT NULL AND ETL_TYPE = 'EM');
        OPEN @getSubmId;
        FETCH NEXT FROM @getSubmId
            INTO @EM_SUBM_ID;
        WHILE @@FETCH_STATUS = 0
        BEGIN
            EXEC EM_LOG_HANDLERS @EM_SUBM_ID = @EM_SUBM_ID;
            EXEC EM_MERGE_EMANIFEST @EM_SUBM_ID = @EM_SUBM_ID;
            EXEC EM_MERGE_EMANIFEST_COMMENT @EM_SUBM_ID = @EM_SUBM_ID;
            EXEC EM_MERGE_HANDLER @EM_SUBM_ID = @EM_SUBM_ID;
            EXEC EM_MERGE_WASTE @EM_SUBM_ID = @EM_SUBM_ID;
            EXEC EM_MERGE_TR_NUM_ORIG @EM_SUBM_ID = @EM_SUBM_ID;
            EXEC EM_MERGE_TR_NUM_REJ @EM_SUBM_ID = @EM_SUBM_ID;
            EXEC EM_MERGE_TR_NUM_RESIDUE_NEW @EM_SUBM_ID = @EM_SUBM_ID;
            EXEC EM_MERGE_TR_NUM_WASTE @EM_SUBM_ID = @EM_SUBM_ID;
            EXEC EM_MERGE_WASTE_CD_FED @EM_SUBM_ID = @EM_SUBM_ID;
            EXEC EM_MERGE_WASTE_CD_GEN @EM_SUBM_ID = @EM_SUBM_ID;
            EXEC EM_MERGE_WASTE_CD_TRANS @EM_SUBM_ID = @EM_SUBM_ID;
            EXEC EM_MERGE_WASTE_CD_TSDF @EM_SUBM_ID = @EM_SUBM_ID;
            EXEC EM_MERGE_WASTE_COMMENT @EM_SUBM_ID = @EM_SUBM_ID;
            EXEC EM_MERGE_WASTE_PCB @EM_SUBM_ID = @EM_SUBM_ID;
            IF @DeleteStaging = 1
                BEGIN
                    DELETE
                    FROM NODE_RCRA_EM_SUBM
                    WHERE CURRENT OF @getSubmId;
                END;
            FETCH NEXT FROM @getSubmId
                INTO @EM_SUBM_ID;
        END;
        CLOSE @getSubmId;
        DEALLOCATE @getSubmId;
        IF @localTran = 1 AND XACT_STATE() = 1
        COMMIT TRAN LocalTran

END TRY
BEGIN CATCH

    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT

    SELECT  @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE()

    IF @localTran = 1 AND XACT_STATE() <> 0
        ROLLBACK TRAN

    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

END CATCH
    END
GO
/****** Object:  StoredProcedure [dbo].[RCRA_MERGE_DATA]    Script Date: 6/12/2019 2:50:58 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*************************************************************************************************
** ObjectName: RCRA_MERGE_DATA.sql
**
** Author: Windsor Solutions, Inc.
**
** Company Name: Windsor Solutions, Inc.
**
** Description:  Merges staging data into this database 
**
** Revision History:
** ------------------------------------------------------------------------------------------------
**  Date         Name        Description
** ------------------------------------------------------------------------------------------------
**  06/12/2019   ageery      Created.
**
***************************************************************************************************/ --
    CREATE PROCEDURE [dbo].[RCRA_MERGE_DATA] @DeleteStaging bit = 1 AS
    BEGIN
        SET NOCOUNT ON;
SET XACT_ABORT,
    QUOTED_IDENTIFIER,
    ANSI_NULLS,
    ANSI_PADDING,
    ANSI_WARNINGS,
    ARITHABORT,
    CONCAT_NULL_YIELDS_NULL ON;
SET NUMERIC_ROUNDABORT OFF;

DECLARE @int INT;

DECLARE @localTran BIT
IF @@TRANCOUNT = 0
BEGIN
    SET @localTran = 1
    BEGIN TRANSACTION LocalTran
END

BEGIN TRY
        EXEC CA_MERGE_DATA @DeleteStaging = @DeleteStaging;
        EXEC CME_MERGE_DATA @DeleteStaging = @DeleteStaging;
        EXEC FA_MERGE_DATA @DeleteStaging = @DeleteStaging;
        EXEC GIS_MERGE_DATA @DeleteStaging = @DeleteStaging;
        EXEC HD_MERGE_DATA @DeleteStaging = @DeleteStaging;
        EXEC PRM_MERGE_DATA @DeleteStaging = @DeleteStaging;
        EXEC RU_MERGE_DATA @DeleteStaging = @DeleteStaging;
        EXEC EM_MERGE_DATA @DeleteStaging = @DeleteStaging;
        IF @localTran = 1 AND XACT_STATE() = 1
        COMMIT TRAN LocalTran

END TRY
BEGIN CATCH

    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT

    SELECT  @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE()

    IF @localTran = 1 AND XACT_STATE() <> 0
        ROLLBACK TRAN

    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)

END CATCH
    END
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: A list of Correction Action Areas for a particluar Handler (_PK)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CA_AREA', @level2type=N'COLUMN',@level2name=N'CA_AREA_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: A list of Correction Action Areas for a particluar Handler (_FK)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CA_AREA', @level2type=N'COLUMN',@level2name=N'CA_FAC_SUBM_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Transaction code used to define the add, update, or delete. (TransactionCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CA_AREA', @level2type=N'COLUMN',@level2name=N'TRANS_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Code used for administrative purposes to uniquely designate a group of units (or a single unit) with a common history and projection of corrective action requirements. (AreaSequenceNumber)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CA_AREA', @level2type=N'COLUMN',@level2name=N'AREA_SEQ_NUM'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates that the corrective action applies to the entire facility. (FacilityWideIndicator)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CA_AREA', @level2type=N'COLUMN',@level2name=N'FAC_WIDE_IND'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the Corrective Action area. (AreaName)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CA_AREA', @level2type=N'COLUMN',@level2name=N'AREA_NAME'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates that there has been a release to air (either within or beyond the facility boundary) from the unit/area. This may include releases of subsurface gas. (AirReleaseIndicator)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CA_AREA', @level2type=N'COLUMN',@level2name=N'AIR_REL_IND'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates that there has been a release to groundwater from the unit/area. (GroundwaterReleaseIndicator)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CA_AREA', @level2type=N'COLUMN',@level2name=N'GROUNDWATER_REL_IND'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates that there has been a release to soil (either within or beyond the facility boundary) from the unit/area. This may include subsoil contamination beneath the unit/area. (SoilReleaseIndicator)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CA_AREA', @level2type=N'COLUMN',@level2name=N'SOIL_REL_IND'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates that there has been a release to surface water (either within or beyond the facility boundary) from the unit/area. (SurfaceWaterReleaseIndicator)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CA_AREA', @level2type=N'COLUMN',@level2name=N'SURFACE_WATER_REL_IND'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates that the corrective action applies to a regulated unit. (RegulatedUnitIndicator)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CA_AREA', @level2type=N'COLUMN',@level2name=N'REGULATED_UNIT_IND'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates the agency that defines the person identifier. (EPAResponsiblePersonDataOwnerCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CA_AREA', @level2type=N'COLUMN',@level2name=N'EPA_RESP_PERSON_DATA_OWNER_CDE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The person currently responsible for the permit at the EPA level. (EPAResponsiblePersonID)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CA_AREA', @level2type=N'COLUMN',@level2name=N'EPA_RESP_PERSON_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates the agency that defines the person identifier. (StateResponsiblePersonDataOwnerCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CA_AREA', @level2type=N'COLUMN',@level2name=N'STA_RESP_PERSON_DATA_OWNER_CDE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The state person currently responsible for overseeing the corrective action area. (StateResponsiblePersonID)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CA_AREA', @level2type=N'COLUMN',@level2name=N'STA_RESP_PERSON_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Notes providing more information. (SupplementalInformationText)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CA_AREA', @level2type=N'COLUMN',@level2name=N'SUPP_INFO_TXT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Schema element: CorrectiveActionAreaDataType' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CA_AREA'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Linking Data for Corrective Action Areas and Events or Authorities and Events (_PK)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CA_AREA_REL_EVENT', @level2type=N'COLUMN',@level2name=N'CA_AREA_REL_EVENT_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Linking Data for Corrective Action Areas and Events or Authorities and Events (_FK)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CA_AREA_REL_EVENT', @level2type=N'COLUMN',@level2name=N'CA_AREA_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Transaction code used to define the add, update, or delete. (TransactionCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CA_AREA_REL_EVENT', @level2type=N'COLUMN',@level2name=N'TRANS_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates the location of the agency regulating the handler. (ActivityLocationCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CA_AREA_REL_EVENT', @level2type=N'COLUMN',@level2name=N'ACT_LOC_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates the agency that defines the corrective action event. (CorrectiveActionEventDataOwnerCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CA_AREA_REL_EVENT', @level2type=N'COLUMN',@level2name=N'CORCT_ACT_EVENT_DATA_OWNER_CDE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code which corresponds to a specific event or event type. The first two characters indicate the event category and the last three characters the numeric event number. (CorrectiveActionEventCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CA_AREA_REL_EVENT', @level2type=N'COLUMN',@level2name=N'CORCT_ACT_EVENT_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Agency responsible for the event. (EventAgencyCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CA_AREA_REL_EVENT', @level2type=N'COLUMN',@level2name=N'EVENT_AGN_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'System-generated value used to uniquely identify multiple occurrences of a corrective action event. (EventSequenceNumber)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CA_AREA_REL_EVENT', @level2type=N'COLUMN',@level2name=N'EVENT_SEQ_NUM'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Schema element: CorrectiveActionAreaRelatedEventDataType' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CA_AREA_REL_EVENT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Linking Data for Corrective Action Areas and Events or Authorities and Events (_PK)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CA_AUTH_REL_EVENT', @level2type=N'COLUMN',@level2name=N'CA_AUTH_REL_EVENT_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Linking Data for Corrective Action Areas and Events or Authorities and Events (_FK)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CA_AUTH_REL_EVENT', @level2type=N'COLUMN',@level2name=N'CA_AUTHORITY_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Transaction code used to define the add, update, or delete. (TransactionCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CA_AUTH_REL_EVENT', @level2type=N'COLUMN',@level2name=N'TRANS_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates the location of the agency regulating the handler. (ActivityLocationCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CA_AUTH_REL_EVENT', @level2type=N'COLUMN',@level2name=N'ACT_LOC_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates the agency that defines the corrective action event. (CorrectiveActionEventDataOwnerCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CA_AUTH_REL_EVENT', @level2type=N'COLUMN',@level2name=N'CORCT_ACT_EVENT_DATA_OWNER_CDE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code which corresponds to a specific event or event type. The first two characters indicate the event category and the last three characters the numeric event number. (CorrectiveActionEventCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CA_AUTH_REL_EVENT', @level2type=N'COLUMN',@level2name=N'CORCT_ACT_EVENT_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Agency responsible for the event. (EventAgencyCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CA_AUTH_REL_EVENT', @level2type=N'COLUMN',@level2name=N'EVENT_AGN_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'System-generated value used to uniquely identify multiple occurrences of a corrective action event. (EventSequenceNumber)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CA_AUTH_REL_EVENT', @level2type=N'COLUMN',@level2name=N'EVENT_SEQ_NUM'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Schema element: CorrectiveActionAuthorityRelatedEventDataType' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CA_AUTH_REL_EVENT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: A list of Correction Action Authorities for a particluar Handler (_PK)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CA_AUTHORITY', @level2type=N'COLUMN',@level2name=N'CA_AUTHORITY_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: A list of Correction Action Authorities for a particluar Handler (_FK)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CA_AUTHORITY', @level2type=N'COLUMN',@level2name=N'CA_FAC_SUBM_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Transaction code used to define the add, update, or delete. (TransactionCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CA_AUTHORITY', @level2type=N'COLUMN',@level2name=N'TRANS_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates the location of the agency regulating the handler. (ActivityLocationCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CA_AUTHORITY', @level2type=N'COLUMN',@level2name=N'ACT_LOC_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates the agency that defines the authority. (AuthorityDataOwnerCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CA_AUTHORITY', @level2type=N'COLUMN',@level2name=N'AUTHORITY_DATA_OWNER_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code used to indicate whether a permit, administrative order, or other authority has been issued to implement the corrective action process. (AuthorityTypeCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CA_AUTHORITY', @level2type=N'COLUMN',@level2name=N'AUTHORITY_TYPE_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Agency responsible for the Authority. (AuthorityAgencyCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CA_AUTHORITY', @level2type=N'COLUMN',@level2name=N'AUTHORITY_AGN_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Date that the authority became effective. (AuthorityEffectiveDate)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CA_AUTHORITY', @level2type=N'COLUMN',@level2name=N'AUTHORITY_EFFC_DATE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Date the authorized agency official signs the order, permit, or permit modification. (IssueDate)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CA_AUTHORITY', @level2type=N'COLUMN',@level2name=N'ISSUE_DATE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date when the corrective action authority is revoked or ended. (EndDate)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CA_AUTHORITY', @level2type=N'COLUMN',@level2name=N'END_DATE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The action by which the Director requires the owner/operator to establish and maintain an information repository at a location near the facility for the purpose of making accessible to interested parties documents, reports, and other public information relevant to public understanding of the activities, findings, and plans for such corrective action initiatives. (EstablishedRepositoryCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CA_AUTHORITY', @level2type=N'COLUMN',@level2name=N'ESTABLISHED_REPOSITORY_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Code indicating the program in which the organization establishes the applicable guidance that the authority should be issued. (ResponsibleLeadProgramIdentifier)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CA_AUTHORITY', @level2type=N'COLUMN',@level2name=N'RESP_LEAD_PROG_IDEN'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Authority responsible suborganization owner. (AuthoritySuborganizationDataOwnerCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CA_AUTHORITY', @level2type=N'COLUMN',@level2name=N'AUTHORITY_SUBORG_DATA_OWNR_CDE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Authority responsible suborganization. (AuthoritySuborganizationCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CA_AUTHORITY', @level2type=N'COLUMN',@level2name=N'AUTHORITY_SUBORG_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates the agency that defines the person identifier. (ResponsiblePersonDataOwnerCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CA_AUTHORITY', @level2type=N'COLUMN',@level2name=N'RESP_PERSON_DATA_OWNER_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Code indicating the person within the agency responsible for conducting the evaluation or who is the responsible Authority. (ResponsiblePersonID)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CA_AUTHORITY', @level2type=N'COLUMN',@level2name=N'RESP_PERSON_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Notes providing more information. (SupplementalInformationText)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CA_AUTHORITY', @level2type=N'COLUMN',@level2name=N'SUPP_INFO_TXT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Schema element: CorrectiveActionAuthorityDataType' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CA_AUTHORITY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: A list of Correction Action Events for a particluar Handler (_PK)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CA_EVENT', @level2type=N'COLUMN',@level2name=N'CA_EVENT_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: A list of Correction Action Events for a particluar Handler (_FK)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CA_EVENT', @level2type=N'COLUMN',@level2name=N'CA_FAC_SUBM_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Transaction code used to define the add, update, or delete. (TransactionCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CA_EVENT', @level2type=N'COLUMN',@level2name=N'TRANS_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates the location of the agency regulating the handler. (ActivityLocationCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CA_EVENT', @level2type=N'COLUMN',@level2name=N'ACT_LOC_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates the agency that defines the corrective action event. (CorrectiveActionEventDataOwnerCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CA_EVENT', @level2type=N'COLUMN',@level2name=N'CORCT_ACT_EVENT_DATA_OWNER_CDE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code which corresponds to a specific event or event type. The first two characters indicate the event category and the last three characters the numeric event number. (CorrectiveActionEventCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CA_EVENT', @level2type=N'COLUMN',@level2name=N'CORCT_ACT_EVENT_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Agency responsible for the event. (EventAgencyCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CA_EVENT', @level2type=N'COLUMN',@level2name=N'EVENT_AGN_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'System-generated value used to uniquely identify multiple occurrences of a corrective action event. (EventSequenceNumber)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CA_EVENT', @level2type=N'COLUMN',@level2name=N'EVENT_SEQ_NUM'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Date on which actual completion of an event occurs. (ActualDate)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CA_EVENT', @level2type=N'COLUMN',@level2name=N'ACTL_DATE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The original scheduled completion date for an event. This date cannot be changed once entered. Slippage of the scheduled completion date is recorded in the NewScheduleDate Data Element. (OriginalScheduleDate)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CA_EVENT', @level2type=N'COLUMN',@level2name=N'ORIGINAL_SCHEDULE_DATE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Revised scheduled completion date of the event. This date is used in conjunction with the Original Scheduled Event Date to allow tracking scheduled date slippage. As the scheduled date changes, this field is updated with the new date and the Original Scheduled Event Date is not changed. (NewScheduleDate)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CA_EVENT', @level2type=N'COLUMN',@level2name=N'NEW_SCHEDULE_DATE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Event responsible suborganization owner. (EventSuborganizationDataOwnerCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CA_EVENT', @level2type=N'COLUMN',@level2name=N'EVENT_SUBORG_DATA_OWNER_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Event responsible suborganization. (EventSuborganizationCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CA_EVENT', @level2type=N'COLUMN',@level2name=N'EVENT_SUBORG_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates the agency that defines the person identifier. (ResponsiblePersonDataOwnerCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CA_EVENT', @level2type=N'COLUMN',@level2name=N'RESP_PERSON_DATA_OWNER_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Code indicating the person within the agency responsible for conducting the evaluation or who is the responsible Authority. (ResponsiblePersonID)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CA_EVENT', @level2type=N'COLUMN',@level2name=N'RESP_PERSON_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Notes providing more information. (SupplementalInformationText)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CA_EVENT', @level2type=N'COLUMN',@level2name=N'SUPP_INFO_TXT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Schema element: CorrectiveActionEventDataType' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CA_EVENT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Linking Data for Commitment/Initiative and Corrective Action or Permitting Events. (_PK)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CA_EVENT_COMMITMENT', @level2type=N'COLUMN',@level2name=N'CA_EVENT_COMMITMENT_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Linking Data for Commitment/Initiative and Corrective Action or Permitting Events. (_FK)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CA_EVENT_COMMITMENT', @level2type=N'COLUMN',@level2name=N'CA_EVENT_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Transaction code used to define the add, update, or delete. (TransactionCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CA_EVENT_COMMITMENT', @level2type=N'COLUMN',@level2name=N'TRANS_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Linking Data for Commitment/Initiative and Corrective Action or Permitting Events. (CommitmentLead)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CA_EVENT_COMMITMENT', @level2type=N'COLUMN',@level2name=N'COMMIT_LEAD'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Linking Data for Commitment/Initiative and Corrective Action or Permitting Events. (CommitmentSequenceNumber)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CA_EVENT_COMMITMENT', @level2type=N'COLUMN',@level2name=N'COMMIT_SEQ_NUM'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Schema element: EventEventCommitmentDataType' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CA_EVENT_COMMITMENT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Supplies all of the relevant Corrective Action Data for a given Handler (_PK)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CA_FAC_SUBM', @level2type=N'COLUMN',@level2name=N'CA_FAC_SUBM_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Code that uniquely identifies the handler. (HandlerID)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CA_FAC_SUBM', @level2type=N'COLUMN',@level2name=N'HANDLER_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Schema element: CorrectiveActionFacilitySubmissionDataType' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CA_FAC_SUBM'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: A permitted unit related to a corrective action area. (_PK)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CA_REL_PERMIT_UNIT', @level2type=N'COLUMN',@level2name=N'CA_REL_PERMIT_UNIT_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: A permitted unit related to a corrective action area. (_FK)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CA_REL_PERMIT_UNIT', @level2type=N'COLUMN',@level2name=N'CA_AREA_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Transaction code used to define the add, update, or delete. (TransactionCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CA_REL_PERMIT_UNIT', @level2type=N'COLUMN',@level2name=N'TRANS_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'System-generated value used to uniquely identify a process unit. (PermitUnitSequenceNumber)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CA_REL_PERMIT_UNIT', @level2type=N'COLUMN',@level2name=N'PERMIT_UNIT_SEQ_NUM'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Schema element: CorrectiveActionRelatedPermitUnitDataType' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CA_REL_PERMIT_UNIT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Linking Data for Corrective Action Authorities and Statutory Citations (_PK)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CA_STATUTORY_CITATION', @level2type=N'COLUMN',@level2name=N'CA_STATUTORY_CITATION_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Linking Data for Corrective Action Authorities and Statutory Citations (_FK)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CA_STATUTORY_CITATION', @level2type=N'COLUMN',@level2name=N'CA_AUTHORITY_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Transaction code used to define the add, update, or delete. (TransactionCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CA_STATUTORY_CITATION', @level2type=N'COLUMN',@level2name=N'TRANS_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Orgnaization responsible for the Statutory Citation (use two-digit postal code) (StatutoryCitationDataOwnerCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CA_STATUTORY_CITATION', @level2type=N'COLUMN',@level2name=N'STATUTORY_CITTION_DTA_OWNR_CDE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Identifier that identifies the statutory authority under which the corrective action event occured (StatutoryCitationIdentifier)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CA_STATUTORY_CITATION', @level2type=N'COLUMN',@level2name=N'STATUTORY_CITATION_IDEN'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Schema element: CorrectiveActionStatutoryCitationDataType' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CA_STATUTORY_CITATION'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Compliance Monitoring and Enforcement Citation Data (_PK)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_CITATION', @level2type=N'COLUMN',@level2name=N'CME_CITATION_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Compliance Monitoring and Enforcement Citation Data (_FK)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_CITATION', @level2type=N'COLUMN',@level2name=N'CME_VIOL_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Transaction code used to define the add, update, or delete. (TransactionCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_CITATION', @level2type=N'COLUMN',@level2name=N'TRANS_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Compliance Monitoring and Enforcement Citation Data (CitationNameSequenceNumber)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_CITATION', @level2type=N'COLUMN',@level2name=N'CITATION_NAME_SEQ_NUM'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The citation(s) of the violations alleged (CME) or of the Authority used (CA). (CitationName)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_CITATION', @level2type=N'COLUMN',@level2name=N'CITATION_NAME'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'State postal code (CitationNameOwner)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_CITATION', @level2type=N'COLUMN',@level2name=N'CITATION_NAME_OWNER'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Existing nationally defined values: FR, FS, OC, PC,SR,SS,V3 (CitationNameType)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_CITATION', @level2type=N'COLUMN',@level2name=N'CITATION_NAME_TYPE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Compliance Monitoring and Enforcement Citation Data (Notes)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_CITATION', @level2type=N'COLUMN',@level2name=N'NOTES'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Schema element: CitationDataType' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_CITATION'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Compliance Monitoring and Enforcement Significant Non-Complier Date Data (_PK)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_CSNY_DATE', @level2type=N'COLUMN',@level2name=N'CME_CSNY_DATE_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Compliance Monitoring and Enforcement Significant Non-Complier Date Data (_FK)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_CSNY_DATE', @level2type=N'COLUMN',@level2name=N'CME_ENFRC_ACT_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Transaction code used to define the add, update, or delete. (TransactionCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_CSNY_DATE', @level2type=N'COLUMN',@level2name=N'TRANS_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Date of the SNY that the Action is Addressing (SNYDate)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_CSNY_DATE', @level2type=N'COLUMN',@level2name=N'SNY_DATE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Schema element: CSNYDateDataType' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_CSNY_DATE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Compliance Monitoring and Enforcement Data (_PK)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_ENFRC_ACT', @level2type=N'COLUMN',@level2name=N'CME_ENFRC_ACT_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Compliance Monitoring and Enforcement Data (_FK)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_ENFRC_ACT', @level2type=N'COLUMN',@level2name=N'CME_FAC_SUBM_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Transaction code used to define the add, update, or delete. (TransactionCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_ENFRC_ACT', @level2type=N'COLUMN',@level2name=N'TRANS_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The U.S.Postal Service alphabetic code that represents the U.S.State or territory in which a state or local government enforcement agency operates. (EnforcementAgencyLocationName)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_ENFRC_ACT', @level2type=N'COLUMN',@level2name=N'ENFRC_AGN_LOC_NAME'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The unique alphanumeric identifier used in the applicable database to identify a specific enforcement action pertaining to a regulated entity or facility. (EnforcementActionIdentifier)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_ENFRC_ACT', @level2type=N'COLUMN',@level2name=N'ENFRC_ACT_IDEN'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The calendar date the enforcement action was issued or filed. (EnforcementActionDate)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_ENFRC_ACT', @level2type=N'COLUMN',@level2name=N'ENFRC_ACT_DATE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The full name of the agency, department, or organization that submitted the enforcement action data to EPA. (EnforcementAgencyName)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_ENFRC_ACT', @level2type=N'COLUMN',@level2name=N'ENFRC_AGN_NAME'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Notes the relevant docket number which enforcement staff have assigned for tracking of enforcement actions. (EnforcementDocketNumber)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_ENFRC_ACT', @level2type=N'COLUMN',@level2name=N'ENFRC_DOCKET_NUM'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Identifies the attorney within the agency responsible for issuing the enforcement action. (EnforcementAttorney)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_ENFRC_ACT', @level2type=N'COLUMN',@level2name=N'ENFRC_ATTRY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Compliance Monitoring and Enforcement Data (CorrectiveActionComponent)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_ENFRC_ACT', @level2type=N'COLUMN',@level2name=N'CORCT_ACT_COMPT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Compliance Monitoring and Enforcement Data (ConsentAgreementFinalOrderSequenceNumber)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_ENFRC_ACT', @level2type=N'COLUMN',@level2name=N'CNST_AGMT_FINAL_ORDER_SEQ_NUM'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Compliance Monitoring and Enforcement Data (AppealInitiatedDate)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_ENFRC_ACT', @level2type=N'COLUMN',@level2name=N'APPEAL_INIT_DATE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Compliance Monitoring and Enforcement Data (AppealResolutionDate)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_ENFRC_ACT', @level2type=N'COLUMN',@level2name=N'APPEAL_RSLN_DATE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Compliance Monitoring and Enforcement Data (DispositionStatusDate)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_ENFRC_ACT', @level2type=N'COLUMN',@level2name=N'DISP_STAT_DATE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Compliance Monitoring and Enforcement Data (DispositionStatusOwner)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_ENFRC_ACT', @level2type=N'COLUMN',@level2name=N'DISP_STAT_OWNER'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Compliance Monitoring and Enforcement Data (DispositionStatus)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_ENFRC_ACT', @level2type=N'COLUMN',@level2name=N'DISP_STAT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'State Postal Code (EnforcementOwner)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_ENFRC_ACT', @level2type=N'COLUMN',@level2name=N'ENFRC_OWNER'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code that identifies the type of action being taken against a handler. (EnforcementType)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_ENFRC_ACT', @level2type=N'COLUMN',@level2name=N'ENFRC_TYPE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates the agency that defines the person identifier. (EnforcementResponsiblePersonOwner)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_ENFRC_ACT', @level2type=N'COLUMN',@level2name=N'ENFRC_RESP_PERSON_OWNER'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Code indicating the person within the agency responsible for conducting the enforcement. (EnforcementResponsiblePersonIdentifier)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_ENFRC_ACT', @level2type=N'COLUMN',@level2name=N'ENFRC_RESP_PERSON_IDEN'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Compliance Monitoring and Enforcement Data (EnforcementResponsibleSuborganizationOwner)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_ENFRC_ACT', @level2type=N'COLUMN',@level2name=N'ENFRC_RESP_SUBORG_OWNER'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Compliance Monitoring and Enforcement Data (EnforcementResponsibleSuborganization)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_ENFRC_ACT', @level2type=N'COLUMN',@level2name=N'ENFRC_RESP_SUBORG'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Compliance Monitoring and Enforcement Data (Notes)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_ENFRC_ACT', @level2type=N'COLUMN',@level2name=N'NOTES'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Whether financial responsibility is required. (FinancialAssuranceReqD)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_ENFRC_ACT', @level2type=N'COLUMN',@level2name=N'FA_REQUIRED'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Schema element: EnforcementActionDataType' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_ENFRC_ACT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Compliance Monitoring and Enforcement Evaluation Data (_PK)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_EVAL', @level2type=N'COLUMN',@level2name=N'CME_EVAL_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Compliance Monitoring and Enforcement Evaluation Data (_FK)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_EVAL', @level2type=N'COLUMN',@level2name=N'CME_FAC_SUBM_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Transaction code used to define the add, update, or delete. (TransactionCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_EVAL', @level2type=N'COLUMN',@level2name=N'TRANS_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates the location of the agency regulating the EPA handler. (EvaluationActivityLocation)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_EVAL', @level2type=N'COLUMN',@level2name=N'EVAL_ACT_LOC'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name or number assigned by the implementing agency to identify an evaluation. (EvaluationIdentifier)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_EVAL', @level2type=N'COLUMN',@level2name=N'EVAL_IDEN'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The first day of the inspection or record review regardless of the duration of the inspection. (EvaluationStartDate)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_EVAL', @level2type=N'COLUMN',@level2name=N'EVAL_START_DATE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Code indicating the agency responsible for conducting the evaluation. (EvaluationResponsibleAgency)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_EVAL', @level2type=N'COLUMN',@level2name=N'EVAL_RESP_AGN'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Date fo the Last Non-Followup Evaluation (Applies to SNY/SNN Evaluations Only) (DayZero)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_EVAL', @level2type=N'COLUMN',@level2name=N'DAY_ZERO'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Flag indicating if a violation was found. (FoundViolation)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_EVAL', @level2type=N'COLUMN',@level2name=N'FOUND_VIOL'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The inspection or record review was initiated because of a tip/complaint (CitizenComplaintIndicator)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_EVAL', @level2type=N'COLUMN',@level2name=N'CTZN_CPLT_IND'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Compliance Monitoring and Enforcement Evaluation Data (MultimediaIndicator)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_EVAL', @level2type=N'COLUMN',@level2name=N'MULTIMEDIA_IND'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Compliance Monitoring and Enforcement Evaluation Data (SamplingIndicator)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_EVAL', @level2type=N'COLUMN',@level2name=N'SAMPL_IND'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The inspection conducted pursuant to RCRA 3007 or State equivalent; determiniation made: sit is Non-Hazardous Waste. (NotSubtitleCIndicator)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_EVAL', @level2type=N'COLUMN',@level2name=N'NOT_SUBTL_C_IND'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates the agency that defines the type of evaluation. (EvaluationTypeOwner)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_EVAL', @level2type=N'COLUMN',@level2name=N'EVAL_TYPE_OWNER'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Code to report the type of evaluation conducted at the handler. (EvaluationType)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_EVAL', @level2type=N'COLUMN',@level2name=N'EVAL_TYPE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Compliance Monitoring and Enforcement Evaluation Data (FocusAreaOwner)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_EVAL', @level2type=N'COLUMN',@level2name=N'FOCUS_AREA_OWNER'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Compliance Monitoring and Enforcement Evaluation Data (FocusArea)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_EVAL', @level2type=N'COLUMN',@level2name=N'FOCUS_AREA'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates the agency that defines the person identifier. (EvaluationResponsiblePersonIdentifierOwner)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_EVAL', @level2type=N'COLUMN',@level2name=N'EVAL_RESP_PERSON_IDEN_OWNER'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Code indicating the person within the agency responsible for conducting the evaluation. (EvaluationResponsiblePersonIdentifier)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_EVAL', @level2type=N'COLUMN',@level2name=N'EVAL_RESP_PERSON_IDEN'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates the agency that defines the suborganization identifier. (EvaluationResponsibleSuborganizationOwner)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_EVAL', @level2type=N'COLUMN',@level2name=N'EVAL_RESP_SUBORG_OWNER'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Code indicating the branch/district within the agency responsible for conducting the evaluation. (EvaluationResponsibleSuborganization)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_EVAL', @level2type=N'COLUMN',@level2name=N'EVAL_RESP_SUBORG'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Compliance Monitoring and Enforcement Evaluation Data (Notes)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_EVAL', @level2type=N'COLUMN',@level2name=N'NOTES'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'NOC Date. (NOCDate)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_EVAL', @level2type=N'COLUMN',@level2name=N'NOC_DATE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Schema element: EvaluationDataType' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_EVAL'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Linking Data for Commitment/Initiative and Evaluation. (_PK)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_EVAL_COMMIT', @level2type=N'COLUMN',@level2name=N'CME_EVAL_COMMIT_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Linking Data for Commitment/Initiative and Evaluation. (_FK)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_EVAL_COMMIT', @level2type=N'COLUMN',@level2name=N'CME_EVAL_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Transaction code used to define the add, update, or delete. (TransactionCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_EVAL_COMMIT', @level2type=N'COLUMN',@level2name=N'TRANS_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Linking Data for Commitment/Initiative and Evaluation. (CommitmentLead)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_EVAL_COMMIT', @level2type=N'COLUMN',@level2name=N'COMMIT_LEAD'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Linking Data for Commitment/Initiative and Evaluation. (CommitmentSequenceNumber)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_EVAL_COMMIT', @level2type=N'COLUMN',@level2name=N'COMMIT_SEQ_NUM'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Schema element: EvaluationCommitmentDataType' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_EVAL_COMMIT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Linking Data for Evaluation and Violation (_PK)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_EVAL_VIOL', @level2type=N'COLUMN',@level2name=N'CME_EVAL_VIOL_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Linking Data for Evaluation and Violation (_FK)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_EVAL_VIOL', @level2type=N'COLUMN',@level2name=N'CME_EVAL_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Transaction code used to define the add, update, or delete. (TransactionCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_EVAL_VIOL', @level2type=N'COLUMN',@level2name=N'TRANS_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Linking Data for Evaluation and Violation (ViolationActivityLocation)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_EVAL_VIOL', @level2type=N'COLUMN',@level2name=N'VIOL_ACT_LOC'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Linking Data for Evaluation and Violation (ViolationSequenceNumber)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_EVAL_VIOL', @level2type=N'COLUMN',@level2name=N'VIOL_SEQ_NUM'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Linking Data for Evaluation and Violation (AgencyWhichDeterminedViolation)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_EVAL_VIOL', @level2type=N'COLUMN',@level2name=N'AGN_WHICH_DTRM_VIOL'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Schema element: EvaluationViolationDataType' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_EVAL_VIOL'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: This contains Hbasic Data (_PK)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_FAC_SUBM', @level2type=N'COLUMN',@level2name=N'CME_FAC_SUBM_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Number that uniquely identifies the EPA handler. (EPAHandlerID)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_FAC_SUBM', @level2type=N'COLUMN',@level2name=N'EPA_HDLR_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Schema element: CMEFacilitySubmissionDataType' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_FAC_SUBM'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Compliance Monitoring and Enfocement Multimedia Data (_PK)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_MEDIA', @level2type=N'COLUMN',@level2name=N'CME_MEDIA_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Compliance Monitoring and Enfocement Multimedia Data (_FK)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_MEDIA', @level2type=N'COLUMN',@level2name=N'CME_ENFRC_ACT_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Transaction code used to define the add, update, or delete. (TransactionCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_MEDIA', @level2type=N'COLUMN',@level2name=N'TRANS_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates the agency that defines the multimedia code. (MultimediaCodeOwner)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_MEDIA', @level2type=N'COLUMN',@level2name=N'MULTIMEDIA_CODE_OWNER'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Code which indicates the medium or program other than RCRA participating in the enforcement action. (MultimediaCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_MEDIA', @level2type=N'COLUMN',@level2name=N'MULTIMEDIA_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Compliance Monitoring and Enfocement Multimedia Data (Notes)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_MEDIA', @level2type=N'COLUMN',@level2name=N'NOTES'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Schema element: MediaDataType' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_MEDIA'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Compliance Monitoring and Enforcement Milestone Data (_PK)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_MILESTONE', @level2type=N'COLUMN',@level2name=N'CME_MILESTONE_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Compliance Monitoring and Enforcement Milestone Data (_FK)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_MILESTONE', @level2type=N'COLUMN',@level2name=N'CME_ENFRC_ACT_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Transaction code used to define the add, update, or delete. (TransactionCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_MILESTONE', @level2type=N'COLUMN',@level2name=N'TRANS_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Compliance Monitoring and Enforcement Milestone Data (MilestoneSequenceNumber)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_MILESTONE', @level2type=N'COLUMN',@level2name=N'MILESTONE_SEQ_NUM'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Compliance Monitoring and Enforcement Milestone Data (TechnicalRequirementIdentifier)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_MILESTONE', @level2type=N'COLUMN',@level2name=N'TECH_RQMT_IDEN'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Compliance Monitoring and Enforcement Milestone Data (TechnicalRequirementDescription)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_MILESTONE', @level2type=N'COLUMN',@level2name=N'TECH_RQMT_DESC'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Compliance Monitoring and Enforcement Milestone Data (MilestoneScheduledCompletionDate)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_MILESTONE', @level2type=N'COLUMN',@level2name=N'MILESTONE_SCHD_COMP_DATE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Compliance Monitoring and Enforcement Milestone Data (MilestoneActualCompletionDate)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_MILESTONE', @level2type=N'COLUMN',@level2name=N'MILESTONE_ACTL_COMP_DATE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Compliance Monitoring and Enforcement Milestone Data (MilestoneDefaultedDate)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_MILESTONE', @level2type=N'COLUMN',@level2name=N'MILESTONE_DFLT_DATE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Compliance Monitoring and Enforcement Milestone Data (Notes)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_MILESTONE', @level2type=N'COLUMN',@level2name=N'NOTES'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Schema element: MilestoneDataType' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_MILESTONE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Compliance Monitoring and Enforcement Penalty Data (_PK)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_PNLTY', @level2type=N'COLUMN',@level2name=N'CME_PNLTY_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Compliance Monitoring and Enforcement Penalty Data (_FK)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_PNLTY', @level2type=N'COLUMN',@level2name=N'CME_ENFRC_ACT_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Transaction code used to define the add, update, or delete. (TransactionCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_PNLTY', @level2type=N'COLUMN',@level2name=N'TRANS_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates the agency that defines the penalty type (PenaltyTypeOwner)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_PNLTY', @level2type=N'COLUMN',@level2name=N'PNLTY_TYPE_OWNER'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Code which indicates the type of penalty associated with the penalty amount. (PenaltyType)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_PNLTY', @level2type=N'COLUMN',@level2name=N'PNLTY_TYPE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The dollar amount of any proposed cash civil penalty set forth in a Complaint/Proposed Order. (CashCivilPenaltySoughtAmount)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_PNLTY', @level2type=N'COLUMN',@level2name=N'CASH_CIVIL_PNLTY_SOUGHT_AMOUNT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Compliance Monitoring and Enforcement Penalty Data (Notes)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_PNLTY', @level2type=N'COLUMN',@level2name=N'NOTES'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Schema element: PenaltyDataType' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_PNLTY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Compliance Monitoring and Enforcement Payment Data (_PK)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_PYMT', @level2type=N'COLUMN',@level2name=N'CME_PYMT_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Compliance Monitoring and Enforcement Payment Data (_FK)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_PYMT', @level2type=N'COLUMN',@level2name=N'CME_PNLTY_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Transaction code used to define the add, update, or delete. (TransactionCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_PYMT', @level2type=N'COLUMN',@level2name=N'TRANS_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Compliance Monitoring and Enforcement Payment Data (PaymentSequenceNumber)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_PYMT', @level2type=N'COLUMN',@level2name=N'PYMT_SEQ_NUM'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Compliance Monitoring and Enforcement Payment Data (PaymentDefaultedDate)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_PYMT', @level2type=N'COLUMN',@level2name=N'PYMT_DFLT_DATE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Compliance Monitoring and Enforcement Payment Data (ScheduledPaymentDate)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_PYMT', @level2type=N'COLUMN',@level2name=N'SCHD_PYMT_DATE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Compliance Monitoring and Enforcement Payment Data (ScheduledPaymentAmount)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_PYMT', @level2type=N'COLUMN',@level2name=N'SCHD_PYMT_AMOUNT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Compliance Monitoring and Enforcement Payment Data (ActualPaymentDate)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_PYMT', @level2type=N'COLUMN',@level2name=N'ACTL_PYMT_DATE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The dollar amount of any cost recovery required to be paid pursuant to a Final Order. (ActualPaidAmount)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_PYMT', @level2type=N'COLUMN',@level2name=N'ACTL_PAID_AMOUNT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Compliance Monitoring and Enforcement Payment Data (Notes)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_PYMT', @level2type=N'COLUMN',@level2name=N'NOTES'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Schema element: PaymentDataType' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_PYMT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Compliance Monitoring and Enforcement Request Data (_PK)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_RQST', @level2type=N'COLUMN',@level2name=N'CME_RQST_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Compliance Monitoring and Enforcement Request Data (_FK)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_RQST', @level2type=N'COLUMN',@level2name=N'CME_EVAL_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Transaction code used to define the add, update, or delete. (TransactionCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_RQST', @level2type=N'COLUMN',@level2name=N'TRANS_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Compliance Monitoring and Enforcement Request Data (RequestSequenceNumber)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_RQST', @level2type=N'COLUMN',@level2name=N'RQST_SEQ_NUM'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Compliance Monitoring and Enforcement Request Data (DateOfRequest)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_RQST', @level2type=N'COLUMN',@level2name=N'DATE_OF_RQST'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Compliance Monitoring and Enforcement Request Data (DateResponseReceived)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_RQST', @level2type=N'COLUMN',@level2name=N'DATE_RESP_RCVD'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Compliance Monitoring and Enforcement Request Data (RequestAgency)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_RQST', @level2type=N'COLUMN',@level2name=N'RQST_AGN'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Compliance Monitoring and Enforcement Request Data (Notes)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_RQST', @level2type=N'COLUMN',@level2name=N'NOTES'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Schema element: RequestDataType' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_RQST'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Compliance Monitoring and Enforcement Supplemental Environmental Project Data (_PK)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_SUPP_ENVR_PRJT', @level2type=N'COLUMN',@level2name=N'CME_SUPP_ENVR_PRJT_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Compliance Monitoring and Enforcement Supplemental Environmental Project Data (_FK)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_SUPP_ENVR_PRJT', @level2type=N'COLUMN',@level2name=N'CME_ENFRC_ACT_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Transaction code used to define the add, update, or delete. (TransactionCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_SUPP_ENVR_PRJT', @level2type=N'COLUMN',@level2name=N'TRANS_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'SEP Sequence Number allowed value 01-99 (SEPSequenceNumber)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_SUPP_ENVR_PRJT', @level2type=N'COLUMN',@level2name=N'SEP_SEQ_NUM'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Expenditure Amount (SEPExpenditureAmount)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_SUPP_ENVR_PRJT', @level2type=N'COLUMN',@level2name=N'SEP_EXPND_AMOUNT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Valid date greater than or equal to the Date of Enforcement Action. (SEPScheduledCompletionDate)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_SUPP_ENVR_PRJT', @level2type=N'COLUMN',@level2name=N'SEP_SCHD_COMP_DATE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'SEP actual completion date (SEPActualDate)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_SUPP_ENVR_PRJT', @level2type=N'COLUMN',@level2name=N'SEP_ACTL_DATE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Date the SEP defaulted (SEPDefaultedDate)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_SUPP_ENVR_PRJT', @level2type=N'COLUMN',@level2name=N'SEP_DFLT_DATE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'State postal code (SEPCodeOwner)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_SUPP_ENVR_PRJT', @level2type=N'COLUMN',@level2name=N'SEP_CODE_OWNER'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The narrative text describing any Supplemental Environmental Projects required to be performed pursuant to a Final Order. (SEPDescriptionText)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_SUPP_ENVR_PRJT', @level2type=N'COLUMN',@level2name=N'SEP_DESC_TXT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Compliance Monitoring and Enforcement Supplemental Environmental Project Data (Notes)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_SUPP_ENVR_PRJT', @level2type=N'COLUMN',@level2name=N'NOTES'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Schema element: SupplementalEnvironmentalProjectDataType' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_SUPP_ENVR_PRJT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Compliance Monitoring and Enforcement Violation Data (_PK)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_VIOL', @level2type=N'COLUMN',@level2name=N'CME_VIOL_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Compliance Monitoring and Enforcement Violation Data (_FK)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_VIOL', @level2type=N'COLUMN',@level2name=N'CME_FAC_SUBM_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Transaction code used to define the add, update, or delete. (TransactionCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_VIOL', @level2type=N'COLUMN',@level2name=N'TRANS_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Compliance Monitoring and Enforcement Violation Data (ViolationActivityLocation)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_VIOL', @level2type=N'COLUMN',@level2name=N'VIOL_ACT_LOC'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Compliance Monitoring and Enforcement Violation Data (ViolationSequenceNumber)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_VIOL', @level2type=N'COLUMN',@level2name=N'VIOL_SEQ_NUM'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Compliance Monitoring and Enforcement Violation Data (AgencyWhichDeterminedViolation)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_VIOL', @level2type=N'COLUMN',@level2name=N'AGN_WHICH_DTRM_VIOL'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Allowed value HQ (ViolationTypeOwner)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_VIOL', @level2type=N'COLUMN',@level2name=N'VIOL_TYPE_OWNER'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Violation Type (ViolationType)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_VIOL', @level2type=N'COLUMN',@level2name=N'VIOL_TYPE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Compliance Monitoring and Enforcement Violation Data (FormerCitationName)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_VIOL', @level2type=N'COLUMN',@level2name=N'FORMER_CITATION_NAME'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The calendar date the Responsible Authority determines that a regulated entity is in violation of a legally enforceable obligation. (ViolationDeterminedDate)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_VIOL', @level2type=N'COLUMN',@level2name=N'VIOL_DTRM_DATE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The calendar date, determined by the Responsible Authority, on which the regulated entity actually returned to compliance with respect to the legal obligation that is the subject of the Violation Determined Date. (ReturnComplianceActualDate)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_VIOL', @level2type=N'COLUMN',@level2name=N'RTN_COMPL_ACTL_DATE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Compliance Monitoring and Enforcement Violation Data (ReturnToComplianceQualifier)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_VIOL', @level2type=N'COLUMN',@level2name=N'RTN_TO_COMPL_QUAL'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Compliance Monitoring and Enforcement Violation Data (ViolationResponsibleAgency)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_VIOL', @level2type=N'COLUMN',@level2name=N'VIOL_RESP_AGN'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Compliance Monitoring and Enforcement Violation Data (Notes)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_VIOL', @level2type=N'COLUMN',@level2name=N'NOTES'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Schema element: ViolationDataType' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_VIOL'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Linking Data for Violation and Enforcement (_PK)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_VIOL_ENFRC', @level2type=N'COLUMN',@level2name=N'CME_VIOL_ENFRC_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Linking Data for Violation and Enforcement (_FK)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_VIOL_ENFRC', @level2type=N'COLUMN',@level2name=N'CME_ENFRC_ACT_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Transaction code used to define the add, update, or delete. (TransactionCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_VIOL_ENFRC', @level2type=N'COLUMN',@level2name=N'TRANS_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Linking Data for Violation and Enforcement (ViolationSequenceNumber)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_VIOL_ENFRC', @level2type=N'COLUMN',@level2name=N'VIOL_SEQ_NUM'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Linking Data for Violation and Enforcement (AgencyWhichDeterminedViolation)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_VIOL_ENFRC', @level2type=N'COLUMN',@level2name=N'AGN_WHICH_DTRM_VIOL'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The calendar date, specified in the Compliance Schedule (if any), on which the regulated entity is scheduled to return to compliance with respect to the legal obligation that is the subject of the Violation Determined Date. (ReturnComplianceScheduledDate)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_VIOL_ENFRC', @level2type=N'COLUMN',@level2name=N'RTN_COMPL_SCHD_DATE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Schema element: ViolationEnforcementDataType' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_CME_VIOL_ENFRC'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Estimates of the Financial liability costs associated with a given Handler. (_PK)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_FA_COST_EST', @level2type=N'COLUMN',@level2name=N'FA_COST_EST_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Estimates of the Financial liability costs associated with a given Handler. (_FK)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_FA_COST_EST', @level2type=N'COLUMN',@level2name=N'FA_FAC_SUBM_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Transaction code used to define the add, update, or delete. (TransactionCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_FA_COST_EST', @level2type=N'COLUMN',@level2name=N'TRANS_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates the location of the agency regulating the handler. (ActivityLocationCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_FA_COST_EST', @level2type=N'COLUMN',@level2name=N'ACT_LOC_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates what type of Financial Assurance is Required. (CostEstimateTypeCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_FA_COST_EST', @level2type=N'COLUMN',@level2name=N'COST_ESTIMATE_TYPE_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Code indicating the agency responsible for overseeing the review of the cost estimate. (CostEstimateAgencyCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_FA_COST_EST', @level2type=N'COLUMN',@level2name=N'COST_ESTIMATE_AGN_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Unique number that identifies the cost estimate. (CostEstimateSequenceNumber)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_FA_COST_EST', @level2type=N'COLUMN',@level2name=N'COST_ESTIMATE_SEQ_NUM'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates the agency that defines the person identifier. (ResponsiblePersonDataOwnerCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_FA_COST_EST', @level2type=N'COLUMN',@level2name=N'RESP_PERSON_DATA_OWNER_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Code indicating the person within the agency responsible for conducting the evaluation or who is the responsible Authority. (ResponsiblePersonID)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_FA_COST_EST', @level2type=N'COLUMN',@level2name=N'RESP_PERSON_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The dollar amount of the cost estimate for a given financial assurance type. (CostEstimateAmount)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_FA_COST_EST', @level2type=N'COLUMN',@level2name=N'COST_ESTIMATE_AMOUNT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date when the cost estimate for a given financial assurance type was submitted, adjusted, approved, or required to be in place. (CostEstimateDate)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_FA_COST_EST', @level2type=N'COLUMN',@level2name=N'COST_ESTIMATE_DATE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The reason the cost estimate for a financial assurance type is being reported. (CostEstimateReasonCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_FA_COST_EST', @level2type=N'COLUMN',@level2name=N'COST_ESTIMATE_RSN_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Notes regarding the corrective action area or permit unit that this cost estimate applies. (AreaUnitNotesText)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_FA_COST_EST', @level2type=N'COLUMN',@level2name=N'AREA_UNIT_NOTES_TXT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Notes providing more information. (SupplementalInformationText)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_FA_COST_EST', @level2type=N'COLUMN',@level2name=N'SUPP_INFO_TXT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Schema element: CostEstimateDataType' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_FA_COST_EST'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Linking Data for Cost Estimates and Related Mechanisms (_PK)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_FA_COST_EST_REL_MECHANISM', @level2type=N'COLUMN',@level2name=N'FA_COST_EST_REL_MECHANISM_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Linking Data for Cost Estimates and Related Mechanisms (_FK)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_FA_COST_EST_REL_MECHANISM', @level2type=N'COLUMN',@level2name=N'FA_COST_EST_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Transaction code used to define the add, update, or delete. (TransactionCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_FA_COST_EST_REL_MECHANISM', @level2type=N'COLUMN',@level2name=N'TRANS_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates the location of the agency regulating the handler. (ActivityLocationCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_FA_COST_EST_REL_MECHANISM', @level2type=N'COLUMN',@level2name=N'ACT_LOC_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The agency responsible for overseeing the review of the mechanism. (MechanismAgencyCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_FA_COST_EST_REL_MECHANISM', @level2type=N'COLUMN',@level2name=N'MECHANISM_AGN_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Unique numerical identier for the mechanism. (MechanismSequenceNumber)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_FA_COST_EST_REL_MECHANISM', @level2type=N'COLUMN',@level2name=N'MECHANISM_SEQ_NUM'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Unique numerical code identifying the mechanism detail. (MechanismDetailSequenceNumber)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_FA_COST_EST_REL_MECHANISM', @level2type=N'COLUMN',@level2name=N'MECHANISM_DETAIL_SEQ_NUM'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Schema element: CostEstimateRelatedMechanismDataType' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_FA_COST_EST_REL_MECHANISM'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Supplies all of the relevant Financial Assurance Data for a given Handler (_PK)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_FA_FAC_SUBM', @level2type=N'COLUMN',@level2name=N'FA_FAC_SUBM_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Code that uniquely identifies the handler. (HandlerID)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_FA_FAC_SUBM', @level2type=N'COLUMN',@level2name=N'HANDLER_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Schema element: FinancialAssuranceFacilitySubmissionDataType' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_FA_FAC_SUBM'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Mechanisms used to address cost estimates of the Financial liability associated with a given Handler. (_PK)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_FA_MECHANISM', @level2type=N'COLUMN',@level2name=N'FA_MECHANISM_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Mechanisms used to address cost estimates of the Financial liability associated with a given Handler. (_FK)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_FA_MECHANISM', @level2type=N'COLUMN',@level2name=N'FA_FAC_SUBM_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Transaction code used to define the add, update, or delete. (TransactionCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_FA_MECHANISM', @level2type=N'COLUMN',@level2name=N'TRANS_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates the location of the agency regulating the handler. (ActivityLocationCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_FA_MECHANISM', @level2type=N'COLUMN',@level2name=N'ACT_LOC_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The agency responsible for overseeing the review of the mechanism. (MechanismAgencyCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_FA_MECHANISM', @level2type=N'COLUMN',@level2name=N'MECHANISM_AGN_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Unique numerical identier for the mechanism. (MechanismSequenceNumber)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_FA_MECHANISM', @level2type=N'COLUMN',@level2name=N'MECHANISM_SEQ_NUM'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates the agency that defined the mechanism type. (MechanismTypeDataOwnerCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_FA_MECHANISM', @level2type=N'COLUMN',@level2name=N'MECHANISM_TYPE_DATA_OWNER_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of mechanism that addresses the cost estimate. (MechanismTypeCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_FA_MECHANISM', @level2type=N'COLUMN',@level2name=N'MECHANISM_TYPE_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the financial institution with which the financial assurance mechanism is held, such as a bank (letter of credit) or a surety (surety bond); also identifies a facility (financial test), or a guarantor (corporate guarantee). (ProviderText)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_FA_MECHANISM', @level2type=N'COLUMN',@level2name=N'PROVIDER_TXT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Contact Name of the provider. (ProviderFullContactName)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_FA_MECHANISM', @level2type=N'COLUMN',@level2name=N'PROVIDER_FULL_CONTACT_NAME'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Telephone Number data (TelephoneNumberText)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_FA_MECHANISM', @level2type=N'COLUMN',@level2name=N'TELE_NUM_TXT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Notes providing more information. (SupplementalInformationText)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_FA_MECHANISM', @level2type=N'COLUMN',@level2name=N'SUPP_INFO_TXT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Schema element: MechanismDataType' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_FA_MECHANISM'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Details of the mechanism used to address cost estimates of the Financial liability associated with a given Handler. (_PK)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_FA_MECHANISM_DETAIL', @level2type=N'COLUMN',@level2name=N'FA_MECHANISM_DETAIL_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Details of the mechanism used to address cost estimates of the Financial liability associated with a given Handler. (_FK)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_FA_MECHANISM_DETAIL', @level2type=N'COLUMN',@level2name=N'FA_MECHANISM_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Transaction code used to define the add, update, or delete. (TransactionCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_FA_MECHANISM_DETAIL', @level2type=N'COLUMN',@level2name=N'TRANS_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Unique numerical code identifying the mechanism detail. (MechanismDetailSequenceNumber)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_FA_MECHANISM_DETAIL', @level2type=N'COLUMN',@level2name=N'MECHANISM_DETAIL_SEQ_NUM'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The number assigned to the mechanism, such as a bond number or insurance policy number. (MechanismIdentificationText)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_FA_MECHANISM_DETAIL', @level2type=N'COLUMN',@level2name=N'MECHANISM_IDEN_TXT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The total dollar value of the financial assurance mechanism. (FaceValueAmount)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_FA_MECHANISM_DETAIL', @level2type=N'COLUMN',@level2name=N'FACE_VAL_AMOUNT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The Effective Date of the action: 1. Hazardous Secondary Material notification in Handler, 2. Corrective Action Authority, 3. Financial Assurance Mechanism.  (EffectiveDate)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_FA_MECHANISM_DETAIL', @level2type=N'COLUMN',@level2name=N'EFFC_DATE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date the instrument terminates, such as the end of the term of an insurance policy. (ExpirationDate)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_FA_MECHANISM_DETAIL', @level2type=N'COLUMN',@level2name=N'EXPIRATION_DATE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Notes providing more information. (SupplementalInformationText)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_FA_MECHANISM_DETAIL', @level2type=N'COLUMN',@level2name=N'SUPP_INFO_TXT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Schema element: MechanismDetailDataType' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_FA_MECHANISM_DETAIL'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Supplies all of the relevant GIS Data for a given Handler (_PK)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_GIS_FAC_SUBM', @level2type=N'COLUMN',@level2name=N'GIS_FAC_SUBM_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Code that uniquely identifies the handler. (HandlerID)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_GIS_FAC_SUBM', @level2type=N'COLUMN',@level2name=N'HANDLER_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Schema element: GISFacilitySubmissionDataType' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_GIS_FAC_SUBM'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Used to define the geographic coordinates of the Handler. (_PK)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_GIS_GEO_INFORMATION', @level2type=N'COLUMN',@level2name=N'GIS_GEO_INFORMATION_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Used to define the geographic coordinates of the Handler. (_FK)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_GIS_GEO_INFORMATION', @level2type=N'COLUMN',@level2name=N'GIS_FAC_SUBM_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Transaction code used to define the add, update, or delete. (TransactionCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_GIS_GEO_INFORMATION', @level2type=N'COLUMN',@level2name=N'TRANS_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Owner of Geographic Information.  Should match state code (i.e. KS). (GeographicInformationOwner)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_GIS_GEO_INFORMATION', @level2type=N'COLUMN',@level2name=N'GEO_INFO_OWNER'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Unique identifier for the geographic information. (GeographicInformationSequenceNumber)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_GIS_GEO_INFORMATION', @level2type=N'COLUMN',@level2name=N'GEO_INFO_SEQ_NUM'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'System-generated value used to uniquely identify a process unit. (PermitUnitSequenceNumber)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_GIS_GEO_INFORMATION', @level2type=N'COLUMN',@level2name=N'PERMIT_UNIT_SEQ_NUM'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Code used for administrative purposes to uniquely designate a group of units (or a single unit) with a common history and projection of corrective action requirements. (AreaSequenceNumber)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_GIS_GEO_INFORMATION', @level2type=N'COLUMN',@level2name=N'AREA_SEQ_NUM'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The text that provides additional informaiton about the geographic coordinates. (LocationCommentsText)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_GIS_GEO_INFORMATION', @level2type=N'COLUMN',@level2name=N'LOC_COMM_TXT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The number of acres associated with the handler or area. (AreaAcreageMeasure)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_GIS_GEO_INFORMATION', @level2type=N'COLUMN',@level2name=N'AREA_ACREAGE_MEAS'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates the agency that defined the AreaMeasureSource. (AreaMeasureSourceDataOwnerCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_GIS_GEO_INFORMATION', @level2type=N'COLUMN',@level2name=N'AREA_MEAS_SRC_DATA_OWNER_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The source of information used to determine the number of acres associated with the handler or area. (AreaMeasureSourceCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_GIS_GEO_INFORMATION', @level2type=N'COLUMN',@level2name=N'AREA_MEAS_SRC_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date acreage information for the handler or area was collected. (AreaMeasureDate)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_GIS_GEO_INFORMATION', @level2type=N'COLUMN',@level2name=N'AREA_MEAS_DATE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The calender date when data were collected (DataCollectionDate)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_GIS_GEO_INFORMATION', @level2type=N'COLUMN',@level2name=N'DATA_COLL_DATE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The horizontal measure, in meters, of the relative accuracy of the latitude and longitude coordinates. (HorizontalAccuracyMeasure)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_GIS_GEO_INFORMATION', @level2type=N'COLUMN',@level2name=N'HORZ_ACC_MEAS'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The number that represents the proportional distance on the ground for one unit of measure on the map or photo. (SourceMapScaleNumeric)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_GIS_GEO_INFORMATION', @level2type=N'COLUMN',@level2name=N'SRC_MAP_SCALE_NUM'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The owner of the code.  If provided, it should be HQ. (CoordinateDataSourceDataOwnerCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_GIS_GEO_INFORMATION', @level2type=N'COLUMN',@level2name=N'COORD_DATA_SRC_DATA_OWNER_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The code that represents the party responsible for proiding the latitude and longitude coordinates. (CoordinateDataSourceCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_GIS_GEO_INFORMATION', @level2type=N'COLUMN',@level2name=N'COORD_DATA_SRC_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The owner of the code.  If provided, it should be HQ. (GeographicReferencePointDataOwnerCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_GIS_GEO_INFORMATION', @level2type=N'COLUMN',@level2name=N'GEO_REF_PT_DATA_OWNER_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The code that represents the place for which the geographic codes were established (GeographicReferencePointCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_GIS_GEO_INFORMATION', @level2type=N'COLUMN',@level2name=N'GEO_REF_PT_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The owner of the code.  If provided, it should be HQ. (GeometricTypeDataOwnerCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_GIS_GEO_INFORMATION', @level2type=N'COLUMN',@level2name=N'GEOM_TYPE_DATA_OWNER_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The code that represents the geometric entity represented by one point or a sequence of points (GeometricTypeCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_GIS_GEO_INFORMATION', @level2type=N'COLUMN',@level2name=N'GEOM_TYPE_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The owner of the code.  If provided, it should be HQ. (HorizontalCollectionMethodDataOwnerCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_GIS_GEO_INFORMATION', @level2type=N'COLUMN',@level2name=N'HORZ_COLL_METH_DATA_OWNER_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The code that represents the method used to deterimine the latitude and longitude coordinates for a point on the earth. (HorizontalCollectionMethodCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_GIS_GEO_INFORMATION', @level2type=N'COLUMN',@level2name=N'HORZ_COLL_METH_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The owner of the code.  If provided, it should be HQ. (HorizontalCoordinateReferenceSystemDatumDataOwnerCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_GIS_GEO_INFORMATION', @level2type=N'COLUMN',@level2name=N'HRZ_CRD_RF_SYS_DTM_DTA_OWN_CDE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The code that represents the datum used in determining latitude and longitude coordinates (HorizontalCoordinateReferenceSystemDatumCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_GIS_GEO_INFORMATION', @level2type=N'COLUMN',@level2name=N'HORZ_COORD_REF_SYS_DATUM_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The owner of the code.  If provided, it should be HQ. (VerificationMethodDataOwnerCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_GIS_GEO_INFORMATION', @level2type=N'COLUMN',@level2name=N'VERF_METH_DATA_OWNER_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The code that represents the process used to verify the latitude and longitude coordinates. (VerificationMethodCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_GIS_GEO_INFORMATION', @level2type=N'COLUMN',@level2name=N'VERF_METH_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Geometry property element of a GeoRSS GML instance (Latitude)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_GIS_GEO_INFORMATION', @level2type=N'COLUMN',@level2name=N'LATITUDE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Geometry property element of a GeoRSS GML instance (Longitude)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_GIS_GEO_INFORMATION', @level2type=N'COLUMN',@level2name=N'LONGITUDE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Geometry property element of a GeoRSS GML instance (Elevation)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_GIS_GEO_INFORMATION', @level2type=N'COLUMN',@level2name=N'ELEVATION'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Schema element: GeographicInformationDataType' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_GIS_GEO_INFORMATION'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Certification information for the person who certified report to the authorizing agency. (_PK)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_CERTIFICATION', @level2type=N'COLUMN',@level2name=N'HD_CERTIFICATION_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Certification information for the person who certified report to the authorizing agency. (_FK)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_CERTIFICATION', @level2type=N'COLUMN',@level2name=N'HD_HANDLER_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Transaction code used to define the add, update, or delete. (TransactionCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_CERTIFICATION', @level2type=N'COLUMN',@level2name=N'TRANSACTION_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Sequence number for each certification for the handler. (CertificationSequenceNumber)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_CERTIFICATION', @level2type=N'COLUMN',@level2name=N'CERT_SEQ'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Date on which the handler information was certified by the reporting site. (SignedDate)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_CERTIFICATION', @level2type=N'COLUMN',@level2name=N'CERT_SIGNED_DATE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Title of the contact person or the title of the person who certified the handler information reported to the authorizing agency. (IndividualTitleText)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_CERTIFICATION', @level2type=N'COLUMN',@level2name=N'CERT_TITLE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'First name of a person. (FirstName)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_CERTIFICATION', @level2type=N'COLUMN',@level2name=N'CERT_FIRST_NAME'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Middle initial of a person. (MiddleInitial)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_CERTIFICATION', @level2type=N'COLUMN',@level2name=N'CERT_MIDDLE_INITIAL'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Last name of a person. (LastName)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_CERTIFICATION', @level2type=N'COLUMN',@level2name=N'CERT_LAST_NAME'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Schema element: CertificationEmailText' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_CERTIFICATION', @level2type=N'COLUMN',@level2name=N'CERT_EMAIL_TEXT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Schema element: CertificationDataType' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_CERTIFICATION'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Information about environmental permits issued to the handler. (_PK)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_ENV_PERMIT', @level2type=N'COLUMN',@level2name=N'HD_ENV_PERMIT_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Information about environmental permits issued to the handler. (_FK)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_ENV_PERMIT', @level2type=N'COLUMN',@level2name=N'HD_HANDLER_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Transaction code used to define the add, update, or delete. (TransactionCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_ENV_PERMIT', @level2type=N'COLUMN',@level2name=N'TRANSACTION_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Identification number of an effective environmental permit issued to the handler, or the number of a filed application for which an environmental permit has not yet been issued. (EnvironmentalPermitID)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_ENV_PERMIT', @level2type=N'COLUMN',@level2name=N'ENV_PERMIT_NUMBER'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates the agency that defines the other permit type. (EnvironmentalPermitOwnerName)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_ENV_PERMIT', @level2type=N'COLUMN',@level2name=N'ENV_PERMIT_OWNER'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Code indicating the environmental program and/or jurisdictional authority under which an environmental permit was issued to the facility, or under which an application has been filed for which a permit has not yet been issued. This data element is applicable to TSD facilities only. (EnvironmentalPermitTypeCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_ENV_PERMIT', @level2type=N'COLUMN',@level2name=N'ENV_PERMIT_TYPE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Description of any permit type indicated as O (Other) in the Permit Type field. (EnvironmentalPermitDescription)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_ENV_PERMIT', @level2type=N'COLUMN',@level2name=N'ENV_PERMIT_DESC'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Schema element: EnvironmentalPermitDataType' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_ENV_PERMIT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Episodic event info for a Handler' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_EPISODIC_EVENT', @level2type=N'COLUMN',@level2name=N'HD_EPISODIC_EVENT_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Handler data (_FK)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_EPISODIC_EVENT', @level2type=N'COLUMN',@level2name=N'HD_HANDLER_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Transaction code used to define the add, update, or delete. (TransactionCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_EPISODIC_EVENT', @level2type=N'COLUMN',@level2name=N'TRANSACTION_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Owner of the episodic event. (EpisodicEventOwner)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_EPISODIC_EVENT', @level2type=N'COLUMN',@level2name=N'EVENT_OWNER'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Type of the episodic event. (EpisodicEventType)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_EPISODIC_EVENT', @level2type=N'COLUMN',@level2name=N'EVENT_TYPE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Other description of the episodic event. (EpisodicEventOtherDescription)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_EPISODIC_EVENT', @level2type=N'COLUMN',@level2name=N'EVENT_OTHER_DESC'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'First name of the contact. (FirstName)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_EPISODIC_EVENT', @level2type=N'COLUMN',@level2name=N'CONTACT_FIRST_NAME'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Middle initial of the contact. (MiddleInitial)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_EPISODIC_EVENT', @level2type=N'COLUMN',@level2name=N'CONTACT_MIDDLE_INITIAL'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Last name of the contact. (LastName)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_EPISODIC_EVENT', @level2type=N'COLUMN',@level2name=N'CONTACT_LAST_NAME'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Contact organization name. (OrganizationFormalName)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_EPISODIC_EVENT', @level2type=N'COLUMN',@level2name=N'CONTACT_ORG_NAME'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Title of the contact. (IndividualTitleText)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_EPISODIC_EVENT', @level2type=N'COLUMN',@level2name=N'CONTACT_TITLE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Email address of the contact. (EmailAddressText)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_EPISODIC_EVENT', @level2type=N'COLUMN',@level2name=N'CONTACT_EMAIL_ADDRESS'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Telephone number of the contact. (TelephoneNumberText)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_EPISODIC_EVENT', @level2type=N'COLUMN',@level2name=N'CONTACT_PHONE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Phone extension of the contact. (PhoneExtensionText)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_EPISODIC_EVENT', @level2type=N'COLUMN',@level2name=N'CONTACT_PHONE_EXT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Fax number of the contact. (FaxNumberText)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_EPISODIC_EVENT', @level2type=N'COLUMN',@level2name=N'CONTACT_FAX'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Episodic event start event. (EpisodicEventStartDate)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_EPISODIC_EVENT', @level2type=N'COLUMN',@level2name=N'START_DATE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Episodic event end event. (EpisodicEventEndDate)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_EPISODIC_EVENT', @level2type=N'COLUMN',@level2name=N'END_DATE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Episodic waste info for a Handler Episodic Event' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_EPISODIC_WASTE', @level2type=N'COLUMN',@level2name=N'HD_EPISODIC_WASTE_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Episode event data (_FK)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_EPISODIC_WASTE', @level2type=N'COLUMN',@level2name=N'HD_EPISODIC_EVENT_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Transaction code used to define the add, update, or delete. (TransactionCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_EPISODIC_WASTE', @level2type=N'COLUMN',@level2name=N'TRANSACTION_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Unique number that identifies the episodic waste. (EpisodicWasteSequenceNumber)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_EPISODIC_WASTE', @level2type=N'COLUMN',@level2name=N'SEQ_NUMBER'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Waste description. (WasteDescription)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_EPISODIC_WASTE', @level2type=N'COLUMN',@level2name=N'WASTE_DESC'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The quantity of waste that is handled by each process code. This element pertains only to Part A submissions. (EstimatedQuantity)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_EPISODIC_WASTE', @level2type=N'COLUMN',@level2name=N'EST_QNTY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Episodic waste code details for Handler Episodic Waste' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_EPISODIC_WASTE_CODE', @level2type=N'COLUMN',@level2name=N'HD_EPISODIC_WASTE_CODE_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Episodic waste data (_FK)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_EPISODIC_WASTE_CODE', @level2type=N'COLUMN',@level2name=N'HD_EPISODIC_WASTE_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Transaction code used to define the add, update, or delete. (TransactionCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_EPISODIC_WASTE_CODE', @level2type=N'COLUMN',@level2name=N'TRANSACTION_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Owner and definer of the waste code. (WasteCodeOwnerName)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_EPISODIC_WASTE_CODE', @level2type=N'COLUMN',@level2name=N'WASTE_CODE_OWNER'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Code used to describe hazardous waste. (WasteCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_EPISODIC_WASTE_CODE', @level2type=N'COLUMN',@level2name=N'WASTE_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Descriptive text describing the Waste Code (Data publishing only). (WasteCodeText)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_EPISODIC_WASTE_CODE', @level2type=N'COLUMN',@level2name=N'WASTE_CODE_TEXT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Top level of all information about the handler. (_PK)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'HD_HANDLER_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Top level of all information about the handler. (_FK)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'HD_HBASIC_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Transaction code used to define the add, update, or delete. (TransactionCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'TRANSACTION_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates the location of the agency regulating the handler. (ActivityLocationCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'ACTIVITY_LOCATION'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Code indicating the source of information for the associated data (activity, wastes, etc.). (SourceTypeCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'SOURCE_TYPE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Sequence number for each source record about a handler. (SourceRecordSequenceNumber)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'SEQ_NUMBER'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Date that the form (indicated by the associated Source) was received from the handler by the appropriate authority. (ReceiveDate)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'RECEIVE_DATE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the Handler (HandlerName)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'HANDLER_NAME'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Date information was received for the handler. (AcknowledgeReceiptDate)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'ACKNOWLEDGE_DATE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Flag indicating that the handler has been identified through a source other than Notification and is suspected of conducting RCRA-regulated activities without proper authority. (NonNotifierIndicator)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'NON_NOTIFIER'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date that operation of the facility commenced, the date construction on the facility commenced, or the date that operation is expected to begin. (TreatmentStorageDisposalDate)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'TSD_DATE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Code indicating that the handler, whether public or private, currently accepts hazardous waste from another site (site identified by a different EPA ID). If information is also available on the specific processes and wastes which are accepted, it is indicated by a flag at the process unit level (Process Unit Group Commercial Status). (OffsiteWasteReceiptCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'OFF_SITE_RECEIPT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Code indicating the reason why the handler is not accessible for normal RCRA tracking and processing (previously called Bankrupt Indicator). (AccessibilityCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'ACCESSIBILITY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates the agency that defines the county code. (CountyCodeOwner)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'COUNTY_CODE_OWNER'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The Federal Information Processing Standard (FIPS) code for the county in which the facility is located (Ref: FIPS Publication, 6-3, "Counties and County Equivalents of the States of the United States"). (CountyCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'COUNTY_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Notes regarding the Handler. (HandlerSupplementalInformationText)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'NOTES'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Top level of all information about the handler. (AcknowledgeFlag)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'ACKNOWLEDGE_FLAG'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Location address information. (LocationAddressText)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'LOCATION_STREET1'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Location address information. (SupplementalLocationText)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'LOCATION_STREET2'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Location address information. (LocalityName)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'LOCATION_CITY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Location address information. (StateUSPSCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'LOCATION_STATE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Location address information. (CountryName)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'LOCATION_COUNTRY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Location address information. (LocationZIPCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'LOCATION_ZIP'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Mailing address information. (MailingAddressText)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'MAIL_STREET1'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Mailing address information. (SupplementalAddressText)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'MAIL_STREET2'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Mailing address information. (MailingAddressCityName)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'MAIL_CITY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Mailing address information. (MailingAddressStateUSPSCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'MAIL_STATE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Mailing address information. (MailingAddressCountryName)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'MAIL_COUNTRY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Mailing address information. (MailingAddressZIPCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'MAIL_ZIP'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Contact information. (FirstName)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'CONTACT_FIRST_NAME'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Contact information. (MiddleInitial)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'CONTACT_MIDDLE_INITIAL'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Contact information. (LastName)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'CONTACT_LAST_NAME'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Contact information. (OrganizationFormalName)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'CONTACT_ORG_NAME'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Title of the contact person or the title of the person who certified the handler information reported to the authorizing agency. (IndividualTitleText)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'CONTACT_TITLE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Email address data (EmailAddressText)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'CONTACT_EMAIL_ADDRESS'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Telephone Number data (TelephoneNumberText)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'CONTACT_PHONE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Telephone number extension (PhoneExtensionText)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'CONTACT_PHONE_EXT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Contact fax number (FaxNumberText)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'CONTACT_FAX'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Contact Address Street Number' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'CONTACT_STREET_NUMBER'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Mailing address information. (MailingAddressText)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'CONTACT_STREET1'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Mailing address information. (SupplementalAddressText)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'CONTACT_STREET2'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Mailing address information. (MailingAddressCityName)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'CONTACT_CITY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Mailing address information. (MailingAddressStateUSPSCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'CONTACT_STATE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Mailing address information. (MailingAddressCountryName)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'CONTACT_COUNTRY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Mailing address information. (MailingAddressZIPCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'CONTACT_ZIP'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Contact information. (FirstName)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'PCONTACT_FIRST_NAME'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Contact information. (MiddleInitial)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'PCONTACT_MIDDLE_NAME'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Contact information. (LastName)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'PCONTACT_LAST_NAME'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Contact information. (OrganizationFormalName)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'PCONTACT_ORG_NAME'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Title of the contact person or the title of the person who certified the handler information reported to the authorizing agency. (IndividualTitleText)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'PCONTACT_TITLE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Email address data (EmailAddressText)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'PCONTACT_EMAIL_ADDRESS'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Telephone Number data (TelephoneNumberText)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'PCONTACT_PHONE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Telephone number extension (PhoneExtensionText)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'PCONTACT_PHONE_EXT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Contact fax number (FaxNumberText)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'PCONTACT_FAX'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Permit Contact Address Street Number' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'PCONTACT_STREET_NUMBER'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Mailing address information. (MailingAddressText)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'PCONTACT_STREET1'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Mailing address information. (SupplementalAddressText)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'PCONTACT_STREET2'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Mailing address information. (MailingAddressCityName)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'PCONTACT_CITY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Mailing address information. (MailingAddressStateUSPSCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'PCONTACT_STATE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Mailing address information. (MailingAddressCountryName)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'PCONTACT_COUNTRY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Mailing address information. (MailingAddressZIPCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'PCONTACT_ZIP'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Code indicating that the handler is engaged in the burning of used oil fuel. (FuelBurnerCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'USED_OIL_BURNER'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Code indicating that the handler is engaged in processing used oil activities. (ProcessorCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'USED_OIL_PROCESSOR'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Code indicating that the handler is engaged in re-refining used oil activities. (RefinerCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'USED_OIL_REFINER'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Code indicating that the handler directs shipments of used oil to burners. (MarketBurnerCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'USED_OIL_MARKET_BURNER'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Code indicating that the handler is a marketer who first claims the used oil meets the specifications. (SpecificationMarketerCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'USED_OIL_SPEC_MARKETER'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Code indicating that the handler owns or operates a used oil transfer facility. (TransferFacilityCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'USED_OIL_TRANSFER_FACILITY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Code indicating that the handler is engaged in used oil transportation and/or transfer facility activities. (TransporterCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'USED_OIL_TRANSPORTER'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Code indicating current ownership status of the land on which the facility is located. (LandTypeCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'LAND_TYPE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Owner of the state district code.  Usually 2-digit postal code (i.e. KS). (StateDistrictOwnerName)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'STATE_DISTRICT_OWNER'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Code indicating the state-designated legislative district(s) in which the site is located. (StateDistrictCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'STATE_DISTRICT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Code indicating that the handler is engaged in importing hazardous waste into the United States. (ImporterActivityCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'IMPORTER_ACTIVITY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Code indicating that the handler is engaged in generating mixed waste (waste that is both hazardous and radioactive). (MixedWasteGeneratorCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'MIXED_WASTE_GENERATOR'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Code indicating that the handler is engaged in recycling hazardous waste. (RecyclerActivityCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'RECYCLER_ACTIVITY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Code indicating that the handler is engaged in the transportation of hazardous waste. (TransporterActivityCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'TRANSPORTER_ACTIVITY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Code indicating that the handler is engaged in the treatment, storage, or disposal of hazardous waste. (TreatmentStorageDisposalActivityCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'TSD_ACTIVITY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Code indicating that the handler generates and or treats, stores, or disposes of hazardous waste and has an injection well located at the installation. (UndergroundInjectionActivityCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'UNDERGROUND_INJECTION_ACTIVITY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Code indicating that the handler treats, disposes of, or recycles hazardous waste on site. (UniversalWasteDestinationFacilityIndicator)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'UNIVERSAL_WASTE_DEST_FACILITY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Code indicating that the handler qualifies for the Small Quantity Onsite Burner Exemption. (OnsiteBurnerExemptionCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'ONSITE_BURNER_EXEMPTION'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Code indicating that the handler qualifies for the Smelting, Melting, and Refining Furnace Exemption. (FurnaceExemptionCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'FURNACE_EXEMPTION'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Code indicating that the handler is engaged in short-term hazardous waste generation activities. (ShortTermGeneratorIndicator)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'SHORT_TERM_GEN_IND'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Code indicating that the handler is a Hazardous Waste Transfer Facility (not to be confused with a used oil transfer facility). (TransferFacilityIndicator)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'TRANSFER_FACILITY_IND'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates the agency that defines the generator status type. (WasteGeneratorOwnerName)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'STATE_WASTE_GENERATOR_OWNER'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Code indicating that the handler is engaged in the generation of hazardous waste. (WasteGeneratorStatusCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'STATE_WASTE_GENERATOR'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates the agency that defines the generator status type. (WasteGeneratorOwnerName)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'FED_WASTE_GENERATOR_OWNER'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Code indicating that the handler is engaged in the generation of hazardous waste. (WasteGeneratorStatusCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'FED_WASTE_GENERATOR'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates whether or not the Handler is a College or University opting into SubPart K. (CollegeIndicator)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'COLLEGE_IND'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates whether or not the Handler is a Hospital opting into SubPart K. (HospitalIndicator)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'HOSPITAL_IND'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates whether or not the Handler is a Non-Profit opting into SubPart K. (NonProfitIndicator)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'NON_PROFIT_IND'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates whether or not the Handler is withdrawing from SubPart K. (WithdrawalIndicator)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'WITHDRAWAL_IND'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Transaction code used to define the add, update, or delete. (TransactionCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'TRANS_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates the reason for notifying Hazardous Secondary Material (NotificationReasonCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'NOTIFICATION_RSN_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The Effective Date of the action: 1. Hazardous Secondary Material notification in Handler, 2. Corrective Action Authority, 3. Financial Assurance Mechanism.  (EffectiveDate)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'EFFC_DATE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates whether or not the facility has provided Financial Assurance for the HSM Activities (FinancialAssuranceIndicator)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'FINANCIAL_ASSURANCE_IND'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates the facility has a recycling process which the product has levels of hazardous constituents that are not comparable to or unable to be compared to a legitimate product or intermediate but that the recycling is still legitimate' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'RECYCLING_IND'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Mailing Address Street Number' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'MAIL_STREET_NUMBER'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Location Address Street Number' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'LOCATION_STREET_NUMBER'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Descriptive text describing Notification source (Data publishing only)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'NON_NOTIFIER_TEXT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Descriptive text describing reason facility is not accessible (Data publishing only)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'ACCESSIBILITY_TEXT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Descriptive text describing the code indicating the state-designated legislative district(s) in which the site is located (Data publishing only)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'STATE_DISTRICT_TEXT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'(ShortTermSupplementalInformationText)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'SHORT_TERM_INTRNL_NOTES'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Notes regarding Handler Part-A submissions. (NatureOfBusinessText)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'NATURE_OF_BUSINESS_TEXT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates that the Handler is participating in Import Trading activity. (RecognizedTraderImporterIndicator)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'RECOGNIZED_TRADER_IMPORTER_IND'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates that the Handler is participating in Export Trading activity. (RecognizedTraderExporterIndicator)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'RECOGNIZED_TRADER_EXPORTER_IND'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates that the Handler is participating in Slab Import activity. (SlabImporterIndicator)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'SLAB_IMPORTER_IND'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates that the Handler is participating in Slab Export activity. (SlabExporterIndicator)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'SLAB_EXPORTER_IND'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Identifies that Handler participates in Nonstorage Recycler Activity. (RecyclerActivityNonstorage)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'RECYCLER_ACT_NONSTORAGE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Identifies that Handler is ManifestBroker. (ManifestBroker)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER', @level2type=N'COLUMN',@level2name=N'MANIFEST_BROKER'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Schema element: HandlerDataType' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HANDLER'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Details of facility submission. (_PK)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HBASIC', @level2type=N'COLUMN',@level2name=N'HD_HBASIC_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Transaction code used to define the add, update, or delete. (TransactionCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HBASIC', @level2type=N'COLUMN',@level2name=N'TRANSACTION_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Code that uniquely identifies the handler. (HandlerID)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HBASIC', @level2type=N'COLUMN',@level2name=N'HANDLER_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Designates that data is available for extract for public use. (PublicUseExtractIndicator)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HBASIC', @level2type=N'COLUMN',@level2name=N'EXTRACT_FLAG'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Computer-generated primary facility-level key in the EPA FINDS data system used as an identifier to cross-reference entities regulated under different environmental programs. The Agency Facility Identification Data Standard (FIDS) requires that program offices store this key in their data systems. (FacilityRegistryID)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HBASIC', @level2type=N'COLUMN',@level2name=N'FACILITY_IDENTIFIER'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Schema element: FacilitySubmissionDataType' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_HBASIC'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: LQG closure info for a Handler' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_LQG_CLOSURE', @level2type=N'COLUMN',@level2name=N'HD_LQG_CLOSURE_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Handler data (_FK)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_LQG_CLOSURE', @level2type=N'COLUMN',@level2name=N'HD_HANDLER_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Transaction code used to define the add, update, or delete. (TransactionCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_LQG_CLOSURE', @level2type=N'COLUMN',@level2name=N'TRANSACTION_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Type of the closure. (ClosureType)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_LQG_CLOSURE', @level2type=N'COLUMN',@level2name=N'CLOSURE_TYPE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Date of expected closure. (ExpectedClosureDate)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_LQG_CLOSURE', @level2type=N'COLUMN',@level2name=N'EXPECTED_CLOSURE_DATE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'New closure date. (NewClosureDate)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_LQG_CLOSURE', @level2type=N'COLUMN',@level2name=N'NEW_CLOSURE_DATE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Date of closed. (DateClosed)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_LQG_CLOSURE', @level2type=N'COLUMN',@level2name=N'DATE_CLOSED'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Type of in compliance. (InComplianceIndicator)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_LQG_CLOSURE', @level2type=N'COLUMN',@level2name=N'IN_COMPLIANCE_IND'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: LQG consolidation info for a Handler' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_LQG_CONSOLIDATION', @level2type=N'COLUMN',@level2name=N'HD_LQG_CONSOLIDATION_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Handler data (_FK)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_LQG_CONSOLIDATION', @level2type=N'COLUMN',@level2name=N'HD_HANDLER_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Transaction code used to define the add, update, or delete. (TransactionCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_LQG_CONSOLIDATION', @level2type=N'COLUMN',@level2name=N'TRANSACTION_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Unique number that identifies the Consolidation. (ConsolidationSequenceNumber)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_LQG_CONSOLIDATION', @level2type=N'COLUMN',@level2name=N'SEQ_NUMBER'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Code that uniquely identifies the handler. (HandlerID)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_LQG_CONSOLIDATION', @level2type=N'COLUMN',@level2name=N'HANDLER_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the Handler (HandlerName)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_LQG_CONSOLIDATION', @level2type=N'COLUMN',@level2name=N'HANDLER_NAME'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Mailing address information. (MailingAddressNumberText)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_LQG_CONSOLIDATION', @level2type=N'COLUMN',@level2name=N'MAIL_STREET_NUMBER'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Mailing address information. (MailingAddressText)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_LQG_CONSOLIDATION', @level2type=N'COLUMN',@level2name=N'MAIL_STREET1'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Mailing address information. (SupplementalAddressText)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_LQG_CONSOLIDATION', @level2type=N'COLUMN',@level2name=N'MAIL_STREET2'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Mailing address information. (MailingAddressCityName)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_LQG_CONSOLIDATION', @level2type=N'COLUMN',@level2name=N'MAIL_CITY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Mailing address information. (MailingAddressStateUSPSCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_LQG_CONSOLIDATION', @level2type=N'COLUMN',@level2name=N'MAIL_STATE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Mailing address information. (MailingAddressCountryName)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_LQG_CONSOLIDATION', @level2type=N'COLUMN',@level2name=N'MAIL_COUNTRY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Mailing address information. (MailingAddressZIPCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_LQG_CONSOLIDATION', @level2type=N'COLUMN',@level2name=N'MAIL_ZIP'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: First name of the contact. (FirstName)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_LQG_CONSOLIDATION', @level2type=N'COLUMN',@level2name=N'CONTACT_FIRST_NAME'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Middle initial of the contact. (MiddleInitial)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_LQG_CONSOLIDATION', @level2type=N'COLUMN',@level2name=N'CONTACT_MIDDLE_INITIAL'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Last name of the contact. (LastName)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_LQG_CONSOLIDATION', @level2type=N'COLUMN',@level2name=N'CONTACT_LAST_NAME'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Name of the contact organization. (OrganizationFormalName)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_LQG_CONSOLIDATION', @level2type=N'COLUMN',@level2name=N'CONTACT_ORG_NAME'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Title of the contact person (IndividualTitleText)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_LQG_CONSOLIDATION', @level2type=N'COLUMN',@level2name=N'CONTACT_TITLE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Email address data (EmailAddressText)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_LQG_CONSOLIDATION', @level2type=N'COLUMN',@level2name=N'CONTACT_EMAIL_ADDRESS'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Telephone Number data (TelephoneNumberText)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_LQG_CONSOLIDATION', @level2type=N'COLUMN',@level2name=N'CONTACT_PHONE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Telephone number extension (PhoneExtensionText)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_LQG_CONSOLIDATION', @level2type=N'COLUMN',@level2name=N'CONTACT_PHONE_EXT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Contact fax number (FaxNumberText)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_LQG_CONSOLIDATION', @level2type=N'COLUMN',@level2name=N'CONTACT_FAX'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: North American Industry Classification Status codes reported for the handler. (_PK)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_NAICS', @level2type=N'COLUMN',@level2name=N'HD_NAICS_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: North American Industry Classification Status codes reported for the handler. (_FK)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_NAICS', @level2type=N'COLUMN',@level2name=N'HD_HANDLER_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Transaction code used to define the add, update, or delete. (TransactionCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_NAICS', @level2type=N'COLUMN',@level2name=N'TRANSACTION_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Sequence number for each NAICS code for the handler. (NAICSSequenceNumber)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_NAICS', @level2type=N'COLUMN',@level2name=N'NAICS_SEQ'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates the agency that defines the NAICS Code. (NAICSOwnerCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_NAICS', @level2type=N'COLUMN',@level2name=N'NAICS_OWNER'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The North American Industry Classification System Code that identifies the business activities of the facility. (NAICSCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_NAICS', @level2type=N'COLUMN',@level2name=N'NAICS_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Schema element: NAICSIdentityDataType' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_NAICS'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Contains alternative identifiers for the facility. (_PK)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_OTHER_ID', @level2type=N'COLUMN',@level2name=N'HD_OTHER_ID_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Contains alternative identifiers for the facility. (_FK)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_OTHER_ID', @level2type=N'COLUMN',@level2name=N'HD_HBASIC_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Transaction code used to define the add, update, or delete. (TransactionCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_OTHER_ID', @level2type=N'COLUMN',@level2name=N'TRANSACTION_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Alternate facility identifier. (OtherHandlerID)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_OTHER_ID', @level2type=N'COLUMN',@level2name=N'OTHER_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates the agency that owns the Relationship. (RelationshipOwnerName)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_OTHER_ID', @level2type=N'COLUMN',@level2name=N'RELATIONSHIP_OWNER'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates the type of the relationship. (RelationshipTypeCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_OTHER_ID', @level2type=N'COLUMN',@level2name=N'RELATIONSHIP_TYPE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates whether the alternate Id references the same facility. (SameFacilityIndicator)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_OTHER_ID', @level2type=N'COLUMN',@level2name=N'SAME_FACILITY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Notes regarding the alternative facility identifier. (OtherIDSupplementalInformationText)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_OTHER_ID', @level2type=N'COLUMN',@level2name=N'NOTES'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Schema element: OtherIDDataType' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_OTHER_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Handler owner and operator information. (_PK)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_OWNEROP', @level2type=N'COLUMN',@level2name=N'HD_OWNEROP_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Handler owner and operator information. (_FK)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_OWNEROP', @level2type=N'COLUMN',@level2name=N'HD_HANDLER_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Transaction code used to define the add, update, or delete. (TransactionCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_OWNEROP', @level2type=N'COLUMN',@level2name=N'TRANSACTION_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Sequential number used to order multiple occurrences of owners and operators. (OwnerOperatorSequenceNumber)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_OWNEROP', @level2type=N'COLUMN',@level2name=N'OWNER_OP_SEQ'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Code indicating whether the data is associated with a current or previous owner or operator. The system will allow multiple current owners and operators. (OwnerOperatorIndicator)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_OWNEROP', @level2type=N'COLUMN',@level2name=N'OWNER_OP_IND'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Code indicating the owner/operator type. (OwnerOperatorTypeCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_OWNEROP', @level2type=N'COLUMN',@level2name=N'OWNER_OP_TYPE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Date indicating when the owner/operator became current. (CurrentStartDate)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_OWNEROP', @level2type=N'COLUMN',@level2name=N'DATE_BECAME_CURRENT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Date indicating when the owner/operator changed to a different owner/operator. (CurrentEndDate)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_OWNEROP', @level2type=N'COLUMN',@level2name=N'DATE_ENDED_CURRENT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Notes for the facility Owner Operator. (OwnerOperatorSupplementalInformationText)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_OWNEROP', @level2type=N'COLUMN',@level2name=N'NOTES'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Contact information. (FirstName)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_OWNEROP', @level2type=N'COLUMN',@level2name=N'FIRST_NAME'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Contact information. (MiddleInitial)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_OWNEROP', @level2type=N'COLUMN',@level2name=N'MIDDLE_INITIAL'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Contact information. (LastName)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_OWNEROP', @level2type=N'COLUMN',@level2name=N'LAST_NAME'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Contact information. (OrganizationFormalName)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_OWNEROP', @level2type=N'COLUMN',@level2name=N'ORG_NAME'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Title of the contact person or the title of the person who certified the handler information reported to the authorizing agency. (IndividualTitleText)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_OWNEROP', @level2type=N'COLUMN',@level2name=N'TITLE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Email address data (EmailAddressText)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_OWNEROP', @level2type=N'COLUMN',@level2name=N'EMAIL_ADDRESS'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Telephone Number data (TelephoneNumberText)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_OWNEROP', @level2type=N'COLUMN',@level2name=N'PHONE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Telephone number extension (PhoneExtensionText)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_OWNEROP', @level2type=N'COLUMN',@level2name=N'PHONE_EXT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Contact fax number (FaxNumberText)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_OWNEROP', @level2type=N'COLUMN',@level2name=N'FAX'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Owner/Operator Address Street Number' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_OWNEROP', @level2type=N'COLUMN',@level2name=N'MAIL_ADDR_NUM_TXT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Mailing address information. (MailingAddressText)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_OWNEROP', @level2type=N'COLUMN',@level2name=N'STREET1'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Mailing address information. (SupplementalAddressText)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_OWNEROP', @level2type=N'COLUMN',@level2name=N'STREET2'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Mailing address information. (MailingAddressCityName)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_OWNEROP', @level2type=N'COLUMN',@level2name=N'CITY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Mailing address information. (MailingAddressStateUSPSCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_OWNEROP', @level2type=N'COLUMN',@level2name=N'STATE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Mailing address information. (MailingAddressCountryName)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_OWNEROP', @level2type=N'COLUMN',@level2name=N'COUNTRY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Mailing address information. (MailingAddressZIPCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_OWNEROP', @level2type=N'COLUMN',@level2name=N'ZIP'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Schema element: FacilityOwnerOperatorDataType' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_OWNEROP'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Hazardous Secondary Material activity of the Handler (_PK)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_SEC_MATERIAL_ACTIVITY', @level2type=N'COLUMN',@level2name=N'HD_SEC_MATERIAL_ACTIVITY_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Hazardous Secondary Material activity of the Handler (_FK)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_SEC_MATERIAL_ACTIVITY', @level2type=N'COLUMN',@level2name=N'HD_HANDLER_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Transaction code used to define the add, update, or delete. (TransactionCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_SEC_MATERIAL_ACTIVITY', @level2type=N'COLUMN',@level2name=N'TRANS_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Unique number identifying the HSM Activity for the Handler (HSMSequenceNumber)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_SEC_MATERIAL_ACTIVITY', @level2type=N'COLUMN',@level2name=N'HSM_SEQ_NUM'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Owner of the Facility Code.  Shoule be HQ or the state code (i.e. KS) (FacilityCodeOwnerName)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_SEC_MATERIAL_ACTIVITY', @level2type=N'COLUMN',@level2name=N'FAC_CODE_OWNER_NAME'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Type of facility generating Hazardous Secondary Material (FacilityTypeCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_SEC_MATERIAL_ACTIVITY', @level2type=N'COLUMN',@level2name=N'FAC_TYPE_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The estimated amount of HSM generated by the Handler (EstimatedShortTonsQuantity)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_SEC_MATERIAL_ACTIVITY', @level2type=N'COLUMN',@level2name=N'ESTIMATED_SHORT_TONS_QNTY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The actual amount of HSM generated by the Handler (ActualShortTonsQuantity)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_SEC_MATERIAL_ACTIVITY', @level2type=N'COLUMN',@level2name=N'ACTL_SHORT_TONS_QNTY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Code to indicate if the HSM is being managed in a Land Based Unit (LandBasedUnitIndicator)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_SEC_MATERIAL_ACTIVITY', @level2type=N'COLUMN',@level2name=N'LAND_BASED_UNIT_IND'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Descriptive text describing the code to indicate if the HSM is being managed in a Land Based Unit (Data publishing only)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_SEC_MATERIAL_ACTIVITY', @level2type=N'COLUMN',@level2name=N'LAND_BASED_UNIT_IND_TEXT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Schema element: HazardousSecondaryMaterialActivityDataType' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_SEC_MATERIAL_ACTIVITY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Hazardous waste codes describing the handler''s hazardous waste streams. (_PK)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_SEC_WASTE_CODE', @level2type=N'COLUMN',@level2name=N'HD_SEC_WASTE_CODE_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Hazardous waste codes describing the handler''s hazardous waste streams. (_FK)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_SEC_WASTE_CODE', @level2type=N'COLUMN',@level2name=N'HD_SEC_MATERIAL_ACTIVITY_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Transaction code used to define the add, update, or delete. (TransactionCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_SEC_WASTE_CODE', @level2type=N'COLUMN',@level2name=N'TRANSACTION_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates the agency that owns the data record. (WasteCodeOwnerName)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_SEC_WASTE_CODE', @level2type=N'COLUMN',@level2name=N'WASTE_CODE_OWNER'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Code used to describe hazardous waste. (WasteCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_SEC_WASTE_CODE', @level2type=N'COLUMN',@level2name=N'WASTE_CODE_TYPE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Schema element: SecondaryHandlerWasteCodeDataType' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_SEC_WASTE_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: State waste activity of the handler. (_PK)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_STATE_ACTIVITY', @level2type=N'COLUMN',@level2name=N'HD_STATE_ACTIVITY_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: State waste activity of the handler. (_FK)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_STATE_ACTIVITY', @level2type=N'COLUMN',@level2name=N'HD_HANDLER_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Transaction code used to define the add, update, or delete. (TransactionCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_STATE_ACTIVITY', @level2type=N'COLUMN',@level2name=N'TRANSACTION_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates the agency that defines the state activity type. (StateActivityOwnerName)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_STATE_ACTIVITY', @level2type=N'COLUMN',@level2name=N'STATE_ACTIVITY_OWNER'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Code indicating the type of state activity. (StateActivityTypeCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_STATE_ACTIVITY', @level2type=N'COLUMN',@level2name=N'STATE_ACTIVITY_TYPE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Schema element: StateActivityDataType' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_STATE_ACTIVITY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Information about universal waste generated by the handler. (_PK)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_UNIVERSAL_WASTE', @level2type=N'COLUMN',@level2name=N'HD_UNIVERSAL_WASTE_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Information about universal waste generated by the handler. (_FK)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_UNIVERSAL_WASTE', @level2type=N'COLUMN',@level2name=N'HD_HANDLER_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Transaction code used to define the add, update, or delete. (TransactionCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_UNIVERSAL_WASTE', @level2type=N'COLUMN',@level2name=N'TRANSACTION_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates the agency that defines the universal waste type. (UniversalWasteOwnerName)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_UNIVERSAL_WASTE', @level2type=N'COLUMN',@level2name=N'UNIVERSAL_WASTE_OWNER'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Code indicating the type of universal waste. (UniversalWasteTypeCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_UNIVERSAL_WASTE', @level2type=N'COLUMN',@level2name=N'UNIVERSAL_WASTE_TYPE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Code indicating that the handler is engaged in accumulating waste on site. (AccumulatedWasteCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_UNIVERSAL_WASTE', @level2type=N'COLUMN',@level2name=N'ACCUMULATED'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Code indicating that the handler is engaged in generating waste on site. (GeneratedHandlerCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_UNIVERSAL_WASTE', @level2type=N'COLUMN',@level2name=N'GENERATED'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Schema element: UniversalWasteActivityDataType' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_UNIVERSAL_WASTE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Hazardous waste codes describing the handler''s hazardous waste streams. (_PK)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_WASTE_CODE', @level2type=N'COLUMN',@level2name=N'HD_WASTE_CODE_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Hazardous waste codes describing the handler''s hazardous waste streams. (_FK)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_WASTE_CODE', @level2type=N'COLUMN',@level2name=N'HD_HANDLER_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Transaction code used to define the add, update, or delete. (TransactionCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_WASTE_CODE', @level2type=N'COLUMN',@level2name=N'TRANSACTION_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates the agency that owns the data record. (WasteCodeOwnerName)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_WASTE_CODE', @level2type=N'COLUMN',@level2name=N'WASTE_CODE_OWNER'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Code used to describe hazardous waste. (WasteCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_WASTE_CODE', @level2type=N'COLUMN',@level2name=N'WASTE_CODE_TYPE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Schema element: HandlerWasteCodeDataType' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_HD_WASTE_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Permit event Data (_PK)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_PRM_EVENT', @level2type=N'COLUMN',@level2name=N'PRM_EVENT_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Permit event Data (_FK)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_PRM_EVENT', @level2type=N'COLUMN',@level2name=N'PRM_SERIES_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Transaction code used to define the add, update, or delete. (TransactionCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_PRM_EVENT', @level2type=N'COLUMN',@level2name=N'TRANS_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates the location of the agency regulating the handler. (ActivityLocationCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_PRM_EVENT', @level2type=N'COLUMN',@level2name=N'ACT_LOC_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates the agency that defines the event. (PermitEventDataOwnerCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_PRM_EVENT', @level2type=N'COLUMN',@level2name=N'PERMIT_EVENT_DATA_OWNER_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Code used to indicate a specific permitting/closure program event and status that has actually occurred or is scheduled to occur. (PermitEventCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_PRM_EVENT', @level2type=N'COLUMN',@level2name=N'PERMIT_EVENT_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Agency responsible for the event. (EventAgencyCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_PRM_EVENT', @level2type=N'COLUMN',@level2name=N'EVENT_AGN_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'System-generated value used to uniquely identify multiple occurrences of a corrective action event. (EventSequenceNumber)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_PRM_EVENT', @level2type=N'COLUMN',@level2name=N'EVENT_SEQ_NUM'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Date on which actual completion of an event occurs. (ActualDate)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_PRM_EVENT', @level2type=N'COLUMN',@level2name=N'ACTL_DATE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The original scheduled completion date for an event. This date cannot be changed once entered. Slippage of the scheduled completion date is recorded in the NewScheduleDate Data Element. (OriginalScheduleDate)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_PRM_EVENT', @level2type=N'COLUMN',@level2name=N'ORIGINAL_SCHEDULE_DATE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Revised scheduled completion date of the event. This date is used in conjunction with the Original Scheduled Event Date to allow tracking scheduled date slippage. As the scheduled date changes, this field is updated with the new date and the Original Scheduled Event Date is not changed. (NewScheduleDate)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_PRM_EVENT', @level2type=N'COLUMN',@level2name=N'NEW_SCHEDULE_DATE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates the agency that defines the person identifier. (ResponsiblePersonDataOwnerCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_PRM_EVENT', @level2type=N'COLUMN',@level2name=N'RESP_PERSON_DATA_OWNER_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Code indicating the person within the agency responsible for conducting the evaluation or who is the responsible Authority. (ResponsiblePersonID)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_PRM_EVENT', @level2type=N'COLUMN',@level2name=N'RESP_PERSON_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Event responsible suborganization owner. (EventSuborganizationDataOwnerCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_PRM_EVENT', @level2type=N'COLUMN',@level2name=N'EVENT_SUBORG_DATA_OWNER_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Event responsible suborganization. (EventSuborganizationCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_PRM_EVENT', @level2type=N'COLUMN',@level2name=N'EVENT_SUBORG_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Notes providing more information. (SupplementalInformationText)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_PRM_EVENT', @level2type=N'COLUMN',@level2name=N'SUPP_INFO_TXT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Schema element: PermitEventDataType' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_PRM_EVENT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Linking Data for Commitment/Initiative and Corrective Action or Permitting Events. (_PK)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_PRM_EVENT_COMMITMENT', @level2type=N'COLUMN',@level2name=N'PRM_EVENT_COMMITMENT_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Linking Data for Commitment/Initiative and Corrective Action or Permitting Events. (_FK)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_PRM_EVENT_COMMITMENT', @level2type=N'COLUMN',@level2name=N'PRM_EVENT_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Transaction code used to define the add, update, or delete. (TransactionCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_PRM_EVENT_COMMITMENT', @level2type=N'COLUMN',@level2name=N'TRANS_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Linking Data for Commitment/Initiative and Corrective Action or Permitting Events. (CommitmentLead)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_PRM_EVENT_COMMITMENT', @level2type=N'COLUMN',@level2name=N'COMMIT_LEAD'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Linking Data for Commitment/Initiative and Corrective Action or Permitting Events. (CommitmentSequenceNumber)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_PRM_EVENT_COMMITMENT', @level2type=N'COLUMN',@level2name=N'COMMIT_SEQ_NUM'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Schema element: PermitEventCommitmentDataType' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_PRM_EVENT_COMMITMENT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent:
	This is the root element for this flow XML Schema.
	 (_PK)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_PRM_FAC_SUBM', @level2type=N'COLUMN',@level2name=N'PRM_FAC_SUBM_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Code that uniquely identifies the handler. (HandlerID)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_PRM_FAC_SUBM', @level2type=N'COLUMN',@level2name=N'HANDLER_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Schema element: PermitFacilitySubmissionDataType' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_PRM_FAC_SUBM'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Linking Data for Permitted Units and Permitting Events (_PK)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_PRM_RELATED_EVENT', @level2type=N'COLUMN',@level2name=N'PRM_RELATED_EVENT_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Linking Data for Permitted Units and Permitting Events (_FK)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_PRM_RELATED_EVENT', @level2type=N'COLUMN',@level2name=N'PRM_UNIT_DETAIL_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Transaction code used to define the add, update, or delete. (TransactionCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_PRM_RELATED_EVENT', @level2type=N'COLUMN',@level2name=N'TRANS_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates the location of the agency regulating the handler. (ActivityLocationCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_PRM_RELATED_EVENT', @level2type=N'COLUMN',@level2name=N'ACT_LOC_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'System-generated value used to uniquely identify a permit series. (PermitSeriesSequenceNumber)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_PRM_RELATED_EVENT', @level2type=N'COLUMN',@level2name=N'PERMIT_SERIES_SEQ_NUM'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates the agency that defines the event. (PermitEventDataOwnerCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_PRM_RELATED_EVENT', @level2type=N'COLUMN',@level2name=N'PERMIT_EVENT_DATA_OWNER_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Code used to indicate a specific permitting/closure program event and status that has actually occurred or is scheduled to occur. (PermitEventCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_PRM_RELATED_EVENT', @level2type=N'COLUMN',@level2name=N'PERMIT_EVENT_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Agency responsible for the event. (EventAgencyCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_PRM_RELATED_EVENT', @level2type=N'COLUMN',@level2name=N'EVENT_AGN_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'System-generated value used to uniquely identify multiple occurrences of a corrective action event. (EventSequenceNumber)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_PRM_RELATED_EVENT', @level2type=N'COLUMN',@level2name=N'EVENT_SEQ_NUM'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Schema element: PermitRelatedEventDataType' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_PRM_RELATED_EVENT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Permit series Data (_PK)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_PRM_SERIES', @level2type=N'COLUMN',@level2name=N'PRM_SERIES_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Permit series Data (_FK)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_PRM_SERIES', @level2type=N'COLUMN',@level2name=N'PRM_FAC_SUBM_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Transaction code used to define the add, update, or delete. (TransactionCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_PRM_SERIES', @level2type=N'COLUMN',@level2name=N'TRANS_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'System-generated value used to uniquely identify a permit series. (PermitSeriesSequenceNumber)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_PRM_SERIES', @level2type=N'COLUMN',@level2name=N'PERMIT_SERIES_SEQ_NUM'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name or number assigned by the implementing agency. (PermitSeriesName)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_PRM_SERIES', @level2type=N'COLUMN',@level2name=N'PERMIT_SERIES_NAME'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates the agency that defines the person identifier. (ResponsiblePersonDataOwnerCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_PRM_SERIES', @level2type=N'COLUMN',@level2name=N'RESP_PERSON_DATA_OWNER_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Code indicating the person within the agency responsible for conducting the evaluation or who is the responsible Authority. (ResponsiblePersonID)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_PRM_SERIES', @level2type=N'COLUMN',@level2name=N'RESP_PERSON_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Notes providing more information. (SupplementalInformationText)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_PRM_SERIES', @level2type=N'COLUMN',@level2name=N'SUPP_INFO_TXT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Schema element: PermitSeriesDataType' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_PRM_SERIES'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Permit Unit Data (_PK)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_PRM_UNIT', @level2type=N'COLUMN',@level2name=N'PRM_UNIT_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Permit Unit Data (_FK)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_PRM_UNIT', @level2type=N'COLUMN',@level2name=N'PRM_FAC_SUBM_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Transaction code used to define the add, update, or delete. (TransactionCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_PRM_UNIT', @level2type=N'COLUMN',@level2name=N'TRANS_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'System-generated value used to uniquely identify a process unit. (PermitUnitSequenceNumber)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_PRM_UNIT', @level2type=N'COLUMN',@level2name=N'PERMIT_UNIT_SEQ_NUM'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name or number assigned by the implementing agency to identify a process unit group. (PermitUnitName)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_PRM_UNIT', @level2type=N'COLUMN',@level2name=N'PERMIT_UNIT_NAME'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Notes providing more information. (SupplementalInformationText)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_PRM_UNIT', @level2type=N'COLUMN',@level2name=N'SUPP_INFO_TXT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Schema element: PermitUnitDataType' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_PRM_UNIT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Permit Unit Detail Data (_PK)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_PRM_UNIT_DETAIL', @level2type=N'COLUMN',@level2name=N'PRM_UNIT_DETAIL_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Permit Unit Detail Data (_FK)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_PRM_UNIT_DETAIL', @level2type=N'COLUMN',@level2name=N'PRM_UNIT_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Transaction code used to define the add, update, or delete. (TransactionCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_PRM_UNIT_DETAIL', @level2type=N'COLUMN',@level2name=N'TRANS_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'System-generated value used to uniquely identify a process unit detail. (PermitUnitDetailSequenceNumber)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_PRM_UNIT_DETAIL', @level2type=N'COLUMN',@level2name=N'PERMIT_UNIT_DETAIL_SEQ_NUM'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates the agency that defines the process code. (ProcessUnitDataOwnerCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_PRM_UNIT_DETAIL', @level2type=N'COLUMN',@level2name=N'PROC_UNIT_DATA_OWNER_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Code specifying the unit group''s current waste treatment, storage, or disposal process. (ProcessUnitCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_PRM_UNIT_DETAIL', @level2type=N'COLUMN',@level2name=N'PROC_UNIT_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Date specifying when the other information in the process detail data record (i.e., process, capacity, and operating and legal status) became effective. (PermitStatusEffectiveDate)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_PRM_UNIT_DETAIL', @level2type=N'COLUMN',@level2name=N'PERMIT_STAT_EFFC_DATE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Permitted capacity of the unit (PermitUnitCapacityQuantity)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_PRM_UNIT_DETAIL', @level2type=N'COLUMN',@level2name=N'PERMIT_UNIT_CAP_QNTY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Code indicating the type of capacity. (CapacityTypeCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_PRM_UNIT_DETAIL', @level2type=N'COLUMN',@level2name=N'CAP_TYPE_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Code indicating that the facility, whether public or private, accepts hazardous waste for the process unit group from a third party. (CommercialStatusCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_PRM_UNIT_DETAIL', @level2type=N'COLUMN',@level2name=N'COMMER_STAT_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates the agency that defines the legal/operating status code. (LegalOperatingStatusDataOwnerCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_PRM_UNIT_DETAIL', @level2type=N'COLUMN',@level2name=N'LEGAL_OPER_STAT_DATA_OWNER_CDE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Code used to indicate programmatic (operating and legal status) conditions that reflect RCRA program activity requirements of a unit. (LegalOperatingStatusCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_PRM_UNIT_DETAIL', @level2type=N'COLUMN',@level2name=N'LEGAL_OPER_STAT_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates the agency that defines the unit of measure. (MeasurementUnitDataOwnerCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_PRM_UNIT_DETAIL', @level2type=N'COLUMN',@level2name=N'MEASUREMENT_UNIT_DATA_OWNR_CDE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates the unit of measure. (MeasurementUnitCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_PRM_UNIT_DETAIL', @level2type=N'COLUMN',@level2name=N'MEASUREMENT_UNIT_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Total number of units of the same process grouped together to form a single process unit group. (NumberOfUnitsCount)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_PRM_UNIT_DETAIL', @level2type=N'COLUMN',@level2name=N'NUM_OF_UNITS_COUNT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates whether or not the permit is a standardized permit. (StandardPermitIndicator)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_PRM_UNIT_DETAIL', @level2type=N'COLUMN',@level2name=N'STANDARD_PERMIT_IND'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Notes providing more information. (SupplementalInformationText)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_PRM_UNIT_DETAIL', @level2type=N'COLUMN',@level2name=N'SUPP_INFO_TXT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Schema element: PermitUnitDetailDataType' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_PRM_UNIT_DETAIL'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Hazardous waste codes describing the handler''s hazardous waste streams. (_PK)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_PRM_WASTE_CODE', @level2type=N'COLUMN',@level2name=N'PRM_WASTE_CODE_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Hazardous waste codes describing the handler''s hazardous waste streams. (_FK)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_PRM_WASTE_CODE', @level2type=N'COLUMN',@level2name=N'PRM_UNIT_DETAIL_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Transaction code used to define the add, update, or delete. (TransactionCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_PRM_WASTE_CODE', @level2type=N'COLUMN',@level2name=N'TRANSACTION_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates the agency that owns the data record. (WasteCodeOwnerName)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_PRM_WASTE_CODE', @level2type=N'COLUMN',@level2name=N'WASTE_CODE_OWNER'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Code used to describe hazardous waste. (WasteCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_PRM_WASTE_CODE', @level2type=N'COLUMN',@level2name=N'WASTE_CODE_TYPE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Schema element: PermitHandlerWasteCodeDataType' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_PRM_WASTE_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Universal waste report details' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'RU_REPORT_UNIV_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Code that uniquely identifies the handler. (HandlerIdCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'HANDLER_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates the location of the agency regulating the handler. (ActivityLocationCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'ACTIVITY_LOCATION'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Code indicating the source of information for the associated data (activity, wastes, etc.). (SourceTypeCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'SOURCE_TYPE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Sequence number for each source record about a handler. (SequenceNumber)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'SEQ_NUMBER'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Date that the form (indicated by the associated Source) was received from the handler by the appropriate authority. (ReceiveDate)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'RECEIVE_DATE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the Handler (HandlerName)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'HANDLER_NAME'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Flag indicating that the handler has been identified through a source other than Notification and is suspected of conducting RCRA-regulated activities without proper authority. (NonNotifierIndicator)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'NON_NOTIFIER_IND'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Reason why the handler is not accessible for normal processing (Bankrupt Indicator). (Accessibility)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'ACCESSIBILITY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Report cycle. (ReportCycle)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'REPORT_CYCLE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Region (Region)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'REGION'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'State (State)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'STATE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Extract flag (ExtractFlag)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'EXTRACT_FLAG'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Active site (ActiveSite)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'ACTIVE_SITE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The Federal Information Processing Standard (FIPS) code for the county in which the facility is located (Ref: FIPS Publication, 6-3, "Counties and County Equivalents of the States of the United States"). (CountyCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'COUNTY_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Descriptive text describing the County Name(Data publishing only). (CountyName)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'COUNTY_NAME'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Number portion of the location street address of the handler. (LocationAddressNumberText)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'LOCATION_STREET_NUMBER'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Street address of the handler. (LocationAddressText)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'LOCATION_STREET1'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Supplemental address of the handler. (SupplementalLocationText)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'LOCATION_STREET2'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'City in which the handler is located. (LocalityName)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'LOCATION_CITY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'State in which the handler is located. (StateUSPSCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'LOCATION_STATE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Country in which the handler is located. (CountryName)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'LOCATION_COUNTRY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'ZIP code in which the handler is located. (LocationZIPCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'LOCATION_ZIP'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Number portion of the mailing address of the handler. (MailingAddressNumberText)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'MAIL_STREET_NUMBER'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Street address of the handler mailing address. (MailingAddressText)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'MAIL_STREET1'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Supplemental address of the handler mailing address. (SupplementalLocationText)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'MAIL_STREET2'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'City of the handler mailing address. (MailingAddressCityName)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'MAIL_CITY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'State of the handler mailing address. (MailingAddressStateUSPSCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'MAIL_STATE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Country of the handler mailing address. (MailingAddressCountryName)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'MAIL_COUNTRY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'ZIP code of the handler mailing address. (MailingAddressZIPCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'MAIL_ZIP'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Number portion of the mailing address of the handler contact. (MailingAddressNumberText)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'CONTACT_STREET_NUMBER'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Street address of the handler contact mailing address. (MailingAddressText)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'CONTACT_STREET1'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Supplemental address of the handler contact mailing address. (SupplementalLocationText)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'CONTACT_STREET2'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'City of the handler contact mailing address. (MailingAddressCityName)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'CONTACT_CITY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'State of the handler contact mailing address. (MailingAddressStateUSPSCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'CONTACT_STATE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Country of the handler contact mailing address. (MailingAddressCountryName)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'CONTACT_COUNTRY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'ZIP code of the handler contact mailing address. (MailingAddressZIPCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'CONTACT_ZIP'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Handler contact name (first + last). (ContactNameCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'CONTACT_NAME'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Handler contact phone number. (ContactPhoneCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'CONTACT_PHONE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Handler contact fax number. (ContactFaxCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'CONTACT_FAX'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Handler contact email address. (ContactEmailCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'CONTACT_EMAIL'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Handler contact title. (ContactTitleCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'CONTACT_TITLE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Handler owner name. (OwnerNameCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'OWNER_NAME'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Handler owner type. (OwnerTypeCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'OWNER_TYPE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Handler owner sequence number. (OwnerSeqCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'OWNER_SEQ_NUM'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Handler operator name. (OperatorNameCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'OPER_NAME'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Handler operator type. (OperatorTypeCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'OPER_TYPE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Handler operator sequence number. (OperatorSeqCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'OPER_SEQ_NUM'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'NAIC 1 code (NAIC1Code)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'NAIC1_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'NAIC 2 code (NAIC2Code)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'NAIC2_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'NAIC 3 code (NAIC3Code)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'NAIC3_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'NAIC 4 code (NAIC4Code)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'NAIC4_CODE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'In handler universe (InHandlerUniverseCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'IN_HANDLER_UNIVERSE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'In a universe (InAUniverseCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'IN_A_UNIVERSE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Federal code indicating that the handler is engaged in the generation of hazardous waste. (FederalWasteGeneratorOwner)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'FED_WASTE_GENERATOR_OWNER'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Federal code indicating that the handler is engaged in the generation of hazardous waste. (FederalWasteGeneratorCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'FED_WASTE_GENERATOR'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'State code indicating that the handler is engaged in the generation of hazardous waste. (StateWasteGeneratorOwner)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'STATE_WASTE_GENERATOR_OWNER'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'State code indicating that the handler is engaged in the generation of hazardous waste. (StateWasteGeneratorCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'STATE_WASTE_GENERATOR'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Gen status (GENSTATUS)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'GEN_STATUS'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Univ waste (UNIVWASTE)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'UNIV_WASTE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Code indicating current ownership status of the land on which the facility is located. (LandTypeCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'LAND_TYPE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Owner of the state district code.  Usually 2-digit postal code (i.e. KS). (StateDistrictOwnerName)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'STATE_DISTRICT_OWNER'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Code indicating the state-designated legislative district(s) in which the site is located. (StateDistrictCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'STATE_DISTRICT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Code indicating that the handler is engaged in short-term hazardous waste generation activities. (ShortTermGeneratorIndicator)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'SHORT_TERM_GEN_IND'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Code indicating that the handler is engaged in importing hazardous waste into the United States. (ImporterActivityCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'IMPORTER_ACTIVITY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Code indicating that the handler is engaged in generating mixed waste (waste that is both hazardous and radioactive). (MixedWasteGeneratorCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'MIXED_WASTE_GENERATOR'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Code indicating that the handler is engaged in the transportation of hazardous waste. (TransporterActivityCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'TRANSPORTER_ACTIVITY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Code indicating that the handler is a Hazardous Waste Transfer Facility (not to be confused with a used oil transfer facility). (TransferFacilityIndicator)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'TRANSFER_FACILITY_IND'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Code for recycling hazardous waste. (RecyclerActivityCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'RECYCLER_ACTIVITY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Code indicating that the handler qualifies for the Small Quantity Onsite Burner Exemption. (OnsiteBurnerExemptionCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'ONSITE_BURNER_EXEMPTION'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Code indicating that the handler qualifies for the Smelting, Melting, and Refining Furnace Exemption. (FurnaceExemptionCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'FURNACE_EXEMPTION'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Code indicating that the handler generates and or treats, stores, or disposes of hazardous waste and has an injection well located at the installation. (UndergroundInjectionActivityCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'UNDERGROUND_INJECTION_ACTIVITY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Code indicating that the handler treats, disposes of, or recycles hazardous waste on site. (UniversalWasteDestinationFacilityIndicator)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'UNIVERSAL_WASTE_DEST_FACILITY'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Off site waste receipt (OffSiteWasteReceiptCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'OFFSITE_WASTE_RECEIPT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Used oil code (UsedOilCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'USED_OIL'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Federal universal waste (FederalUniversalWasteCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'FEDERAL_UNIVERSAL_WASTE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'As federal regulated TSDF (AsFederalRegulatedTSDFCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'AS_FEDERAL_REGULATED_TSDF'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'As converter TSDF (AsConverterTSDFCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'AS_CONVERTED_TSDF'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'As state regulated TSDF (AsStateRegulatedTSDFCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'AS_STATE_REGULATED_TSDF'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Federal indicator (FederalIndicatorCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'FEDERAL_IND'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'HSM code (HSMCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'HSM'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Subpart K code (SubpartKCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'SUBPART_K'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Commercial TSD code (CommercialTSDCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'COMMERCIAL_TSD'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'TSD type (TSDCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'TSD'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'GPRA permit (GPRAPermitCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'GPRA_PERMIT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'GPRA renewal code (GPRARenewalCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'GPRA_RENEWAL'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Permit renewal WRKLD (PermitRenewalWRKLDCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'PERMIT_RENEWAL_WRKLD'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Perm WRKLD (PermWRKLDCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'PERM_WRKLD'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Perm PROG (PermPROGCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'PERM_PROG'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'PC WRKLD (PCWRKLDCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'PC_WRKLD'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Clos WRKLD (ClosWRKLDCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'CLOS_WRKLD'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'GPRACA (GPRACACode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'GPRACA'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'CAWRKLD (CAWRKLDCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'CA_WRKLD'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Subj CA (SubjCACode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'SUBJ_CA'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Subj CA non TSD (SubjCANonTSDCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'SUBJ_CA_NON_TSD'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Subj CA TSD 3004 (SubjCATSD3004Code)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'SUBJ_CA_TSD_3004'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Subj CA discretion (SubjCADiscretionCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'SUBJ_CA_DISCRETION'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'NCAPS (NCAPSCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'NCAPS'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'EC indicator (ECIndicatorCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'EC_IND'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'IC indicator (ICIndicatorCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'IC_IND'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'CA 725 indicator (CA725IndicatorCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'CA_725_IND'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'CA 750 indicator (CA750IndicatorCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'CA_750_IND'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Operating TSDF (OperatingTSDFCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'OPERATING_TSDF'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Full enforcement (FullEnforcementCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'FULL_ENFORCEMENT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'SNC (SNCCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'SNC'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'BOY SNC (BOYSNCCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'BOY_SNC'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'BOY state unaddressed SNC (BOYStateUnaddressedSNCCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'BOY_STATE_UNADDRESSED_SNC'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'State unaddressed (StateUnaddressedCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'STATE_UNADDRESSED'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'State addressed (StateAddressedCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'STATE_ADDRESSED'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'BOY state addressed (BOYStateAddressedCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'BOY_STATE_ADDRESSED'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'State SNC with comp sched (StateSNCWithCompSchedCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'STATE_SNC_WITH_COMP_SCHED'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'BOY state SNC with comp sched (BOYStateSNCWithCompSchedCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'BOY_STATE_SNC_WITH_COMP_SCHED'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'EPA unaddressed (EPAUnaddressedCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'EPA_UNADDRESSED'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'BOY EPA unaddressed (BOYEPAUnaddressedCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'BOY_EPA_UNADDRESSED'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'EPA addressed (EPAAddressedCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'EPA_ADDRESSED'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'BOY EPA addressed (BOYEPAAddressedCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'BOY_EPA_ADDRESSED'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'EPA SNC with comp sched (EPASNCWithcompSchedCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'EPA_SNC_WITH_COMP_SCHED'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'BOY EPA SNC with comp sched (BOYEPASNCWithcompSchedCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'BOY_EPA_SNC_WITH_COMP_SCHED'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'FA required (FARequiredCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'FA_REQUIRED'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'HHandler last change date (HHandlerLastChangeDate)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'HHANDLER_LAST_CHANGE_DATE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Notes (PublicNotesCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'PUBLIC_NOTES'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Notes (NotesCode)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'NOTES'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates that the Handler is participating in Import Trading activity. Possible values are: Y/N (RecognizedTraderImporterIndicator)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'RECOGNIZED_TRADER_IMPORTER_IND'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates that the Handler is participating in Export Trading activity. Possible values are: Y/N (RecognizedTraderExporterIndicator)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'RECOGNIZED_TRADER_EXPORTER_IND'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates that the Handler is participating in Slab Import activity. Possible values are: Y/N (SlabImporterIndicator)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'SLAB_IMPORTER_IND'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates that the Handler is participating in Slab Export activity. Possible values are: Y/N (SlabExporterIndicator)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'SLAB_EXPORTER_IND'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Recycle non storage (RecyclerNonStorageIndicator)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'RECYCLER_NON_STORAGE_IND'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Manifest broker (ManifestBrokerIndicator)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV', @level2type=N'COLUMN',@level2name=N'MANIFEST_BROKER_IND'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Universal waste report submission. (_PK)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV_SUBM', @level2type=N'COLUMN',@level2name=N'RU_REPORT_UNIV_SUBM_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Universal waste report submission. (_FK)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_REPORT_UNIV_SUBM', @level2type=N'COLUMN',@level2name=N'RU_SUBM_ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent: Universal waste report submission' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RCRA_RU_SUBM', @level2type=N'COLUMN',@level2name=N'RU_SUBM_ID'
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_EM_EMANIFEST_MAN_TR_NUM_VER]    Script Date: 5/30/2019 6:02:18 PM ******/
CREATE NONCLUSTERED INDEX [IX_EM_EMANIFEST_MAN_TR_NUM_VER] ON [dbo].[RCRA_EM_EMANIFEST]
    (
     [MAN_TRACKING_NUM] ASC, [CORR_VERSION_NUM] ASC
        ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_EM_EMNFST_CMMNT_EM_EMNFS_ID]    Script Date: 5/30/2019 6:02:18 PM ******/
CREATE NONCLUSTERED INDEX [IX_EM_EMNFST_CMMNT_EM_EMNFS_ID] ON [dbo].[RCRA_EM_EMANIFEST_COMMENT]
    (
     [EM_EMANIFEST_ID] ASC
        ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_EM_HANDLER_EM_EMANIFEST_ID]    Script Date: 5/30/2019 6:02:18 PM ******/
CREATE NONCLUSTERED INDEX [IX_EM_HANDLER_EM_EMANIFEST_ID_TYPE_ORDER] ON [dbo].[RCRA_EM_HANDLER]
    (
     [EM_EMANIFEST_ID] ASC, [MANIFEST_HANDLER_TYPE] ASC, [ORDER_NUM] ASC
        ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_EM_TR_NM_EMNFST_EM_EMNFS_ID]    Script Date: 5/30/2019 6:02:18 PM ******/
CREATE NONCLUSTERED INDEX [IX_EM_TR_NM_EMNFST_EM_EMNFS_ID] ON [dbo].[RCRA_EM_TR_NUM_ORIG]
    (
     [EM_EMANIFEST_ID] ASC
        ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_EM_TR_NM_EMNFST_MAN_TR_NUM]    Script Date: 5/30/2019 6:02:18 PM ******/
CREATE NONCLUSTERED INDEX [IX_EM_TR_NM_EMNFST_MAN_TR_NUM] ON [dbo].[RCRA_EM_TR_NUM_ORIG]
    (
     [MANIFEST_TRACKING_NUM] ASC
        ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_EM_TR_NUM_RJ_EM_EMNIFEST_ID]    Script Date: 5/30/2019 6:02:18 PM ******/
CREATE NONCLUSTERED INDEX [IX_EM_TR_NUM_RJ_EM_EMNIFEST_ID] ON [dbo].[RCRA_EM_TR_NUM_REJ]
    (
     [EM_EMANIFEST_ID] ASC
        ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_EM_TR_NUM_RJ_MAN_TR_NUM]    Script Date: 5/30/2019 6:02:18 PM ******/
CREATE NONCLUSTERED INDEX [IX_EM_TR_NUM_RJ_MAN_TR_NUM] ON [dbo].[RCRA_EM_TR_NUM_REJ]
    (
     [MANIFEST_TRACKING_NUM] ASC
        ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_EM_TR_NM_RSDE_NW_EM_EMNF_ID]    Script Date: 5/30/2019 6:02:18 PM ******/
CREATE NONCLUSTERED INDEX [IX_EM_TR_NM_RSDE_NW_EM_EMNF_ID] ON [dbo].[RCRA_EM_TR_NUM_RESIDUE_NEW]
    (
     [EM_EMANIFEST_ID] ASC
        ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_EM_TR_NM_RSDE_NW_MAN_TR_ID]    Script Date: 5/30/2019 6:02:18 PM ******/
CREATE NONCLUSTERED INDEX [IX_EM_TR_NM_RSDE_NW_MAN_TR_ID] ON [dbo].[RCRA_EM_TR_NUM_RESIDUE_NEW]
    (
     [MANIFEST_TRACKING_NUM] ASC
        ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_EM_TR_NUM_WASTE_EM_WASTE_ID]    Script Date: 5/30/2019 6:02:18 PM ******/
CREATE NONCLUSTERED INDEX [IX_EM_TR_NUM_WASTE_EM_WASTE_ID] ON [dbo].[RCRA_EM_TR_NUM_WASTE]
    (
     [EM_WASTE_ID] ASC
        ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_EM_TR_NUM_WASTE_MAN_TR_IDtr]    Script Date: 5/30/2019 6:02:18 PM ******/
CREATE NONCLUSTERED INDEX [IX_EM_TR_NUM_WASTE_MAN_TR_ID] ON [dbo].[RCRA_EM_TR_NUM_WASTE]
    (
     [MANIFEST_TRACKING_NUM] ASC
        ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_EM_WASTE_EM_EMANIFEST_ID_LINE_NUM]    Script Date: 5/30/2019 6:02:18 PM ******/
CREATE NONCLUSTERED INDEX [IX_EM_WASTE_EM_EMANIFEST_ID_LINE_NUM] ON [dbo].[RCRA_EM_WASTE]
    (
     [EM_EMANIFEST_ID] ASC, [LINE_NUM] ASC
        ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_EM_WASTE_CD_FED_EM_WASTE_ID_CODE]    Script Date: 5/30/2019 6:02:18 PM ******/
CREATE NONCLUSTERED INDEX [IX_EM_WASTE_CD_FED_EM_WASTE_ID_CODE] ON [dbo].[RCRA_EM_WASTE_CD_FED]
    (
     [EM_WASTE_ID] ASC, [WASTE_CODE] ASC
        ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_EM_WASTE_CD_GEN_EM_WASTE_ID_CODE]    Script Date: 5/30/2019 6:02:18 PM ******/
CREATE NONCLUSTERED INDEX [IX_EM_WASTE_CD_GEN_EM_WASTE_ID_CODE] ON [dbo].[RCRA_EM_WASTE_CD_GEN]
    (
     [EM_WASTE_ID] ASC, [WASTE_CODE] ASC
        ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_EM_WASTE_CD_TRNS_EM_WSTE_ID_CODE]    Script Date: 5/30/2019 6:02:18 PM ******/
CREATE NONCLUSTERED INDEX [IX_EM_WASTE_CD_TRNS_EM_WSTE_ID_CODE] ON [dbo].[RCRA_EM_WASTE_CD_TRANS]
    (
     [EM_WASTE_ID] ASC, [WASTE_CODE] ASC
        ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_EM_WASTE_CD_TSDF_EM_WSTE_ID_CODE]    Script Date: 5/30/2019 6:02:18 PM ******/
CREATE NONCLUSTERED INDEX [IX_EM_WASTE_CD_TSDF_EM_WSTE_ID] ON [dbo].[RCRA_EM_WASTE_CD_TSDF]
    (
     [EM_WASTE_ID] ASC, [WASTE_CODE] ASC
        ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_EM_WASTE_COMMENT_EM_WSTE_ID]    Script Date: 5/30/2019 6:02:18 PM ******/
CREATE NONCLUSTERED INDEX [IX_EM_WASTE_COMMENT_EM_WSTE_ID] ON [dbo].[RCRA_EM_WASTE_COMMENT]
    (
     [EM_WASTE_ID] ASC
        ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_EM_WASTE_PCB_EM_WASTE_ID]    Script Date: 5/30/2019 6:02:18 PM ******/
CREATE NONCLUSTERED INDEX [IX_EM_WASTE_PCB_EM_WASTE_ID] ON [dbo].[RCRA_EM_WASTE_PCB]
    (
     [EM_WASTE_ID] ASC
        ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_RU_REPORT_UNV_HANDLER_ID]    Script Date: 5/30/2019 6:02:18 PM ******/
CREATE NONCLUSTERED INDEX [IX_RU_REPORT_UNV_HANDLER_ID] ON [dbo].[RCRA_RU_REPORT_UNIV]
    (
     [HANDLER_ID] ASC
        ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO


