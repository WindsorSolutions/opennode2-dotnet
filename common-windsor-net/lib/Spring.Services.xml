<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Spring.Services</name>
    </assembly>
    <members>
        <member name="T:Spring.EnterpriseServices.EnterpriseServicesExporter">
            <summary>
            Exports components as ServicedComponents using the specified <see cref="T:Spring.EnterpriseServices.ServicedComponentExporter"/>s.
            </summary>
            <remarks>
            <para>
            This class will create ServicedComponent wrapper for each of the
            specified components and register them with the Component Services.
            </para>
            <para>
            First you need to generate and register your components. This is done by writing a simple e.g. console application using a configuration as shown below:
            <code>
            &lt;!-- actual objects 'calculatorService' and 'simpleCalculatorService' are defined elsewhere --&gt;
            
            &lt;!-- Define the component for exporting 'calculatorService' --&gt;
            &lt;object id="calculatorComponent" type="Spring.EnterpriseServices.ServicedComponentExporter, 
            Spring.Services"&gt;
              &lt;property name="TargetName" value="calculatorService" /&gt;
              &lt;property name="TypeAttributes"&gt;
                &lt;list&gt;
                  &lt;object type="System.EnterpriseServices.TransactionAttribute, System.EnterpriseServices" /&gt;
                &lt;/list&gt;
              &lt;/property&gt;
              &lt;property name="MemberAttributes"&gt;
                &lt;dictionary&gt;
                  &lt;entry key="*"&gt;
                    &lt;list&gt;
                      &lt;object type="System.EnterpriseServices.AutoCompleteAttribute, System.EnterpriseServices" /&gt;
                    &lt;/list&gt;
                  &lt;/entry&gt;
                &lt;/dictionary&gt;
              &lt;/property&gt;
            &lt;/object&gt;
            
            &lt;!-- Define the component for exporting 'simpleCalculatorService' --&gt;
            &lt;object id="simpleCalculatorComponent" type="Spring.EnterpriseServices.ServicedComponentExporter, 
            Spring.Services"&gt;
              &lt;property name="TargetName" value="simpleCalculatorService" /&gt;
            &lt;/object&gt;
            
            &lt;!-- Export components into assembly and autoregister with COM+ --&gt;
            &lt;object type="Spring.EnterpriseServices.EnterpriseServicesExporter, Spring.Services"&gt;    
              &lt;!-- assembly name to generated - will generate 'Spring.Calculator.EnterpriseServices.dll'  --&gt;
              &lt;property name="Assembly" value="Spring.Calculator.EnterpriseServices" /&gt;
              
              &lt;!-- 
              use Spring's ContextRegistry for managing services. If true, requires a file  
              'Spring.Calculator.EnterpriseServices.dll.spring-context.xml'  containing a 
              &lt;spring/context /&gt; section placed next to the generated assembly.
              --&gt;
              &lt;property name="UseSpring" value="true" /&gt;
              
              &lt;property name="ApplicationName" value="Spring Calculator Application" /&gt;
              &lt;property name="ActivationMode" value="Library" /&gt;
              &lt;property name="Description" value="Spring Calculator application" /&gt;
              &lt;property name="Components"&gt;
                &lt;list&gt;
                  &lt;ref object="calculatorComponent" /&gt;
                  &lt;ref object="simpleCalculatorComponent" /&gt;
                &lt;/list&gt;
              &lt;/property&gt;
            &lt;/object&gt;
            </code>
            </para>
            <para>
            To load your objectdefinitions at runtime of the components, place a configuration file next to the assembly 
            generated by the exporter, using the filename of the exported assembly, postfixing it with '.spring-context.config'. 
            Taking the example above, the file must be named 'Spring.Calculator.EnterpriseServices.dll.spring-context.xml' and look like:
            <code>
            &lt;--  --&gt;
            &lt;spring&gt;
              &lt;context&gt;
                &lt;resource uri="Config/services.xml" /&gt;
              &lt;/context&gt;
            &lt;/spring&gt;
            </code>
            This file should point to the service object definitions you exported using <see cref="T:Spring.EnterpriseServices.EnterpriseServicesExporter"/> with a
            configuration as shown above.
            </para>
            </remarks>
            <seealso cref="T:Spring.EnterpriseServices.ServicedComponentExporter"/>
            <author>Aleksandar Seovic</author>
            <author>Erich Eichinger</author>
        </member>
        <member name="M:Spring.EnterpriseServices.EnterpriseServicesExporter.#ctor">
            <summary>
            Creates new enterprise services exporter.
            </summary>
        </member>
        <member name="M:Spring.EnterpriseServices.EnterpriseServicesExporter.AfterPropertiesSet">
            <summary>
            Called by Spring container after object is configured in order to initialize it.
            </summary>
        </member>
        <member name="M:Spring.EnterpriseServices.EnterpriseServicesExporter.Export">
            <summary>
            Creates ServicedComponent wrappers for the specified components and registers
            them with COM+ Component Services.
            </summary>
        </member>
        <member name="M:Spring.EnterpriseServices.EnterpriseServicesExporter.GenerateComponentAssembly(System.IO.FileInfo)">
            <summary>
            Generates all configured <see cref="P:Spring.EnterpriseServices.EnterpriseServicesExporter.Components"/> to the given assembly.
            </summary>
        </member>
        <member name="M:Spring.EnterpriseServices.EnterpriseServicesExporter.GenerateComponentTypes(System.Reflection.Emit.ModuleBuilder,Spring.Objects.Factory.IObjectFactory,System.Collections.IList,System.Boolean)">
            <summary>
            Generates service types from the <paramref name="components"/> list of <see cref="T:Spring.EnterpriseServices.ServicedComponentExporter"/> instances 
            into the given assembly.
            </summary>
            <param name="module">the module to export types to</param>
            <param name="objectFactory">the object factory to resolve target types</param>
            <param name="components">the list of <see cref="T:Spring.EnterpriseServices.ServicedComponentExporter"/> instances.</param>
            <param name="springManaged">whether to generate context lookups, <see cref="M:Spring.EnterpriseServices.ServicedComponentExporter.CreateWrapperType(System.Reflection.Emit.ModuleBuilder,System.Type,System.Type,System.Boolean)"/></param>
        </member>
        <member name="M:Spring.EnterpriseServices.EnterpriseServicesExporter.RegisterServicedComponents(System.IO.FileInfo)">
            <summary>
            
            </summary>
            <param name="assemblyFile"></param>
        </member>
        <member name="M:Spring.EnterpriseServices.EnterpriseServicesExporter.UnregisterServicedComponents(System.IO.FileInfo)">
            <summary>
            
            </summary>
            <param name="assemblyFile"></param>
        </member>
        <member name="M:Spring.EnterpriseServices.EnterpriseServicesExporter.GetKeyPair">
            <summary>
            Reads key pair from embedded resource.
            </summary>
            <returns>Key pair as a byte array.</returns>
        </member>
        <member name="M:Spring.EnterpriseServices.EnterpriseServicesExporter.ApplyAssemblyAttributes(System.Reflection.Emit.AssemblyBuilder)">
            <summary>
            Applies custom attributes to generated assembly.
            </summary>
            <param name="assembly">Dynamic assembly to apply attributes to.</param>
        </member>
        <member name="M:Spring.EnterpriseServices.EnterpriseServicesExporter.RefreshRoles">
            <summary>
            Replaces roles expressed using string with appropriate SecurityRoleAttribute instance.
            </summary>
        </member>
        <member name="M:Spring.EnterpriseServices.EnterpriseServicesExporter.ParseRole(System.String)">
            <summary>
            Parses string representation of SecurityRoleAttribute.
            </summary>
            <param name="roleString">Role definition string.</param>
            <returns>Configured SecurityRoleAttribute instance.</returns>
        </member>
        <member name="M:Spring.EnterpriseServices.EnterpriseServicesExporter.CreateSpringServicedComponentType(System.Reflection.Emit.ModuleBuilder,System.Type)">
            <summary>
            Creates the SpringServicedComponent base class to derive all <see cref="T:System.EnterpriseServices.ServicedComponent"/>s from.
            </summary>
            <example>
            <code>
            internal class SpringServicedComponent: BaseType
            {
               protected delegate object GetObjectHandler(ServicedComponent servicedComponent, string targetName);
            
               protected static readonly GetObjectHandler getObjectRef;
                    
               static SpringServicedComponent()
               {
                 // first look for a local copy
                 System.Reflection.Assembly servicesAssembly;
                 string servicesAssemblyPath = Path.Combine(
                                            new FileInfo(System.Reflection.Assembly.GetExecutingAssembly().Location).DirectoryName
                                            , "Spring.Services.dll" );
                 servicesAssembly = System.Reflection.Assembly.LoadFrom(servicesAssemblyPath);
                 if (servicesAssembly == null)
                 {
                   // then let the normal loader handle the typeload
                   servicesAssembly = System.Reflection.Assembly.Load("Spring.Services, culture=neutral, version=x.x.x.x, publicKey=xxxxxxxx");
                 }
            
                 Type componentHelperType = servicesAssembly.GetType("Spring.EnterpriseServices.ServicedComponentHelper");
                 getObjectRef = (GetObjectHandler) Delegate.CreateDelegate(typeof(GetObjectHandler)
                                                                                    , componentHelperType.GetMethod("GetObject"));
               }        
            }
            </code>
            </example>
        </member>
        <member name="P:Spring.EnterpriseServices.EnterpriseServicesExporter.Components">
            <summary>
            Gets or sets list of components to export.
            </summary>
        </member>
        <member name="P:Spring.EnterpriseServices.EnterpriseServicesExporter.ApplicationName">
            <summary>
            Gets or sets COM+ application name.
            </summary>
        </member>
        <member name="P:Spring.EnterpriseServices.EnterpriseServicesExporter.ApplicationId">
            <summary>
            Gets or sets application identifier (GUID). Defaults to generated GUID if not specified.
            </summary>
        </member>
        <member name="P:Spring.EnterpriseServices.EnterpriseServicesExporter.ActivationMode">
            <summary>
            Gets or sets application activation mode, which can be either <b>Server</b> or <b>Library</b> (default).
            </summary>
        </member>
        <member name="P:Spring.EnterpriseServices.EnterpriseServicesExporter.Description">
            <summary>
            Gets or sets application description.
            </summary>
        </member>
        <member name="P:Spring.EnterpriseServices.EnterpriseServicesExporter.AccessControl">
            <summary>
            Gets or sets access control attribute.
            </summary>
        </member>
        <member name="P:Spring.EnterpriseServices.EnterpriseServicesExporter.ApplicationQueuing">
            <summary>
            Gets or sets application queuing attribute.
            </summary>
        </member>
        <member name="P:Spring.EnterpriseServices.EnterpriseServicesExporter.Roles">
            <summary>
            Gets or sets application roles.
            </summary>
        </member>
        <member name="P:Spring.EnterpriseServices.EnterpriseServicesExporter.Assembly">
            <summary>
            Gets or sets name of the generated assembly that will contain serviced components.
            </summary>
        </member>
        <member name="P:Spring.EnterpriseServices.EnterpriseServicesExporter.UseSpring">
            <summary>
             Use Spring context to configure the serviced components within COM.
            </summary>
        </member>
        <member name="P:Spring.EnterpriseServices.EnterpriseServicesExporter.ObjectFactory">
            <summary>
            Sets object factory instance.
            </summary>
        </member>
        <member name="T:Spring.EnterpriseServices.ExeConfigurationSystem">
            <summary>
            SUBJECT TO CHANGE -FOR INTERNAL USE ONLY!<br/>
            Holds configuration information from a given configuration file, obtained by <see cref="M:System.Configuration.ConfigurationManager.OpenExeConfiguration(System.String)"/>.
            You may use <see cref="M:Spring.Util.ConfigurationUtils.SetConfigurationSystem(System.Configuration.Internal.IInternalConfigSystem,System.Boolean)"/> to replace the active configuration system.
            </summary>
            <seealso cref="M:System.Configuration.ConfigurationManager.OpenExeConfiguration(System.String)"/>
            <seealso cref="M:Spring.Util.ConfigurationUtils.SetConfigurationSystem(System.Configuration.Internal.IInternalConfigSystem,System.Boolean)"/>
        </member>
        <member name="M:Spring.EnterpriseServices.ExeConfigurationSystem.#ctor(System.String)">
            <summary>
            initializes this instance with a path to be passed into <see cref="M:System.Configuration.ConfigurationManager.OpenExeConfiguration(System.String)"/>
            </summary>
            <param name="configPath"></param>
        </member>
        <member name="M:Spring.EnterpriseServices.ExeConfigurationSystem.RefreshConfig(System.String)">
            <summary>
            Purges cached configuration
            </summary>
        </member>
        <member name="M:Spring.EnterpriseServices.ExeConfigurationSystem.SetInnerConfigurationSystem(System.Configuration.Internal.IInternalConfigSystem)">
            <summary>
            Set the nested configuration system to delegate calls in case we can't resolve a config section ourselves
            </summary>
        </member>
        <member name="M:Spring.EnterpriseServices.ExeConfigurationSystem.GetSection(System.String)">
            <summary>
            Get the specified section
            </summary>
            <param name="sectionName"></param>
            <returns></returns>
        </member>
        <member name="P:Spring.EnterpriseServices.ExeConfigurationSystem.SupportsUserConfig">
            <summary>
             Only true if the underlying config system supports this.
            </summary>
        </member>
        <member name="T:Spring.EnterpriseServices.ServicedComponentContextHandler">
            <summary>
            Handles loading of &lt;spring/context&gt; configuration sections for
            in-process <see cref="T:System.EnterpriseServices.ServicedComponent"/>s generated by 
            <see cref="T:Spring.EnterpriseServices.EnterpriseServicesExporter"/>.
            </summary>
            <author>Erich Eichinger</author>
        </member>
        <member name="P:Spring.EnterpriseServices.ServicedComponentContextHandler.AutoRegisterWithContextRegistry">
            <summary>
            Prevent auto-registering the context with the global ContextRegistry
            </summary>
        </member>
        <member name="T:Spring.EnterpriseServices.ServicedComponentExporter">
            <summary>
            Encapsulates information necessary to create ServicedComponent
            wrapper around target class.
            </summary>
            <remarks>
            <para>
            Instances of this class should be used as elements in the Components
            list of the <see cref="T:Spring.EnterpriseServices.EnterpriseServicesExporter"/> class, which will
            register them with COM+ Services. For a full description on how to export 
            and use services with COM+, see the <see cref="T:Spring.EnterpriseServices.EnterpriseServicesExporter"/> reference.
            </para>
            </remarks>
            <seealso cref="T:Spring.EnterpriseServices.EnterpriseServicesExporter"/>
            <author>Aleksandar Seovic</author>
            <author>Erich Eichinger</author>
        </member>
        <member name="M:Spring.EnterpriseServices.ServicedComponentExporter.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.EnterpriseServices.ServicedComponentExporter"/> class.
            </summary>
        </member>
        <member name="M:Spring.EnterpriseServices.ServicedComponentExporter.AfterPropertiesSet">
            <summary>
            Validate configuration.
            </summary>
        </member>
        <member name="M:Spring.EnterpriseServices.ServicedComponentExporter.CreateWrapperType(System.Reflection.Emit.ModuleBuilder,System.Type,System.Type,System.Boolean)">
            <summary>
            Creates ServicedComponent wrapper around target class.
            </summary>
            <param name="module">Dynamic module builder to use</param>
            <param name="baseType"></param>
            <param name="targetType">Type of the exported object.</param>
            <param name="springManagedLifecycle">whether to generate lookups in ContextRegistry for each service method call or use a 'new'ed target instance</param>
            <remarks>
            if <paramref name="springManagedLifecycle"/> is <c>true</c>, each ServicedComponent method call will look similar to
            <code>
            class MyServicedComponent {
              void MethodX() {
                ContextRegistry.GetContext().GetObject("TargetName").MethodX();
              }
            }
            </code>
            <br/>
            if <paramref name="springManagedLifecycle"/> is <c>false</c>, the instance will be simply created at component activation using 'new':
            <code>
            class MyServicedComponent {
              TargetType target = new TargetType();
            
              void MethodX() {
                target.MethodX();
              }
            }
            </code>
            <br/>
            The differences are of course that in the former case, the target lifecycle is entirely managed by Spring, thus avoiding
            issues with ServiceComponent activation/deactivation as well as removing the need for default constructors. 
            </remarks>
        </member>
        <member name="P:Spring.EnterpriseServices.ServicedComponentExporter.TargetName">
            <summary>
            Gets or sets name of the target object that should be exposed as a serviced component.
            </summary>
        </member>
        <member name="P:Spring.EnterpriseServices.ServicedComponentExporter.Interfaces">
            <summary>
            Gets or sets the list of interfaces whose methods should be exported.
            </summary>
            <remarks>
            The default value of this property is all the interfaces
            implemented or inherited by the target type.
            </remarks>
            <value>The interfaces to export.</value>
        </member>
        <member name="P:Spring.EnterpriseServices.ServicedComponentExporter.TypeAttributes">
            <summary>
            Gets or sets a list of custom attributes
            that should be applied to a proxy class.
            </summary>
        </member>
        <member name="P:Spring.EnterpriseServices.ServicedComponentExporter.MemberAttributes">
            <summary>
            Gets or sets a dictionary of custom attributes
            that should be applied to proxy members.
            </summary>
            <remarks>
            Map key is an expression that members can be matched against. Value is a list
            of attributes that should be applied to each member that matches expression.
            </remarks>
        </member>
        <member name="P:Spring.EnterpriseServices.ServicedComponentExporter.ObjectName">
            <summary>
            Set the name of the object in the object factory
            that created this object.
            </summary>
        </member>
        <member name="M:Spring.EnterpriseServices.ServicedComponentExporter.ServicedComponentTargetProxyMethodBuilder.CallAssertUnderstands(System.Reflection.Emit.ILGenerator,System.Reflection.MethodInfo,System.String)">
            <summary>
            Suppress output to avoid Spring.Core dependency
            </summary>
        </member>
        <member name="M:Spring.EnterpriseServices.ServicedComponentExporter.ServicedComponentProxyTypeBuilder.ImplementConstructors(System.Reflection.Emit.TypeBuilder)">
            <summary>
            Implements default constructor for the proxy class.
            </summary>
        </member>
        <member name="M:Spring.EnterpriseServices.ServicedComponentExporter.SpringManagedServicedComponentProxyTypeBuilder.PushTarget(System.Reflection.Emit.ILGenerator)">
            <summary>
            Generates the IL instructions that pushes 
            the target instance on which calls should be delegated to.
            </summary>
            <param name="il">The IL generator to use.</param>
        </member>
        <member name="T:Spring.EnterpriseServices.ServicedComponentFactory">
            <summary>
            Factory Object that instantiates and configures ServicedComponent.
            </summary>
            <remarks>
            <p>
            This factory object should be used to instantiate and configure
            serviced components created by <see cref="T:Spring.EnterpriseServices.ServicedComponentExporter"/>.
            </p>
            </remarks>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.EnterpriseServices.ServicedComponentFactory.#ctor">
            <summary>
            Creates new instance of serviced component factory.
            </summary>
        </member>
        <member name="M:Spring.EnterpriseServices.ServicedComponentFactory.GetObject">
            <summary>
            Returns configured instance of the serviced component.
            </summary>
            <returns>Configured instance of the serviced component.</returns>
        </member>
        <member name="M:Spring.EnterpriseServices.ServicedComponentFactory.AfterPropertiesSet">
            <summary>
            Initializes factory object.
            </summary>
        </member>
        <member name="M:Spring.EnterpriseServices.ServicedComponentFactory.CreateInstance">
            <summary>
            Creates new instance of serviced component.
            </summary>
            <returns>New instance of serviced component.</returns>
        </member>
        <member name="P:Spring.EnterpriseServices.ServicedComponentFactory.Name">
            <summary>
            Gets or sets component name, as registered with COM+ Services.
            </summary>
        </member>
        <member name="P:Spring.EnterpriseServices.ServicedComponentFactory.Server">
            <summary>
            Gets or sets name of the remote server that COM+ component is registered with.
            </summary>
        </member>
        <member name="P:Spring.EnterpriseServices.ServicedComponentFactory.ObjectType">
            <summary>
            Returns type of serviced component.
            </summary>
        </member>
        <member name="P:Spring.EnterpriseServices.ServicedComponentFactory.IsSingleton">
            <summary>
            Gets or sets whether serviced component should be treated as singleton. Default is <b>false</b>.
            </summary>
        </member>
        <member name="P:Spring.EnterpriseServices.ServicedComponentFactory.ProductTemplate">
            <summary>
            Gets or sets the template object definition
            that should be used to configure proxy instance.
            </summary>
        </member>
        <member name="T:Spring.EnterpriseServices.ServicedComponentHelper">
            <summary>
            This class supports <see cref="T:System.EnterpriseServices.ServicedComponent"/>s exported using <see cref="T:Spring.EnterpriseServices.EnterpriseServicesExporter"/>.
            and must never be used directly.
            </summary>
            <author>Erich Eichinger</author>
        </member>
        <member name="M:Spring.EnterpriseServices.ServicedComponentHelper.EnsureComponentContextRegistryInitialized(System.Type)">
            <summary>
             Reads in the 'xxx.spring-context.xml' configuration file associated with the specified <paramref name="componentType"/>.
             See <see cref="T:Spring.EnterpriseServices.EnterpriseServicesExporter"/> for an in-depth description on how to export and configure COM+ components.
            </summary>
        </member>
        <member name="M:Spring.EnterpriseServices.ServicedComponentHelper.GetObject(System.EnterpriseServices.ServicedComponent,System.String)">
            <summary>
             Called by a <see cref="T:System.EnterpriseServices.ServicedComponent"/> exported by <see cref="T:Spring.EnterpriseServices.EnterpriseServicesExporter"/> 
             to obtain a reference to the service it proxies.
            </summary>
        </member>
        <member name="T:Spring.Remoting.Config.RemotingNamespaceParser">
            <summary>
            Implementation of the custom configuration parser for remoting definitions.
            </summary>
            <author>Bruno Baia</author>
        </member>
        <member name="M:Spring.Remoting.Config.RemotingNamespaceParser.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Remoting.Config.RemotingNamespaceParser"/> class.
            </summary>
        </member>
        <member name="M:Spring.Remoting.Config.RemotingNamespaceParser.ParseElement(System.Xml.XmlElement,Spring.Objects.Factory.Xml.ParserContext)">
            <summary>
            Parse the specified element and register any resulting
            IObjectDefinitions with the IObjectDefinitionRegistry that is
            embedded in the supplied ParserContext.
            </summary>
            <param name="element">The element to be parsed into one or more IObjectDefinitions</param>
            <param name="parserContext">The object encapsulating the current state of the parsing
            process.</param>
            <returns>
            The primary IObjectDefinition (can be null as explained above)
            </returns>
            <remarks>
            Implementations should return the primary IObjectDefinition
            that results from the parse phase if they wish to used nested
            inside (for example) a <code>&lt;property&gt;</code> tag.
            <para>Implementations may return null if they will not
            be used in a nested scenario.
            </para>
            </remarks>
        </member>
        <member name="M:Spring.Remoting.Config.RemotingNamespaceParser.ParseRemotingDefinition(System.Xml.XmlElement,System.String,Spring.Objects.Factory.Xml.ParserContext)">
            <summary>
            Parses remoting definitions.
            </summary>
            <param name="element">Validator XML element.</param>
            <param name="name">The name of the object definition.</param>
            <param name="parserContext">The parser context.</param>
            <returns>A remoting object definition.</returns>
        </member>
        <member name="M:Spring.Remoting.Config.RemotingNamespaceParser.ParseRemotingConfigurer(System.Xml.XmlElement,System.String,Spring.Objects.Factory.Xml.ParserContext)">
            <summary>
            Parses the RemotingConfigurer definition.
            </summary>
            <param name="element">The element to parse.</param>
            <param name="name">The name of the object definition.</param>
            <param name="parserContext">The parser context.</param>
            <returns>RemotingConfigurer object definition.</returns>
        </member>
        <member name="M:Spring.Remoting.Config.RemotingNamespaceParser.ParseSaoFactoryObject(System.Xml.XmlElement,System.String,Spring.Objects.Factory.Xml.ParserContext)">
            <summary>
            Parses the SaoFactoryObject definition.
            </summary>
            <param name="element">The element to parse.</param>
            <param name="name">The name of the object definition.</param>
            <param name="parserContext">The parser context.</param>
            <returns>SaoFactoryObject object definition.</returns>
        </member>
        <member name="M:Spring.Remoting.Config.RemotingNamespaceParser.ParseCaoFactoryObject(System.Xml.XmlElement,System.String,Spring.Objects.Factory.Xml.ParserContext)">
            <summary>
            Parses the CaoFactoryObject definition.
            </summary>
            <param name="element">The element to parse.</param>
            <param name="name">The name of the object definition.</param>
            <param name="parserContext">The parser context.</param>
            <returns>CaoFactoryObject object definition.</returns>
        </member>
        <member name="M:Spring.Remoting.Config.RemotingNamespaceParser.ParseRemoteObjectFactory(System.Xml.XmlElement,System.String,Spring.Objects.Factory.Xml.ParserContext)">
            <summary>
            Parses the RemoteObjectFactory definition.
            </summary>
            <param name="element">The element to parse.</param>
            <param name="name">The name of the object definition.</param>
            <param name="parserContext">The parser context.</param>
            <returns>RemoteObjectFactory object definition.</returns>
        </member>
        <member name="M:Spring.Remoting.Config.RemotingNamespaceParser.ParseSaoExporter(System.Xml.XmlElement,System.String,Spring.Objects.Factory.Xml.ParserContext)">
            <summary>
            Parses the SaoExporter definition.
            </summary>
            <param name="element">The element to parse.</param>
            <param name="name">The name of the object definition.</param>
            <param name="parserContext">The parser context.</param>
            <returns>SaoExporter object definition.</returns>
        </member>
        <member name="M:Spring.Remoting.Config.RemotingNamespaceParser.ParseCaoExporter(System.Xml.XmlElement,System.String,Spring.Objects.Factory.Xml.ParserContext)">
            <summary>
            Parses the CaoExporter definition.
            </summary>
            <param name="element">The element to parse.</param>
            <param name="name">The name of the object definition.</param>
            <param name="parserContext">The parser context.</param>
            <returns>CaoExporter object definition.</returns>
        </member>
        <member name="M:Spring.Remoting.Config.RemotingNamespaceParser.ParseLifeTime(Spring.Objects.MutablePropertyValues,System.Xml.XmlElement,Spring.Objects.Factory.Xml.ParserContext)">
            <summary>
            Parses the LifeTime definition.
            </summary>
        </member>
        <member name="M:Spring.Remoting.Config.RemotingNamespaceParser.GetTypeName(System.Xml.XmlElement)">
            <summary>
            Gets the name of the object type for the specified element.
            </summary>
            <param name="element">The element.</param>
            <returns>The name of the object type.</returns>
        </member>
        <member name="T:Spring.Remoting.Support.BaseRemoteObject">
            <summary>
            This class extends <see cref="T:System.MarshalByRefObject"/> to allow users
            to define object lifecycle details by simply setting its properties.
            </summary>
            <remarks>
            <p>
            Remoting exporters uses this class as a base proxy class
            in order to support lifecycle configuration when exporting 
            a remote object.
            </p>
            </remarks>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Spring.Remoting.Support.BaseRemoteObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Remoting.Support.BaseRemoteObject"/> class.
            </summary>
        </member>
        <member name="M:Spring.Remoting.Support.BaseRemoteObject.InitializeLifetimeService">
            <summary>
            Obtains a lifetime service object to control the lifetime policy for this instance.
            </summary>
            <remarks>
            <p>
            This method uses property values to configure <see cref="T:System.Runtime.Remoting.Lifetime.ILease"/> for this object.
            </p>
            <p>
            It is very much inspired by Ingo Rammer's example in Chapter 6 of "Advanced .NET Remoting",
            but is modified slightly to make it more "Spring-friendly". Basically, the main difference is that
            instead of pulling lease configuration from the .NET config file, this implementation relies
            on Spring DI to get appropriate values injected, which makes it much more flexible.
            </p>
            </remarks>
            <returns>
            An object of type <see cref="T:System.Runtime.Remoting.Lifetime.ILease"/> used to control the
            lifetime policy for this instance. This is the current lifetime service object for
            this instance if one exists; otherwise, a new lifetime service object initialized to the value
            of the <see cref="P:System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseManagerPollTime" qualify="true"/> property.
            </returns>
            <exception cref="T:System.Security.SecurityException">The immediate caller does not have infrastructure permission. </exception>
        </member>
        <member name="P:Spring.Remoting.Support.BaseRemoteObject.IsInfinite">
            <summary>
            Gets or sets a value indicating whether this instance has infinite lifetime.
            </summary>
            <value>
            <see langword="true"/> if this instance has infinite lifetime; 
            otherwise, <see langword="false" /> .
            </value>
        </member>
        <member name="P:Spring.Remoting.Support.BaseRemoteObject.InitialLeaseTime">
            <summary>
            Gets or sets the initial lease time.
            </summary>
            <value>The initial lease time.</value>
        </member>
        <member name="P:Spring.Remoting.Support.BaseRemoteObject.RenewOnCallTime">
            <summary>
            Gets or sets the amount of time lease should be 
            extended for on each call to this object.
            </summary>
            <value>The amount of time lease should be 
            extended for on each call to this object.</value>
        </member>
        <member name="P:Spring.Remoting.Support.BaseRemoteObject.SponsorshipTimeout">
            <summary>
            Gets or sets the amount of time lease manager will for this object's
            sponsors to respond.
            </summary>
            <value>The amount of time lease manager will for this object's
            sponsors to respond.</value>
        </member>
        <member name="T:Spring.Remoting.Support.ConfigurableLifetime">
            <summary>
            Configurable implementation of the <see cref="T:Spring.Remoting.Support.ILifetime"/> interface.
            </summary>
            <author>Bruno Baia</author>
        </member>
        <member name="T:Spring.Remoting.Support.ILifetime">
            <summary>
            Defines lifetime's properties of remote objects that is used by Spring.
            </summary>
            <author>Bruno Baia</author>
        </member>
        <member name="P:Spring.Remoting.Support.ILifetime.Infinite">
            <summary>
            Gets or sets a value indicating whether this instance has infinite lifetime.
            </summary>
            <value>
            <c>true</c> if this instance has infinite lifetime; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Spring.Remoting.Support.ILifetime.InitialLeaseTime">
            <summary>
            Gets the initial lease time.
            </summary>
            <value>The initial lease time.</value>
        </member>
        <member name="P:Spring.Remoting.Support.ILifetime.RenewOnCallTime">
            <summary>
            Gets the amount of time lease 
            should be extended for on each call to this object.
            </summary>
            <value>The amount of time lease should be 
            extended for on each call to this object.</value>
        </member>
        <member name="P:Spring.Remoting.Support.ILifetime.SponsorshipTimeout">
            <summary>
            Gets the amount of time lease manager 
            will for this object's sponsors to respond.
            </summary>
            <value>The amount of time lease manager will for this object's
            sponsors to respond.</value>
        </member>
        <member name="P:Spring.Remoting.Support.ConfigurableLifetime.Infinite">
            <summary>
            Gets or sets a value indicating whether this instance has infinite lifetime.
            </summary>
            <value>
            <c>true</c> if this instance has infinite lifetime; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Spring.Remoting.Support.ConfigurableLifetime.InitialLeaseTime">
            <summary>
            Gets or sets the initial lease time.
            </summary>
            <value>The initial lease time.</value>
        </member>
        <member name="P:Spring.Remoting.Support.ConfigurableLifetime.RenewOnCallTime">
            <summary>
            Gets or sets the amount of time lease 
            should be extended for on each call to this object.
            </summary>
            <value>The amount of time lease should be 
            extended for on each call to this object.</value>
        </member>
        <member name="P:Spring.Remoting.Support.ConfigurableLifetime.SponsorshipTimeout">
            <summary>
            Gets or sets the amount of time lease manager  
            will for this object's sponsors to respond.
            </summary>
            <value>The amount of time lease manager will for this object's
            sponsors to respond.</value>
        </member>
        <member name="T:Spring.Remoting.Support.ICaoRemoteFactory">
            <summary>
            Interface for a CAO based object factory.
            </summary>
            <remarks>
            <p>
            Provides a well known location for clients to retrieve
            references to CAO references.
            </p>
            </remarks>
            <author>Aleksandar Seovic</author>
            <author>Mark Pollack</author>
            <author>Bruno Baia</author>
        </member>
        <member name="M:Spring.Remoting.Support.ICaoRemoteFactory.GetObject">
            <summary>
            Returns the CAO proxy.
            </summary>
            <returns>The remote object.</returns>
        </member>
        <member name="M:Spring.Remoting.Support.ICaoRemoteFactory.GetObject(System.Object[])">
            <summary>
            Returns the CAO proxy using the
            argument list to call the constructor. 
            </summary>
            <remarks>
            The matching of arguments to call the constructor is done
            by type. The alternative ways, by index and by constructor
            name are not supported.
            </remarks>
            <param name="constructorArguments">Constructor 
            arguments used to create the object.</param>
            <returns>The remote object.</returns>
        </member>
        <member name="T:Spring.Remoting.Support.RemoteObjectProxyTypeBuilder">
            <summary>
            Builds a proxy type based on <see cref="T:Spring.Remoting.Support.BaseRemoteObject"/> to wrap a target object 
            that is intended to be remotable.
            </summary>
            <author>Bruno Baia</author>
        </member>
        <member name="M:Spring.Remoting.Support.RemoteObjectProxyTypeBuilder.#ctor(Spring.Remoting.Support.ILifetime)">
            <summary>
            Creates a new instance of the 
            <see cref="T:Spring.Remoting.Support.RemoteObjectProxyTypeBuilder"/> class.
            </summary>
            <param name="lifetime">
            The lifetime properties to be applied to the target object.
            </param>
        </member>
        <member name="M:Spring.Remoting.Support.RemoteObjectProxyTypeBuilder.BuildProxyType">
            <summary>
            Creates a remotable proxy type based on <see cref="T:Spring.Remoting.Support.BaseRemoteObject"/>.
            </summary>
            <returns>The generated proxy class.</returns>
            <exception cref="T:System.ArgumentException">
            If the <see cref="P:Spring.Proxy.IProxyTypeBuilder.BaseType"/> is not
            an instance of <see cref="T:Spring.Remoting.Support.BaseRemoteObject"/>.
            </exception>
        </member>
        <member name="M:Spring.Remoting.Support.RemoteObjectProxyTypeBuilder.ImplementConstructors(System.Reflection.Emit.TypeBuilder)">
            <summary>
            Implements constructors for the proxy class.
            </summary>
            <param name="builder">
            The <see cref="T:System.Reflection.Emit.TypeBuilder"/> to use.
            </param>
        </member>
        <member name="M:Spring.Remoting.Support.RemoteObjectProxyTypeBuilder.GenerateRemoteObjectLifetimeInitialization(System.Reflection.Emit.ILGenerator)">
            <summary>
            Generate initialization code for <see cref="T:Spring.Remoting.Support.BaseRemoteObject"/>'s lifetime properties.
            </summary>
            <param name="il">ILGenerator</param>
        </member>
        <member name="T:Spring.Remoting.CaoExporter">
            <summary>
            Registers an object type on the server
            as a Client Activated Object (CAO).
            </summary>
            <author>Aleksandar Seovic</author>
            <author>Mark Pollack</author>
            <author>Bruno Baia</author>
        </member>
        <member name="M:Spring.Remoting.CaoExporter.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Spring.Remoting.CaoExporter"/> class.
            </summary>
        </member>
        <member name="M:Spring.Remoting.CaoExporter.AfterPropertiesSet">
            <summary>
            Publish the object 
            </summary>
        </member>
        <member name="M:Spring.Remoting.CaoExporter.Dispose">
            <summary>
            Disconnect the remote object from the registered remoting channels.
            </summary>
        </member>
        <member name="P:Spring.Remoting.CaoExporter.TargetName">
            <summary>
            Gets or sets the name of the target object definition.
            </summary>
        </member>
        <member name="P:Spring.Remoting.CaoExporter.Interfaces">
            <summary>
            Gets or sets the list of interfaces whose methods should be exported.
            </summary>
            <remarks>
            The default value of this property is all the interfaces 
            implemented or inherited by the target type.
            </remarks>
            <value>The interfaces to export.</value>
        </member>
        <member name="P:Spring.Remoting.CaoExporter.ApplicationContext">
            <summary>
            Sets the <see cref="T:Spring.Context.IApplicationContext"/> that this
            object runs in.
            </summary>
            <value></value>
            <remarks>
            <p>
            Normally this call will be used to initialize the object.
            </p>
            <p>
            Invoked after population of normal object properties but before an
            init callback such as
            <see cref="T:Spring.Objects.Factory.IInitializingObject"/>'s
            <see cref="M:Spring.Objects.Factory.IInitializingObject.AfterPropertiesSet"/>
            or a custom init-method. Invoked after the setting of any
            <see cref="T:Spring.Context.IResourceLoaderAware"/>'s
            <see cref="P:Spring.Context.IResourceLoaderAware.ResourceLoader"/>
            property.
            </p>
            </remarks>
            <exception cref="T:Spring.Context.ApplicationContextException">
            In the case of application context initialization errors.
            </exception>
            <exception cref="T:Spring.Objects.ObjectsException">
            If thrown by any application context methods.
            </exception>
            <exception cref="T:Spring.Objects.Factory.ObjectInitializationException"/>
        </member>
        <member name="P:Spring.Remoting.CaoExporter.ObjectFactory">
            <summary>
            Sets object factory to use.
            </summary>
        </member>
        <member name="T:Spring.Remoting.CaoExporter.BaseCao">
            <summary>
            This class extends <see cref="T:Spring.Remoting.Support.BaseRemoteObject"/> to allow CAOs
            to be disconnect from the client.
            </summary>
        </member>
        <member name="M:Spring.Remoting.CaoExporter.CaoRemoteFactory.#ctor(Spring.Remoting.Support.ILifetime,System.String,System.String[],Spring.Objects.Factory.Support.AbstractObjectFactory)">
            <summary>
            Create a new instance of the RemoteFactory.
            </summary>
        </member>
        <member name="M:Spring.Remoting.CaoExporter.CaoRemoteFactory.GetObject">
            <summary>
            Returns the CAO proxy.
            </summary>
            <returns>The remote object.</returns>
        </member>
        <member name="M:Spring.Remoting.CaoExporter.CaoRemoteFactory.GetObject(System.Object[])">
            <summary>
            Returns the CAO proxy using the
            argument list to call the constructor. 
            </summary>
            <remarks>
            The matching of arguments to call the constructor is done
            by type. The alternative ways, by index and by constructor
            name are not supported.
            </remarks>
            <param name="constructorArguments">Constructor 
            arguments used to create the object.</param>
            <returns>The remote object.</returns>
        </member>
        <member name="M:Spring.Remoting.CaoExporter.CaoRemoteFactory.InitializeLifetimeService">
            <summary>
            Set infinite lifetime.
            </summary>
        </member>
        <member name="T:Spring.Remoting.CaoFactoryObject">
            <summary>
            Factory for creating a reference to a 
            client activated object (CAO).
            </summary>
            <author>Aleksandar Seovic</author>
            <author>Mark Pollack</author>
            <author>Bruno Baia</author>
        </member>
        <member name="M:Spring.Remoting.CaoFactoryObject.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Spring.Remoting.CaoFactoryObject"/> class.
            </summary>
        </member>
        <member name="M:Spring.Remoting.CaoFactoryObject.AfterPropertiesSet">
            <summary>
            Callback method called once all factory properties have been set.
            </summary>
            <exception cref="T:System.Exception">if an error occured</exception>
        </member>
        <member name="M:Spring.Remoting.CaoFactoryObject.GetObject">
            <summary>
            Return the CAO proxy.
            </summary>
            <returns>the CAO proxy</returns>
        </member>
        <member name="P:Spring.Remoting.CaoFactoryObject.RemoteTargetName">
            <summary>
            The remote target name to activate.
            </summary>
        </member>
        <member name="P:Spring.Remoting.CaoFactoryObject.ServiceUrl">
            <summary>
            The Uri of the remote type.
            </summary>
        </member>
        <member name="P:Spring.Remoting.CaoFactoryObject.ConstructorArguments">
            <summary>
            Argument list used to call the CAO constructor.
            </summary>
        </member>
        <member name="P:Spring.Remoting.CaoFactoryObject.IsSingleton">
            <summary>
            Always return false.
            </summary>
        </member>
        <member name="P:Spring.Remoting.CaoFactoryObject.ObjectType">
            <summary>
            The type of object to be created.
            </summary>
        </member>
        <member name="T:Spring.Remoting.RemoteObjectFactory">
            <summary>
            Factory for creating MarshalByRefObject wrapper around target class.
            </summary>
            <author>Bruno Baia</author>
        </member>
        <member name="M:Spring.Remoting.RemoteObjectFactory.#ctor">
            <summary>
            Creates a new instance of the MarshalByRefObjectFactory.
            </summary>
        </member>
        <member name="M:Spring.Remoting.RemoteObjectFactory.AfterPropertiesSet">
            <summary>
            Initializes factory object.
            </summary>
        </member>
        <member name="M:Spring.Remoting.RemoteObjectFactory.GetObject">
            <summary>
            Creates new instance of the remotable target proxy.
            </summary>
            <returns>New instance of the remotable target proxy.</returns>
        </member>
        <member name="P:Spring.Remoting.RemoteObjectFactory.Target">
            <summary>
            Gets or sets the target object.
            </summary>
        </member>
        <member name="P:Spring.Remoting.RemoteObjectFactory.BaseType">
            <summary>
            Gets or sets the <see cref="T:Spring.Remoting.Support.BaseRemoteObject"/> class or subclass 
            that the proxy must inherit from.
            </summary>
        </member>
        <member name="P:Spring.Remoting.RemoteObjectFactory.Interfaces">
            <summary>
            Gets or sets the list of interfaces to wrap.
            </summary>
            <remarks>
            The default value of this property is all the interfaces 
            implemented or inherited by the target type.
            </remarks>
            <value>The interfaces to export.</value>
        </member>
        <member name="P:Spring.Remoting.RemoteObjectFactory.ObjectType">
            <summary>
            Returns type of the remotable target proxy.
            </summary>
        </member>
        <member name="P:Spring.Remoting.RemoteObjectFactory.IsSingleton">
            <summary>
            Always returns false.
            </summary>
        </member>
        <member name="T:Spring.Remoting.RemotingConfigurer">
            <summary>
            Convenience class to configure remoting infrastructure from the IoC container.
            </summary>
            <author>Bruno Baia</author>
        </member>
        <member name="M:Spring.Remoting.RemotingConfigurer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spring.Remoting.RemotingConfigurer"/> class.
            </summary>
        </member>
        <member name="M:Spring.Remoting.RemotingConfigurer.PostProcessObjectFactory(Spring.Objects.Factory.Config.IConfigurableListableObjectFactory)">
            <summary>
            Modify the application context's internal object factory after its
            standard initialization.
            </summary>
            <param name="factory">
            The object factory used by the application context.
            </param>
            <seealso cref="M:Spring.Objects.Factory.Config.IObjectFactoryPostProcessor.PostProcessObjectFactory(Spring.Objects.Factory.Config.IConfigurableListableObjectFactory)"/>
        </member>
        <member name="P:Spring.Remoting.RemotingConfigurer.Filename">
            <summary>
            Gets or sets the name of the remoting configuration file.
            </summary>
            <remarks>
            If filename is <see langword="null"/> or not set, 
            current AppDomain's configuration file will be used.
            </remarks>
        </member>
        <member name="P:Spring.Remoting.RemotingConfigurer.UseConfigFile">
            <summary>
            Indicates whether a configuration file is used.
            Default value is <see langword="true"/>.
            </summary>
            <remarks>
            If <see langword="false"/>, default remoting configuration will be used.
            </remarks>
        </member>
        <member name="P:Spring.Remoting.RemotingConfigurer.EnsureSecurity">
            <summary>
            Gets or sets if security is enabled.
            </summary>
            <remarks>
            This property is only available since .NET Framework 2.0.
            </remarks>
        </member>
        <member name="P:Spring.Remoting.RemotingConfigurer.Order">
            <summary>
            Return the order value of this object, 
            where a higher value means greater in terms of sorting.
            </summary>
        </member>
        <member name="T:Spring.Remoting.SaoExporter">
            <summary>
            Publishes an instance of an object under
            a given url as a Server Activated Object (SAO).
            </summary>
            <remarks>
            Remoting servers exported by <see cref="T:Spring.Remoting.SaoExporter"/> always correspond to <see cref="F:System.Runtime.Remoting.WellKnownObjectMode.Singleton"/>. 
            Objects can be exported either as SingleCall or Singleton by marking the exported object identified by 
            <see name="TargetName"/> as either singleton or prototype.
            </remarks>
            <author>Aleksandar Seovic</author>
            <author>Mark Pollack</author>
            <author>Bruno Baia</author>
            <author>Erich Eichinger</author>
        </member>
        <member name="F:Spring.Remoting.SaoExporter.s_activeExporters">
            <summary>
            Holds EXPORTER_ID to SaoExporter instance mappings.
            </summary>
        </member>
        <member name="M:Spring.Remoting.SaoExporter.GetTarget(System.String)">
            <summary>
             Returns the target object instance exported by the SaoExporter identified by <see cref="F:Spring.Remoting.SaoExporter.EXPORTER_ID"/>.
            </summary>
            <param name="exporterId"></param>
            <returns></returns>
        </member>
        <member name="M:Spring.Remoting.SaoExporter.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Spring.Remoting.SaoExporter"/> class.
            </summary>
        </member>
        <member name="M:Spring.Remoting.SaoExporter.Finalize">
            <summary>
            Cleanup before GC
            </summary>
        </member>
        <member name="M:Spring.Remoting.SaoExporter.AfterPropertiesSet">
            <summary>
            Publish the object 
            </summary>
        </member>
        <member name="M:Spring.Remoting.SaoExporter.Dispose">
            <summary>
            Disconnect the remote object from the registered remoting channels.
            </summary>
        </member>
        <member name="M:Spring.Remoting.SaoExporter.Dispose(System.Boolean)">
            <summary>
            Stops exporting the object identified by <see cref="P:Spring.Remoting.SaoExporter.TargetName"/>.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:Spring.Remoting.SaoExporter.TargetName">
            <summary>
            Gets or sets the name of the target object definition.
            </summary>
        </member>
        <member name="P:Spring.Remoting.SaoExporter.ApplicationName">
            <summary>
            Gets or sets the name of the remote application.
            </summary>
        </member>
        <member name="P:Spring.Remoting.SaoExporter.ServiceName">
            <summary>
            Gets or sets the name of the exported remote service.
            <remarks>
            The name that will be used in the URI to refer to this service.
            This will be of the form, tcp://host:port/ServiceName or
            tcp://host:port/ApplicationName/ServiceName
            </remarks>
            </summary>
        </member>
        <member name="P:Spring.Remoting.SaoExporter.Interfaces">
            <summary>
            Gets or sets the list of interfaces whose methods should be exported.
            </summary>
            <remarks>
            The default value of this property is all the interfaces 
            implemented or inherited by the target type.
            </remarks>
            <value>The interfaces to export.</value>
        </member>
        <member name="P:Spring.Remoting.SaoExporter.ObjectFactory">
            <summary>
            Sets object factory to use.
            </summary>
        </member>
        <member name="T:Spring.Remoting.SaoExporter.SaoRemoteObjectProxyTypeBuilder">
            <summary>
            Builds a proxy type based on <see cref="T:Spring.Remoting.Support.BaseRemoteObject"/> to wrap a target object 
            that is intended to be remotable.
            </summary>
            <remarks>
            The wrapped target object is retrieved by name from the IoC container.
            </remarks>
        </member>
        <member name="M:Spring.Remoting.SaoExporter.SaoRemoteObjectProxyTypeBuilder.#ctor(Spring.Remoting.SaoExporter)">
            <summary>
            Creates a new instance of the 
            <see cref="T:Spring.Remoting.SaoExporter.SaoRemoteObjectProxyTypeBuilder"/> class.
            </summary>
            <param name="saoExporter">
            The exporter to be associated with the proxy.
            </param>
        </member>
        <member name="M:Spring.Remoting.SaoExporter.SaoRemoteObjectProxyTypeBuilder.PushTarget(System.Reflection.Emit.ILGenerator)">
            <summary>
            Generates the IL instructions that pushes 
            the target instance on which calls should be delegated to.
            </summary>
            <param name="il">The IL generator to use.</param>
        </member>
        <member name="M:Spring.Remoting.SaoExporter.SaoRemoteObjectProxyTypeBuilder.ImplementConstructors(System.Reflection.Emit.TypeBuilder)">
            <summary>
            Implements constructors for the proxy class.
            </summary>
            <param name="builder">
            The <see cref="T:System.Reflection.Emit.TypeBuilder"/> to use.
            </param>
        </member>
        <member name="M:Spring.Remoting.SaoExporter.SaoRemoteObjectProxyTypeBuilder.DeclareTargetInstanceField(System.Reflection.Emit.TypeBuilder)">
            <summary>
            Deaclares a field that holds the target object instance.
            </summary>
            <param name="builder">
            The <see cref="T:System.Type"/> builder to use for code generation.
            </param>
        </member>
        <member name="T:Spring.Remoting.SaoFactoryObject">
            <summary>
            Factory for creating a reference to a 
            remote server activated object (SAO).
            </summary>
            <remarks>
            This is useful alternative to adminstrative type registration on
            the client when you would like the client to have only 
            a reference to the interface that an SAO implements and not the
            actual SAO implentation. 
            </remarks>
            <author>Aleksandar Seovic</author>
            <author>Mark Pollack</author>
            <author>Bruno Baia</author>
        </member>
        <member name="M:Spring.Remoting.SaoFactoryObject.#ctor">
            <summary>
            Creates a new instance of the SaoFactoryObject class.
            </summary>
        </member>
        <member name="M:Spring.Remoting.SaoFactoryObject.AfterPropertiesSet">
            <summary>
            Callback method called once all factory properties have been set.
            </summary>
            <exception cref="T:System.Exception">if an error occured</exception>
        </member>
        <member name="M:Spring.Remoting.SaoFactoryObject.GetObject">
            <summary>
            Return the SAO proxy.
            </summary>
            <returns>the SAO proxy</returns>
        </member>
        <member name="P:Spring.Remoting.SaoFactoryObject.ServiceInterface">
            <summary>
            The remote service interface.
            </summary>
        </member>
        <member name="P:Spring.Remoting.SaoFactoryObject.ServiceUrl">
            <summary>
            The URI of the well known object
            </summary>
        </member>
        <member name="P:Spring.Remoting.SaoFactoryObject.IsSingleton">
            <summary>
            Is the object managed by this factory a singleton or a prototype?
            </summary>
        </member>
        <member name="P:Spring.Remoting.SaoFactoryObject.ObjectType">
            <summary>
            The type of object to be created.
            </summary>
        </member>
        <member name="T:Spring.ServiceModel.Activation.ServiceHostFactory">
            <summary>
            Factory that provides instances of <see cref="T:Spring.ServiceModel.SpringServiceHost"/> 
            to host objects created by Spring's IoC container.
            </summary>
            <author>Bruno Baia</author>
        </member>
        <member name="M:Spring.ServiceModel.Activation.ServiceHostFactory.CreateServiceHost(System.String,System.Uri[])">
            <summary>
            Creates a <see cref="T:Spring.ServiceModel.SpringServiceHost"/> for 
            a specified Spring-managed object with a specific base address.
            </summary>
            <param name="reference">
            A reference to a Spring-managed object or to a service type.
            </param>
            <param name="baseAddresses">
            The <see cref="T:System.Array"/> of type <see cref="T:System.Uri"/> that contains 
            the base addresses for the service hosted.
            </param>
            <returns>
            A <see cref="T:Spring.ServiceModel.SpringServiceHost"/> for the Spring-managed object.
            </returns>
            <exception cref="T:System.ArgumentException">
            If the Service attribute in the ServiceHost directive was not provided.
            </exception>
        </member>
        <member name="T:Spring.ServiceModel.Activation.ServiceHostFactoryObject">
            <summary>
            Factory that provides instances of <see cref="T:System.ServiceModel.ServiceHost"/> 
            to host objects created with Spring's IoC container.
            </summary>
            <author>Bruno Baia</author>
        </member>
        <member name="F:Spring.ServiceModel.Activation.ServiceHostFactoryObject.objectFactory">
            <summary>
            The owning factory.
            </summary>
        </member>
        <member name="F:Spring.ServiceModel.Activation.ServiceHostFactoryObject.springServiceHost">
            <summary>
            The <see cref="T:Spring.ServiceModel.SpringServiceHost"/> instance managed by this factory.
            </summary>
        </member>
        <member name="M:Spring.ServiceModel.Activation.ServiceHostFactoryObject.#ctor">
            <summary>
            Creates a new instance of the 
            <see cref="T:Spring.ServiceModel.Activation.ServiceHostFactoryObject"/> class.
            </summary>
        </member>
        <member name="M:Spring.ServiceModel.Activation.ServiceHostFactoryObject.GetObject">
            <summary>
            Return a <see cref="T:Spring.ServiceModel.SpringServiceHost"/> instance 
            managed by this factory.
            </summary>
            <returns>
            An instance of <see cref="T:Spring.ServiceModel.SpringServiceHost"/> 
            managed by this factory.
            </returns>
        </member>
        <member name="M:Spring.ServiceModel.Activation.ServiceHostFactoryObject.AfterPropertiesSet">
            <summary>
            Publish the object.
            </summary>
        </member>
        <member name="M:Spring.ServiceModel.Activation.ServiceHostFactoryObject.Dispose">
            <summary>
            Close the SpringServiceHost
            </summary>
        </member>
        <member name="M:Spring.ServiceModel.Activation.ServiceHostFactoryObject.ValidateConfiguration">
            <summary>
            Validates the configuration.
            </summary>
        </member>
        <member name="P:Spring.ServiceModel.Activation.ServiceHostFactoryObject.TargetName">
            <summary>
            Gets or sets the name of the target object that should be exposed as a service.
            </summary>
            <value>
            The name of the target object that should be exposed as a service.
            </value>
        </member>
        <member name="P:Spring.ServiceModel.Activation.ServiceHostFactoryObject.BaseAddresses">
            <summary>
            Gets or sets the base addresses for the hosted service.
            </summary>
            <value>
            The base addresses for the hosted service.
            </value>
        </member>
        <member name="P:Spring.ServiceModel.Activation.ServiceHostFactoryObject.UseServiceProxyTypeCache">
            <summary>
            Controls, whether the underlying <see cref="T:Spring.ServiceModel.SpringServiceHost"/> should cache
            the generated proxy types. Defaults to <c>true</c>.
            </summary>
        </member>
        <member name="P:Spring.ServiceModel.Activation.ServiceHostFactoryObject.ObjectFactory">
            <summary>
            Callback that supplies the owning factory to an object instance.
            </summary>
            <value>
            Owning <see cref="T:Spring.Objects.Factory.IObjectFactory"/>
            (may not be <see langword="null"/>). The object can immediately
            call methods on the factory.
            </value>
            <remarks>
            <p>
            Invoked after population of normal object properties but before an init
            callback like <see cref="T:Spring.Objects.Factory.IInitializingObject"/>'s
            <see cref="M:Spring.Objects.Factory.IInitializingObject.AfterPropertiesSet"/>
            method or a custom init-method.
            </p>
            </remarks>
            <exception cref="T:Spring.Objects.ObjectsException">
            In case of initialization errors.
            </exception>
        </member>
        <member name="P:Spring.ServiceModel.Activation.ServiceHostFactoryObject.ObjectType">
            <summary>
            Return the <see cref="T:System.Type"/> of object that this
            <see cref="T:Spring.Objects.Factory.IFactoryObject"/> creates.
            </summary>
        </member>
        <member name="P:Spring.ServiceModel.Activation.ServiceHostFactoryObject.IsSingleton">
            <summary>
            Always returns <see langword="false"/>
            </summary>
        </member>
        <member name="T:Spring.ServiceModel.Activation.WebServiceHostFactory">
            <summary>
            Factory that provides instances of <see cref="T:Spring.ServiceModel.SpringWebServiceHost"/>
            to host objects created by Spring's IoC container.
            </summary>
            <author>Steve Bohlen</author>
        </member>
        <member name="M:Spring.ServiceModel.Activation.WebServiceHostFactory.CreateServiceHost(System.String,System.Uri[])">
            <summary>
            Creates a <see cref="T:Spring.ServiceModel.SpringWebServiceHost"/> for 
            a specified Spring-managed object with a specific base address.
            </summary>
            <param name="reference">
            A reference to a Spring-managed object or to a service type.
            </param>
            <param name="baseAddresses">
            The <see cref="T:System.Array"/> of type <see cref="T:System.Uri"/> that contains 
            the base addresses for the service hosted.
            </param>
            <returns>
            A <see cref="T:Spring.ServiceModel.SpringWebServiceHost"/> for the Spring-managed object.
            </returns>
            <exception cref="T:System.ArgumentException">
            If the Service attribute in the ServiceHost directive was not provided.
            </exception>
        </member>
        <member name="T:Spring.ServiceModel.Config.ChannelFactoryObjectDefinitionParser">
            <summary>
            The <see cref="T:Spring.Objects.Factory.Xml.IObjectDefinitionParser"/> for the <code>&lt;wcf:channelFactory&gt;</code> tag.
            </summary>
            <author>Bruno Baia</author>
        </member>
        <member name="M:Spring.ServiceModel.Config.ChannelFactoryObjectDefinitionParser.Spring#Objects#Factory#Xml#IObjectDefinitionParser#ParseElement(System.Xml.XmlElement,Spring.Objects.Factory.Xml.ParserContext)">
            <summary>
            Parse the specified XmlElement and register the resulting
            ObjectDefinitions with the <see cref="P:Spring.Objects.Factory.Xml.ParserContext.Registry"/> IObjectDefinitionRegistry
            embedded in the supplied <see cref="T:Spring.Objects.Factory.Xml.ParserContext"/>
            </summary>
            <param name="element">The element to be parsed.</param>
            <param name="parserContext">The object encapsulating the current state of the parsing process.
            Provides access to a IObjectDefinitionRegistry</param>
            <returns>The primary object definition.</returns>
            <remarks>
            <p>
            This method is never invoked if the parser is namespace aware
            and was called to process the root node.
            </p>
            </remarks>
        </member>
        <member name="T:Spring.ServiceModel.Config.WcfNamespaceParser">
            <summary>
            Namespace parser for the WCF namespace.
            </summary>
            <author>Bruno Baia</author>
        </member>
        <member name="M:Spring.ServiceModel.Config.WcfNamespaceParser.Init">
            <summary>
            Register the <see cref="T:Spring.Objects.Factory.Xml.IObjectDefinitionParser"/> for the WCF tags.
            </summary>
        </member>
        <member name="T:Spring.ServiceModel.Support.ServiceProxyTypeBuilder">
            <summary>
            Builds a WCF service type.
            </summary>
            <author>Bruno Baia</author>
        </member>
        <member name="F:Spring.ServiceModel.Support.ServiceProxyTypeBuilder.objectFactoryField">
            <summary>
            Target instance calls should be delegated to.
            </summary>
        </member>
        <member name="M:Spring.ServiceModel.Support.ServiceProxyTypeBuilder.#ctor(System.String,Spring.Objects.Factory.IObjectFactory,System.Boolean)">
            <summary>
            Creates a new instance of the 
            <see cref="T:Spring.ServiceModel.Support.ServiceProxyTypeBuilder"/> class.
            </summary>
            <param name="targetName">The name of the service within Spring's IoC container.</param>
            <param name="objectFactory">The <see cref="T:Spring.Objects.Factory.IObjectFactory"/> to use.</param>
            <param name="useServiceProxyTypeCache">Whether to cache the generated service proxy type.</param>
        </member>
        <member name="M:Spring.ServiceModel.Support.ServiceProxyTypeBuilder.#ctor(System.String,System.String,Spring.Objects.Factory.IObjectFactory,System.Boolean)">
            <summary>
            Creates a new instance of the 
            <see cref="T:Spring.ServiceModel.Support.ServiceProxyTypeBuilder"/> class.
            </summary>
            <param name="targetName">The name of the service within Spring's IoC container.</param>
            <param name="serviceTypeName">The name of the generated WCF service <see cref="T:System.Type"/>.</param>
            <param name="objectFactory">The <see cref="T:Spring.Objects.Factory.IObjectFactory"/> to use.</param>
            <param name="useServiceProxyTypeCache">Whether to cache the generated service proxy type.</param>
        </member>
        <member name="M:Spring.ServiceModel.Support.ServiceProxyTypeBuilder.BuildProxyType">
            <summary>
            Creates a proxy that delegates calls to an instance of the target object. 
            This overriden implementation caches the generated proxy type 
            and sets the '__objectFactory' field.
            </summary>
            <exception cref="T:System.ArgumentException">
            If the <see cref="P:Spring.Proxy.IProxyTypeBuilder.TargetType"/>
            does not implement any interfaces.
            </exception>
        </member>
        <member name="M:Spring.ServiceModel.Support.ServiceProxyTypeBuilder.ImplementConstructors(System.Reflection.Emit.TypeBuilder)">
            <summary>
            Implements constructors for the proxy class.
            </summary>
            <remarks>
            This implementation generates a constructor 
            that gets instance of the target object using 
            <see cref="M:Spring.Objects.Factory.IObjectFactory.GetObject(System.String)"/>.
            </remarks>
            <param name="builder">
            The <see cref="T:System.Type"/> builder to use.
            </param>
        </member>
        <member name="M:Spring.ServiceModel.Support.ServiceProxyTypeBuilder.CreateTypeBuilder(System.String,System.Type)">
            <summary>
            Creates an appropriate type builder. Add a field to hold a reference to the application context.
            </summary>
            <param name="name">The name to use for the proxy type name.</param>
            <param name="baseType">The type to extends if provided.</param>
            <returns>The type builder to use.</returns>
        </member>
        <member name="T:Spring.ServiceModel.ChannelFactoryObject`1">
            <summary>
            <see cref="T:Spring.Objects.Factory.IFactoryObject"/> that creates a channel that is used by clients 
            to send messages to a specified endpoint address.
            </summary>
            <typeparam name="T">The type of channel produced by the channel factory.</typeparam>
            <author>Bruno Baia</author>
        </member>
        <member name="M:Spring.ServiceModel.ChannelFactoryObject`1.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Spring.ServiceModel.ChannelFactoryObject`1"/> class.
            </summary>
            <param name="endpointConfigurationName">
            The configuration name used for the endpoint.
            </param>
        </member>
        <member name="M:Spring.ServiceModel.ChannelFactoryObject`1.GetObject">
            <summary>
            Return an instance (possibly shared or independent) of the channel
            managed by this factory.
            </summary>
            <returns>
            An instance (possibly shared or independent) of the channel managed by
            this factory.
            </returns>
        </member>
        <member name="P:Spring.ServiceModel.ChannelFactoryObject`1.EndpointConfigurationName">
            <summary>
            Gets the configuration name used for the endpoint.
            </summary>
        </member>
        <member name="P:Spring.ServiceModel.ChannelFactoryObject`1.ObjectType">
            <summary>
            Return the <see cref="T:System.Type"/> of channel that this
            <see cref="T:Spring.Objects.Factory.IFactoryObject"/> creates.
            </summary>
        </member>
        <member name="P:Spring.ServiceModel.ChannelFactoryObject`1.IsSingleton">
            <summary>
            Is the object managed by this factory a singleton or a prototype ?
            </summary>
            <remarks>
            Default value is <see langword="true"/>.
            </remarks>
        </member>
        <member name="T:Spring.ServiceModel.ServiceExporter">
            <summary>
            Exports an object as a WCF service.
            </summary>
            <author>Bruno Baia</author>
        </member>
        <member name="F:Spring.ServiceModel.ServiceExporter.objectName">
            <summary>
            The name of the object in the factory.
            </summary>
        </member>
        <member name="F:Spring.ServiceModel.ServiceExporter.objectFactory">
            <summary>
            The owning factory.
            </summary>
        </member>
        <member name="F:Spring.ServiceModel.ServiceExporter.proxyType">
            <summary>
            The generated WCF service wrapper type.
            </summary>
        </member>
        <member name="M:Spring.ServiceModel.ServiceExporter.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Spring.ServiceModel.ServiceExporter"/> class.
            </summary>
        </member>
        <member name="M:Spring.ServiceModel.ServiceExporter.AfterPropertiesSet">
            <summary>
            Publish the object 
            </summary>
        </member>
        <member name="M:Spring.ServiceModel.ServiceExporter.GetObject">
            <summary>
            Return an instance (possibly shared or independent) of the object
            managed by this factory.
            </summary>
            <remarks>
            <note type="caution">
            If this method is being called in the context of an enclosing IoC container and
            returns <see langword="null"/>, the IoC container will consider this factory
            object as not being fully initialized and throw a corresponding (and most
            probably fatal) exception.
            </note>
            </remarks>
            <returns>
            An instance (possibly shared or independent) of the object managed by
            this factory.
            </returns>
        </member>
        <member name="M:Spring.ServiceModel.ServiceExporter.ValidateConfiguration">
            <summary>
            Validates the configuration.
            </summary>
        </member>
        <member name="M:Spring.ServiceModel.ServiceExporter.GenerateProxy">
            <summary>
            Generates the WCF service wrapper type.
            </summary>
        </member>
        <member name="P:Spring.ServiceModel.ServiceExporter.TargetName">
            <summary>
            Gets or sets the name of the target object definition.
            </summary>
        </member>
        <member name="P:Spring.ServiceModel.ServiceExporter.ContractInterface">
            <summary>
            Gets or sets the service contract interface type.
            </summary>
            <remarks>
            If not set, uses the unique interface implemented or inherited by the target type. 
            An error will be thrown if the target type implements more than one interface.
            </remarks>
            <value>The service contract interface type.</value>
        </member>
        <member name="P:Spring.ServiceModel.ServiceExporter.TypeAttributes">
            <summary>
            Gets or sets a list of custom attributes 
            that should be applied to the WCF service class.
            </summary>
        </member>
        <member name="P:Spring.ServiceModel.ServiceExporter.MemberAttributes">
            <summary>
            Gets or sets a dictionary of custom attributes 
            that should be applied to the WCF service members.
            </summary>
            <remarks>
            Dictionary key is an expression that members can be matched against. 
            Value is a list of attributes that should be applied 
            to each member that matches expression.
            </remarks>
        </member>
        <member name="P:Spring.ServiceModel.ServiceExporter.UseServiceProxyTypeCache">
            <summary>
            Controls, whether the underlying <see cref="T:Spring.ServiceModel.ServiceExporter"/> should cache
            the generated proxy types. Defaults to <c>true</c>.
            </summary>
        </member>
        <member name="P:Spring.ServiceModel.ServiceExporter.Name">
            <summary>
            Gets or sets the name for the &lt;portType&gt; element in 
            Web Services Description Language (WSDL).
            </summary>
            <value>
            The default value is the name of the class or interface to which the 
            System.ServiceModel.ServiceContractAttribute is applied.
            </value>
        </member>
        <member name="P:Spring.ServiceModel.ServiceExporter.Namespace">
            <summary>
            Gets or sets the namespace of the &lt;portType&gt; element in 
            Web Services Description Language (WSDL).
            </summary>
            <value>
            The WSDL namespace of the &lt;portType&gt; element. The default value is "http://tempuri.org".
            </value>
        </member>
        <member name="P:Spring.ServiceModel.ServiceExporter.ConfigurationName">
            <summary>
            Gets or sets the name used to locate the service in an application configuration file.
            </summary>
            <value>
            The name used to locate the service element in an application configuration file. 
            The default is the name of the service implementation class.
            </value>
        </member>
        <member name="P:Spring.ServiceModel.ServiceExporter.CallbackContract">
            <summary>
            Gets or sets the type of callback contract when the contract is a duplex contract.
            </summary>
            <value>
            A <see cref="T:System.Type"/> that indicates the callback contract. The default is null.
            </value>
        </member>
        <member name="P:Spring.ServiceModel.ServiceExporter.ProtectionLevel">
            <summary>
            Specifies whether the binding for the contract must support the value of
            the ProtectionLevel property.
            </summary>
            <value>
            One of the <see cref="T:System.Net.Security.ProtectionLevel"/> values. 
            The default is <see cref="F:System.Net.Security.ProtectionLevel.None"/>.
            </value>
        </member>
        <member name="P:Spring.ServiceModel.ServiceExporter.SessionMode">
            <summary>
            Gets or sets whether sessions are allowed, not allowed or required.
            </summary>
            <value>
            A <see cref="T:System.ServiceModel.SessionMode"/> that indicates whether sessions are allowed, 
            not allowed, or required.
            </value>
        </member>
        <member name="P:Spring.ServiceModel.ServiceExporter.ObjectFactory">
            <summary>
            Callback that supplies the owning factory to an object instance.
            </summary>
            <value>
            Owning <see cref="T:Spring.Objects.Factory.IObjectFactory"/>
            (may not be <see langword="null"/>). The object can immediately
            call methods on the factory.
            </value>
            <remarks>
            <p>
            Invoked after population of normal object properties but before an init
            callback like <see cref="T:Spring.Objects.Factory.IInitializingObject"/>'s
            <see cref="M:Spring.Objects.Factory.IInitializingObject.AfterPropertiesSet"/>
            method or a custom init-method.
            </p>
            </remarks>
            <exception cref="T:Spring.Objects.ObjectsException">
            In case of initialization errors.
            </exception>
        </member>
        <member name="P:Spring.ServiceModel.ServiceExporter.ObjectType">
            <summary>
            Return the <see cref="T:System.Type"/> of object that this
            <see cref="T:Spring.Objects.Factory.IFactoryObject"/> creates, or
            <see langword="null"/> if not known in advance.
            </summary>
        </member>
        <member name="P:Spring.ServiceModel.ServiceExporter.IsSingleton">
            <summary>
            Is the object managed by this factory a singleton or a prototype?
            </summary>
        </member>
        <member name="P:Spring.ServiceModel.ServiceExporter.ObjectName">
            <summary>
            Set the name of the object in the object factory that created this object.
            </summary>
            <value>
            The name of the object in the factory.
            </value>
            <remarks>
            <p>
            Invoked after population of normal object properties but before an init
            callback like <see cref="M:Spring.Objects.Factory.IInitializingObject.AfterPropertiesSet"/>'s
            <see cref="T:Spring.Objects.Factory.IInitializingObject"/>
            method or a custom init-method.
            </p>
            </remarks>
        </member>
        <member name="T:Spring.ServiceModel.ServiceExporter.ConfigurableServiceProxyTypeBuilder">
            <summary>
            Builds a WCF service type.
            </summary>
        </member>
        <member name="M:Spring.ServiceModel.ServiceExporter.ConfigurableServiceProxyTypeBuilder.ApplyTypeAttributes(System.Reflection.Emit.TypeBuilder,System.Type)">
            <summary>
            Applies attributes to the proxy class.
            </summary>
            <param name="typeBuilder">The type builder to use.</param>
            <param name="targetType">The proxied class.</param>
            <see cref="P:Spring.Proxy.IProxyTypeBuilder.ProxyTargetAttributes"/>
            <see cref="P:Spring.Proxy.IProxyTypeBuilder.TypeAttributes"/>
        </member>
        <member name="T:Spring.ServiceModel.SpringServiceHost">
            <summary>
            Provides a host for Spring-managed services.
            </summary>
            <author>Bruno Baia</author>
        </member>
        <member name="M:Spring.ServiceModel.SpringServiceHost.#ctor(System.String,System.Uri[])">
            <summary>
            Creates a new instance of the <see cref="T:Spring.ServiceModel.SpringServiceHost"/> class.
            </summary>
            <param name="serviceName">The name of the service within Spring's IoC container.</param>
            <param name="baseAddresses">The base addresses for the hosted service.</param>
        </member>
        <member name="M:Spring.ServiceModel.SpringServiceHost.#ctor(System.String,System.String,System.Uri[])">
            <summary>
            Creates a new instance of the <see cref="T:Spring.ServiceModel.SpringServiceHost"/> class.
            </summary>
            <param name="serviceName">The name of the service within Spring's IoC container.</param>
            <param name="contextName">The name of the Spring context to use.</param>
            <param name="baseAddresses">The base addresses for the hosted service.</param>
        </member>
        <member name="M:Spring.ServiceModel.SpringServiceHost.#ctor(System.String,Spring.Objects.Factory.IObjectFactory,System.Uri[])">
            <summary>
            Creates a new instance of the <see cref="T:Spring.ServiceModel.SpringServiceHost"/> class.
            </summary>
            <param name="serviceName">The name of the service within Spring's IoC container.</param>
            <param name="objectFactory">The <see cref="T:Spring.Objects.Factory.IObjectFactory"/> to use.</param>
            <param name="baseAddresses">The base addresses for the hosted service.</param>
        </member>
        <member name="M:Spring.ServiceModel.SpringServiceHost.#ctor(System.String,Spring.Objects.Factory.IObjectFactory,System.Boolean,System.Uri[])">
            <summary>
            Creates a new instance of the <see cref="T:Spring.ServiceModel.SpringServiceHost"/> class.
            </summary>
            <param name="serviceName">The name of the service within Spring's IoC container.</param>
            <param name="objectFactory">The <see cref="T:Spring.Objects.Factory.IObjectFactory"/> to use.</param>
            <param name="useServiceProxyTypeCache">Whether to cache the generated service proxy type.</param>
            <param name="baseAddresses">The base addresses for the hosted service.</param>
        </member>
        <member name="T:Spring.ServiceModel.SpringWebServiceHost">
            <summary>
            Provides a host for Spring-managed services.
            </summary>
            <author>Bruno Baia</author>
        </member>
        <member name="M:Spring.ServiceModel.SpringWebServiceHost.#ctor(System.String,System.Uri[])">
            <summary>
            Creates a new instance of the <see cref="T:Spring.ServiceModel.SpringWebServiceHost"/> class.
            </summary>
            <param name="serviceName">The name of the service within Spring's IoC container.</param>
            <param name="baseAddresses">The base addresses for the hosted service.</param>
        </member>
        <member name="M:Spring.ServiceModel.SpringWebServiceHost.#ctor(System.String,System.String,System.Uri[])">
            <summary>
            Creates a new instance of the <see cref="T:Spring.ServiceModel.SpringWebServiceHost"/> class.
            </summary>
            <param name="serviceName">The name of the service within Spring's IoC container.</param>
            <param name="contextName">The name of the Spring context to use.</param>
            <param name="baseAddresses">The base addresses for the hosted service.</param>
        </member>
        <member name="M:Spring.ServiceModel.SpringWebServiceHost.#ctor(System.String,Spring.Objects.Factory.IObjectFactory,System.Uri[])">
            <summary>
            Creates a new instance of the <see cref="T:Spring.ServiceModel.SpringWebServiceHost"/> class.
            </summary>
            <param name="serviceName">The name of the service within Spring's IoC container.</param>
            <param name="objectFactory">The <see cref="T:Spring.Objects.Factory.IObjectFactory"/> to use.</param>
            <param name="baseAddresses">The base addresses for the hosted service.</param>
        </member>
        <member name="M:Spring.ServiceModel.SpringWebServiceHost.#ctor(System.String,Spring.Objects.Factory.IObjectFactory,System.Boolean,System.Uri[])">
            <summary>
            Creates a new instance of the <see cref="T:Spring.ServiceModel.SpringWebServiceHost"/> class.
            </summary>
            <param name="serviceName">The name of the service within Spring's IoC container.</param>
            <param name="objectFactory">The <see cref="T:Spring.Objects.Factory.IObjectFactory"/> to use.</param>
            <param name="useServiceProxyTypeCache">Whether to cache the generated service proxy type.</param>
            <param name="baseAddresses">The base addresses for the hosted service.</param>
        </member>
        <member name="T:Spring.Web.Services.WebServiceProxyFactory">
            <summary>
            Factory Object that dynamically implements service interface for web service.
            </summary>
            <remarks>
            <p>
            This factory object should be used to obtain reference to a web service
            that can be safely cast to a service interface, which allows client code to code 
            against interface, and not directly against the web service.
            </p>
            <p>
            The WSDL contract needs to conform to WS-I Basic Profiles.
            </p>
            </remarks>
            <author>Bruno Baia</author>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="F:Spring.Web.Services.WebServiceProxyFactory.proxyConstructor">
            <summary>
            The web service proxy default constructor.
            </summary>
        </member>
        <member name="M:Spring.Web.Services.WebServiceProxyFactory.#ctor">
            <summary>
            Creates a new instance of the 
            <see cref="T:Spring.Web.Services.WebServiceProxyFactory"/> class.
            </summary>
        </member>
        <member name="M:Spring.Web.Services.WebServiceProxyFactory.GetObject">
            <summary>
            Creates new instance of the web service proxy.
            </summary>
            <returns>New instance of the web service proxy.</returns>
        </member>
        <member name="M:Spring.Web.Services.WebServiceProxyFactory.AfterPropertiesSet">
            <summary>
            Initializes factory object.
            </summary>
        </member>
        <member name="M:Spring.Web.Services.WebServiceProxyFactory.ValidateConfiguration">
            <summary>
            Validates the configuration.
            </summary>
        </member>
        <member name="M:Spring.Web.Services.WebServiceProxyFactory.GenerateProxy">
            <summary>
            Generates the web service proxy type.
            </summary>
        </member>
        <member name="M:Spring.Web.Services.WebServiceProxyFactory.GetWsDocuments(Spring.Core.IO.IResource)">
            <summary>
            Gets XML Web Services documents from a Spring resource.
            </summary>
        </member>
        <member name="P:Spring.Web.Services.WebServiceProxyFactory.WebServiceProxyBaseType">
            <summary>
            Gets or sets the base type that web service proxy should inherit.
            </summary>
            <remarks>
            Default is <see cref="T:System.Web.Services.Protocols.SoapHttpClientProtocol"/>
            </remarks>
        </member>
        <member name="P:Spring.Web.Services.WebServiceProxyFactory.ServiceUri">
            <summary>
            Gets or sets the URI for an <see cref="T:Spring.Core.IO.IResource"/> 
            that contains the web service description (WSDL).
            </summary>
        </member>
        <member name="P:Spring.Web.Services.WebServiceProxyFactory.ProxyType">
            <summary>
            Gets or sets type of the proxy class to wrap.
            </summary>
        </member>
        <member name="P:Spring.Web.Services.WebServiceProxyFactory.ServiceInterface">
            <summary>
            Gets or sets service interface that proxy should implement.
            </summary>
        </member>
        <member name="P:Spring.Web.Services.WebServiceProxyFactory.Credential">
            <summary>
            Gets or sets the <see cref="T:System.Net.NetworkCredential"/> instance 
            to use when connecting to a server that requires authentication.
            </summary>
        </member>
        <member name="P:Spring.Web.Services.WebServiceProxyFactory.ProxyUrl">
            <summary>
            Gets or sets the url of the proxy server to use for retrieving the WSDL.
            </summary>
            <remarks>
            <p>
            This only applies when using an <see cref="T:Spring.Core.IO.UrlResource"/> as uri.
            </p>
            <p>
            The default is to use the system proxy setting.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Web.Services.WebServiceProxyFactory.ProxyCredential">
            <summary>
            Gets or sets the <see cref="T:System.Net.NetworkCredential"/> instance 
            to use when connecting to a proxy server that requires authentication.
            </summary>
            <remarks>
            <p>
            This only applies when using an <see cref="T:Spring.Core.IO.UrlResource"/> as uri.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Web.Services.WebServiceProxyFactory.BindingName">
            <summary>
            Gets or sets the web service binding name to use for the proxy.
            </summary>
        </member>
        <member name="P:Spring.Web.Services.WebServiceProxyFactory.TypeAttributes">
            <summary>
            Gets or sets a list of custom attributes 
            that should be applied to a proxy class.
            </summary>
        </member>
        <member name="P:Spring.Web.Services.WebServiceProxyFactory.MemberAttributes">
            <summary>
            Gets or sets a dictionary of custom attributes 
            that should be applied to web service members.
            </summary>
            <remarks>
            Dictionary key is an expression that members can be matched against. 
            Value is a list of attributes that should be applied 
            to each member that matches expression.
            </remarks>
        </member>
        <member name="P:Spring.Web.Services.WebServiceProxyFactory.ObjectType">
            <summary>
            Returns type of the web service proxy.
            </summary>
        </member>
        <member name="P:Spring.Web.Services.WebServiceProxyFactory.IsSingleton">
            <summary>
            Always returns false.
            </summary>
        </member>
        <member name="P:Spring.Web.Services.WebServiceProxyFactory.ProductTemplate">
            <summary>
            Gets or sets the template object definition 
            that should be used to configure proxy instance.
            </summary>
        </member>
        <member name="T:Spring.Web.Services.WebServiceProxyFactory.SoapHttpClientProxyTypeBuilder">
            <summary>
            Proxy type builder that can be used to create a proxy for 
            <see cref="T:System.Web.Services.Protocols.SoapHttpClientProtocol"/> derived classes.
            </summary>
        </member>
        <member name="M:Spring.Web.Services.WebServiceProxyFactory.SoapHttpClientProxyTypeBuilder.#ctor(Spring.Core.IO.IResource,System.Web.Services.Discovery.DiscoveryClientDocumentCollection,System.String)">
            <summary>
            Creates a new instance of the 
            <see cref="T:Spring.Web.Services.WebServiceProxyFactory.SoapHttpClientProxyTypeBuilder"/> class.
            </summary>
            <param name="serviceUri">The URI that contains the Web Service meta info (WSDL).</param>
            <param name="wsDocuments">The XML Web Service documents to use to create the proxy.</param>
            <param name="bindingName">The name of the Web Service binding to use.</param>
        </member>
        <member name="M:Spring.Web.Services.WebServiceProxyFactory.SoapHttpClientProxyTypeBuilder.BuildProxyType">
            <summary>
            Creates the proxy type.
            </summary>
            <returns>The generated proxy class.</returns>
        </member>
        <member name="M:Spring.Web.Services.WebServiceProxyFactory.SoapHttpClientProxyTypeBuilder.PushTarget(System.Reflection.Emit.ILGenerator)">
            <summary>
            Generates the IL instructions that pushes 
            the target instance on which calls should be delegated to.
            </summary>
            <param name="il">The IL generator to use.</param>
        </member>
        <member name="M:Spring.Web.Services.WebServiceProxyFactory.SoapHttpClientProxyTypeBuilder.ImplementConstructors(System.Reflection.Emit.TypeBuilder)">
            <summary>
            Implements constructors for the proxy class.
            </summary>
            <param name="builder">
            The <see cref="T:System.Reflection.Emit.TypeBuilder"/> to use.
            </param>
        </member>
        <member name="M:Spring.Web.Services.WebServiceProxyFactory.SoapHttpClientProxyTypeBuilder.GetWsBinding(System.Web.Services.Description.ServiceDescriptionCollection,System.String)">
            <summary>
            Search and returns the binding for the specified name.
            </summary>
        </member>
        <member name="M:Spring.Web.Services.WebServiceProxyFactory.SoapHttpClientProxyTypeBuilder.GetWsUrl(System.Web.Services.Description.ServiceDescriptionCollection,System.Web.Services.Description.Binding)">
            <summary>
            Search and returns the url for the specified binding.
            </summary>
        </member>
        <member name="M:Spring.Web.Services.WebServiceProxyFactory.SoapHttpClientProxyTypeBuilder.GetOperation(System.Web.Services.Description.ServiceDescriptionCollection,System.Web.Services.Description.Binding,System.Reflection.MethodInfo)">
            <summary>
            Search and returns the operation that matches the specified method.
            </summary>
        </member>
        <member name="M:Spring.Web.Services.WebServiceProxyFactory.SoapHttpClientProxyTypeBuilder.GetOperationBinding(System.Web.Services.Description.Operation,System.Web.Services.Description.Binding)">
            <summary>
            Search and returns the OperationBinding that matches the specified Operation.
            </summary>
        </member>
        <member name="M:Spring.Web.Services.WebServiceProxyFactory.SoapHttpClientProxyTypeBuilder.GetMembersMapping(System.String,System.Web.Services.Description.MessagePartCollection,System.Web.Services.Description.SoapBodyBinding,System.Web.Services.Description.SoapBindingStyle)">
            <summary>
            Search and returns the type mapping between method parameters/return value 
            and the element parts of a literal-use SOAP message.
            </summary>
        </member>
        <member name="M:Spring.Web.Services.WebServiceProxyFactory.SoapHttpClientProxyTypeBuilder.CreateWebServiceBindingAttribute(System.Web.Services.Description.Binding)">
            <summary>
            Creates a <see cref="T:System.Web.Services.WebServiceBindingAttribute"/> that should be applied to proxy type.
            </summary>
        </member>
        <member name="M:Spring.Web.Services.WebServiceProxyFactory.SoapHttpClientProxyTypeBuilder.CreateSoapMethodAttribute(System.Web.Services.Description.Operation,System.Web.Services.Description.OperationBinding,System.Web.Services.Description.SoapOperationBinding,System.Xml.Serialization.XmlMembersMapping,System.Xml.Serialization.XmlMembersMapping)">
            <summary>
            Creates a <see cref="T:System.Web.Services.Protocols.SoapDocumentMethodAttribute"/> or a <see cref="T:System.Web.Services.Protocols.SoapRpcMethodAttribute"/>
            that should be applied to proxy method.
            </summary>
        </member>
        <member name="T:Spring.Web.Services.WebServiceProxyFactory.SoapHttpClientProxyTypeBuilder.SoapHttpClientProxyMethodBuilder">
            <summary>
            Proxy method builder that can be used to create a proxy method 
            for web services operation invocation.
            </summary>
        </member>
        <member name="M:Spring.Web.Services.WebServiceProxyFactory.SoapHttpClientProxyTypeBuilder.SoapHttpClientProxyMethodBuilder.#ctor(System.Reflection.Emit.TypeBuilder,Spring.Proxy.IProxyTypeGenerator)">
            <summary>
            Creates a new instance of the method builder.
            </summary>
            <param name="typeBuilder">The type builder to use.</param>
            <param name="proxyGenerator">
            The <see cref="T:Spring.Proxy.IProxyTypeGenerator"/> implementation to use.
            </param>
        </member>
        <member name="M:Spring.Web.Services.WebServiceProxyFactory.SoapHttpClientProxyTypeBuilder.SoapHttpClientProxyMethodBuilder.GenerateMethod(System.Reflection.Emit.ILGenerator,System.Reflection.MethodInfo,System.Reflection.MethodInfo)">
            <summary>
            Generates the proxy method.
            </summary>
            <param name="il">The IL generator to use.</param>
            <param name="method">The method to proxy.</param>
            <param name="interfaceMethod">
            The interface definition of the method, if applicable.
            </param>
        </member>
        <member name="T:Spring.Web.Services.WebServiceProxyFactory.WebServiceProxyProxyTypeBuilder">
            <summary>
            Proxy type builder that can be used to create a proxy for 
            .Net-generated proxy class that can be safely cast to a service interface.
            </summary>
        </member>
        <member name="M:Spring.Web.Services.WebServiceProxyFactory.WebServiceProxyProxyTypeBuilder.#ctor">
            <summary>
            Creates a new instance of the 
            <see cref="T:Spring.Web.Services.WebServiceProxyFactory.WebServiceProxyProxyTypeBuilder"/> class.
            </summary>
        </member>
        <member name="M:Spring.Web.Services.WebServiceProxyFactory.WebServiceProxyProxyTypeBuilder.GetInterfaceMapping(System.Type,System.Type)">
            <summary>
            Gets the mapping of the interface to proxy 
            into the actual methods on the target type 
            that does not need to implement that interface.
            </summary>
            <remarks>
            <p>
            As the proxy type does not implement the interface, 
            we try to find matching methods.
            </p>
            </remarks>
            <param name="targetType">
            The <see cref="T:System.Type"/> of the target object.
            </param>
            <param name="intf">The interface to implement.</param>
            <returns>
            An interface mapping for the interface to proxy.
            </returns>
        </member>
    </members>
</doc>
