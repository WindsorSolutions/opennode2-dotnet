#region License
/*
Copyright (c) 2009, The Environmental Council of the States (ECOS)
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

 * Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
 * Neither the name of the ECOS nor the names of its contributors may
   be used to endorse or promote products derived from this software
   without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
*/
#endregion

ï»¿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3082
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by xsd, Version=2.0.50727.3038.
// 
using System;
using System.Text;
using System.Xml.Serialization;
using System.Data;
using System.Collections.Generic;
using Windsor.Commons.XsdOrm;
using Windsor.Commons.Core;
using System.Runtime.Serialization;
using Windsor.Node2008.WNOSPlugin.FACID30;

namespace Windsor.Node2008.WNOSPlugin.FACID30
{
    [AbbreviationsAttribute("NUMBER", "NUM",
                           "DISTRICT", "DIST",
                           "CONGRESSIONAL", "CONG",
                           "LEGISLATIVE", "LEGI",
                           "HUCCODE", "HUC_CODE",
                           "IDENTIFIER", "IDEN",
                           "IDENTITY", "IDEN",
                           "IDENTIFICATION", "IDEN",
                           "FACILITY", "FAC",
                           "CONTEXT", "CONT",
                           "URLTEXT", "URL_TEXT",
                           "HORIZONTAL", "HORZ",
                           "VERTICAL", "VERT",
                           "SOURCE", "SRC",
                           "VALUE", "VAL",
                           "VERSION", "VERS",
                           "GEOGRAPHIC", "GEO",
                           "REFERENCE", "REF",
                           "SYSTEM", "SYS",
                           "ACRONYM", "ACRO",
                           "PRIMARY", "PRI",
                           "LOCATION", "LOC",
                           "DESCRIPTION", "DESC",
                           "FEDERAL", "FED",
                           "AGENCY", "AGN",
                           "METHOD", "METH",
                           "INFORMATION", "INFO",
                           "ORIGINATING", "ORIG",
                           "PARTNER", "PART",
                           "PRECISION", "PREC",
                           "RESULT", "RSLT",
                           "DEVIATIONS", "DEVI",
                           "ACCURACY", "ACC",
                           "ADDRESS", "ADDR",
                           "POSTAL", "POST",
                           "COLLECTION", "COLL",
                           "STATE", "STA",
                           "COUNTRY", "CTRY",
                           "COUNTY", "CNTY",
                           "POINT", "PT",
                           "ENVIRONMENTAL", "ENVR",
                           "ENVIRONMENT", "ENVR",
                           "INDICATOR", "INDI",
                           "LOCALITY", "LOCA",
                           "AFFILIATION", "AFFL",
                           "AFFILIATE", "AFFL",
                           "SUPPLEMENTAL", "SUPP",
                           "MAILING", "MAIL",
                           "INTEREST", "INTR",
                           "INDIVIDUAL", "INDV",
                           "ORGANIZATION", "ORG",
                           "ALTERNATIVE", "ALT",
                           "ELECTRONIC", "ELEC",
                           "TELEPHONE", "TELE",
                           "VERIFICATION", "VERF",
                           "COORDINATE", "CORD",
                           "COMMENTS", "COMM",
                           "STATUS", "STAT",
                           "UPDATED", "UPDT",
                           "EXTENSION", "EXT",
                           "DETERMINE", "DETR",
                           "NAICSCODE", "NAICS_CODE",
                           "QUALIFIER", "QUAL",
                           "QUALIFICATION", "QUAL",
                           "NAICSPRIMARY", "NAICS_PRI",
                           "SICPRIMARY", "SIC_PRI",
                           "SICCODE", "SIC_CODE",
                           "SUMMARY", "SUMM",
                           "TRIBAL", "TRIB",
                           "DIMENSION", "DIM",
                           "DETAILS", "DTLS",
                           "POSITION", "POS",
                           "MEASURE", "MEAS"
                           )]
    [DefaultStringDbValues(DbType.AnsiString, 255)]

    [DefaultElementNamePostfixLengthsAttribute(
                                              "AffiliateIdentifier", "255",
                                              "Text", "255",
                                              "Name", "128",
                                              "Code", "50",
                                              "Value", "50",
                                              "CodeContext", "50",
                                              "Identifier", "50",
                                              "UnitName", "50",
                                              "PrecisionText", "50",
                                              "Number", "20",
                                              "Version", "20",
                                              "NumberText", "20",
                                              "IndividualFullName", "255",
                                              "srsDimension", "10",
                                              "srsName", "255"
                                              )]
    [DefaultTableNamePrefixAttribute("FACID")]

    [DefaultDecimalPrecision(19, 14)]

    [AppliedAttribute(typeof(FacilityDetailsDataType), "schemaVersion", typeof(DbIgnoreAttribute))]
    [AppliedAttribute(typeof(FacilityIndexDataType), "schemaVersion", typeof(DbIgnoreAttribute))]
    [AppliedAttribute(typeof(FacilityInterestDataType), "schemaVersion", typeof(DbIgnoreAttribute))]
    [AppliedAttribute(typeof(DirectPositionType), "Text", typeof(DbIgnoreAttribute))]
    [AppliedAttribute(typeof(DirectPositionListType), "Text", typeof(DbIgnoreAttribute))]
    [AppliedAttribute(typeof(AbstractGMLType), "id", typeof(DbIgnoreAttribute))]
    [AppliedAttribute(typeof(DirectPositionType), "srsName", typeof(DbIgnoreAttribute))]
    [AppliedAttribute(typeof(DirectPositionType), "srsDimension", typeof(DbIgnoreAttribute))]
    [AppliedAttribute(typeof(FacilityDataType), "FacilityPrimaryGeographicLocationDescription", typeof(OneToOneAttribute))]
    [AppliedAttribute(typeof(AddressPostalCodeDataType), "Value", typeof(ColumnAttribute), "ADDR_POST_CODE_VAL")]
    [AppliedAttribute(typeof(AgencyTypeCodeListIdentifierDataType), "Value", typeof(ColumnAttribute), "CODE_LST_VER_VAL")]
    [AppliedAttribute(typeof(CoordinateDataSourceCodeListIdentifierDataType), "Value", typeof(ColumnAttribute), "CODE_LST_VER_VAL")]
    [AppliedAttribute(typeof(CountryCodeListIdentifierDataType), "Value", typeof(ColumnAttribute), "CODE_LST_VER_VAL")]
    [AppliedAttribute(typeof(CountyCodeListIdentifierDataType), "Value", typeof(ColumnAttribute), "CODE_LST_VER_VAL")]
    [AppliedAttribute(typeof(FacilitySiteIdentifierDataType), "Value", typeof(ColumnAttribute), "FAC_SITE_IDEN_VAL")]
    [AppliedAttribute(typeof(FacilitySiteTypeCodeListIdentifierDataType), "Value", typeof(ColumnAttribute), "CODE_LST_VER_VAL")]
    [AppliedAttribute(typeof(IndividualIdentifierDataType), "Value", typeof(ColumnAttribute), "INDV_IDEN_VAL")]
    [AppliedAttribute(typeof(MeasureUnitCodeListIdentifierDataType), "Value", typeof(ColumnAttribute), "CODE_LST_VER_VAL")]
    [AppliedAttribute(typeof(MethodIdentifierCodeListIdentifierDataType), "Value", typeof(ColumnAttribute), "CODE_LST_VER_VAL")]
    [AppliedAttribute(typeof(OrganizationIdentifierDataType), "Value", typeof(ColumnAttribute), "ORG_IDEN_VAL")]
    [AppliedAttribute(typeof(ReferencePointCodeListIdentifierDataType), "Value", typeof(ColumnAttribute), "CODE_LST_VER_VAL")]
    [AppliedAttribute(typeof(ResultQualifierCodeListIdentifierDataType), "Value", typeof(ColumnAttribute), "CODE_LST_VER_VAL")]
    [AppliedAttribute(typeof(StateCodeListIdentifierDataType), "Value", typeof(ColumnAttribute), "CODE_LST_VER_VAL")]
    [AppliedAttribute(typeof(FacilitySiteIdentifierDataType), "Value", typeof(DbIndexableAttribute))]
    [AppliedAttribute(typeof(FacilitySiteIdentityDataType), "FacilitySiteName", typeof(DbIndexableAttribute))]
    [AppliedAttribute(typeof(AddressPostalCodeDataType), "Value", typeof(DbIndexableAttribute))]
    [AppliedAttribute(typeof(LocationAddressDataType), "LocalityName", typeof(DbIndexableAttribute))]
    [AppliedAttribute(typeof(StateIdentityDataType), "StateCode", typeof(DbIndexableAttribute))]
    [AppliedAttribute(typeof(CountyIdentityDataType), "CountyName", typeof(DbIndexableAttribute))]
    [AppliedAttribute(typeof(DataSourceDataType), "OriginatingPartnerName", typeof(DbIndexableAttribute))]
    [AppliedAttribute(typeof(DataSourceDataType), "InformationSystemAcronymName", typeof(DbIndexableAttribute))]
    [AppliedAttribute(typeof(DataSourceDataType), "LastUpdatedDate", typeof(DbIndexableAttribute))]
    [AppliedAttribute(typeof(LatLongElev), "Latitude", typeof(DbIndexableAttribute))]
    [AppliedAttribute(typeof(LatLongElev), "Longitude", typeof(DbIndexableAttribute))]
    [AppliedAttribute(typeof(LatLongElev), "Elevation", typeof(DbIndexableAttribute))]
    [AppliedAttribute(typeof(PositionDataType), "Latitude", typeof(DbIndexableAttribute))]
    [AppliedAttribute(typeof(PositionDataType), "Longitude", typeof(DbIndexableAttribute))]
    [AppliedAttribute(typeof(PositionDataType), "Elevation", typeof(DbIndexableAttribute))]

    [Table]
    public partial class FacilityDetailsDataType : IBeforeSaveToDatabase, IAfterLoadFromDatabase
    {
        [System.Xml.Serialization.XmlIgnore]
        [GuidPrimaryKey]
        public string FacilityDetailsId;

        public void BeforeSaveToDatabase()
        {
            ProcessPoints(true);
        }
        public void AfterLoadFromDatabase()
        {
            ProcessPoints(false);
        }
        protected void ProcessPoints(bool isBeforeSaveToDatabase)
        {
            // Clean up Point data
            if (FacilityList != null)
            {
                foreach (FacilityDataType facilityDataType in FacilityList)
                {
                    if ((facilityDataType.FacilityPrimaryGeographicLocationDescription != null) &&
                        (facilityDataType.FacilityPrimaryGeographicLocationDescription.Point != null))
                    {
                        if (isBeforeSaveToDatabase)
                        {
                            facilityDataType.FacilityPrimaryGeographicLocationDescription.Point.BeforeSaveToDatabase();
                        }
                        else
                        {
                            facilityDataType.FacilityPrimaryGeographicLocationDescription.Point.AfterLoadFromDatabase();
                        }
                    }
                    if (facilityDataType.FacilityGeographicLocationList != null)
                    {
                        foreach (FacilityGeographicLocationDescriptionDataType facilityGeographicLocationDescriptionDataType in
                            facilityDataType.FacilityGeographicLocationList)
                        {
                            if (isBeforeSaveToDatabase)
                            {
                                facilityGeographicLocationDescriptionDataType.BeforeSaveToDatabase();
                            }
                            else
                            {
                                facilityGeographicLocationDescriptionDataType.AfterLoadFromDatabase();
                            }
                            if ((facilityGeographicLocationDescriptionDataType.Point != null))
                            {
                                if (isBeforeSaveToDatabase)
                                {
                                    facilityGeographicLocationDescriptionDataType.Point.BeforeSaveToDatabase();
                                }
                                else
                                {
                                    facilityGeographicLocationDescriptionDataType.Point.AfterLoadFromDatabase();
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    [Table]
    public partial class FacilityDataType
    {
        [System.Xml.Serialization.XmlIgnore]
        [GuidPrimaryKey(IndexName="PK_FACILITY_ID")]
        public string FacilityId;

        [System.Xml.Serialization.XmlIgnore]
        [GuidForeignKey]
        public string FacilityDetailsId;

        [System.Xml.Serialization.XmlIgnore]
        [System.ComponentModel.DescriptionAttribute("The web address where a computer user can access information about the facility.")]
        // TSM: Added
        public string FacilityURLText;

        [System.Xml.Serialization.XmlIgnore]
        [System.ComponentModel.DescriptionAttribute("The date that this facility was deleted, or null if the facility has not been deleted.")]
        // TSM: Added
        public DateTime DeletedOnDate;

        [System.Xml.Serialization.XmlIgnore]
        // TSM: Added
        public bool DeletedOnDateSpecified;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order = 7)]
        [System.ComponentModel.DescriptionAttribute("A designator that indicates whether the Facility is currently consi" +
            "dered to active.")]
        [System.Xml.Serialization.XmlIgnore]
        // TSM: Added
        public YesNoIndicatorDataType FacilityActiveIndicator;

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnore]
        // TSM: Added
        public bool FacilityActiveIndicatorSpecified;
    }
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.exchangenetwork.net/schema/facilityid/3")]
    [System.Xml.Serialization.XmlRootAttribute("Affiliate", Namespace = "http://www.exchangenetwork.net/schema/facilityid/3", IsNullable = false)]
    [Table]
    public partial class AffiliateDataType
    {
        [System.Xml.Serialization.XmlIgnore]
        [GuidPrimaryKey]
        public string AffiliateId;

        [System.Xml.Serialization.XmlIgnore]
        [GuidForeignKey]
        public string FacilityDetailsId;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        [System.ComponentModel.DescriptionAttribute("A number used to uniquely identify a Affiliate, which contains data for one indiv" +
            "idual or organization.")]
        [Column(ColumnAttribute.NotNull)]
        public string AffiliateIdentifier;

        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order = 1)]
        [System.Xml.Serialization.XmlArrayItemAttribute("Telephonic", IsNullable = false)]
        [System.ComponentModel.DescriptionAttribute("A container for one or more telephone numbers.")]
        public TelephonicDataType[] TelephonicList;

        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order = 2)]
        [System.Xml.Serialization.XmlArrayItemAttribute("ElectronicAddress", IsNullable = false)]
        [System.ComponentModel.DescriptionAttribute("A container for one or more electronic addresses.")]
        public AffiliateElectronicAddressDataType[] ElectronicAddressList;

        /// <remarks/>
        //[System.Xml.Serialization.XmlElementAttribute("IndividualIdentity", typeof(IndividualIdentityDataType))]
        //[System.Xml.Serialization.XmlElementAttribute("OrganizationIdentity", typeof(OrganizationIdentityDataType))]
        //public object Item;

        [System.Xml.Serialization.XmlElementAttribute(Order = 3)]
        public IndividualIdentityDataType IndividualIdentity;

        [System.Xml.Serialization.XmlElementAttribute(Order = 4)]
        public OrganizationIdentityDataType OrganizationIdentity;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order = 5)]
        [System.ComponentModel.DescriptionAttribute("The standard address used to send mail to an individual or organization.")]
        public MailingAddressDataType MailingAddress;
    }

    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.exchangenetwork.net/schema/facilityid/3")]
    [System.Xml.Serialization.XmlRootAttribute("IndividualIdentity", Namespace = "http://www.exchangenetwork.net/schema/facilityid/3", IsNullable = false)]
    public partial class IndividualIdentityDataType
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        [System.ComponentModel.DescriptionAttribute("A designator used to uniquely identify an individual within a context.")]
        public IndividualIdentifierDataType IndividualIdentifier;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        [System.ComponentModel.DescriptionAttribute("The title held by a person in an organization.")]
        public string IndividualTitleText;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
        [System.ComponentModel.DescriptionAttribute("The text that describes the title that precedes an individual\'s name.")]
        public string NamePrefixText;

        /// <remarks/>
        //[System.Xml.Serialization.XmlElementAttribute("FirstName", typeof(string))]
        //[System.Xml.Serialization.XmlElementAttribute("IndividualFullName", typeof(string))]
        //[System.Xml.Serialization.XmlElementAttribute("LastName", typeof(string))]
        //[System.Xml.Serialization.XmlElementAttribute("MiddleName", typeof(string))]
        //[System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemsElementName")]
        //public string[] Items;

        /// <remarks/>
        //[System.Xml.Serialization.XmlElementAttribute("ItemsElementName")]
        //[System.Xml.Serialization.XmlIgnoreAttribute()]
        //public ItemsChoiceType1[] ItemsElementName;

        [System.Xml.Serialization.XmlElementAttribute(Order = 3)]
        public string IndividualFullName;

        [System.Xml.Serialization.XmlElementAttribute(Order = 4)]
        public string FirstName;

        [System.Xml.Serialization.XmlElementAttribute(Order = 5)]
        public string MiddleName;

        [System.Xml.Serialization.XmlElementAttribute(Order = 6)]
        public string LastName;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order = 7)]
        [System.ComponentModel.DescriptionAttribute("Additional title that indicates lineage or professional title.")]
        public string NameSuffixText;
    }

    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.exchangenetwork.net/schema/facilityid/3")]
    [System.Xml.Serialization.XmlRootAttribute("FacilityGeographicLocationDescription", Namespace = "http://www.exchangenetwork.net/schema/facilityid/3", IsNullable = false)]
    [Table]
    public partial class FacilityGeographicLocationDescriptionDataType
    {
        [System.Xml.Serialization.XmlIgnore]
        [GuidPrimaryKey]
        public string FacilityGeographicLocationDescriptionId;

        [System.Xml.Serialization.XmlIgnore]
        [GuidForeignKey]
        public string FacilityId;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Envelope", typeof(EnvelopeType), Namespace = "http://www.opengis.net/gml", Order = 0)]
        [System.Xml.Serialization.XmlElementAttribute("LineString", typeof(LineStringType), Namespace = "http://www.opengis.net/gml", Order = 0)]
//        [System.Xml.Serialization.XmlElementAttribute("Point", typeof(PointType), Namespace = "http://www.opengis.net/gml", Order = 0)]
        [System.Xml.Serialization.XmlElementAttribute("Polygon", typeof(PolygonType), Namespace = "http://www.opengis.net/gml", Order = 0)]
        [DbIgnore]
        public object Item;

        [System.Xml.Serialization.XmlElementAttribute(Namespace = "http://www.opengis.net/gml", Order = 1)]
        public PointType Point;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType = "nonNegativeInteger", Order = 2)]
        [System.ComponentModel.DescriptionAttribute("The number that represents the proportional distance on the ground for one unit o" +
            "f measure on the map or photo.")]
        public string SourceMapScaleNumber;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order = 3)]
        [System.ComponentModel.DescriptionAttribute("The measure of the accuracy of the latitude and longitude coordinates.")]
        public MeasureDataType HorizontalAccuracyMeasure;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order = 4)]
        [System.ComponentModel.DescriptionAttribute("Information that describes the method used to determine the latitude and longitud" +
            "e coordinates for a point on the earth.")]
        public ReferenceMethodDataType HorizontalCollectionMethod;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order = 5)]
        [System.ComponentModel.DescriptionAttribute("A designator and associated metadata used to identify a geographic reference poin" +
            "t.")]
        public GeographicReferencePointDataType GeographicReferencePoint;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType = "date", Order = 6)]
        [System.ComponentModel.DescriptionAttribute("The calendar date when data were collected.")]
        public System.DateTime DataCollectionDate;

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DataCollectionDateSpecified;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order = 7)]
        [System.ComponentModel.DescriptionAttribute("The text that provides additional information about the geographic coordinates.")]
        public string LocationCommentsText;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order = 8)]
        [System.ComponentModel.DescriptionAttribute("Information that describes the method used to collect the vertical measure(i.e., " +
            "the altitude) of a reference point.")]
        public ReferenceMethodDataType VerticalCollectionMethod;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order = 9)]
        [System.ComponentModel.DescriptionAttribute("Information that describes the method or process used to verify the latitude and " +
            "longitude coordinates.")]
        public ReferenceMethodDataType VerificationMethod;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order = 10)]
        [System.ComponentModel.DescriptionAttribute("A designator and associated metadata used to identify a data source of coordinate" +
            " data.")]
        public CoordinateDataSourceDataType CoordinateDataSource;

        [XmlIgnore]
        [OneToOne]
        public ShapeDataType Shape;

        public void BeforeSaveToDatabase()
        {
            if (Item == null)
            {
                return;
            }
            if (Shape != null)
            {
                return;
            }
            if (Item is EnvelopeType)
            {
                EnvelopeType envelopeType = Item as EnvelopeType;
                Shape = new ShapeDataType(ShapeType.Envelope, envelopeType.srsName, envelopeType.srsDimension);
                if ((envelopeType.Items == null) || (envelopeType.Items.Length != 2))
                {
                    throw new MappingException("envelopeType.Items is invalid");
                }
                if ((envelopeType.ItemsElementName == null) || (envelopeType.ItemsElementName.Length != 2))
                {
                    throw new MappingException("envelopeType.ItemsElementName is invalid");
                }
                DirectPositionType lower, upper;
                if ((envelopeType.ItemsElementName[0] == ItemsChoiceType.lowerCorner) &&
                    (envelopeType.ItemsElementName[1] == ItemsChoiceType.upperCorner))
                {
                    lower = envelopeType.Items[0];
                    upper = envelopeType.Items[1];
                }
                else if ((envelopeType.ItemsElementName[1] == ItemsChoiceType.lowerCorner) &&
                         (envelopeType.ItemsElementName[0] == ItemsChoiceType.upperCorner))
                {
                    lower = envelopeType.Items[1];
                    upper = envelopeType.Items[0];
                }
                else
                {
                    throw new MappingException("Invalid envelopeType.ItemsElementName: {0} and {1}", 
                                               envelopeType.ItemsElementName[0].ToString(),
                                               envelopeType.ItemsElementName[1].ToString());
                }
                if (string.IsNullOrEmpty(Shape.srsDimension))
                {
                    Shape.srsDimension = lower.srsDimension;
                }
                if (string.IsNullOrEmpty(Shape.srsName))
                {
                    Shape.srsName = lower.srsName;
                }
                Shape.Positions = new PositionDataType[2];
                Shape.Positions[0] = PositionDataType.FromDirectPositionType(lower, Shape.srsDimension, 0);
                Shape.Positions[1] = PositionDataType.FromDirectPositionType(upper, Shape.srsDimension, 1);
            }
            else if (Item is LineStringType)
            {
                LineStringType lineStringType = Item as LineStringType;
                Shape = new ShapeDataType(ShapeType.LineString, lineStringType.srsName, lineStringType.srsDimension);

                if (lineStringType.Item == null)
                {
                    throw new MappingException("lineStringType.Item is null");
                }
                if (string.IsNullOrEmpty(Shape.srsName))
                {
                    Shape.srsName = lineStringType.Item.srsName;
                }
                if (string.IsNullOrEmpty(Shape.srsDimension))
                {
                    Shape.srsDimension = lineStringType.Item.srsDimension;
                }
                int count = 0;
                int.TryParse(lineStringType.Item.count, out count);
                Shape.CreatePositions(Shape.srsDimension, count, lineStringType.Item.Text);
            }
            else if (Item is PolygonType)
            {
                PolygonType polygonType = Item as PolygonType;
                Shape = new ShapeDataType(ShapeType.Polygon, polygonType.srsName, polygonType.srsDimension);

                if (polygonType.exterior == null)
                {
                    throw new MappingException("lineStringType.Item is null");
                }
                if (polygonType.exterior.Item == null)
                {
                    throw new MappingException("polygonType.exterior.Item");
                }
                if (string.IsNullOrEmpty(Shape.srsName))
                {
                    Shape.srsName = polygonType.exterior.Item.srsName;
                }
                if (string.IsNullOrEmpty(Shape.srsDimension))
                {
                    Shape.srsDimension = polygonType.exterior.Item.srsDimension;
                }
                if (polygonType.exterior.Item.Item == null)
                {
                    throw new MappingException("polygonType.exterior.Item.Item");
                }
                if (string.IsNullOrEmpty(Shape.srsName))
                {
                    Shape.srsName = polygonType.exterior.Item.Item.srsName;
                }
                if (string.IsNullOrEmpty(Shape.srsDimension))
                {
                    Shape.srsDimension = polygonType.exterior.Item.Item.srsDimension;
                }
                int count = 0;
                int.TryParse(polygonType.exterior.Item.Item.count, out count);
                Shape.CreatePositions(Shape.srsDimension, 0, polygonType.exterior.Item.Item.Text);
            }
            else
            {
                throw new MappingException("Item is invalid type: {0}");
            }
        }
        public void AfterLoadFromDatabase()
        {
            if (Shape == null)
            {
                return;
            }
            if (Item != null)
            {
                return;
            }
            switch (Shape.Type)
            {
                case ShapeType.Envelope:
                    {
                        EnvelopeType envelopeType = new EnvelopeType();
                        envelopeType.srsName = Shape.srsName;
                        envelopeType.srsDimension = Shape.srsDimension;
                        if (!CollectionUtils.IsNullOrEmpty(Shape.Positions))
                        {
                            Array.Sort(Shape.Positions);
                            int posCount = 2;
                            envelopeType.Items = new DirectPositionType[posCount];
                            for (int i = 0; i < posCount; ++i)
                            {
                                envelopeType.Items[i] = new DirectPositionType();
                                envelopeType.Items[i].Text = Shape.Positions[i].ToString();
                            }
                            envelopeType.ItemsElementName = new ItemsChoiceType[2];
                            envelopeType.ItemsElementName[0] = ItemsChoiceType.lowerCorner;
                            envelopeType.ItemsElementName[1] = ItemsChoiceType.upperCorner;
                        }
                        Item = envelopeType;
                    }
                    break;
                case ShapeType.LineString:
                    {
                        LineStringType lineStringType = new LineStringType();
                        lineStringType.srsName = Shape.srsName;
                        lineStringType.srsDimension = Shape.srsDimension;
                        lineStringType.Item = new DirectPositionListType();
                        lineStringType.Item.count = (Shape.Positions == null) ? null : Shape.Positions.Length.ToString();
                        Array.Sort(Shape.Positions);
                        lineStringType.Item.Text = Shape.GetPositionsText();
                        Item = lineStringType;
                    }
                    break;
                case ShapeType.Polygon:
                    {
                        PolygonType polygonType = new PolygonType();
                        polygonType.srsName = Shape.srsName;
                        polygonType.srsDimension = Shape.srsDimension;
                        polygonType.exterior = new AbstractRingPropertyType();
                        polygonType.exterior.Item = new LinearRingType();
                        polygonType.exterior.Item.Item = new DirectPositionListType();
                        polygonType.exterior.Item.Item.count = (Shape.Positions == null) ? null : Shape.Positions.Length.ToString();
                        Array.Sort(Shape.Positions);
                        polygonType.exterior.Item.Item.Text = Shape.GetPositionsText();
                        Item = polygonType;
                    }
                    break;
                default:
                    throw new MappingException("Unrecognized shape type: \"{0}\"",
                                               Shape.Type.ToString());
            }
        }
    }

    [Table]
    public partial class EnvironmentalInterestDataType
    {
        [System.Xml.Serialization.XmlIgnore]
        [GuidPrimaryKey]
        public string EnvironmentalInterestId;

        [System.Xml.Serialization.XmlIgnore]
        [GuidForeignKey]
        public string FacilityId;

        [System.Xml.Serialization.XmlIgnore]
        [System.ComponentModel.DescriptionAttribute("The web address where a computer user can access information about the facility.")]
        // TSM: Added
        public string EnvironmentalInterestURLText;
    }
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.exchangenetwork.net/schema/facilityid/3")]
    [System.Xml.Serialization.XmlRootAttribute("ElectronicAddress", Namespace = "http://www.exchangenetwork.net/schema/facilityid/3", IsNullable = false)]
    [Table]
    public partial class EnvironmentalInterestElectronicAddressDataType
    {
        [System.Xml.Serialization.XmlIgnore]
        [GuidPrimaryKey]
        public string EnvironmentalInterestElectronicAddressId;

        [System.Xml.Serialization.XmlIgnore]
        [GuidForeignKey]
        public string EnvironmentalInterestId;

        /// <remarks/>
        public string ElectronicAddressText;

        /// <remarks/>
        public ElectronicAddressTypeNameDataType ElectronicAddressTypeName;

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ElectronicAddressTypeNameSpecified;
    }


    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.exchangenetwork.net/schema/facilityid/3")]
    [System.Xml.Serialization.XmlRootAttribute("ElectronicAddress", Namespace = "http://www.exchangenetwork.net/schema/facilityid/3", IsNullable = false)]
    [Table]
    public partial class FacilityElectronicAddressDataType
    {
        [System.Xml.Serialization.XmlIgnore]
        [GuidPrimaryKey]
        public string FacilityElectronicAddressId;

        [System.Xml.Serialization.XmlIgnore]
        [GuidForeignKey]
        public string FacilityId;

        /// <remarks/>
        public string ElectronicAddressText;

        /// <remarks/>
        public ElectronicAddressTypeNameDataType ElectronicAddressTypeName;

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ElectronicAddressTypeNameSpecified;
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.exchangenetwork.net/schema/facilityid/3")]
    [System.Xml.Serialization.XmlRootAttribute("ElectronicAddress", Namespace = "http://www.exchangenetwork.net/schema/facilityid/3", IsNullable = false)]
    [Table]
    public partial class AffiliateElectronicAddressDataType
    {
        [System.Xml.Serialization.XmlIgnore]
        [GuidPrimaryKey]
        public string AffiliateElectronicAddressId;

        [System.Xml.Serialization.XmlIgnore]
        [GuidForeignKey]
        public string AffiliateId;

        /// <remarks/>
        public string ElectronicAddressText;

        /// <remarks/>
        public ElectronicAddressTypeNameDataType ElectronicAddressTypeName;

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ElectronicAddressTypeNameSpecified;
    }

    [Table]
    public partial class TelephonicDataType
    {
        [System.Xml.Serialization.XmlIgnore]
        [GuidPrimaryKey]
        public string TelephonicId;

        [System.Xml.Serialization.XmlIgnore]
        [GuidForeignKey]
        public string AffiliateId;
    }

    [Table]
    public partial class AlternativeNameDataType
    {
        [System.Xml.Serialization.XmlIgnore]
        [GuidPrimaryKey]
        public string AlternativeNameId;

        [System.Xml.Serialization.XmlIgnore]
        [GuidForeignKey]
        public string FacilityId;
    }
    [Table]
    public partial class FacilitySummaryDataType
    {
        [System.Xml.Serialization.XmlIgnore]
        [GuidPrimaryKey]
        public string FacilitySummaryId;

        [System.Xml.Serialization.XmlIgnore]
        [GuidForeignKey]
        public string FacilityIndexId;
    }
    [Table]
    public partial class FacilityInterestSummaryDataType
    {
        [System.Xml.Serialization.XmlIgnore]
        [GuidPrimaryKey]
        public string FacilityInterestSummaryId;

        [System.Xml.Serialization.XmlIgnore]
        [GuidForeignKey]
        public string FacilityInterestId;
    }
    [Table]
    public partial class EnvironmentalInterestSummaryDataType
    {
        [System.Xml.Serialization.XmlIgnore]
        [GuidPrimaryKey]
        public string EnvironmentalInterestSummaryId;

        [System.Xml.Serialization.XmlIgnore]
        [GuidForeignKey]
        public string FacilityInterestSummaryId;
    }
    [Table]
    public partial class FacilityPrimaryGeographicLocationDescriptionDataType
    {
        [System.Xml.Serialization.XmlIgnore]
        [GuidPrimaryKey]
        public string FacilityPrimaryGeographicLocationDescriptionId;

        [System.Xml.Serialization.XmlIgnore]
        [GuidForeignKey]
        public string FacilityId;
    }

    public class LatLongElev
    {
        public LatLongElev()
        {
        }
        public LatLongElev(decimal latitude, decimal longitude)
        {
            Latitude = latitude;
            Longitude = longitude;
        }
        [XmlIgnore]
        public decimal Latitude;

        [XmlIgnore]
        public decimal Longitude;

        [XmlIgnore]
        public decimal Elevation;

        [XmlIgnore]
        public bool ElevationSpecified;

        public static string DecToStr(decimal value)
        {
            return value.ToString().TrimEnd('0').TrimEnd('.');
        }
        public override string ToString()
        {
            if (ElevationSpecified)
            {
                return string.Format("{0} {1} {2}", DecToStr(Latitude), DecToStr(Longitude),
                                     DecToStr(Elevation));
            }
            else
            {
                return string.Format("{0} {1}", DecToStr(Latitude), DecToStr(Longitude));
            }
        }
        public void InitFromText(string latLongText, string srsDimension)
        {
            if (string.IsNullOrEmpty(latLongText))
            {
                throw new MappingException("string.IsNullOrEmpty(latLongText)");
            }
            if (string.IsNullOrEmpty(srsDimension))
            {
                srsDimension = "2";
                // Assume 2 if not specified
//                throw new MappingException("string.IsNullOrEmpty(srsDimension)");
            }
            decimal[] decimals = LatLongElev.ParseDecimalText(latLongText);

            if (srsDimension == "2")
            {
                if (decimals.Length != 2)
                {
                    throw new MappingException("srsDimension == 2, but digitsStrings.Length == {0}, {1}",
                                               decimals.Length, latLongText);
                }
                ElevationSpecified = false;
            }
            else if (srsDimension == "3")
            {
                if (decimals.Length != 3)
                {
                    throw new MappingException("srsDimension == 3, but digitsStrings.Length == {0}, {1}",
                                               decimals.Length, latLongText);
                }
                ElevationSpecified = true;
                Elevation = decimals[2];
            }
            else
            {
                throw new MappingException("srsDimension not supported: {0}",
                                           srsDimension);
            }
            Latitude = decimals[0];
            Longitude = decimals[1];
        }
        public static LatLongElev FromText(string latLongText, string srsDimension)
        {
            LatLongElev latLongElev = new LatLongElev();
            latLongElev.InitFromText(latLongText, srsDimension);
            return latLongElev;
        }
        public static decimal[] ParseDecimalText(string text)
        {
            string trimmedText = text.Trim();
            if (string.IsNullOrEmpty(text))
            {
                return null;
            }
            string[] elements = trimmedText.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);
            if (elements.Length == 0)
            {
                return null;
            }
            List<decimal> decimals = new List<decimal>(elements.Length);
            foreach (string element in elements)
            {
                string decimalString = element.Trim();
                if (string.IsNullOrEmpty(decimalString))
                {
                    continue;
                }
                decimal value;
                if (!decimal.TryParse(decimalString, out value))
                {
                    throw new MappingException("Failed to parse decimal value \"{0}\" from text \"{1}\"",
                                               decimalString, text);
                }
                decimals.Add(value);
            }
            return decimals.ToArray();
        }
    }

    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.opengis.net/gml")]
    [System.Xml.Serialization.XmlRootAttribute("Point", Namespace = "http://www.opengis.net/gml", IsNullable = false)]
    public partial class PointType : AbstractGeometricPrimitiveType
    {
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("pos")]
        public DirectPositionType Item;

        [XmlIgnore]
        public LatLongElev LatLongElev;

        public void BeforeSaveToDatabase()
        {
            if (Item != null)
            {
                if (!string.IsNullOrEmpty(Item.srsName))
                {
                    this.srsName = Item.srsName;
                }
                else
                {
                    Item.srsName = this.srsName;
                }
                if (!string.IsNullOrEmpty(Item.srsDimension))
                {
                    this.srsDimension = Item.srsDimension;
                }
                else
                {
                    Item.srsDimension = this.srsDimension;
                }
                if (LatLongElev == null)
                {
                    LatLongElev = LatLongElev.FromText(Item.Text, srsDimension);
                }
            }
        }
        public void AfterLoadFromDatabase()
        {
            if (LatLongElev != null)
            {
                if (Item == null)
                {
                    Item = new DirectPositionType();
                }
                Item.Text = LatLongElev.ToString();
            }
        }
    }

    [Table]
    public class PositionDataType : LatLongElev, IComparable<PositionDataType>
    {
        [System.Xml.Serialization.XmlIgnore]
        [GuidPrimaryKey]
        public string PositionId;

        [System.Xml.Serialization.XmlIgnore]
        [GuidForeignKey]
        public string ShapeId;

        [Column(ColumnAttribute.NotNull)]
        [XmlIgnore]
        public int OrderIndex;

        public int CompareTo(PositionDataType other)
        {
            return (this.OrderIndex - other.OrderIndex);
        }
        public override int GetHashCode()
        {
            return OrderIndex;
        }
        public static PositionDataType FromDirectPositionType(DirectPositionType directPositionType,
                                                              string srsDimension, int orderIndex)
        {
            if (directPositionType == null)
            {
                throw new MappingException("directPositionType == null");
            }
            if (string.IsNullOrEmpty(directPositionType.Text))
            {
                throw new MappingException("string.IsNullOrEmpty(directPositionType.Text)");
            }
            PositionDataType positionDataType = new PositionDataType();
            positionDataType.InitFromText(directPositionType.Text, srsDimension);
            positionDataType.OrderIndex = orderIndex;
            return positionDataType;
        }
    }
    public enum ShapeType
    {
        Envelope,
        LineString,
        Polygon
    }
    [Table]
    public partial class ShapeDataType
    {
        public ShapeDataType()
        {
        }
        public ShapeDataType(ShapeType type, string name, string dimension)
        {
            Type = type;
            srsName = name;
            srsDimension = dimension;
        }

        [System.Xml.Serialization.XmlIgnore]
        [GuidPrimaryKey]
        public string ShapeId;

        [System.Xml.Serialization.XmlIgnore]
        [GuidForeignKey]
        public string FacilityGeographicLocationDescriptionId;

        [System.Xml.Serialization.XmlIgnore]
        [Column(ColumnAttribute.NotNull)]
        public ShapeType Type;

        [System.Xml.Serialization.XmlIgnore]
        public string srsName;

        [System.Xml.Serialization.XmlIgnore]
        public string srsDimension;

        [System.Xml.Serialization.XmlIgnore]
        public PositionDataType[] Positions;

        public void CreatePositions(string dimension, int count, string text)
        {
            if (string.IsNullOrEmpty(text))
            {
                throw new MappingException("string.IsNullOrEmpty(text)");
            }
            if (count < 0)
            {
                throw new MappingException("count is invalid: {0}", count.ToString());
            }
            decimal[] decimals = LatLongElev.ParseDecimalText(text);
            if (string.IsNullOrEmpty(srsDimension))
            {
                srsDimension = "2";
                // Assume 2 if not specified
            }

            bool elevationSpecified;
            if (srsDimension == "2")
            {
                if (count == 0)
                {
                    count = decimals.Length / 2;
                }
                if (decimals.Length != (2 * count))
                {
                    throw new MappingException("decimals.Length ({0}) != (2 * count) ({1})",
                                               decimals.Length, count);
                }
                elevationSpecified = false;
            }
            else if (srsDimension == "3")
            {
                if (count == 0)
                {
                    count = decimals.Length / 3;
                }
                if (decimals.Length != (3 * count))
                {
                    throw new MappingException("decimals.Length ({0}) != (3 * count) ({1})",
                                               decimals.Length, count);
                }
                elevationSpecified = true;
            }
            else
            {
                throw new MappingException("srsDimension not supported: {0}",
                                           srsDimension);
            }
            Positions = new PositionDataType[count];
            for (int i = 0, curDecimalIndex = 0; i < count; ++i)
            {
                PositionDataType positionDataType = new PositionDataType();
                positionDataType.Latitude = decimals[curDecimalIndex];
                positionDataType.Longitude = decimals[curDecimalIndex + 1];
                if (elevationSpecified)
                {
                    positionDataType.Elevation = decimals[curDecimalIndex + 2];
                    positionDataType.ElevationSpecified = true;
                    curDecimalIndex += 3;
                }
                else
                {
                    curDecimalIndex += 2;
                }
                positionDataType.OrderIndex = i;
                Positions[i] = positionDataType;
            }
        }
        public string GetPositionsText()
        {
            if (CollectionUtils.IsNullOrEmpty(Positions))
            {
                return null;
            }
            StringBuilder sb = new StringBuilder();
            foreach (PositionDataType positionDataType in Positions)
            {
                if (sb.Length > 0)
                {
                    sb.Append(' ');
                }
                sb.Append(positionDataType.ToString());
            }
            return sb.ToString();
        }
    }

    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.exchangenetwork.net/schema/facilityid/3")]
    [System.Xml.Serialization.XmlRootAttribute("AlternativeIdentification", Namespace = "http://www.exchangenetwork.net/schema/facilityid/3", IsNullable = false)]
    [Table]
    public partial class EnvironmentalInterestAlternativeIdentificationDataType
    {
        [System.Xml.Serialization.XmlIgnore]
        [GuidPrimaryKey]
        public string EnvironmentalInterestAlternativeIdentificationId;

        [System.Xml.Serialization.XmlIgnore]
        [GuidForeignKey]
        public string EnvironmentalInterestId;

        /// <remarks/>
        [System.ComponentModel.DescriptionAttribute("An alternative, historic or program specific identifier for the facility site or " +
            "environmental interest.")]
        public string AlternativeIdentificationIdentifier;

        /// <remarks/>
        [System.ComponentModel.DescriptionAttribute("The type of the alternative, historical, or program-specific identifier for the f" +
            "acility site or environmental interest. ")]
        public string AlternativeIdentificationTypeText;
    }

    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.exchangenetwork.net/schema/facilityid/3")]
    [System.Xml.Serialization.XmlRootAttribute("AlternativeIdentification", Namespace = "http://www.exchangenetwork.net/schema/facilityid/3", IsNullable = false)]
    [Table]
    public partial class FacilityAlternativeIdentificationDataType
    {
        [System.Xml.Serialization.XmlIgnore]
        [GuidPrimaryKey]
        public string FacilityAlternativeIdentificationId;

        [System.Xml.Serialization.XmlIgnore]
        [GuidForeignKey]
        public string FacilityId;

        /// <remarks/>
        [System.ComponentModel.DescriptionAttribute("An alternative, historic or program specific identifier for the facility site or " +
            "environmental interest.")]
        public string AlternativeIdentificationIdentifier;

        /// <remarks/>
        [System.ComponentModel.DescriptionAttribute("The type of the alternative, historical, or program-specific identifier for the f" +
            "acility site or environmental interest. ")]
        public string AlternativeIdentificationTypeText;
    }

    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.exchangenetwork.net/schema/facilityid/3")]
    [System.Xml.Serialization.XmlRootAttribute("FacilitySIC", Namespace = "http://www.exchangenetwork.net/schema/facilityid/3", IsNullable = false)]
    [Table]
    public partial class EnvironmentalInterestFacilitySICDataType
    {
        [System.Xml.Serialization.XmlIgnore]
        [GuidPrimaryKey]
        public string EnvironmentalInterestFacilitySICId;

        [System.Xml.Serialization.XmlIgnore]
        [GuidForeignKey]
        public string EnvironmentalInterestId;

        /// <remarks/>
        [System.ComponentModel.DescriptionAttribute("The code that represents the economic activity of a company.")]
        public string SICCode;

        /// <remarks/>
        [System.ComponentModel.DescriptionAttribute("The name that indicates whether the associated SIC Code represents the primary ac" +
            "tivity occurring at the facility site.")]
        public SICPrimaryIndicatorDataType SICPrimaryIndicator;

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SICPrimaryIndicatorSpecified;
    }

    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.exchangenetwork.net/schema/facilityid/3")]
    [System.Xml.Serialization.XmlRootAttribute("FacilitySIC", Namespace = "http://www.exchangenetwork.net/schema/facilityid/3", IsNullable = false)]
    [Table]
    public partial class FacilityFacilitySICDataType
    {
        [System.Xml.Serialization.XmlIgnore]
        [GuidPrimaryKey]
        public string FacilityFacilitySICId;

        [System.Xml.Serialization.XmlIgnore]
        [GuidForeignKey]
        public string FacilityId;

        /// <remarks/>
        [System.ComponentModel.DescriptionAttribute("The code that represents the economic activity of a company.")]
        public string SICCode;

        /// <remarks/>
        [System.ComponentModel.DescriptionAttribute("The name that indicates whether the associated SIC Code represents the primary ac" +
            "tivity occurring at the facility site.")]
        public SICPrimaryIndicatorDataType SICPrimaryIndicator;

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SICPrimaryIndicatorSpecified;
    }

    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.exchangenetwork.net/schema/facilityid/3")]
    [System.Xml.Serialization.XmlRootAttribute("FacilityNAICS", Namespace = "http://www.exchangenetwork.net/schema/facilityid/3", IsNullable = false)]
    [Table]
    public partial class EnvironmentalInterestFacilityNAICSDataType
    {
        [System.Xml.Serialization.XmlIgnore]
        [GuidPrimaryKey]
        public string EnvironmentalInterestFacilityNAICSId;

        [System.Xml.Serialization.XmlIgnore]
        [GuidForeignKey]
        public string EnvironmentalInterestId;

        /// <remarks/>
        [System.ComponentModel.DescriptionAttribute("The code that represents a subdivision of an industry that accommodates user need" +
            "s in the United States.")]
        public string FacilityNAICSCode;

        /// <remarks/>
        [System.ComponentModel.DescriptionAttribute("The name that indicates whether the associated NAICS Code represents the primary " +
            "activity occurring at the facility site.")]
        public FacilityNAICSPrimaryIndicatorDataType FacilityNAICSPrimaryIndicator;

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FacilityNAICSPrimaryIndicatorSpecified;
    }
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.exchangenetwork.net/schema/facilityid/3")]
    [System.Xml.Serialization.XmlRootAttribute("FacilityNAICS", Namespace = "http://www.exchangenetwork.net/schema/facilityid/3", IsNullable = false)]
    [Table]
    public partial class FacilityFacilityNAICSDataType
    {
        [System.Xml.Serialization.XmlIgnore]
        [GuidPrimaryKey]
        public string FacilityFacilityNAICSId;

        [System.Xml.Serialization.XmlIgnore]
        [GuidForeignKey]
        public string FacilityId;

        /// <remarks/>
        [System.ComponentModel.DescriptionAttribute("The code that represents a subdivision of an industry that accommodates user need" +
            "s in the United States.")]
        public string FacilityNAICSCode;

        /// <remarks/>
        [System.ComponentModel.DescriptionAttribute("The name that indicates whether the associated NAICS Code represents the primary " +
            "activity occurring at the facility site.")]
        public FacilityNAICSPrimaryIndicatorDataType FacilityNAICSPrimaryIndicator;

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FacilityNAICSPrimaryIndicatorSpecified;
    }

    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.exchangenetwork.net/schema/facilityid/3")]
    [System.Xml.Serialization.XmlRootAttribute("FacilityAffiliation", Namespace = "http://www.exchangenetwork.net/schema/facilityid/3", IsNullable = false)]
    [Table]
    public partial class EnvironmentalInterestFacilityAffiliationDataType
    {
        [System.Xml.Serialization.XmlIgnore]
        [GuidPrimaryKey]
        public string EnvironmentalInterestFacilityAffiliationId;

        [System.Xml.Serialization.XmlIgnore]
        [GuidForeignKey]
        public string EnvironmentalInterestId;

        /// <remarks/>
        [System.ComponentModel.DescriptionAttribute("A number used to uniquely identify a Affiliate, which contains data for one indiv" +
            "idual or organization.")]
        [Column(ColumnAttribute.NotNull)]
        public string AffiliateIdentifier;

        /// <remarks/>
        [System.ComponentModel.DescriptionAttribute("The relationship between an individual or organization and a facility, project, o" +
            "r actions.")]
        public AffiliationDataType Affiliation;
    }

    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.exchangenetwork.net/schema/facilityid/3")]
    [System.Xml.Serialization.XmlRootAttribute("FacilityAffiliation", Namespace = "http://www.exchangenetwork.net/schema/facilityid/3", IsNullable = false)]
    [Table]
    public partial class FacilityFacilityAffiliationDataType
    {
        [System.Xml.Serialization.XmlIgnore]
        [GuidPrimaryKey]
        public string FacilityFacilityAffiliationId;

        [System.Xml.Serialization.XmlIgnore]
        [GuidForeignKey]
        public string FacilityId;

        /// <remarks/>
        [System.ComponentModel.DescriptionAttribute("A number used to uniquely identify a Affiliate, which contains data for one indiv" +
            "idual or organization.")]
        [Column(ColumnAttribute.NotNull)]
        public string AffiliateIdentifier;

        /// <remarks/>
        [System.ComponentModel.DescriptionAttribute("The relationship between an individual or organization and a facility, project, o" +
            "r actions.")]
        public AffiliationDataType Affiliation;
    }
    public partial class FacilityLocationAddressDataType
    {
        public static FacilityLocationAddressDataType FromLocationAddress(LocationAddressDataType locationAddress)
        {
            if (locationAddress == null)
            {
                return null;
            }
            FacilityLocationAddressDataType data = new FacilityLocationAddressDataType();
            data.AddressPostalCode = locationAddress.AddressPostalCode;
            data.CountryIdentity = locationAddress.CountryIdentity;
            data.LocalityName = locationAddress.LocalityName;
            data.LocationAddressText = locationAddress.LocationAddressText;
            data.StateIdentity = locationAddress.StateIdentity;
            data.SupplementalLocationText = locationAddress.SupplementalLocationText;
            return data;
        }
    }
    public partial class LocationAddressDataType
    {
        public static LocationAddressDataType FromFacilityLocationAddress(FacilityLocationAddressDataType facilityLocationAddress)
        {
            if (facilityLocationAddress == null)
            {
                return null;
            }
            LocationAddressDataType data = new LocationAddressDataType();
            data.AddressPostalCode = facilityLocationAddress.AddressPostalCode;
            data.CountryIdentity = facilityLocationAddress.CountryIdentity;
            data.LocalityName = facilityLocationAddress.LocalityName;
            data.LocationAddressText = facilityLocationAddress.LocationAddressText;
            data.StateIdentity = facilityLocationAddress.StateIdentity;
            data.SupplementalLocationText = facilityLocationAddress.SupplementalLocationText;
            return data;
        }
    }
    public partial class FacilitySummaryGeographicLocationDataType
    {
        public FacilitySummaryGeographicLocationDataType() { }
        public FacilitySummaryGeographicLocationDataType(FacilityPrimaryGeographicLocationDescriptionDataType locationDesc)
        {
            this.Point = locationDesc.Point;
            this.HorizontalAccuracyMeasure = locationDesc.HorizontalAccuracyMeasure;
            this.HorizontalCollectionMethod = locationDesc.HorizontalCollectionMethod;
        }
    }
    public partial class FacilityPrimaryGeographicLocationDescriptionDataType
    {
        public FacilityPrimaryGeographicLocationDescriptionDataType() { }
        public FacilityPrimaryGeographicLocationDescriptionDataType(FacilitySummaryGeographicLocationDataType locationDesc)
        {
            this.Point = locationDesc.Point;
            this.HorizontalAccuracyMeasure = locationDesc.HorizontalAccuracyMeasure;
            this.HorizontalCollectionMethod = locationDesc.HorizontalCollectionMethod;
        }
    }
}
