#region License
/*
Copyright (c) 2009, The Environmental Council of the States (ECOS)
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

 * Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
 * Neither the name of the ECOS nor the names of its contributors may
   be used to endorse or promote products derived from this software
   without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
*/
#endregion

ï»¿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.3053.
// 
#pragma warning disable 1591

namespace Windsor.Commons.SchematronClient.Ws {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    using Microsoft.Web.Services;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ValidatorBinding", Namespace="http://exchangenetwork.net/schemas/validator/1.1/validatorEx.wsdl")]
    public partial class ValidatorEx : WebServicesClientProtocol
    {
        
        private System.Threading.SendOrPostCallback ValidateExOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetReportOperationCompleted;
        
        private System.Threading.SendOrPostCallback TransformFileExOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        private ValidatorEx() {

        }

        public ValidatorEx(string url)
        {
            this.Url = url;
            if ((this.IsLocalFileSystemWebService(this.Url) == true))
            {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else
            {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event ValidateExCompletedEventHandler ValidateExCompleted;
        
        /// <remarks/>
        public event GetReportCompletedEventHandler GetReportCompleted;
        
        /// <remarks/>
        public event TransformFileExCompletedEventHandler TransformFileExCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://exchangenetwork.net/schemas/validator/1.1/validatorEx.xsd", ResponseNamespace="http://exchangenetwork.net/schemas/validator/1.1/validatorEx.xsd")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public ValidationResult ValidateEx(string userId, string credentail, string transactionId, ValidationType validationType, DocumentType documentType, [System.Xml.Serialization.SoapElementAttribute(DataType="base64Binary")] byte[] xmlDocument, DocumentFormat docFormat, string sendResultTo) {
            object[] results = this.Invoke("ValidateEx", new object[] {
                        userId,
                        credentail,
                        transactionId,
                        validationType,
                        documentType,
                        xmlDocument,
                        docFormat,
                        sendResultTo});
            return ((ValidationResult)(results[0]));
        }
        
        /// <remarks/>
        public void ValidateExAsync(string userId, string credentail, string transactionId, ValidationType validationType, DocumentType documentType, byte[] xmlDocument, DocumentFormat docFormat, string sendResultTo) {
            this.ValidateExAsync(userId, credentail, transactionId, validationType, documentType, xmlDocument, docFormat, sendResultTo, null);
        }
        
        /// <remarks/>
        public void ValidateExAsync(string userId, string credentail, string transactionId, ValidationType validationType, DocumentType documentType, byte[] xmlDocument, DocumentFormat docFormat, string sendResultTo, object userState) {
            if ((this.ValidateExOperationCompleted == null)) {
                this.ValidateExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidateExOperationCompleted);
            }
            this.InvokeAsync("ValidateEx", new object[] {
                        userId,
                        credentail,
                        transactionId,
                        validationType,
                        documentType,
                        xmlDocument,
                        docFormat,
                        sendResultTo}, this.ValidateExOperationCompleted, userState);
        }
        
        private void OnValidateExOperationCompleted(object arg) {
            if ((this.ValidateExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ValidateExCompleted(this, new ValidateExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://exchangenetwork.net/schemas/validator/1.1/validatorEx.xsd", ResponseNamespace="http://exchangenetwork.net/schemas/validator/1.1/validatorEx.xsd")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public ValidationResult GetReport(string userId, string password, string transactionId) {
            object[] results = this.Invoke("GetReport", new object[] {
                        userId,
                        password,
                        transactionId});
            return ((ValidationResult)(results[0]));
        }
        
        /// <remarks/>
        public void GetReportAsync(string userId, string password, string transactionId) {
            this.GetReportAsync(userId, password, transactionId, null);
        }
        
        /// <remarks/>
        public void GetReportAsync(string userId, string password, string transactionId, object userState) {
            if ((this.GetReportOperationCompleted == null)) {
                this.GetReportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetReportOperationCompleted);
            }
            this.InvokeAsync("GetReport", new object[] {
                        userId,
                        password,
                        transactionId}, this.GetReportOperationCompleted, userState);
        }
        
        private void OnGetReportOperationCompleted(object arg) {
            if ((this.GetReportCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetReportCompleted(this, new GetReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://exchangenetwork.net/schemas/validator/1.1/validatorEx.xsd", ResponseNamespace="http://exchangenetwork.net/schemas/validator/1.1/validatorEx.xsd")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string TransformFileEx(string userId, string password, string transactionId, TransformType styleSheet, [System.Xml.Serialization.SoapElementAttribute(DataType="base64Binary")] byte[] xmlDocument, DocumentFormat docFormat, string sendResultTo) {
            object[] results = this.Invoke("TransformFileEx", new object[] {
                        userId,
                        password,
                        transactionId,
                        styleSheet,
                        xmlDocument,
                        docFormat,
                        sendResultTo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void TransformFileExAsync(string userId, string password, string transactionId, TransformType styleSheet, byte[] xmlDocument, DocumentFormat docFormat, string sendResultTo) {
            this.TransformFileExAsync(userId, password, transactionId, styleSheet, xmlDocument, docFormat, sendResultTo, null);
        }
        
        /// <remarks/>
        public void TransformFileExAsync(string userId, string password, string transactionId, TransformType styleSheet, byte[] xmlDocument, DocumentFormat docFormat, string sendResultTo, object userState) {
            if ((this.TransformFileExOperationCompleted == null)) {
                this.TransformFileExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTransformFileExOperationCompleted);
            }
            this.InvokeAsync("TransformFileEx", new object[] {
                        userId,
                        password,
                        transactionId,
                        styleSheet,
                        xmlDocument,
                        docFormat,
                        sendResultTo}, this.TransformFileExOperationCompleted, userState);
        }
        
        private void OnTransformFileExOperationCompleted(object arg) {
            if ((this.TransformFileExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TransformFileExCompleted(this, new TransformFileExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3053")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="http://exchangenetwork.net/schemas/validator/1.1/validatorEx.xsd")]
    public enum ValidationType {
        
        /// <remarks/>
        schema,
        
        /// <remarks/>
        schematron,
        
        /// <remarks/>
        all,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3053")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="http://exchangenetwork.net/schemas/validator/1.1/validatorEx.xsd")]
    public enum DocumentType {
        
        /// <remarks/>
        AQS_Publishing_v1_0,
        
        /// <remarks/>
        AQS_Submission_v1_0,
        
        /// <remarks/>
        AQS_Submission_v2_0,
        
        /// <remarks/>
        AQS_Submission,
        
        /// <remarks/>
        Beaches_v2_0,
        
        /// <remarks/>
        Beaches_v2_1,
        
        /// <remarks/>
        FRS_v2_2,
        
        /// <remarks/>
        FRS_v2_3,
        
        /// <remarks/>
        GEO_v1_0,
        
        /// <remarks/>
        ICIS_v1_4e,
        
        /// <remarks/>
        ICIS_v1_5,
        
        /// <remarks/>
        NEI_AreaNonroad_v3_0,
        
        /// <remarks/>
        NEI_Biogenic_v3_0,
        
        /// <remarks/>
        NEI_Onroad_v3_0,
        
        /// <remarks/>
        NEI_Point_v3_0,
        
        /// <remarks/>
        RCRA_v1_0,
        
        /// <remarks/>
        RCRA_v3_0,
        
        /// <remarks/>
        TRI_v1_1,
        
        /// <remarks/>
        TRI_v2_0,
        
        /// <remarks/>
        TRI_v3_0,
        
        /// <remarks/>
        UIC_v1_0,
        
        /// <remarks/>
        VERIFY_MotorcycleSubmission_v2_0,
        
        /// <remarks/>
        WAD_v1_0,
        
        /// <remarks/>
        WQX_v1_0,
        
        /// <remarks/>
        WQX_v2_0,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3053")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="http://exchangenetwork.net/schemas/validator/1.1/validatorEx.xsd")]
    public enum DocumentFormat {
        
        /// <remarks/>
        xml,
        
        /// <remarks/>
        zip,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3053")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="http://exchangenetwork.net/schemas/validator/1.1/validatorEx.xsd")]
    public partial class ValidationResult {
        
        private string transactionIdField;
        
        private string validationTypeField;
        
        private ProcessStatus processStatusField;
        
        private DocumentStatus documentStatusField;
        
        private System.DateTime timeStampField;
        
        private string resultsField;
        
        /// <remarks/>
        public string transactionId {
            get {
                return this.transactionIdField;
            }
            set {
                this.transactionIdField = value;
            }
        }
        
        /// <remarks/>
        public string validationType {
            get {
                return this.validationTypeField;
            }
            set {
                this.validationTypeField = value;
            }
        }
        
        /// <remarks/>
        public ProcessStatus processStatus {
            get {
                return this.processStatusField;
            }
            set {
                this.processStatusField = value;
            }
        }
        
        /// <remarks/>
        public DocumentStatus documentStatus {
            get {
                return this.documentStatusField;
            }
            set {
                this.documentStatusField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime timeStamp {
            get {
                return this.timeStampField;
            }
            set {
                this.timeStampField = value;
            }
        }
        
        /// <remarks/>
        public string results {
            get {
                return this.resultsField;
            }
            set {
                this.resultsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3053")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="http://exchangenetwork.net/schemas/validator/1.1/validatorEx.xsd")]
    public enum ProcessStatus {
        
        /// <remarks/>
        Pending,
        
        /// <remarks/>
        Processing,
        
        /// <remarks/>
        Finished,
        
        /// <remarks/>
        Failed,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3053")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="http://exchangenetwork.net/schemas/validator/1.1/validatorEx.xsd")]
    public enum DocumentStatus {
        
        /// <remarks/>
        Valid,
        
        /// <remarks/>
        Invalid,
        
        /// <remarks/>
        Unknown,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3053")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="http://exchangenetwork.net/schemas/validator/1.1/validatorEx.xsd")]
    public enum TransformType {
        
        /// <remarks/>
        UIC_v1_0Filter,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void ValidateExCompletedEventHandler(object sender, ValidateExCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ValidateExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ValidateExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ValidationResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ValidationResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetReportCompletedEventHandler(object sender, GetReportCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetReportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ValidationResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ValidationResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void TransformFileExCompletedEventHandler(object sender, TransformFileExCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TransformFileExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TransformFileExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591