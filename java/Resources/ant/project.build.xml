<?xml version="1.0" encoding="UTF-8"?>
<project name="SharedBuildLogic" basedir="." default="build.jar">
	<!-- TODO: add check for project jar dependencies -->
	<!-- properties & entities for all Node projects -->
	<property file="build.properties" />
	<property name="resource.base.dir" value="${basedir}/../Resources" />
	<property file="${resource.base.dir}/ant/shared.build.properties" />
	<property name="resources.local" value="${basedir}/resources" />
	<property name="env.dir.local" value="${basedir}/env/${env.dir}" />
	<property name="log4j.properties" value="${env.dir.local}/log4j.properties" />
	<property name="commons-logging.properties" value="${env.dir.local}/commons-logging.properties" />
	<property name="runtime.jar.location" value="${resource.base.dir}/lib/${eclipse.project.name}" />
	<property name="buildtime.jar.location" value="${resource.base.dir}/lib/${eclipse.project.name}.build_only" />
	<property name="src" value="${basedir}/src" />
	<property name="test" value="${basedir}/test" />
	<property name="build" value="${basedir}/build" />
	<property name="dist" value="${resource.base.dir}/dist" />
	<property name="web.dir" value="${appserver.deploy.dir}/${jarName}" />
	<property name="web.inf" value="${build}/WEB-INF" />
	<property name="web.inf.lib" value="${web.inf}/lib" />
	<property name="compile.includes" value="*.xml, *.properties" />
	<property name="manifest.src" value="${resource.base.dir}/ant/MANIFEST.MF" />

	<fileset id="runtime.jars" includes="*.jar" dir="${runtime.jar.location}" />
	<fileset id="buildtime.jars" includes="*.jar" dir="${buildtime.jar.location}" />
	<fileset id="junit.jar" file="${resource.base.dir}/lib/Junit3/junit.jar" />
	<fileset id="project.jars" dir="${dist}/${env.dir}" includes="${project.jar.dependencies}" />

	<path id="build.class.path">
		<fileset refid="project.jars" />
		<fileset refid="runtime.jars" />
		<fileset refid="buildtime.jars" />
		<fileset refid="junit.jar" />
	</path>
	<!-- END properties & entities for all Node projects (except plugins) -->

	<!-- targets for all Node projects -->
	<target name="get.env" description="displays build configuration options">
		<echo message="Build environment: ${env.dir}" />
		<echo message="Selected JDK version: ${jdk.version}" />
        <echo message="Target appserver: ${appserver}" />
        <echo message="Use verbose output? ${verbosity}" />
        <antcall target="setServerAndLoggingType" inheritall="true" />
    </target>

    <target name="setServerAndLoggingType">
        <condition property="weblogic">
            <equals arg1="${appserver}" arg2="weblogic" />
        </condition>
        <condition property="websphere">
            <equals arg1="${appserver}" arg2="websphere" />
        </condition>
        <condition property="generic">
            <equals arg1="${appserver}" arg2="generic" />
        </condition>
        <echo message="Target appserver: ${appserver}" />

        <condition property="useJclAdapter">
            <equals arg1="${appserver}" arg2="websphere" />
        </condition>
        <condition property="useJclStandard">
            <not>
                <equals arg1="${appserver}" arg2="websphere" />
            </not>
        </condition>
        <antcall target="printJclAdapter" inheritall="true" />
        <antcall target="printJclStandard" inheritall="true" />
    </target>

    <target name="printJclAdapter" if="useJclAdapter">
        <echo message="Using Commons Logging Adapter? = ${useJclAdapter}" />
    </target>

    <target name="printJclStandard" if="useJclStandard">
        <echo message="Using Commons Logging Standard? = ${useJclStandard}" />
    </target>

    <target name="clean">
        <echo message="Cleaning ${build} and ${dist}/${env.dir}" />
        <mkdir dir="${build}" />
        <mkdir dir="${dist}/${env.dir}" />
        <delete includeemptydirs="true">
            <fileset dir="${build}" includes="**/*" />
            <fileset dir="${dist}/${env.dir}" includes="${jarName}.${fileExt}, ${jarName}.${fileExt}.asc, ${jarName}.${fileExt}.MD5" />
        </delete>
    </target>

    <target name="pre.init" depends="setServerAndLoggingType">
        <echo message="Using environment settings from ${env.dir}" />
        <condition property="isWarOutput">
            <equals arg1="${fileExt}" arg2="war" />
        </condition>
        <condition property="isJarOutput">
            <equals arg1="${fileExt}" arg2="jar" />
        </condition>
        <echo message="Output file for project ${eclipse.project.name} is ${jarName}.${fileExt}" />
        <echo message="Project .jar dependencies: ${project.jar.dependencies}" />

        <mkdir dir="${build}" />
        <mkdir dir="${dist}" />
        <available file="${test}" type="dir" property="hasTests" />

        <copy file="${manifest.src}" todir="${java.io.tmpdir}" overwrite="yes" verbose="${verbosity}" preservelastmodified="false" />
        <property name="manifest.file" value="${java.io.tmpdir}/MANIFEST.MF" />
        <tstamp>
            <format property="build.time" pattern="dd MMMM, yyyy hh:mm z" timezone="America/Los_Angeles" />
        </tstamp>
        <replace file="${manifest.file}" token="@project.title@" value="${project.title}" summary="true" />
        <replace file="${manifest.file}" token="@build.time@" value="${build.time}" summary="true" />
        <replace file="${manifest.file}" token="@target.env@" value="${env.dir}" summary="true" />
    </target>

    <target name="set.class.dir.war" if="isWarOutput">
        <mkdir dir="${web.inf}" />
        <mkdir dir="${web.inf.lib}" />
        <property name="classes" value="${web.inf}/classes" />
        <mkdir dir="${classes}" />
    </target>

    <target name="set.class.dir.jar" if="isJarOutput">
        <property name="classes" value="${build}" />
    </target>

    <target name="exclude.commons.adapter.jar" if="useJclStandard">
        <echo message="useJclStandard set" />
        <property name="exclude.commons.jar" value="${commons.adapter.jar.name}" />
    </target>

    <target name="exclude.commons.logging.jar" if="useJclAdapter">
        <echo message="useJclAdapter" />
        <property name="exclude.commons.jar" value="${commons.logging.jar.name}" />
    </target>

    <target depends="clean, pre.init, set.class.dir.war, set.class.dir.jar" name="init">

        <!-- perform project-specific setup -->
        <echo message="Doing project specifics for ${eclipse.project.name} project" />
        <ant dir="${basedir}" target="do.project.specifics" inheritAll="true" inheritRefs="true" />

        <echo message="java.class.path = ${java.class.path}" />
        <echo message="Classes will be compiled to ${classes}" />
    </target>

    <target depends="init" name="compile.src" description="compiles with debug symbols, warnings on">
        <javac debug="on" memoryMaximumSize="256m" memoryInitialSize="256m" fork="true" destdir="${classes}" srcdir="${src}" source="${jdk.version}" target="${jdk.version}" nowarn="false" failonerror="true">
            <classpath refid="build.class.path" />
        </javac>
        <copy todir="${classes}" verbose="${verbosity}" preservelastmodified="false">
            <fileset dir="${src}" includes="${compile.includes}" />
        </copy>
    </target>

    <target depends="init" name="compile.test" description="compiles with debug symbols, warnings off">
        <javac debug="on" memoryMaximumSize="256m" memoryInitialSize="256m" fork="true" destdir="${classes}" srcdir="${src}" source="${jdk.version}" target="${jdk.version}" nowarn="true" failonerror="false">
            <classpath refid="build.class.path" />
        </javac>
        <javac debug="on" memoryMaximumSize="256m" memoryInitialSize="256m" fork="true" destdir="${classes}" srcdir="${test}" source="${jdk.version}" target="${jdk.version}" nowarn="true" failonerror="false">
            <classpath refid="build.class.path" />
        </javac>
        <copy todir="${classes}" verbose="${verbosity}" preservelastmodified="false">
            <fileset dir="${test}" includes="**/*" />
            <fileset dir="${src}" includes="**/*" />
        </copy>
        <property name="isTestBuild" value="true" />
    </target>

    <target depends="compile.src, bundle.libs" name="build.jar" description="Makes a production-worthy jar file">
        <echo message="Making ${jarName}.${fileExt} in ${dist}/${env.dir}" />
        <mkdir dir="${dist}/${env.dir}" />
        <property name="outfile" value="${dist}/${env.dir}/${jarName}.${fileExt}" />
        <jar destfile="${outfile}" manifest="${manifest.file}">
            <fileset excludes="**/Test*.class" dir="${build}" />
        </jar>
        <checksum file="${outfile}" forceOverwrite="yes" />
        <checksum file="${outfile}" algorithm="SHA" fileext=".asc" forceOverwrite="yes" />
    </target>

    <target name="build.jar.run.tests" description="Runs unit tests, then makes a clean production-worthy archive file.">
        <antcall target="run.tests" inheritAll="true" inheritRefs="true" />
        <antcall target="clean" inheritAll="true" inheritRefs="true" />
        <antcall target="build.jar" inheritAll="true" inheritRefs="true" />
    </target>

    <target depends="compile.test, bundle.libs" name="build.test.jar" description="Makes a jar file that includes unit tests">
        <echo message="Making ${jarName}.${fileExt} in ${dist}/${env.dir}" />
        <mkdir dir="${dist}/${env.dir}" />
        <property name="outfile" value="${dist}/${env.dir}/${jarName}.${fileExt}" />
        <jar destfile="${outfile}" manifest="${manifest.file}">
            <fileset dir="${build}" />
        </jar>
        <checksum file="${outfile}" forceOverwrite="yes" />
        <checksum file="${outfile}" algorithm="SHA" fileext=".asc" forceOverwrite="yes" />
    </target>

    <target name="build.deploy" depends="build.jar" if="isWarOutput" description="Calls build.jar and deploys to appserver">
        <echo message="Deleting deployed directory ${jarName} from ${appserver.deploy.dir}" />
        <delete dir="${appserver.deploy.dir}/${jarName}" />
        <echo message="Deleting deployed archive ${jarName}.${fileExt} from ${appserver.deploy.dir}" />
        <delete file="${appserver.deploy.dir}/${jarName}.${fileExt}" />
        <echo message="Deleting logfile ${jarName}.log from ${resource.base.dir}/home/log" />
        <delete file="${resource.base.dir}/home/log/${jarName}.log" />
        <echo message="Deploying new ${jarName}.${fileExt}" />
        <copy file="${dist}/${env.dir}/${jarName}.${fileExt}" toDir="${appserver.deploy.dir}" verbose="${verbosity}" preservelastmodified="false" />
    </target>

    <target name="build.test.deploy" depends="build.test.jar" if="isWarOutput" description="Calls build.test.jar and deploys to appserver">
        <echo message="Deleting deployed directory ${jarName} from ${appserver.deploy.dir}" />
        <delete dir="${appserver.deploy.dir}/${jarName}" />
        <echo message="Deleting deployed archive ${jarName}.${fileExt} from ${appserver.deploy.dir}" />
        <delete file="${appserver.deploy.dir}/${jarName}.${fileExt}" />
        <echo message="Deleting logfile ${jarName}.log from ${resource.base.dir}/home/log" />
        <delete file="${resource.base.dir}/home/log/${jarName}.log" />
        <echo message="Deploying new ${jarName}.${fileExt}" />
        <copy file="${dist}/${env.dir}/${jarName}.${fileExt}" toDir="${appserver.deploy.dir}" verbose="${verbosity}" preservelastmodified="false" />
    </target>

    <target name="hot.deploy" depends="init" if="isWarOutput" description="Deploy application jsps and static files only">
        <copy todir="${web.dir}/WEB-INF/jsp" overwrite="true" verbose="${verbosity}" preservelastmodified="false" failonerror="false">
            <fileset dir="${resources.local}/WEB-INF/jsp">
                <include name="*.jsp" />
            </fileset>
        </copy>
        <copy todir="${web.dir}" overwrite="true" verbose="${verbosity}" preservelastmodified="false" failonerror="false">
            <fileset dir="${resources.local}">
                <include name="**/*.css" />
                <include name="**/*.js" />
                <include name="**/*.html" />
                <include name="**/*.xml" />
            </fileset>
        </copy>
        <copy todir="${web.dir}/static" overwrite="true" verbose="${verbosity}" preservelastmodified="false" failonerror="false">
            <fileset dir="${web.dir}/static/" />
        </copy>
        <copy file="${resources.local}/WEB-INF/classes/messages.properties" todir="${web.dir}/WEB-INF/classes" overwrite="true" verbose="${verbosity}" preservelastmodified="false" failonerror="false" />
    </target>

    <target depends="compile.test" name="run.tests" if="hasTests" description="Run standard JUnit tests">
        <echo message="Running tests within ${classes}..." />

        <property name="nos.root" value="${basedir}/../Wnos_Service" />
        <property name="nos.props" value="${nos.root}/env/${env.dir}" />
        <property name="nos.classes" value="${nos.root}/resources/WEB-INF/classes" />
        <property name="nos.conf" value="${nos.classes}/conf" />
        <property name="nos.template" value="${nos.classes}/template" />


        <junit printsummary="on" fork="no" haltonerror="yes" haltonfailure="yes" showoutput="yes" filtertrace="on">
            <classpath>
                <pathelement location="${nos.props}" />
                <pathelement location="${nos.classes}" />
                <pathelement location="${nos.conf}" />
                <pathelement location="${nos.template}" />
                <pathelement location="${classes}" />
                <path refid="build.class.path" />
            </classpath>
            <formatter type="plain" usefile="no" />
            <batchtest fork="no">
                <fileset dir="${classes}">
                    <include name="**/*Test*.class" />
                    <exclude name="**/All*Tests.class" />
                    <exclude name="**/Base*Test*.class" />
                </fileset>
            </batchtest>
        </junit>
    </target>

    <target name="bundle.weblogic" if="weblogic">
        <copy file="${env.dir.local}/weblogic.xml" todir="${web.inf}" overwrite="yes" verbose="${verbosity}" preservelastmodified="false" />
    </target>

    <target name="bundle.libs" if="isWarOutput" depends="exclude.commons.adapter.jar, exclude.commons.logging.jar">
        <echo message="Excluding ${exclude.commons.jar} from ${jarName}.${fileExt}" />
        <copy todir="${web.inf.lib}" overwrite="yes" verbose="${verbosity}" preservelastmodified="false">
            <fileset dir="${runtime.jar.location}">
                <include name="*.jar" />
                <exclude name="${exclude.commons.jar}" />
            </fileset>
            <fileset refid="project.jars" />
        </copy>
        <copy file="${log4j.properties}" todir="${classes}" overwrite="yes" verbose="${verbosity}" preservelastmodified="false" />
        <antcall target="bundle.junit" inheritAll="true" inheritRefs="true" />
        <antcall target="bundle.weblogic" inheritAll="true" inheritRefs="true" />
    </target>

    <target name="bundle.junit" if="isTestBuild">
        <copy todir="${web.inf.lib}" overwrite="yes" verbose="${verbosity}" preservelastmodified="false">
            <fileset refid="junit.jar" />
        </copy>
    </target>
    <!-- END targets for all Node projects -->
</project>