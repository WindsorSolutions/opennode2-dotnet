/* Oracle */

/* This script updates an existing BEACHES v2.1 staging database to work with the v2.2 schema for the .NET OpenNode2 */

/* 4/10/2012 BRensmith Created */

ALTER TABLE NOTIF_BEACH
    ADD (BEACHDORMANTINDICATOR VARCHAR2(5) NULL);

ALTER TABLE NOTIF_BEACH
    ADD (BEACHWEBSITE VARCHAR2(255) NULL);

ALTER TABLE NOTIF_BEACH
    ADD (REPORTINGFREQUENCYMEASURE DECIMAL(16,6) NULL);

ALTER TABLE NOTIF_BEACH
    ADD (REPORTINGFREQUNITOFMEASURE VARCHAR(9) NULL);


ALTER TABLE NOTIF_BEACH MODIFY BEACHNAME VARCHAR(60) NULL; --Nullable

ALTER TABLE NOTIF_BEACH MODIFY BEACHDESCRIPTION VARCHAR(255) NULL; --Nullable

ALTER TABLE NOTIF_BEACH MODIFY BEACHSTATECODE CHAR(2) NULL; --Nullable

ALTER TABLE NOTIF_BEACH MODIFY BEACHFIPSCOUNTYCODE VARCHAR(5) NULL; --Nullable

ALTER TABLE NOTIF_BEACH MODIFY BEACHACCESSTYPE VARCHAR(12) NULL; --Nullable

ALTER TABLE NOTIF_BEACH MODIFY EXTENTLENGTHMEASURE DECIMAL(16,6) NULL; --Nullable

ALTER TABLE NOTIF_BEACH MODIFY SWIMSEASONLENGTH DECIMAL(16,6) NULL; --Nullable

ALTER TABLE NOTIF_BEACH MODIFY SWIMSEASONFREQUENCYMEASURE DECIMAL(16,6); --Changed Datatype

ALTER TABLE NOTIF_BEACH MODIFY OFFSEASONFREQUENCYMEASURE DECIMAL(16,6); --Changed Datatype


ALTER TABLE NOTIF_PERSON MODIFY FIRSTNAME VARCHAR(50) NULL; --Nullable

ALTER TABLE NOTIF_PERSON MODIFY LASTNAME  VARCHAR(50) NULL; --Nullable

ALTER TABLE NOTIF_PERSON MODIFY PERSONSTATUS VARCHAR(8) NULL; --Nullable


ALTER TABLE NOTIF_BEACHACTIVITY MODIFY EXTENTSTARTMEASURE DECIMAL(16,6); --Changed Datatype
 
ALTER TABLE NOTIF_BEACHACTIVITY MODIFY EXTENTLENGTHMEASURE DECIMAL(16,6); --Changed Datatype

--Two new tables
CREATE TABLE "NOTIF_BEACHCRITERION" (
    "ID"							VARCHAR2(40) NOT NULL,
    "BEACH_ID"						VARCHAR2(40) NOT NULL,
    "INDICATORNAME"					VARCHAR2(11) NOT NULL,
    "WATERTYPENAME"					VARCHAR2(6) NOT NULL,
    "CRITERIONCOMMENT"				VARCHAR2(255) NULL,
    "MEASURETYPENAME"				VARCHAR2(4) NOT NULL,
    "MEASUREVALUE"					DECIMAL(16,6) NOT NULL,
    "MEASUREUNITCODE"				VARCHAR2(12) NOT NULL
    );

CREATE TABLE "NOTIF_STATECONTACT" (
    "ID"							VARCHAR2(40) NOT NULL,
    "ORGANIZATION_ID"				VARCHAR2(40) NOT NULL,
    "AGENCYNAME"					VARCHAR2(60) NOT NULL,
    "TELEPHONENUMBER"				VARCHAR2(12) NOT NULL,
    "ELECTRONICADDR"				VARCHAR2(255) NOT NULL,
    "FIRSTNAME"						VARCHAR2(50) NOT NULL,
    "LASTNAME"						VARCHAR2(50) NOT NULL
	);

CREATE INDEX "NOTIF_BEACHCRITERION"
  ON "NOTIF_BEACHCRITERION"("BEACH_ID");

CREATE UNIQUE INDEX "PK_NOTIF_BEACHCRITERION"
	ON "NOTIF_BEACHCRITERION"("ID");

CREATE INDEX "NOTIF_STATECONTACT"
  ON "NOTIF_STATECONTACT"("ORGANIZATION_ID");
  
CREATE UNIQUE INDEX "PK_NOTIF_STATECONTACT"
	ON "NOTIF_STATECONTACT"("ID");

ALTER TABLE "NOTIF_BEACHCRITERION"
	ADD ( CONSTRAINT "PK_NOTIF_BEACHCRITERION"
	PRIMARY KEY ("ID")
	NOT DEFERRABLE INITIALLY IMMEDIATE );

ALTER TABLE "NOTIF_STATECONTACT"
	ADD ( CONSTRAINT "PK_NOTIF_STATECONTACT"
	PRIMARY KEY ("ID")
	NOT DEFERRABLE INITIALLY IMMEDIATE );

ALTER TABLE "NOTIF_BEACHCRITERION"
	ADD ( CONSTRAINT "FK_BEACHCRITERION_BEACH"
	FOREIGN KEY("BEACH_ID")
	REFERENCES "NOTIF_BEACH"("ID")
	ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE VALIDATE );

ALTER TABLE "NOTIF_STATECONTACT"
	ADD ( CONSTRAINT "FK_STATECONTACT_ORGANIZATION"
	FOREIGN KEY("ORGANIZATION_ID")
	REFERENCES "NOTIF_ORGANIZATION"("ID")
	ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE VALIDATE );
  
  --NOTIF_BEACHCRITERION
CREATE OR REPLACE TRIGGER NOTIF_BEACHCRITERION
  BEFORE INSERT ON NOTIF_BEACHCRITERION 
    FOR EACH ROW BEGIN 
      IF INSERTING 
      THEN 
        IF :NEW.ID IS NULL
         THEN SELECT SYS_GUID()  
                INTO :NEW.ID 
                FROM dual; 
        END IF; 
      END IF; 
    END;
/

--NOTIF_STATECONTACT
CREATE OR REPLACE TRIGGER NOTIF_STATECONTACT
  BEFORE INSERT ON NOTIF_STATECONTACT
    FOR EACH ROW BEGIN 
      IF INSERTING 
      THEN 
        IF :NEW.ID IS NULL
         THEN SELECT SYS_GUID()  
                INTO :NEW.ID 
                FROM dual; 
        END IF; 
      END IF; 
    END;
/

