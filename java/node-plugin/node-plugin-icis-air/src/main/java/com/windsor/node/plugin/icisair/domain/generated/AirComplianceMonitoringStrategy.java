//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2014.09.02 at 11:05:46 AM PDT 
//


package com.windsor.node.plugin.icisair.domain.generated;

import java.io.Serializable;
import java.util.Date;

import javax.persistence.Basic;
import javax.persistence.Column;
import javax.persistence.Embeddable;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;

import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

import com.windsor.node.plugin.common.xml.bind.annotation.adapters.DateNoTimeZoneAdapter;


/**
 * <p>Java class for AirComplianceMonitoringStrategy complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="AirComplianceMonitoringStrategy">
 *   &lt;complexContent>
 *     &lt;extension base="{http://www.exchangenetwork.net/schema/icis/5}AirComplianceMonitoringStrategyKeyElements">
 *       &lt;sequence>
 *         &lt;element ref="{http://www.exchangenetwork.net/schema/icis/5}AirCMSSourceCategoryCode" minOccurs="0"/>
 *         &lt;element ref="{http://www.exchangenetwork.net/schema/icis/5}AirCMSMinimumFrequency" minOccurs="0"/>
 *         &lt;element ref="{http://www.exchangenetwork.net/schema/icis/5}AirCMSStartDate" minOccurs="0"/>
 *         &lt;element ref="{http://www.exchangenetwork.net/schema/icis/5}AirActiveCMSPlanIndicator" minOccurs="0"/>
 *         &lt;element ref="{http://www.exchangenetwork.net/schema/icis/5}AirRemovedPlanDate" minOccurs="0"/>
 *         &lt;element ref="{http://www.exchangenetwork.net/schema/icis/5}AirReasonChangingCMSComments" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "AirComplianceMonitoringStrategy", propOrder = {
    "airCMSSourceCategoryCode",
    "airCMSMinimumFrequency",
    "airCMSStartDate",
    "airActiveCMSPlanIndicator",
    "airRemovedPlanDate",
    "airReasonChangingCMSComments"
})
@Embeddable
public class AirComplianceMonitoringStrategy
    extends AirComplianceMonitoringStrategyKeyElements
    implements Serializable, Equals, HashCode
{

    private final static long serialVersionUID = 1L;
    @XmlElement(name = "AirCMSSourceCategoryCode")
    protected String airCMSSourceCategoryCode;
    @XmlElement(name = "AirCMSMinimumFrequency")
    protected Integer airCMSMinimumFrequency;
    @XmlElement(name = "AirCMSStartDate", type = String.class)
    @XmlJavaTypeAdapter(DateNoTimeZoneAdapter.class)
    @XmlSchemaType(name = "date")
    protected Date airCMSStartDate;
    @XmlElement(name = "AirActiveCMSPlanIndicator")
    protected YesNoIndicatorTypeBase airActiveCMSPlanIndicator;
    @XmlElement(name = "AirRemovedPlanDate", type = String.class)
    @XmlJavaTypeAdapter(DateNoTimeZoneAdapter.class)
    @XmlSchemaType(name = "date")
    protected Date airRemovedPlanDate;
    @XmlElement(name = "AirReasonChangingCMSComments")
    protected String airReasonChangingCMSComments;

    /**
     * Gets the value of the airCMSSourceCategoryCode property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "CMS_SRC_CATG_CODE", length = 3)
    public String getAirCMSSourceCategoryCode() {
        return airCMSSourceCategoryCode;
    }

    /**
     * Sets the value of the airCMSSourceCategoryCode property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setAirCMSSourceCategoryCode(String value) {
        this.airCMSSourceCategoryCode = value;
    }

    @Transient
    public boolean isSetAirCMSSourceCategoryCode() {
        return (this.airCMSSourceCategoryCode!= null);
    }

    /**
     * Gets the value of the airCMSMinimumFrequency property.
     * 
     * @return
     *     possible object is
     *     {@link Integer }
     *     
     */
    @Basic
    @Column(name = "CMS_MIN_FREQ", precision = 20, scale = 0)
    public Integer getAirCMSMinimumFrequency() {
        return airCMSMinimumFrequency;
    }

    /**
     * Sets the value of the airCMSMinimumFrequency property.
     * 
     * @param value
     *     allowed object is
     *     {@link Integer }
     *     
     */
    public void setAirCMSMinimumFrequency(Integer value) {
        this.airCMSMinimumFrequency = value;
    }

    @Transient
    public boolean isSetAirCMSMinimumFrequency() {
        return (this.airCMSMinimumFrequency!= null);
    }

    /**
     * Gets the value of the airCMSStartDate property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "CMS_START_DATE")
    @Temporal(TemporalType.DATE)
    public Date getAirCMSStartDate() {
        return airCMSStartDate;
    }

    /**
     * Sets the value of the airCMSStartDate property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setAirCMSStartDate(Date value) {
        this.airCMSStartDate = value;
    }

    @Transient
    public boolean isSetAirCMSStartDate() {
        return (this.airCMSStartDate!= null);
    }

    /**
     * Gets the value of the airActiveCMSPlanIndicator property.
     * 
     * @return
     *     possible object is
     *     {@link YesNoIndicatorTypeBase }
     *     
     */
    @Basic
    @Column(name = "ACTIVE_CMS_PLAN_IND", columnDefinition = "char(1)", length = 1)
    @Enumerated(EnumType.STRING)
    public YesNoIndicatorTypeBase getAirActiveCMSPlanIndicator() {
        return airActiveCMSPlanIndicator;
    }

    /**
     * Sets the value of the airActiveCMSPlanIndicator property.
     * 
     * @param value
     *     allowed object is
     *     {@link YesNoIndicatorTypeBase }
     *     
     */
    public void setAirActiveCMSPlanIndicator(YesNoIndicatorTypeBase value) {
        this.airActiveCMSPlanIndicator = value;
    }

    @Transient
    public boolean isSetAirActiveCMSPlanIndicator() {
        return (this.airActiveCMSPlanIndicator!= null);
    }

    /**
     * Gets the value of the airRemovedPlanDate property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "RMVD_PLAN_DATE")
    @Temporal(TemporalType.DATE)
    public Date getAirRemovedPlanDate() {
        return airRemovedPlanDate;
    }

    /**
     * Sets the value of the airRemovedPlanDate property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setAirRemovedPlanDate(Date value) {
        this.airRemovedPlanDate = value;
    }

    @Transient
    public boolean isSetAirRemovedPlanDate() {
        return (this.airRemovedPlanDate!= null);
    }

    /**
     * Gets the value of the airReasonChangingCMSComments property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "RSN_CHNG_CMS_CMNTS", length = 200)
    public String getAirReasonChangingCMSComments() {
        return airReasonChangingCMSComments;
    }

    /**
     * Sets the value of the airReasonChangingCMSComments property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setAirReasonChangingCMSComments(String value) {
        this.airReasonChangingCMSComments = value;
    }

    @Transient
    public boolean isSetAirReasonChangingCMSComments() {
        return (this.airReasonChangingCMSComments!= null);
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof AirComplianceMonitoringStrategy)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final AirComplianceMonitoringStrategy that = ((AirComplianceMonitoringStrategy) object);
        {
            String lhsAirCMSSourceCategoryCode;
            lhsAirCMSSourceCategoryCode = this.getAirCMSSourceCategoryCode();
            String rhsAirCMSSourceCategoryCode;
            rhsAirCMSSourceCategoryCode = that.getAirCMSSourceCategoryCode();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "airCMSSourceCategoryCode", lhsAirCMSSourceCategoryCode), LocatorUtils.property(thatLocator, "airCMSSourceCategoryCode", rhsAirCMSSourceCategoryCode), lhsAirCMSSourceCategoryCode, rhsAirCMSSourceCategoryCode)) {
                return false;
            }
        }
        {
            Integer lhsAirCMSMinimumFrequency;
            lhsAirCMSMinimumFrequency = this.getAirCMSMinimumFrequency();
            Integer rhsAirCMSMinimumFrequency;
            rhsAirCMSMinimumFrequency = that.getAirCMSMinimumFrequency();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "airCMSMinimumFrequency", lhsAirCMSMinimumFrequency), LocatorUtils.property(thatLocator, "airCMSMinimumFrequency", rhsAirCMSMinimumFrequency), lhsAirCMSMinimumFrequency, rhsAirCMSMinimumFrequency)) {
                return false;
            }
        }
        {
            Date lhsAirCMSStartDate;
            lhsAirCMSStartDate = this.getAirCMSStartDate();
            Date rhsAirCMSStartDate;
            rhsAirCMSStartDate = that.getAirCMSStartDate();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "airCMSStartDate", lhsAirCMSStartDate), LocatorUtils.property(thatLocator, "airCMSStartDate", rhsAirCMSStartDate), lhsAirCMSStartDate, rhsAirCMSStartDate)) {
                return false;
            }
        }
        {
            YesNoIndicatorTypeBase lhsAirActiveCMSPlanIndicator;
            lhsAirActiveCMSPlanIndicator = this.getAirActiveCMSPlanIndicator();
            YesNoIndicatorTypeBase rhsAirActiveCMSPlanIndicator;
            rhsAirActiveCMSPlanIndicator = that.getAirActiveCMSPlanIndicator();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "airActiveCMSPlanIndicator", lhsAirActiveCMSPlanIndicator), LocatorUtils.property(thatLocator, "airActiveCMSPlanIndicator", rhsAirActiveCMSPlanIndicator), lhsAirActiveCMSPlanIndicator, rhsAirActiveCMSPlanIndicator)) {
                return false;
            }
        }
        {
            Date lhsAirRemovedPlanDate;
            lhsAirRemovedPlanDate = this.getAirRemovedPlanDate();
            Date rhsAirRemovedPlanDate;
            rhsAirRemovedPlanDate = that.getAirRemovedPlanDate();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "airRemovedPlanDate", lhsAirRemovedPlanDate), LocatorUtils.property(thatLocator, "airRemovedPlanDate", rhsAirRemovedPlanDate), lhsAirRemovedPlanDate, rhsAirRemovedPlanDate)) {
                return false;
            }
        }
        {
            String lhsAirReasonChangingCMSComments;
            lhsAirReasonChangingCMSComments = this.getAirReasonChangingCMSComments();
            String rhsAirReasonChangingCMSComments;
            rhsAirReasonChangingCMSComments = that.getAirReasonChangingCMSComments();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "airReasonChangingCMSComments", lhsAirReasonChangingCMSComments), LocatorUtils.property(thatLocator, "airReasonChangingCMSComments", rhsAirReasonChangingCMSComments), lhsAirReasonChangingCMSComments, rhsAirReasonChangingCMSComments)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            String theAirCMSSourceCategoryCode;
            theAirCMSSourceCategoryCode = this.getAirCMSSourceCategoryCode();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "airCMSSourceCategoryCode", theAirCMSSourceCategoryCode), currentHashCode, theAirCMSSourceCategoryCode);
        }
        {
            Integer theAirCMSMinimumFrequency;
            theAirCMSMinimumFrequency = this.getAirCMSMinimumFrequency();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "airCMSMinimumFrequency", theAirCMSMinimumFrequency), currentHashCode, theAirCMSMinimumFrequency);
        }
        {
            Date theAirCMSStartDate;
            theAirCMSStartDate = this.getAirCMSStartDate();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "airCMSStartDate", theAirCMSStartDate), currentHashCode, theAirCMSStartDate);
        }
        {
            YesNoIndicatorTypeBase theAirActiveCMSPlanIndicator;
            theAirActiveCMSPlanIndicator = this.getAirActiveCMSPlanIndicator();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "airActiveCMSPlanIndicator", theAirActiveCMSPlanIndicator), currentHashCode, theAirActiveCMSPlanIndicator);
        }
        {
            Date theAirRemovedPlanDate;
            theAirRemovedPlanDate = this.getAirRemovedPlanDate();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "airRemovedPlanDate", theAirRemovedPlanDate), currentHashCode, theAirRemovedPlanDate);
        }
        {
            String theAirReasonChangingCMSComments;
            theAirReasonChangingCMSComments = this.getAirReasonChangingCMSComments();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "airReasonChangingCMSComments", theAirReasonChangingCMSComments), currentHashCode, theAirReasonChangingCMSComments);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
