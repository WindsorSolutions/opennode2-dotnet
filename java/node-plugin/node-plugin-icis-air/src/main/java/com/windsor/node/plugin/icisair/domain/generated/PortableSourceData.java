//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2014.09.02 at 11:05:46 AM PDT 
//


package com.windsor.node.plugin.icisair.domain.generated;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Embeddable;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.OneToMany;
import javax.persistence.Transient;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;

import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for PortableSourceData complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="PortableSourceData">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element ref="{http://www.exchangenetwork.net/schema/icis/5}PortableSourceIndicator"/>
 *         &lt;element ref="{http://www.exchangenetwork.net/schema/icis/5}PortableSource" maxOccurs="unbounded" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "PortableSourceData", propOrder = {
    "portableSourceIndicator",
    "portableSource"
})
@Embeddable
public class PortableSourceData
    implements Serializable, Equals, HashCode
{

    private final static long serialVersionUID = 1L;
    @XmlElement(name = "PortableSourceIndicator", required = true)
    protected YesNoIndicatorTypeBase portableSourceIndicator;
    @XmlElement(name = "PortableSource")
    protected List<PortableSource> portableSource;

    /**
     * Gets the value of the portableSourceIndicator property.
     * 
     * @return
     *     possible object is
     *     {@link YesNoIndicatorTypeBase }
     *     
     */
    @Basic
    @Column(name = "PORT_SRC_IND", columnDefinition = "char(1)", length = 1)
    @Enumerated(EnumType.STRING)
    public YesNoIndicatorTypeBase getPortableSourceIndicator() {
        return portableSourceIndicator;
    }

    /**
     * Sets the value of the portableSourceIndicator property.
     * 
     * @param value
     *     allowed object is
     *     {@link YesNoIndicatorTypeBase }
     *     
     */
    public void setPortableSourceIndicator(YesNoIndicatorTypeBase value) {
        this.portableSourceIndicator = value;
    }

    @Transient
    public boolean isSetPortableSourceIndicator() {
        return (this.portableSourceIndicator!= null);
    }

    /**
     * Gets the value of the portableSource property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the portableSource property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getPortableSource().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link PortableSource }
     * 
     * 
     */
    @OneToMany(targetEntity = PortableSource.class, cascade = {
        CascadeType.ALL
    })
    /*@JoinTable(name = "ICA_PORT_SRC", joinColumns = {
        @JoinColumn(name = "ICA_FAC_ID", referencedColumnName = "ICA_FAC_ID", insertable = false, updatable = false)
    }, inverseJoinColumns = {
        @JoinColumn(name = "ICA_FAC_ID", insertable = false, updatable = false)
    })*/
    //@JoinColumn(name = "ICA_FAC_ID", insertable = false, updatable = false)
    //@JoinColumn(name = "ICA_FAC_ID", insertable = false, updatable = false)
    //@JoinColumn(name = "ICA_FAC_ID", insertable = false, updatable = false)
    @JoinTable(name = "ICA_PORT_SRC", joinColumns = {
                    @JoinColumn(name = "ICA_FAC_ID", insertable = false, updatable = false)})
    public List<PortableSource> getPortableSource() {
        if (portableSource == null) {
            portableSource = new ArrayList<PortableSource>();
        }
        return this.portableSource;
    }

    /**
     * 
     * 
     */
    public void setPortableSource(List<PortableSource> portableSource) {
        this.portableSource = portableSource;
    }

    @Transient
    public boolean isSetPortableSource() {
        return ((this.portableSource!= null)&&(!this.portableSource.isEmpty()));
    }

    public void unsetPortableSource() {
        this.portableSource = null;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof PortableSourceData)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final PortableSourceData that = ((PortableSourceData) object);
        {
            YesNoIndicatorTypeBase lhsPortableSourceIndicator;
            lhsPortableSourceIndicator = this.getPortableSourceIndicator();
            YesNoIndicatorTypeBase rhsPortableSourceIndicator;
            rhsPortableSourceIndicator = that.getPortableSourceIndicator();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "portableSourceIndicator", lhsPortableSourceIndicator), LocatorUtils.property(thatLocator, "portableSourceIndicator", rhsPortableSourceIndicator), lhsPortableSourceIndicator, rhsPortableSourceIndicator)) {
                return false;
            }
        }
        {
            List<PortableSource> lhsPortableSource;
            lhsPortableSource = (this.isSetPortableSource()?this.getPortableSource():null);
            List<PortableSource> rhsPortableSource;
            rhsPortableSource = (that.isSetPortableSource()?that.getPortableSource():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "portableSource", lhsPortableSource), LocatorUtils.property(thatLocator, "portableSource", rhsPortableSource), lhsPortableSource, rhsPortableSource)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            YesNoIndicatorTypeBase thePortableSourceIndicator;
            thePortableSourceIndicator = this.getPortableSourceIndicator();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "portableSourceIndicator", thePortableSourceIndicator), currentHashCode, thePortableSourceIndicator);
        }
        {
            List<PortableSource> thePortableSource;
            thePortableSource = (this.isSetPortableSource()?this.getPortableSource():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "portableSource", thePortableSource), currentHashCode, thePortableSource);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
