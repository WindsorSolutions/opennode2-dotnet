//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2014.09.02 at 11:05:46 AM PDT 
//


package com.windsor.node.plugin.icisair.domain.generated;

import java.io.Serializable;
import javax.persistence.Basic;
import javax.persistence.Column;
import javax.persistence.Embeddable;
import javax.persistence.Transient;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for AirGeographicCoordinateData complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="AirGeographicCoordinateData">
 *   &lt;complexContent>
 *     &lt;extension base="{http://www.exchangenetwork.net/schema/icis/5}GeographicCoordinates">
 *       &lt;sequence>
 *         &lt;element ref="{http://www.exchangenetwork.net/schema/icis/5}UTMCoordinate1" minOccurs="0"/>
 *         &lt;element ref="{http://www.exchangenetwork.net/schema/icis/5}UTMCoordinate2" minOccurs="0"/>
 *         &lt;element ref="{http://www.exchangenetwork.net/schema/icis/5}UTMCoordinate3" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "AirGeographicCoordinateData", propOrder = {
    "utmCoordinate1",
    "utmCoordinate2",
    "utmCoordinate3"
})
@Embeddable
public class AirGeographicCoordinateData
    extends GeographicCoordinates
    implements Serializable, Equals, HashCode
{

    private final static long serialVersionUID = 1L;
    @XmlElement(name = "UTMCoordinate1")
    protected String utmCoordinate1;
    @XmlElement(name = "UTMCoordinate2")
    protected String utmCoordinate2;
    @XmlElement(name = "UTMCoordinate3")
    protected String utmCoordinate3;

    /**
     * Gets the value of the utmCoordinate1 property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "UTM_COORD_1", length = 20)
    public String getUTMCoordinate1() {
        return utmCoordinate1;
    }

    /**
     * Sets the value of the utmCoordinate1 property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setUTMCoordinate1(String value) {
        this.utmCoordinate1 = value;
    }

    @Transient
    public boolean isSetUTMCoordinate1() {
        return (this.utmCoordinate1 != null);
    }

    /**
     * Gets the value of the utmCoordinate2 property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "UTM_COORD_2", length = 20)
    public String getUTMCoordinate2() {
        return utmCoordinate2;
    }

    /**
     * Sets the value of the utmCoordinate2 property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setUTMCoordinate2(String value) {
        this.utmCoordinate2 = value;
    }

    @Transient
    public boolean isSetUTMCoordinate2() {
        return (this.utmCoordinate2 != null);
    }

    /**
     * Gets the value of the utmCoordinate3 property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "UTM_COORD_3", length = 20)
    public String getUTMCoordinate3() {
        return utmCoordinate3;
    }

    /**
     * Sets the value of the utmCoordinate3 property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setUTMCoordinate3(String value) {
        this.utmCoordinate3 = value;
    }

    @Transient
    public boolean isSetUTMCoordinate3() {
        return (this.utmCoordinate3 != null);
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof AirGeographicCoordinateData)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final AirGeographicCoordinateData that = ((AirGeographicCoordinateData) object);
        {
            String lhsUTMCoordinate1;
            lhsUTMCoordinate1 = this.getUTMCoordinate1();
            String rhsUTMCoordinate1;
            rhsUTMCoordinate1 = that.getUTMCoordinate1();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "utmCoordinate1", lhsUTMCoordinate1), LocatorUtils.property(thatLocator, "utmCoordinate1", rhsUTMCoordinate1), lhsUTMCoordinate1, rhsUTMCoordinate1)) {
                return false;
            }
        }
        {
            String lhsUTMCoordinate2;
            lhsUTMCoordinate2 = this.getUTMCoordinate2();
            String rhsUTMCoordinate2;
            rhsUTMCoordinate2 = that.getUTMCoordinate2();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "utmCoordinate2", lhsUTMCoordinate2), LocatorUtils.property(thatLocator, "utmCoordinate2", rhsUTMCoordinate2), lhsUTMCoordinate2, rhsUTMCoordinate2)) {
                return false;
            }
        }
        {
            String lhsUTMCoordinate3;
            lhsUTMCoordinate3 = this.getUTMCoordinate3();
            String rhsUTMCoordinate3;
            rhsUTMCoordinate3 = that.getUTMCoordinate3();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "utmCoordinate3", lhsUTMCoordinate3), LocatorUtils.property(thatLocator, "utmCoordinate3", rhsUTMCoordinate3), lhsUTMCoordinate3, rhsUTMCoordinate3)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            String theUTMCoordinate1;
            theUTMCoordinate1 = this.getUTMCoordinate1();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "utmCoordinate1", theUTMCoordinate1), currentHashCode, theUTMCoordinate1);
        }
        {
            String theUTMCoordinate2;
            theUTMCoordinate2 = this.getUTMCoordinate2();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "utmCoordinate2", theUTMCoordinate2), currentHashCode, theUTMCoordinate2);
        }
        {
            String theUTMCoordinate3;
            theUTMCoordinate3 = this.getUTMCoordinate3();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "utmCoordinate3", theUTMCoordinate3), currentHashCode, theUTMCoordinate3);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
