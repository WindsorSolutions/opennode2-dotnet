//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.12.07 at 11:39:25 AM EST 
//


package com.windsor.node.plugin.icisnpdes.generated;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import javax.persistence.Basic;
import javax.persistence.CollectionTable;
import javax.persistence.Column;
import javax.persistence.ElementCollection;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Inheritance;
import javax.persistence.InheritanceType;
import javax.persistence.JoinColumn;
import javax.persistence.Table;
import javax.persistence.Transient;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlTransient;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
import com.windsor.node.plugin.common.xml.bind.annotation.adapters.IntegerAdapter;
import com.windsor.node.plugin.icisnpdes.domain.AbstractHasComplianceMonitoring;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for StormWaterMS4Inspection complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="StormWaterMS4Inspection">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;group ref="{http://www.exchangenetwork.net/schema/icis/5}StormWaterFundingGroup" minOccurs="0"/>
 *         &lt;group ref="{http://www.exchangenetwork.net/schema/icis/5}StormWaterFundingSourceGroup" minOccurs="0"/>
 *         &lt;group ref="{http://www.exchangenetwork.net/schema/icis/5}StormWaterMS4OutfallEstimateGroup" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "StormWaterMS4Inspection", propOrder = {
    "ms4AnnualExpenditureDollars",
    "ms4AnnualExpenditureYear",
    "ms4BudgetDollars",
    "ms4BudgetYear",
    "projectedSourcesFundingCode",
    "majorOutfallEstimatedMeasureIndicator",
    "majorOutfallNumber",
    "minorOutfallEstimatedMeasureIndicator",
    "minorOutfallNumber"
})
@Entity(name = "StormWaterMS4Inspection")
@Table(name = "ICS_SW_MS_4_INSP")
@Inheritance(strategy = InheritanceType.JOINED)
public class StormWaterMS4Inspection
    extends AbstractHasComplianceMonitoring
    implements Serializable, Equals, HashCode
{

    private final static long serialVersionUID = 1L;
    @XmlElement(name = "MS4AnnualExpenditureDollars", type = String.class)
    @XmlJavaTypeAdapter(IntegerAdapter.class)
    protected Integer ms4AnnualExpenditureDollars;
    @XmlElement(name = "MS4AnnualExpenditureYear", type = String.class)
    @XmlJavaTypeAdapter(IntegerAdapter.class)
    protected Integer ms4AnnualExpenditureYear;
    @XmlElement(name = "MS4BudgetDollars", type = String.class)
    @XmlJavaTypeAdapter(IntegerAdapter.class)
    protected Integer ms4BudgetDollars;
    @XmlElement(name = "MS4BudgetYear", type = String.class)
    @XmlJavaTypeAdapter(IntegerAdapter.class)
    protected Integer ms4BudgetYear;
    @XmlElement(name = "ProjectedSourcesFundingCode")
    protected List<String> projectedSourcesFundingCode;
    @XmlElement(name = "MajorOutfallEstimatedMeasureIndicator")
    protected String majorOutfallEstimatedMeasureIndicator;
    @XmlElement(name = "MajorOutfallNumber", type = String.class)
    @XmlJavaTypeAdapter(IntegerAdapter.class)
    protected Integer majorOutfallNumber;
    @XmlElement(name = "MinorOutfallEstimatedMeasureIndicator")
    protected String minorOutfallEstimatedMeasureIndicator;
    @XmlElement(name = "MinorOutfallNumber", type = String.class)
    @XmlJavaTypeAdapter(IntegerAdapter.class)
    protected Integer minorOutfallNumber;
    @XmlTransient
    protected String dbid;

    /**
     * Gets the value of the ms4AnnualExpenditureDollars property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "MS_4_ANNUL_EXPEN_DOLLARS", scale = 0)
    public Integer getMS4AnnualExpenditureDollars() {
        return ms4AnnualExpenditureDollars;
    }

    /**
     * Sets the value of the ms4AnnualExpenditureDollars property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setMS4AnnualExpenditureDollars(Integer value) {
        this.ms4AnnualExpenditureDollars = value;
    }

    @Transient
    public boolean isSetMS4AnnualExpenditureDollars() {
        return (this.ms4AnnualExpenditureDollars!= null);
    }

    /**
     * Gets the value of the ms4AnnualExpenditureYear property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "MS_4_ANNUL_EXPEN_YEAR", scale = 0)
    public Integer getMS4AnnualExpenditureYear() {
        return ms4AnnualExpenditureYear;
    }

    /**
     * Sets the value of the ms4AnnualExpenditureYear property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setMS4AnnualExpenditureYear(Integer value) {
        this.ms4AnnualExpenditureYear = value;
    }

    @Transient
    public boolean isSetMS4AnnualExpenditureYear() {
        return (this.ms4AnnualExpenditureYear!= null);
    }

    /**
     * Gets the value of the ms4BudgetDollars property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "MS_4_BUDGET_DOLLARS", scale = 0)
    public Integer getMS4BudgetDollars() {
        return ms4BudgetDollars;
    }

    /**
     * Sets the value of the ms4BudgetDollars property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setMS4BudgetDollars(Integer value) {
        this.ms4BudgetDollars = value;
    }

    @Transient
    public boolean isSetMS4BudgetDollars() {
        return (this.ms4BudgetDollars!= null);
    }

    /**
     * Gets the value of the ms4BudgetYear property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "MS_4_BUDGET_YEAR", scale = 0)
    public Integer getMS4BudgetYear() {
        return ms4BudgetYear;
    }

    /**
     * Sets the value of the ms4BudgetYear property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setMS4BudgetYear(Integer value) {
        this.ms4BudgetYear = value;
    }

    @Transient
    public boolean isSetMS4BudgetYear() {
        return (this.ms4BudgetYear!= null);
    }

    /**
     * Gets the value of the projectedSourcesFundingCode property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the projectedSourcesFundingCode property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getProjectedSourcesFundingCode().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link String }
     * 
     * 
     */
    @ElementCollection
    @Column(name = "PROJ_SRCS_FUND_CODE", length = 3)
    @CollectionTable(name = "ICS_PROJ_SRCS_FUND", joinColumns = {
        @JoinColumn(name = "ICS_SW_MS_4_INSP_ID")
    })
    public List<String> getProjectedSourcesFundingCode() {
        if (projectedSourcesFundingCode == null) {
            projectedSourcesFundingCode = new ArrayList<String>();
        }
        return this.projectedSourcesFundingCode;
    }

    /**
     * 
     * 
     */
    public void setProjectedSourcesFundingCode(List<String> projectedSourcesFundingCode) {
        this.projectedSourcesFundingCode = projectedSourcesFundingCode;
    }

    @Transient
    public boolean isSetProjectedSourcesFundingCode() {
        return ((this.projectedSourcesFundingCode!= null)&&(!this.projectedSourcesFundingCode.isEmpty()));
    }

    public void unsetProjectedSourcesFundingCode() {
        this.projectedSourcesFundingCode = null;
    }

    /**
     * Gets the value of the majorOutfallEstimatedMeasureIndicator property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "MAJOR_OUTFALL_EST_MEAS_IND", columnDefinition = "char(1)", length = 1)
    public String getMajorOutfallEstimatedMeasureIndicator() {
        return majorOutfallEstimatedMeasureIndicator;
    }

    /**
     * Sets the value of the majorOutfallEstimatedMeasureIndicator property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setMajorOutfallEstimatedMeasureIndicator(String value) {
        this.majorOutfallEstimatedMeasureIndicator = value;
    }

    @Transient
    public boolean isSetMajorOutfallEstimatedMeasureIndicator() {
        return (this.majorOutfallEstimatedMeasureIndicator!= null);
    }

    /**
     * Gets the value of the majorOutfallNumber property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "MAJOR_OUTFALL_NUM", scale = 0)
    public Integer getMajorOutfallNumber() {
        return majorOutfallNumber;
    }

    /**
     * Sets the value of the majorOutfallNumber property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setMajorOutfallNumber(Integer value) {
        this.majorOutfallNumber = value;
    }

    @Transient
    public boolean isSetMajorOutfallNumber() {
        return (this.majorOutfallNumber!= null);
    }

    /**
     * Gets the value of the minorOutfallEstimatedMeasureIndicator property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "MINOR_OUTFALL_EST_MEAS_IND", columnDefinition = "char(1)", length = 1)
    public String getMinorOutfallEstimatedMeasureIndicator() {
        return minorOutfallEstimatedMeasureIndicator;
    }

    /**
     * Sets the value of the minorOutfallEstimatedMeasureIndicator property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setMinorOutfallEstimatedMeasureIndicator(String value) {
        this.minorOutfallEstimatedMeasureIndicator = value;
    }

    @Transient
    public boolean isSetMinorOutfallEstimatedMeasureIndicator() {
        return (this.minorOutfallEstimatedMeasureIndicator!= null);
    }

    /**
     * Gets the value of the minorOutfallNumber property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "MINOR_OUTFALL_NUM", scale = 0)
    public Integer getMinorOutfallNumber() {
        return minorOutfallNumber;
    }

    /**
     * Sets the value of the minorOutfallNumber property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setMinorOutfallNumber(Integer value) {
        this.minorOutfallNumber = value;
    }

    @Transient
    public boolean isSetMinorOutfallNumber() {
        return (this.minorOutfallNumber!= null);
    }

    /**
     * 
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Id
    @Column(name = "ICS_SW_MS_4_INSP_ID")
    @GeneratedValue(strategy = GenerationType.AUTO)
    public String getDbid() {
        return dbid;
    }

    /**
     * 
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setDbid(String value) {
        this.dbid = value;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof StormWaterMS4Inspection)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final StormWaterMS4Inspection that = ((StormWaterMS4Inspection) object);
        {
            Integer lhsMS4AnnualExpenditureDollars;
            lhsMS4AnnualExpenditureDollars = this.getMS4AnnualExpenditureDollars();
            Integer rhsMS4AnnualExpenditureDollars;
            rhsMS4AnnualExpenditureDollars = that.getMS4AnnualExpenditureDollars();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "ms4AnnualExpenditureDollars", lhsMS4AnnualExpenditureDollars), LocatorUtils.property(thatLocator, "ms4AnnualExpenditureDollars", rhsMS4AnnualExpenditureDollars), lhsMS4AnnualExpenditureDollars, rhsMS4AnnualExpenditureDollars)) {
                return false;
            }
        }
        {
            Integer lhsMS4AnnualExpenditureYear;
            lhsMS4AnnualExpenditureYear = this.getMS4AnnualExpenditureYear();
            Integer rhsMS4AnnualExpenditureYear;
            rhsMS4AnnualExpenditureYear = that.getMS4AnnualExpenditureYear();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "ms4AnnualExpenditureYear", lhsMS4AnnualExpenditureYear), LocatorUtils.property(thatLocator, "ms4AnnualExpenditureYear", rhsMS4AnnualExpenditureYear), lhsMS4AnnualExpenditureYear, rhsMS4AnnualExpenditureYear)) {
                return false;
            }
        }
        {
            Integer lhsMS4BudgetDollars;
            lhsMS4BudgetDollars = this.getMS4BudgetDollars();
            Integer rhsMS4BudgetDollars;
            rhsMS4BudgetDollars = that.getMS4BudgetDollars();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "ms4BudgetDollars", lhsMS4BudgetDollars), LocatorUtils.property(thatLocator, "ms4BudgetDollars", rhsMS4BudgetDollars), lhsMS4BudgetDollars, rhsMS4BudgetDollars)) {
                return false;
            }
        }
        {
            Integer lhsMS4BudgetYear;
            lhsMS4BudgetYear = this.getMS4BudgetYear();
            Integer rhsMS4BudgetYear;
            rhsMS4BudgetYear = that.getMS4BudgetYear();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "ms4BudgetYear", lhsMS4BudgetYear), LocatorUtils.property(thatLocator, "ms4BudgetYear", rhsMS4BudgetYear), lhsMS4BudgetYear, rhsMS4BudgetYear)) {
                return false;
            }
        }
        {
            List<String> lhsProjectedSourcesFundingCode;
            lhsProjectedSourcesFundingCode = (this.isSetProjectedSourcesFundingCode()?this.getProjectedSourcesFundingCode():null);
            List<String> rhsProjectedSourcesFundingCode;
            rhsProjectedSourcesFundingCode = (that.isSetProjectedSourcesFundingCode()?that.getProjectedSourcesFundingCode():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "projectedSourcesFundingCode", lhsProjectedSourcesFundingCode), LocatorUtils.property(thatLocator, "projectedSourcesFundingCode", rhsProjectedSourcesFundingCode), lhsProjectedSourcesFundingCode, rhsProjectedSourcesFundingCode)) {
                return false;
            }
        }
        {
            String lhsMajorOutfallEstimatedMeasureIndicator;
            lhsMajorOutfallEstimatedMeasureIndicator = this.getMajorOutfallEstimatedMeasureIndicator();
            String rhsMajorOutfallEstimatedMeasureIndicator;
            rhsMajorOutfallEstimatedMeasureIndicator = that.getMajorOutfallEstimatedMeasureIndicator();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "majorOutfallEstimatedMeasureIndicator", lhsMajorOutfallEstimatedMeasureIndicator), LocatorUtils.property(thatLocator, "majorOutfallEstimatedMeasureIndicator", rhsMajorOutfallEstimatedMeasureIndicator), lhsMajorOutfallEstimatedMeasureIndicator, rhsMajorOutfallEstimatedMeasureIndicator)) {
                return false;
            }
        }
        {
            Integer lhsMajorOutfallNumber;
            lhsMajorOutfallNumber = this.getMajorOutfallNumber();
            Integer rhsMajorOutfallNumber;
            rhsMajorOutfallNumber = that.getMajorOutfallNumber();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "majorOutfallNumber", lhsMajorOutfallNumber), LocatorUtils.property(thatLocator, "majorOutfallNumber", rhsMajorOutfallNumber), lhsMajorOutfallNumber, rhsMajorOutfallNumber)) {
                return false;
            }
        }
        {
            String lhsMinorOutfallEstimatedMeasureIndicator;
            lhsMinorOutfallEstimatedMeasureIndicator = this.getMinorOutfallEstimatedMeasureIndicator();
            String rhsMinorOutfallEstimatedMeasureIndicator;
            rhsMinorOutfallEstimatedMeasureIndicator = that.getMinorOutfallEstimatedMeasureIndicator();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "minorOutfallEstimatedMeasureIndicator", lhsMinorOutfallEstimatedMeasureIndicator), LocatorUtils.property(thatLocator, "minorOutfallEstimatedMeasureIndicator", rhsMinorOutfallEstimatedMeasureIndicator), lhsMinorOutfallEstimatedMeasureIndicator, rhsMinorOutfallEstimatedMeasureIndicator)) {
                return false;
            }
        }
        {
            Integer lhsMinorOutfallNumber;
            lhsMinorOutfallNumber = this.getMinorOutfallNumber();
            Integer rhsMinorOutfallNumber;
            rhsMinorOutfallNumber = that.getMinorOutfallNumber();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "minorOutfallNumber", lhsMinorOutfallNumber), LocatorUtils.property(thatLocator, "minorOutfallNumber", rhsMinorOutfallNumber), lhsMinorOutfallNumber, rhsMinorOutfallNumber)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            Integer theMS4AnnualExpenditureDollars;
            theMS4AnnualExpenditureDollars = this.getMS4AnnualExpenditureDollars();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "ms4AnnualExpenditureDollars", theMS4AnnualExpenditureDollars), currentHashCode, theMS4AnnualExpenditureDollars);
        }
        {
            Integer theMS4AnnualExpenditureYear;
            theMS4AnnualExpenditureYear = this.getMS4AnnualExpenditureYear();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "ms4AnnualExpenditureYear", theMS4AnnualExpenditureYear), currentHashCode, theMS4AnnualExpenditureYear);
        }
        {
            Integer theMS4BudgetDollars;
            theMS4BudgetDollars = this.getMS4BudgetDollars();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "ms4BudgetDollars", theMS4BudgetDollars), currentHashCode, theMS4BudgetDollars);
        }
        {
            Integer theMS4BudgetYear;
            theMS4BudgetYear = this.getMS4BudgetYear();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "ms4BudgetYear", theMS4BudgetYear), currentHashCode, theMS4BudgetYear);
        }
        {
            List<String> theProjectedSourcesFundingCode;
            theProjectedSourcesFundingCode = (this.isSetProjectedSourcesFundingCode()?this.getProjectedSourcesFundingCode():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "projectedSourcesFundingCode", theProjectedSourcesFundingCode), currentHashCode, theProjectedSourcesFundingCode);
        }
        {
            String theMajorOutfallEstimatedMeasureIndicator;
            theMajorOutfallEstimatedMeasureIndicator = this.getMajorOutfallEstimatedMeasureIndicator();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "majorOutfallEstimatedMeasureIndicator", theMajorOutfallEstimatedMeasureIndicator), currentHashCode, theMajorOutfallEstimatedMeasureIndicator);
        }
        {
            Integer theMajorOutfallNumber;
            theMajorOutfallNumber = this.getMajorOutfallNumber();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "majorOutfallNumber", theMajorOutfallNumber), currentHashCode, theMajorOutfallNumber);
        }
        {
            String theMinorOutfallEstimatedMeasureIndicator;
            theMinorOutfallEstimatedMeasureIndicator = this.getMinorOutfallEstimatedMeasureIndicator();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "minorOutfallEstimatedMeasureIndicator", theMinorOutfallEstimatedMeasureIndicator), currentHashCode, theMinorOutfallEstimatedMeasureIndicator);
        }
        {
            Integer theMinorOutfallNumber;
            theMinorOutfallNumber = this.getMinorOutfallNumber();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "minorOutfallNumber", theMinorOutfallNumber), currentHashCode, theMinorOutfallNumber);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
