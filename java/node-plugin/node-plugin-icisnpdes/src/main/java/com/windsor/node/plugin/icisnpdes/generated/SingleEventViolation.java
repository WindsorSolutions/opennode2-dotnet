//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.12.07 at 11:39:25 AM EST 
//


package com.windsor.node.plugin.icisnpdes.generated;

import java.io.Serializable;
import java.util.Date;
import javax.persistence.Basic;
import javax.persistence.Column;
import javax.persistence.Embeddable;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
import com.windsor.node.plugin.common.xml.bind.annotation.adapters.DateNoTimeZoneAdapter;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for SingleEventViolation complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="SingleEventViolation">
 *   &lt;complexContent>
 *     &lt;extension base="{http://www.exchangenetwork.net/schema/icis/5}SingleEventKeyElements">
 *       &lt;sequence>
 *         &lt;element ref="{http://www.exchangenetwork.net/schema/icis/5}SingleEventViolationEndDate" minOccurs="0"/>
 *         &lt;group ref="{http://www.exchangenetwork.net/schema/icis/5}ReportableNonComplianceDetectionDataGroup" minOccurs="0"/>
 *         &lt;group ref="{http://www.exchangenetwork.net/schema/icis/5}ReportableNonComplianceResolutionDataGroup" minOccurs="0"/>
 *         &lt;element ref="{http://www.exchangenetwork.net/schema/icis/5}SingleEventUserDefinedField1" minOccurs="0"/>
 *         &lt;element ref="{http://www.exchangenetwork.net/schema/icis/5}SingleEventUserDefinedField2" minOccurs="0"/>
 *         &lt;element ref="{http://www.exchangenetwork.net/schema/icis/5}SingleEventUserDefinedField3" minOccurs="0"/>
 *         &lt;element ref="{http://www.exchangenetwork.net/schema/icis/5}SingleEventUserDefinedField4" minOccurs="0"/>
 *         &lt;element ref="{http://www.exchangenetwork.net/schema/icis/5}SingleEventUserDefinedField5" minOccurs="0"/>
 *         &lt;element ref="{http://www.exchangenetwork.net/schema/icis/5}SingleEventCommentText" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "SingleEventViolation", propOrder = {
    "singleEventViolationEndDate",
    "reportableNonComplianceDetectionCode",
    "reportableNonComplianceDetectionDate",
    "reportableNonComplianceResolutionCode",
    "reportableNonComplianceResolutionDate",
    "singleEventUserDefinedField1",
    "singleEventUserDefinedField2",
    "singleEventUserDefinedField3",
    "singleEventUserDefinedField4",
    "singleEventUserDefinedField5",
    "singleEventCommentText"
})
@Embeddable
public class SingleEventViolation
    extends SingleEventKeyElements
    implements Serializable, Equals, HashCode
{

    private final static long serialVersionUID = 1L;
    @XmlElement(name = "SingleEventViolationEndDate", type = String.class)
    @XmlJavaTypeAdapter(DateNoTimeZoneAdapter.class)
    protected Date singleEventViolationEndDate;
    @XmlElement(name = "ReportableNonComplianceDetectionCode")
    protected String reportableNonComplianceDetectionCode;
    @XmlElement(name = "ReportableNonComplianceDetectionDate", type = String.class)
    @XmlJavaTypeAdapter(DateNoTimeZoneAdapter.class)
    protected Date reportableNonComplianceDetectionDate;
    @XmlElement(name = "ReportableNonComplianceResolutionCode")
    protected String reportableNonComplianceResolutionCode;
    @XmlElement(name = "ReportableNonComplianceResolutionDate", type = String.class)
    @XmlJavaTypeAdapter(DateNoTimeZoneAdapter.class)
    protected Date reportableNonComplianceResolutionDate;
    @XmlElement(name = "SingleEventUserDefinedField1")
    protected String singleEventUserDefinedField1;
    @XmlElement(name = "SingleEventUserDefinedField2")
    protected String singleEventUserDefinedField2;
    @XmlElement(name = "SingleEventUserDefinedField3")
    protected String singleEventUserDefinedField3;
    @XmlElement(name = "SingleEventUserDefinedField4")
    protected String singleEventUserDefinedField4;
    @XmlElement(name = "SingleEventUserDefinedField5")
    protected String singleEventUserDefinedField5;
    @XmlElement(name = "SingleEventCommentText")
    protected String singleEventCommentText;

    /**
     * Gets the value of the singleEventViolationEndDate property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "SNGL_EVT_VIOL_END_DATE")
    @Temporal(TemporalType.TIMESTAMP)
    public Date getSingleEventViolationEndDate() {
        return singleEventViolationEndDate;
    }

    /**
     * Sets the value of the singleEventViolationEndDate property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setSingleEventViolationEndDate(Date value) {
        this.singleEventViolationEndDate = value;
    }

    @Transient
    public boolean isSetSingleEventViolationEndDate() {
        return (this.singleEventViolationEndDate!= null);
    }

    /**
     * Gets the value of the reportableNonComplianceDetectionCode property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "REP_NON_CMPL_DETECT_CODE", length = 3)
    public String getReportableNonComplianceDetectionCode() {
        return reportableNonComplianceDetectionCode;
    }

    /**
     * Sets the value of the reportableNonComplianceDetectionCode property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setReportableNonComplianceDetectionCode(String value) {
        this.reportableNonComplianceDetectionCode = value;
    }

    @Transient
    public boolean isSetReportableNonComplianceDetectionCode() {
        return (this.reportableNonComplianceDetectionCode!= null);
    }

    /**
     * Gets the value of the reportableNonComplianceDetectionDate property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "REP_NON_CMPL_DETECT_DATE")
    @Temporal(TemporalType.TIMESTAMP)
    public Date getReportableNonComplianceDetectionDate() {
        return reportableNonComplianceDetectionDate;
    }

    /**
     * Sets the value of the reportableNonComplianceDetectionDate property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setReportableNonComplianceDetectionDate(Date value) {
        this.reportableNonComplianceDetectionDate = value;
    }

    @Transient
    public boolean isSetReportableNonComplianceDetectionDate() {
        return (this.reportableNonComplianceDetectionDate!= null);
    }

    /**
     * Gets the value of the reportableNonComplianceResolutionCode property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "REP_NON_CMPL_RESL_CODE", length = 3)
    public String getReportableNonComplianceResolutionCode() {
        return reportableNonComplianceResolutionCode;
    }

    /**
     * Sets the value of the reportableNonComplianceResolutionCode property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setReportableNonComplianceResolutionCode(String value) {
        this.reportableNonComplianceResolutionCode = value;
    }

    @Transient
    public boolean isSetReportableNonComplianceResolutionCode() {
        return (this.reportableNonComplianceResolutionCode!= null);
    }

    /**
     * Gets the value of the reportableNonComplianceResolutionDate property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "REP_NON_CMPL_RESL_DATE")
    @Temporal(TemporalType.TIMESTAMP)
    public Date getReportableNonComplianceResolutionDate() {
        return reportableNonComplianceResolutionDate;
    }

    /**
     * Sets the value of the reportableNonComplianceResolutionDate property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setReportableNonComplianceResolutionDate(Date value) {
        this.reportableNonComplianceResolutionDate = value;
    }

    @Transient
    public boolean isSetReportableNonComplianceResolutionDate() {
        return (this.reportableNonComplianceResolutionDate!= null);
    }

    /**
     * Gets the value of the singleEventUserDefinedField1 property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "SNGL_EVT_USR_DFND_FLD_1", length = 30)
    public String getSingleEventUserDefinedField1() {
        return singleEventUserDefinedField1;
    }

    /**
     * Sets the value of the singleEventUserDefinedField1 property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setSingleEventUserDefinedField1(String value) {
        this.singleEventUserDefinedField1 = value;
    }

    @Transient
    public boolean isSetSingleEventUserDefinedField1() {
        return (this.singleEventUserDefinedField1 != null);
    }

    /**
     * Gets the value of the singleEventUserDefinedField2 property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "SNGL_EVT_USR_DFND_FLD_2", length = 30)
    public String getSingleEventUserDefinedField2() {
        return singleEventUserDefinedField2;
    }

    /**
     * Sets the value of the singleEventUserDefinedField2 property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setSingleEventUserDefinedField2(String value) {
        this.singleEventUserDefinedField2 = value;
    }

    @Transient
    public boolean isSetSingleEventUserDefinedField2() {
        return (this.singleEventUserDefinedField2 != null);
    }

    /**
     * Gets the value of the singleEventUserDefinedField3 property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "SNGL_EVT_USR_DFND_FLD_3", length = 30)
    public String getSingleEventUserDefinedField3() {
        return singleEventUserDefinedField3;
    }

    /**
     * Sets the value of the singleEventUserDefinedField3 property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setSingleEventUserDefinedField3(String value) {
        this.singleEventUserDefinedField3 = value;
    }

    @Transient
    public boolean isSetSingleEventUserDefinedField3() {
        return (this.singleEventUserDefinedField3 != null);
    }

    /**
     * Gets the value of the singleEventUserDefinedField4 property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "SNGL_EVT_USR_DFND_FLD_4", length = 30)
    public String getSingleEventUserDefinedField4() {
        return singleEventUserDefinedField4;
    }

    /**
     * Sets the value of the singleEventUserDefinedField4 property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setSingleEventUserDefinedField4(String value) {
        this.singleEventUserDefinedField4 = value;
    }

    @Transient
    public boolean isSetSingleEventUserDefinedField4() {
        return (this.singleEventUserDefinedField4 != null);
    }

    /**
     * Gets the value of the singleEventUserDefinedField5 property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "SNGL_EVT_USR_DFND_FLD_5", length = 30)
    public String getSingleEventUserDefinedField5() {
        return singleEventUserDefinedField5;
    }

    /**
     * Sets the value of the singleEventUserDefinedField5 property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setSingleEventUserDefinedField5(String value) {
        this.singleEventUserDefinedField5 = value;
    }

    @Transient
    public boolean isSetSingleEventUserDefinedField5() {
        return (this.singleEventUserDefinedField5 != null);
    }

    /**
     * Gets the value of the singleEventCommentText property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "SNGL_EVT_CMNT_TXT", columnDefinition = "varchar(4000)", length = 4000)
    public String getSingleEventCommentText() {
        return singleEventCommentText;
    }

    /**
     * Sets the value of the singleEventCommentText property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setSingleEventCommentText(String value) {
        this.singleEventCommentText = value;
    }

    @Transient
    public boolean isSetSingleEventCommentText() {
        return (this.singleEventCommentText!= null);
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof SingleEventViolation)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final SingleEventViolation that = ((SingleEventViolation) object);
        {
            Date lhsSingleEventViolationEndDate;
            lhsSingleEventViolationEndDate = this.getSingleEventViolationEndDate();
            Date rhsSingleEventViolationEndDate;
            rhsSingleEventViolationEndDate = that.getSingleEventViolationEndDate();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "singleEventViolationEndDate", lhsSingleEventViolationEndDate), LocatorUtils.property(thatLocator, "singleEventViolationEndDate", rhsSingleEventViolationEndDate), lhsSingleEventViolationEndDate, rhsSingleEventViolationEndDate)) {
                return false;
            }
        }
        {
            String lhsReportableNonComplianceDetectionCode;
            lhsReportableNonComplianceDetectionCode = this.getReportableNonComplianceDetectionCode();
            String rhsReportableNonComplianceDetectionCode;
            rhsReportableNonComplianceDetectionCode = that.getReportableNonComplianceDetectionCode();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "reportableNonComplianceDetectionCode", lhsReportableNonComplianceDetectionCode), LocatorUtils.property(thatLocator, "reportableNonComplianceDetectionCode", rhsReportableNonComplianceDetectionCode), lhsReportableNonComplianceDetectionCode, rhsReportableNonComplianceDetectionCode)) {
                return false;
            }
        }
        {
            Date lhsReportableNonComplianceDetectionDate;
            lhsReportableNonComplianceDetectionDate = this.getReportableNonComplianceDetectionDate();
            Date rhsReportableNonComplianceDetectionDate;
            rhsReportableNonComplianceDetectionDate = that.getReportableNonComplianceDetectionDate();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "reportableNonComplianceDetectionDate", lhsReportableNonComplianceDetectionDate), LocatorUtils.property(thatLocator, "reportableNonComplianceDetectionDate", rhsReportableNonComplianceDetectionDate), lhsReportableNonComplianceDetectionDate, rhsReportableNonComplianceDetectionDate)) {
                return false;
            }
        }
        {
            String lhsReportableNonComplianceResolutionCode;
            lhsReportableNonComplianceResolutionCode = this.getReportableNonComplianceResolutionCode();
            String rhsReportableNonComplianceResolutionCode;
            rhsReportableNonComplianceResolutionCode = that.getReportableNonComplianceResolutionCode();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "reportableNonComplianceResolutionCode", lhsReportableNonComplianceResolutionCode), LocatorUtils.property(thatLocator, "reportableNonComplianceResolutionCode", rhsReportableNonComplianceResolutionCode), lhsReportableNonComplianceResolutionCode, rhsReportableNonComplianceResolutionCode)) {
                return false;
            }
        }
        {
            Date lhsReportableNonComplianceResolutionDate;
            lhsReportableNonComplianceResolutionDate = this.getReportableNonComplianceResolutionDate();
            Date rhsReportableNonComplianceResolutionDate;
            rhsReportableNonComplianceResolutionDate = that.getReportableNonComplianceResolutionDate();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "reportableNonComplianceResolutionDate", lhsReportableNonComplianceResolutionDate), LocatorUtils.property(thatLocator, "reportableNonComplianceResolutionDate", rhsReportableNonComplianceResolutionDate), lhsReportableNonComplianceResolutionDate, rhsReportableNonComplianceResolutionDate)) {
                return false;
            }
        }
        {
            String lhsSingleEventUserDefinedField1;
            lhsSingleEventUserDefinedField1 = this.getSingleEventUserDefinedField1();
            String rhsSingleEventUserDefinedField1;
            rhsSingleEventUserDefinedField1 = that.getSingleEventUserDefinedField1();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "singleEventUserDefinedField1", lhsSingleEventUserDefinedField1), LocatorUtils.property(thatLocator, "singleEventUserDefinedField1", rhsSingleEventUserDefinedField1), lhsSingleEventUserDefinedField1, rhsSingleEventUserDefinedField1)) {
                return false;
            }
        }
        {
            String lhsSingleEventUserDefinedField2;
            lhsSingleEventUserDefinedField2 = this.getSingleEventUserDefinedField2();
            String rhsSingleEventUserDefinedField2;
            rhsSingleEventUserDefinedField2 = that.getSingleEventUserDefinedField2();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "singleEventUserDefinedField2", lhsSingleEventUserDefinedField2), LocatorUtils.property(thatLocator, "singleEventUserDefinedField2", rhsSingleEventUserDefinedField2), lhsSingleEventUserDefinedField2, rhsSingleEventUserDefinedField2)) {
                return false;
            }
        }
        {
            String lhsSingleEventUserDefinedField3;
            lhsSingleEventUserDefinedField3 = this.getSingleEventUserDefinedField3();
            String rhsSingleEventUserDefinedField3;
            rhsSingleEventUserDefinedField3 = that.getSingleEventUserDefinedField3();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "singleEventUserDefinedField3", lhsSingleEventUserDefinedField3), LocatorUtils.property(thatLocator, "singleEventUserDefinedField3", rhsSingleEventUserDefinedField3), lhsSingleEventUserDefinedField3, rhsSingleEventUserDefinedField3)) {
                return false;
            }
        }
        {
            String lhsSingleEventUserDefinedField4;
            lhsSingleEventUserDefinedField4 = this.getSingleEventUserDefinedField4();
            String rhsSingleEventUserDefinedField4;
            rhsSingleEventUserDefinedField4 = that.getSingleEventUserDefinedField4();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "singleEventUserDefinedField4", lhsSingleEventUserDefinedField4), LocatorUtils.property(thatLocator, "singleEventUserDefinedField4", rhsSingleEventUserDefinedField4), lhsSingleEventUserDefinedField4, rhsSingleEventUserDefinedField4)) {
                return false;
            }
        }
        {
            String lhsSingleEventUserDefinedField5;
            lhsSingleEventUserDefinedField5 = this.getSingleEventUserDefinedField5();
            String rhsSingleEventUserDefinedField5;
            rhsSingleEventUserDefinedField5 = that.getSingleEventUserDefinedField5();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "singleEventUserDefinedField5", lhsSingleEventUserDefinedField5), LocatorUtils.property(thatLocator, "singleEventUserDefinedField5", rhsSingleEventUserDefinedField5), lhsSingleEventUserDefinedField5, rhsSingleEventUserDefinedField5)) {
                return false;
            }
        }
        {
            String lhsSingleEventCommentText;
            lhsSingleEventCommentText = this.getSingleEventCommentText();
            String rhsSingleEventCommentText;
            rhsSingleEventCommentText = that.getSingleEventCommentText();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "singleEventCommentText", lhsSingleEventCommentText), LocatorUtils.property(thatLocator, "singleEventCommentText", rhsSingleEventCommentText), lhsSingleEventCommentText, rhsSingleEventCommentText)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            Date theSingleEventViolationEndDate;
            theSingleEventViolationEndDate = this.getSingleEventViolationEndDate();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "singleEventViolationEndDate", theSingleEventViolationEndDate), currentHashCode, theSingleEventViolationEndDate);
        }
        {
            String theReportableNonComplianceDetectionCode;
            theReportableNonComplianceDetectionCode = this.getReportableNonComplianceDetectionCode();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "reportableNonComplianceDetectionCode", theReportableNonComplianceDetectionCode), currentHashCode, theReportableNonComplianceDetectionCode);
        }
        {
            Date theReportableNonComplianceDetectionDate;
            theReportableNonComplianceDetectionDate = this.getReportableNonComplianceDetectionDate();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "reportableNonComplianceDetectionDate", theReportableNonComplianceDetectionDate), currentHashCode, theReportableNonComplianceDetectionDate);
        }
        {
            String theReportableNonComplianceResolutionCode;
            theReportableNonComplianceResolutionCode = this.getReportableNonComplianceResolutionCode();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "reportableNonComplianceResolutionCode", theReportableNonComplianceResolutionCode), currentHashCode, theReportableNonComplianceResolutionCode);
        }
        {
            Date theReportableNonComplianceResolutionDate;
            theReportableNonComplianceResolutionDate = this.getReportableNonComplianceResolutionDate();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "reportableNonComplianceResolutionDate", theReportableNonComplianceResolutionDate), currentHashCode, theReportableNonComplianceResolutionDate);
        }
        {
            String theSingleEventUserDefinedField1;
            theSingleEventUserDefinedField1 = this.getSingleEventUserDefinedField1();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "singleEventUserDefinedField1", theSingleEventUserDefinedField1), currentHashCode, theSingleEventUserDefinedField1);
        }
        {
            String theSingleEventUserDefinedField2;
            theSingleEventUserDefinedField2 = this.getSingleEventUserDefinedField2();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "singleEventUserDefinedField2", theSingleEventUserDefinedField2), currentHashCode, theSingleEventUserDefinedField2);
        }
        {
            String theSingleEventUserDefinedField3;
            theSingleEventUserDefinedField3 = this.getSingleEventUserDefinedField3();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "singleEventUserDefinedField3", theSingleEventUserDefinedField3), currentHashCode, theSingleEventUserDefinedField3);
        }
        {
            String theSingleEventUserDefinedField4;
            theSingleEventUserDefinedField4 = this.getSingleEventUserDefinedField4();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "singleEventUserDefinedField4", theSingleEventUserDefinedField4), currentHashCode, theSingleEventUserDefinedField4);
        }
        {
            String theSingleEventUserDefinedField5;
            theSingleEventUserDefinedField5 = this.getSingleEventUserDefinedField5();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "singleEventUserDefinedField5", theSingleEventUserDefinedField5), currentHashCode, theSingleEventUserDefinedField5);
        }
        {
            String theSingleEventCommentText;
            theSingleEventCommentText = this.getSingleEventCommentText();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "singleEventCommentText", theSingleEventCommentText), currentHashCode, theSingleEventCommentText);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
