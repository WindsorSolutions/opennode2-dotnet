//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.12.07 at 11:39:25 AM EST 
//


package com.windsor.node.plugin.icisnpdes.generated;

import java.io.Serializable;
import javax.persistence.Basic;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Inheritance;
import javax.persistence.InheritanceType;
import javax.persistence.Table;
import javax.persistence.Transient;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlTransient;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for LandApplicationBMP complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="LandApplicationBMP">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element ref="{http://www.exchangenetwork.net/schema/icis/5}LandApplicationBMPTypeCode"/>
 *         &lt;element ref="{http://www.exchangenetwork.net/schema/icis/5}OtherLandApplicationBMPTypeName" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "LandApplicationBMP", propOrder = {
    "landApplicationBMPTypeCode",
    "otherLandApplicationBMPTypeName"
})
@Entity(name = "LandApplicationBMP")
@Table(name = "ICS_LAND_APPL_BMP")
@Inheritance(strategy = InheritanceType.JOINED)
public class LandApplicationBMP
    implements Serializable, Equals, HashCode
{

    private final static long serialVersionUID = 1L;
    @XmlElement(name = "LandApplicationBMPTypeCode", required = true)
    protected String landApplicationBMPTypeCode;
    @XmlElement(name = "OtherLandApplicationBMPTypeName")
    protected String otherLandApplicationBMPTypeName;
    @XmlTransient
    protected String dbid;

    /**
     * Gets the value of the landApplicationBMPTypeCode property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "LAND_APPL_BMP_TYPE_CODE", length = 3)
    public String getLandApplicationBMPTypeCode() {
        return landApplicationBMPTypeCode;
    }

    /**
     * Sets the value of the landApplicationBMPTypeCode property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setLandApplicationBMPTypeCode(String value) {
        this.landApplicationBMPTypeCode = value;
    }

    @Transient
    public boolean isSetLandApplicationBMPTypeCode() {
        return (this.landApplicationBMPTypeCode!= null);
    }

    /**
     * Gets the value of the otherLandApplicationBMPTypeName property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "OTHR_LAND_APPL_BMP_TYPE_NAME", length = 50)
    public String getOtherLandApplicationBMPTypeName() {
        return otherLandApplicationBMPTypeName;
    }

    /**
     * Sets the value of the otherLandApplicationBMPTypeName property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setOtherLandApplicationBMPTypeName(String value) {
        this.otherLandApplicationBMPTypeName = value;
    }

    @Transient
    public boolean isSetOtherLandApplicationBMPTypeName() {
        return (this.otherLandApplicationBMPTypeName!= null);
    }

    /**
     * 
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Id
    @Column(name = "ICS_LAND_APPL_BMP_ID")
    @GeneratedValue(strategy = GenerationType.AUTO)
    public String getDbid() {
        return dbid;
    }

    /**
     * 
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setDbid(String value) {
        this.dbid = value;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof LandApplicationBMP)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final LandApplicationBMP that = ((LandApplicationBMP) object);
        {
            String lhsLandApplicationBMPTypeCode;
            lhsLandApplicationBMPTypeCode = this.getLandApplicationBMPTypeCode();
            String rhsLandApplicationBMPTypeCode;
            rhsLandApplicationBMPTypeCode = that.getLandApplicationBMPTypeCode();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "landApplicationBMPTypeCode", lhsLandApplicationBMPTypeCode), LocatorUtils.property(thatLocator, "landApplicationBMPTypeCode", rhsLandApplicationBMPTypeCode), lhsLandApplicationBMPTypeCode, rhsLandApplicationBMPTypeCode)) {
                return false;
            }
        }
        {
            String lhsOtherLandApplicationBMPTypeName;
            lhsOtherLandApplicationBMPTypeName = this.getOtherLandApplicationBMPTypeName();
            String rhsOtherLandApplicationBMPTypeName;
            rhsOtherLandApplicationBMPTypeName = that.getOtherLandApplicationBMPTypeName();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "otherLandApplicationBMPTypeName", lhsOtherLandApplicationBMPTypeName), LocatorUtils.property(thatLocator, "otherLandApplicationBMPTypeName", rhsOtherLandApplicationBMPTypeName), lhsOtherLandApplicationBMPTypeName, rhsOtherLandApplicationBMPTypeName)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            String theLandApplicationBMPTypeCode;
            theLandApplicationBMPTypeCode = this.getLandApplicationBMPTypeCode();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "landApplicationBMPTypeCode", theLandApplicationBMPTypeCode), currentHashCode, theLandApplicationBMPTypeCode);
        }
        {
            String theOtherLandApplicationBMPTypeName;
            theOtherLandApplicationBMPTypeName = this.getOtherLandApplicationBMPTypeName();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "otherLandApplicationBMPTypeName", theOtherLandApplicationBMPTypeName), currentHashCode, theOtherLandApplicationBMPTypeName);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
