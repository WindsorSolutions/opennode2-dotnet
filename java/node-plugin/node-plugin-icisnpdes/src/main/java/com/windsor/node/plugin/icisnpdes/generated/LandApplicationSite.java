//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.12.07 at 11:39:25 AM EST 
//


package com.windsor.node.plugin.icisnpdes.generated;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import javax.persistence.Basic;
import javax.persistence.CollectionTable;
import javax.persistence.Column;
import javax.persistence.ElementCollection;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Inheritance;
import javax.persistence.InheritanceType;
import javax.persistence.JoinColumn;
import javax.persistence.Table;
import javax.persistence.Transient;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlTransient;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
import com.windsor.node.plugin.common.xml.bind.annotation.adapters.IntegerAdapter;
import com.windsor.node.plugin.icisnpdes.domain.AbstractHasDischargeMonitoringReport;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for LandApplicationSite complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="LandApplicationSite">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element ref="{http://www.exchangenetwork.net/schema/icis/5}PollutantMetForLandApplication" minOccurs="0"/>
 *         &lt;element ref="{http://www.exchangenetwork.net/schema/icis/5}PathogenReductionIndicator" minOccurs="0"/>
 *         &lt;element ref="{http://www.exchangenetwork.net/schema/icis/5}VectorReductionIndicator" minOccurs="0"/>
 *         &lt;element ref="{http://www.exchangenetwork.net/schema/icis/5}AgronomicGallonsRateForField" minOccurs="0"/>
 *         &lt;element ref="{http://www.exchangenetwork.net/schema/icis/5}AgronomicDMTRateForField" minOccurs="0"/>
 *         &lt;group ref="{http://www.exchangenetwork.net/schema/icis/5}ClassAAlternativesUsedGroup" minOccurs="0"/>
 *         &lt;group ref="{http://www.exchangenetwork.net/schema/icis/5}ClassBAlternativesUsedGroup" minOccurs="0"/>
 *         &lt;group ref="{http://www.exchangenetwork.net/schema/icis/5}VARAlternativesUsedGroup" minOccurs="0"/>
 *         &lt;element ref="{http://www.exchangenetwork.net/schema/icis/5}CropTypesPlanted" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element ref="{http://www.exchangenetwork.net/schema/icis/5}CropTypesHarvested" maxOccurs="unbounded" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "LandApplicationSite", propOrder = {
    "pollutantMetForLandApplication",
    "pathogenReductionIndicator",
    "vectorReductionIndicator",
    "agronomicGallonsRateForField",
    "agronomicDMTRateForField",
    "classAAlternativeUsed",
    "classAAlternativesText",
    "classBAlternativeUsed",
    "classBAlternativesText",
    "varAlternativeUsed",
    "varAlternativesText",
    "cropTypesPlanted",
    "cropTypesHarvested"
})
@Entity(name = "LandApplicationSite")
@Table(name = "ICS_LAND_APPL_SITE")
@Inheritance(strategy = InheritanceType.JOINED)
public class LandApplicationSite
    extends AbstractHasDischargeMonitoringReport
    implements Serializable, Equals, HashCode
{

    private final static long serialVersionUID = 1L;
    @XmlElement(name = "PollutantMetForLandApplication", type = String.class)
    @XmlJavaTypeAdapter(IntegerAdapter.class)
    protected Integer pollutantMetForLandApplication;
    @XmlElement(name = "PathogenReductionIndicator")
    protected String pathogenReductionIndicator;
    @XmlElement(name = "VectorReductionIndicator")
    protected String vectorReductionIndicator;
    @XmlElement(name = "AgronomicGallonsRateForField", type = String.class)
    @XmlJavaTypeAdapter(IntegerAdapter.class)
    protected Integer agronomicGallonsRateForField;
    @XmlElement(name = "AgronomicDMTRateForField", type = String.class)
    @XmlJavaTypeAdapter(IntegerAdapter.class)
    protected Integer agronomicDMTRateForField;
    @XmlElement(name = "ClassAAlternativeUsed")
    protected String classAAlternativeUsed;
    @XmlElement(name = "ClassAAlternativesText")
    protected String classAAlternativesText;
    @XmlElement(name = "ClassBAlternativeUsed")
    protected String classBAlternativeUsed;
    @XmlElement(name = "ClassBAlternativesText")
    protected String classBAlternativesText;
    @XmlElement(name = "VARAlternativeUsed")
    protected String varAlternativeUsed;
    @XmlElement(name = "VARAlternativesText")
    protected String varAlternativesText;
    @XmlElement(name = "CropTypesPlanted")
    protected List<String> cropTypesPlanted;
    @XmlElement(name = "CropTypesHarvested")
    protected List<String> cropTypesHarvested;
    @XmlTransient
    protected String dbid;

    /**
     * Gets the value of the pollutantMetForLandApplication property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "POLUT_MET_FOR_LAND_APPL", scale = 0)
    public Integer getPollutantMetForLandApplication() {
        return pollutantMetForLandApplication;
    }

    /**
     * Sets the value of the pollutantMetForLandApplication property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setPollutantMetForLandApplication(Integer value) {
        this.pollutantMetForLandApplication = value;
    }

    @Transient
    public boolean isSetPollutantMetForLandApplication() {
        return (this.pollutantMetForLandApplication!= null);
    }

    /**
     * Gets the value of the pathogenReductionIndicator property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "PATHOGEN_REDUCTION_IND", columnDefinition = "char(1)", length = 1)
    public String getPathogenReductionIndicator() {
        return pathogenReductionIndicator;
    }

    /**
     * Sets the value of the pathogenReductionIndicator property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setPathogenReductionIndicator(String value) {
        this.pathogenReductionIndicator = value;
    }

    @Transient
    public boolean isSetPathogenReductionIndicator() {
        return (this.pathogenReductionIndicator!= null);
    }

    /**
     * Gets the value of the vectorReductionIndicator property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "VECTOR_REDUCTION_IND", columnDefinition = "char(1)", length = 1)
    public String getVectorReductionIndicator() {
        return vectorReductionIndicator;
    }

    /**
     * Sets the value of the vectorReductionIndicator property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setVectorReductionIndicator(String value) {
        this.vectorReductionIndicator = value;
    }

    @Transient
    public boolean isSetVectorReductionIndicator() {
        return (this.vectorReductionIndicator!= null);
    }

    /**
     * Gets the value of the agronomicGallonsRateForField property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "AGRONOMIC_GAL_RATE_FOR_FLD", scale = 0)
    public Integer getAgronomicGallonsRateForField() {
        return agronomicGallonsRateForField;
    }

    /**
     * Sets the value of the agronomicGallonsRateForField property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setAgronomicGallonsRateForField(Integer value) {
        this.agronomicGallonsRateForField = value;
    }

    @Transient
    public boolean isSetAgronomicGallonsRateForField() {
        return (this.agronomicGallonsRateForField!= null);
    }

    /**
     * Gets the value of the agronomicDMTRateForField property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "AGRONOMIC_DMT_RATE_FOR_FLD", scale = 0)
    public Integer getAgronomicDMTRateForField() {
        return agronomicDMTRateForField;
    }

    /**
     * Sets the value of the agronomicDMTRateForField property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setAgronomicDMTRateForField(Integer value) {
        this.agronomicDMTRateForField = value;
    }

    @Transient
    public boolean isSetAgronomicDMTRateForField() {
        return (this.agronomicDMTRateForField!= null);
    }

    /**
     * Gets the value of the classAAlternativeUsed property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "CLASS_A_ALT_USED", length = 3)
    public String getClassAAlternativeUsed() {
        return classAAlternativeUsed;
    }

    /**
     * Sets the value of the classAAlternativeUsed property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setClassAAlternativeUsed(String value) {
        this.classAAlternativeUsed = value;
    }

    @Transient
    public boolean isSetClassAAlternativeUsed() {
        return (this.classAAlternativeUsed!= null);
    }

    /**
     * Gets the value of the classAAlternativesText property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "CLASS_A_ALTS_TXT", columnDefinition = "varchar(4000)", length = 4000)
    public String getClassAAlternativesText() {
        return classAAlternativesText;
    }

    /**
     * Sets the value of the classAAlternativesText property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setClassAAlternativesText(String value) {
        this.classAAlternativesText = value;
    }

    @Transient
    public boolean isSetClassAAlternativesText() {
        return (this.classAAlternativesText!= null);
    }

    /**
     * Gets the value of the classBAlternativeUsed property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "CLASS_B_ALT_USED", length = 3)
    public String getClassBAlternativeUsed() {
        return classBAlternativeUsed;
    }

    /**
     * Sets the value of the classBAlternativeUsed property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setClassBAlternativeUsed(String value) {
        this.classBAlternativeUsed = value;
    }

    @Transient
    public boolean isSetClassBAlternativeUsed() {
        return (this.classBAlternativeUsed!= null);
    }

    /**
     * Gets the value of the classBAlternativesText property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "CLASS_B_ALTS_TXT", columnDefinition = "varchar(4000)", length = 4000)
    public String getClassBAlternativesText() {
        return classBAlternativesText;
    }

    /**
     * Sets the value of the classBAlternativesText property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setClassBAlternativesText(String value) {
        this.classBAlternativesText = value;
    }

    @Transient
    public boolean isSetClassBAlternativesText() {
        return (this.classBAlternativesText!= null);
    }

    /**
     * Gets the value of the varAlternativeUsed property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "VAR_ALT_USED", length = 3)
    public String getVARAlternativeUsed() {
        return varAlternativeUsed;
    }

    /**
     * Sets the value of the varAlternativeUsed property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setVARAlternativeUsed(String value) {
        this.varAlternativeUsed = value;
    }

    @Transient
    public boolean isSetVARAlternativeUsed() {
        return (this.varAlternativeUsed!= null);
    }

    /**
     * Gets the value of the varAlternativesText property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "VAR_ALTS_TXT", columnDefinition = "varchar(4000)", length = 4000)
    public String getVARAlternativesText() {
        return varAlternativesText;
    }

    /**
     * Sets the value of the varAlternativesText property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setVARAlternativesText(String value) {
        this.varAlternativesText = value;
    }

    @Transient
    public boolean isSetVARAlternativesText() {
        return (this.varAlternativesText!= null);
    }

    /**
     * Gets the value of the cropTypesPlanted property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the cropTypesPlanted property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getCropTypesPlanted().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link String }
     * 
     * 
     */
    @ElementCollection
    @Column(name = "CROP_TYPES_PLANTED", length = 3)
    @CollectionTable(name = "ICS_CROP_TYPES_PLANTED", joinColumns = {
        @JoinColumn(name = "ICS_LAND_APPL_SITE_ID")
    })
    public List<String> getCropTypesPlanted() {
        if (cropTypesPlanted == null) {
            cropTypesPlanted = new ArrayList<String>();
        }
        return this.cropTypesPlanted;
    }

    /**
     * 
     * 
     */
    public void setCropTypesPlanted(List<String> cropTypesPlanted) {
        this.cropTypesPlanted = cropTypesPlanted;
    }

    @Transient
    public boolean isSetCropTypesPlanted() {
        return ((this.cropTypesPlanted!= null)&&(!this.cropTypesPlanted.isEmpty()));
    }

    public void unsetCropTypesPlanted() {
        this.cropTypesPlanted = null;
    }

    /**
     * Gets the value of the cropTypesHarvested property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the cropTypesHarvested property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getCropTypesHarvested().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link String }
     * 
     * 
     */
    @ElementCollection
    @Column(name = "CROP_TYPES_HARVESTED", length = 3)
    @CollectionTable(name = "ICS_CROP_TYPES_HARVESTED", joinColumns = {
        @JoinColumn(name = "ICS_LAND_APPL_SITE_ID")
    })
    public List<String> getCropTypesHarvested() {
        if (cropTypesHarvested == null) {
            cropTypesHarvested = new ArrayList<String>();
        }
        return this.cropTypesHarvested;
    }

    /**
     * 
     * 
     */
    public void setCropTypesHarvested(List<String> cropTypesHarvested) {
        this.cropTypesHarvested = cropTypesHarvested;
    }

    @Transient
    public boolean isSetCropTypesHarvested() {
        return ((this.cropTypesHarvested!= null)&&(!this.cropTypesHarvested.isEmpty()));
    }

    public void unsetCropTypesHarvested() {
        this.cropTypesHarvested = null;
    }

    /**
     * 
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Id
    @Column(name = "ICS_LAND_APPL_SITE_ID")
    @GeneratedValue(strategy = GenerationType.AUTO)
    public String getDbid() {
        return dbid;
    }

    /**
     * 
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setDbid(String value) {
        this.dbid = value;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof LandApplicationSite)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final LandApplicationSite that = ((LandApplicationSite) object);
        {
            Integer lhsPollutantMetForLandApplication;
            lhsPollutantMetForLandApplication = this.getPollutantMetForLandApplication();
            Integer rhsPollutantMetForLandApplication;
            rhsPollutantMetForLandApplication = that.getPollutantMetForLandApplication();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "pollutantMetForLandApplication", lhsPollutantMetForLandApplication), LocatorUtils.property(thatLocator, "pollutantMetForLandApplication", rhsPollutantMetForLandApplication), lhsPollutantMetForLandApplication, rhsPollutantMetForLandApplication)) {
                return false;
            }
        }
        {
            String lhsPathogenReductionIndicator;
            lhsPathogenReductionIndicator = this.getPathogenReductionIndicator();
            String rhsPathogenReductionIndicator;
            rhsPathogenReductionIndicator = that.getPathogenReductionIndicator();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "pathogenReductionIndicator", lhsPathogenReductionIndicator), LocatorUtils.property(thatLocator, "pathogenReductionIndicator", rhsPathogenReductionIndicator), lhsPathogenReductionIndicator, rhsPathogenReductionIndicator)) {
                return false;
            }
        }
        {
            String lhsVectorReductionIndicator;
            lhsVectorReductionIndicator = this.getVectorReductionIndicator();
            String rhsVectorReductionIndicator;
            rhsVectorReductionIndicator = that.getVectorReductionIndicator();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "vectorReductionIndicator", lhsVectorReductionIndicator), LocatorUtils.property(thatLocator, "vectorReductionIndicator", rhsVectorReductionIndicator), lhsVectorReductionIndicator, rhsVectorReductionIndicator)) {
                return false;
            }
        }
        {
            Integer lhsAgronomicGallonsRateForField;
            lhsAgronomicGallonsRateForField = this.getAgronomicGallonsRateForField();
            Integer rhsAgronomicGallonsRateForField;
            rhsAgronomicGallonsRateForField = that.getAgronomicGallonsRateForField();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "agronomicGallonsRateForField", lhsAgronomicGallonsRateForField), LocatorUtils.property(thatLocator, "agronomicGallonsRateForField", rhsAgronomicGallonsRateForField), lhsAgronomicGallonsRateForField, rhsAgronomicGallonsRateForField)) {
                return false;
            }
        }
        {
            Integer lhsAgronomicDMTRateForField;
            lhsAgronomicDMTRateForField = this.getAgronomicDMTRateForField();
            Integer rhsAgronomicDMTRateForField;
            rhsAgronomicDMTRateForField = that.getAgronomicDMTRateForField();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "agronomicDMTRateForField", lhsAgronomicDMTRateForField), LocatorUtils.property(thatLocator, "agronomicDMTRateForField", rhsAgronomicDMTRateForField), lhsAgronomicDMTRateForField, rhsAgronomicDMTRateForField)) {
                return false;
            }
        }
        {
            String lhsClassAAlternativeUsed;
            lhsClassAAlternativeUsed = this.getClassAAlternativeUsed();
            String rhsClassAAlternativeUsed;
            rhsClassAAlternativeUsed = that.getClassAAlternativeUsed();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "classAAlternativeUsed", lhsClassAAlternativeUsed), LocatorUtils.property(thatLocator, "classAAlternativeUsed", rhsClassAAlternativeUsed), lhsClassAAlternativeUsed, rhsClassAAlternativeUsed)) {
                return false;
            }
        }
        {
            String lhsClassAAlternativesText;
            lhsClassAAlternativesText = this.getClassAAlternativesText();
            String rhsClassAAlternativesText;
            rhsClassAAlternativesText = that.getClassAAlternativesText();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "classAAlternativesText", lhsClassAAlternativesText), LocatorUtils.property(thatLocator, "classAAlternativesText", rhsClassAAlternativesText), lhsClassAAlternativesText, rhsClassAAlternativesText)) {
                return false;
            }
        }
        {
            String lhsClassBAlternativeUsed;
            lhsClassBAlternativeUsed = this.getClassBAlternativeUsed();
            String rhsClassBAlternativeUsed;
            rhsClassBAlternativeUsed = that.getClassBAlternativeUsed();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "classBAlternativeUsed", lhsClassBAlternativeUsed), LocatorUtils.property(thatLocator, "classBAlternativeUsed", rhsClassBAlternativeUsed), lhsClassBAlternativeUsed, rhsClassBAlternativeUsed)) {
                return false;
            }
        }
        {
            String lhsClassBAlternativesText;
            lhsClassBAlternativesText = this.getClassBAlternativesText();
            String rhsClassBAlternativesText;
            rhsClassBAlternativesText = that.getClassBAlternativesText();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "classBAlternativesText", lhsClassBAlternativesText), LocatorUtils.property(thatLocator, "classBAlternativesText", rhsClassBAlternativesText), lhsClassBAlternativesText, rhsClassBAlternativesText)) {
                return false;
            }
        }
        {
            String lhsVARAlternativeUsed;
            lhsVARAlternativeUsed = this.getVARAlternativeUsed();
            String rhsVARAlternativeUsed;
            rhsVARAlternativeUsed = that.getVARAlternativeUsed();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "varAlternativeUsed", lhsVARAlternativeUsed), LocatorUtils.property(thatLocator, "varAlternativeUsed", rhsVARAlternativeUsed), lhsVARAlternativeUsed, rhsVARAlternativeUsed)) {
                return false;
            }
        }
        {
            String lhsVARAlternativesText;
            lhsVARAlternativesText = this.getVARAlternativesText();
            String rhsVARAlternativesText;
            rhsVARAlternativesText = that.getVARAlternativesText();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "varAlternativesText", lhsVARAlternativesText), LocatorUtils.property(thatLocator, "varAlternativesText", rhsVARAlternativesText), lhsVARAlternativesText, rhsVARAlternativesText)) {
                return false;
            }
        }
        {
            List<String> lhsCropTypesPlanted;
            lhsCropTypesPlanted = (this.isSetCropTypesPlanted()?this.getCropTypesPlanted():null);
            List<String> rhsCropTypesPlanted;
            rhsCropTypesPlanted = (that.isSetCropTypesPlanted()?that.getCropTypesPlanted():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "cropTypesPlanted", lhsCropTypesPlanted), LocatorUtils.property(thatLocator, "cropTypesPlanted", rhsCropTypesPlanted), lhsCropTypesPlanted, rhsCropTypesPlanted)) {
                return false;
            }
        }
        {
            List<String> lhsCropTypesHarvested;
            lhsCropTypesHarvested = (this.isSetCropTypesHarvested()?this.getCropTypesHarvested():null);
            List<String> rhsCropTypesHarvested;
            rhsCropTypesHarvested = (that.isSetCropTypesHarvested()?that.getCropTypesHarvested():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "cropTypesHarvested", lhsCropTypesHarvested), LocatorUtils.property(thatLocator, "cropTypesHarvested", rhsCropTypesHarvested), lhsCropTypesHarvested, rhsCropTypesHarvested)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            Integer thePollutantMetForLandApplication;
            thePollutantMetForLandApplication = this.getPollutantMetForLandApplication();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "pollutantMetForLandApplication", thePollutantMetForLandApplication), currentHashCode, thePollutantMetForLandApplication);
        }
        {
            String thePathogenReductionIndicator;
            thePathogenReductionIndicator = this.getPathogenReductionIndicator();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "pathogenReductionIndicator", thePathogenReductionIndicator), currentHashCode, thePathogenReductionIndicator);
        }
        {
            String theVectorReductionIndicator;
            theVectorReductionIndicator = this.getVectorReductionIndicator();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "vectorReductionIndicator", theVectorReductionIndicator), currentHashCode, theVectorReductionIndicator);
        }
        {
            Integer theAgronomicGallonsRateForField;
            theAgronomicGallonsRateForField = this.getAgronomicGallonsRateForField();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "agronomicGallonsRateForField", theAgronomicGallonsRateForField), currentHashCode, theAgronomicGallonsRateForField);
        }
        {
            Integer theAgronomicDMTRateForField;
            theAgronomicDMTRateForField = this.getAgronomicDMTRateForField();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "agronomicDMTRateForField", theAgronomicDMTRateForField), currentHashCode, theAgronomicDMTRateForField);
        }
        {
            String theClassAAlternativeUsed;
            theClassAAlternativeUsed = this.getClassAAlternativeUsed();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "classAAlternativeUsed", theClassAAlternativeUsed), currentHashCode, theClassAAlternativeUsed);
        }
        {
            String theClassAAlternativesText;
            theClassAAlternativesText = this.getClassAAlternativesText();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "classAAlternativesText", theClassAAlternativesText), currentHashCode, theClassAAlternativesText);
        }
        {
            String theClassBAlternativeUsed;
            theClassBAlternativeUsed = this.getClassBAlternativeUsed();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "classBAlternativeUsed", theClassBAlternativeUsed), currentHashCode, theClassBAlternativeUsed);
        }
        {
            String theClassBAlternativesText;
            theClassBAlternativesText = this.getClassBAlternativesText();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "classBAlternativesText", theClassBAlternativesText), currentHashCode, theClassBAlternativesText);
        }
        {
            String theVARAlternativeUsed;
            theVARAlternativeUsed = this.getVARAlternativeUsed();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "varAlternativeUsed", theVARAlternativeUsed), currentHashCode, theVARAlternativeUsed);
        }
        {
            String theVARAlternativesText;
            theVARAlternativesText = this.getVARAlternativesText();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "varAlternativesText", theVARAlternativesText), currentHashCode, theVARAlternativesText);
        }
        {
            List<String> theCropTypesPlanted;
            theCropTypesPlanted = (this.isSetCropTypesPlanted()?this.getCropTypesPlanted():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "cropTypesPlanted", theCropTypesPlanted), currentHashCode, theCropTypesPlanted);
        }
        {
            List<String> theCropTypesHarvested;
            theCropTypesHarvested = (this.isSetCropTypesHarvested()?this.getCropTypesHarvested():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "cropTypesHarvested", theCropTypesHarvested), currentHashCode, theCropTypesHarvested);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
