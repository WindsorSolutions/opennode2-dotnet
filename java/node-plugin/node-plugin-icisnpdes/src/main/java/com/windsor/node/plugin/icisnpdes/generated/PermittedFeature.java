//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.12.07 at 11:39:25 AM EST 
//


package com.windsor.node.plugin.icisnpdes.generated;

import java.io.Serializable;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import javax.persistence.AssociationOverride;
import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.CollectionTable;
import javax.persistence.Column;
import javax.persistence.ElementCollection;
import javax.persistence.Embeddable;
import javax.persistence.Embedded;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Transient;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
import com.windsor.node.plugin.common.xml.bind.annotation.adapters.Decimal8FloatingTypeAdapter;
import com.windsor.node.plugin.common.xml.bind.annotation.adapters.IntegerAdapter;
import org.hibernate.annotations.NotFound;
import org.hibernate.annotations.NotFoundAction;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for PermittedFeature complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="PermittedFeature">
 *   &lt;complexContent>
 *     &lt;extension base="{http://www.exchangenetwork.net/schema/icis/5}PermittedFeatureKeyElements">
 *       &lt;sequence>
 *         &lt;element ref="{http://www.exchangenetwork.net/schema/icis/5}PermittedFeatureTypeCode" minOccurs="0"/>
 *         &lt;element ref="{http://www.exchangenetwork.net/schema/icis/5}PermittedFeatureCharacteristics" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element ref="{http://www.exchangenetwork.net/schema/icis/5}PermittedFeatureDescription" minOccurs="0"/>
 *         &lt;element ref="{http://www.exchangenetwork.net/schema/icis/5}PermittedFeatureTreatmentTypeCode" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element ref="{http://www.exchangenetwork.net/schema/icis/5}PermittedFeatureDesignFlowNumber" minOccurs="0"/>
 *         &lt;element ref="{http://www.exchangenetwork.net/schema/icis/5}PermittedFeatureActualAverageFlowNumber" minOccurs="0"/>
 *         &lt;element ref="{http://www.exchangenetwork.net/schema/icis/5}PermittedFeatureStateWaterBodyCode" minOccurs="0"/>
 *         &lt;element ref="{http://www.exchangenetwork.net/schema/icis/5}PermittedFeatureStateWaterBodyName" minOccurs="0"/>
 *         &lt;element ref="{http://www.exchangenetwork.net/schema/icis/5}ImpairedWaterIndicator" minOccurs="0"/>
 *         &lt;element ref="{http://www.exchangenetwork.net/schema/icis/5}TMDLCompletedIndicator" minOccurs="0"/>
 *         &lt;element ref="{http://www.exchangenetwork.net/schema/icis/5}PermittedFeatureUserDefinedDataElement1" minOccurs="0"/>
 *         &lt;element ref="{http://www.exchangenetwork.net/schema/icis/5}PermittedFeatureUserDefinedDataElement2" minOccurs="0"/>
 *         &lt;element ref="{http://www.exchangenetwork.net/schema/icis/5}FieldSize" minOccurs="0"/>
 *         &lt;element ref="{http://www.exchangenetwork.net/schema/icis/5}IsSiteOwnByFacility" minOccurs="0"/>
 *         &lt;element ref="{http://www.exchangenetwork.net/schema/icis/5}IsSystemLinedWithLeachate" minOccurs="0"/>
 *         &lt;element ref="{http://www.exchangenetwork.net/schema/icis/5}DoesUnitHaveDailyCover" minOccurs="0"/>
 *         &lt;element ref="{http://www.exchangenetwork.net/schema/icis/5}PropertyBoundaryDistance" minOccurs="0"/>
 *         &lt;element ref="{http://www.exchangenetwork.net/schema/icis/5}IsRequiredNitrateGroundWater" minOccurs="0"/>
 *         &lt;element ref="{http://www.exchangenetwork.net/schema/icis/5}WellNumber" minOccurs="0"/>
 *         &lt;element ref="{http://www.exchangenetwork.net/schema/icis/5}GeographicCoordinates" minOccurs="0"/>
 *         &lt;element ref="{http://www.exchangenetwork.net/schema/icis/5}SourcePermittedFeatureDetailText" minOccurs="0"/>
 *         &lt;element ref="{http://www.exchangenetwork.net/schema/icis/5}SiteOwnerContact" minOccurs="0"/>
 *         &lt;element ref="{http://www.exchangenetwork.net/schema/icis/5}SiteOwnerAddress" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "PermittedFeature", propOrder = {
    "permittedFeatureTypeCode",
    "permittedFeatureCharacteristics",
    "permittedFeatureDescription",
    "permittedFeatureTreatmentTypeCode",
    "permittedFeatureDesignFlowNumber",
    "permittedFeatureActualAverageFlowNumber",
    "permittedFeatureStateWaterBodyCode",
    "permittedFeatureStateWaterBodyName",
    "impairedWaterIndicator",
    "tmdlCompletedIndicator",
    "permittedFeatureUserDefinedDataElement1",
    "permittedFeatureUserDefinedDataElement2",
    "fieldSize",
    "isSiteOwnByFacility",
    "isSystemLinedWithLeachate",
    "doesUnitHaveDailyCover",
    "propertyBoundaryDistance",
    "isRequiredNitrateGroundWater",
    "wellNumber",
    "geographicCoordinates",
    "sourcePermittedFeatureDetailText",
    "siteOwnerContact",
    "siteOwnerAddress"
})
@Embeddable
public class PermittedFeature
    extends PermittedFeatureKeyElements
    implements Serializable, Equals, HashCode
{

    private final static long serialVersionUID = 1L;
    @XmlElement(name = "PermittedFeatureTypeCode")
    protected String permittedFeatureTypeCode;
    @XmlElement(name = "PermittedFeatureCharacteristics")
    protected List<String> permittedFeatureCharacteristics;
    @XmlElement(name = "PermittedFeatureDescription")
    protected String permittedFeatureDescription;
    @XmlElement(name = "PermittedFeatureTreatmentTypeCode")
    protected List<String> permittedFeatureTreatmentTypeCode;
    @XmlElement(name = "PermittedFeatureDesignFlowNumber", type = String.class)
    @XmlJavaTypeAdapter(Decimal8FloatingTypeAdapter.class)
    protected BigDecimal permittedFeatureDesignFlowNumber;
    @XmlElement(name = "PermittedFeatureActualAverageFlowNumber", type = String.class)
    @XmlJavaTypeAdapter(Decimal8FloatingTypeAdapter.class)
    protected BigDecimal permittedFeatureActualAverageFlowNumber;
    @XmlElement(name = "PermittedFeatureStateWaterBodyCode")
    protected String permittedFeatureStateWaterBodyCode;
    @XmlElement(name = "PermittedFeatureStateWaterBodyName")
    protected String permittedFeatureStateWaterBodyName;
    @XmlElement(name = "ImpairedWaterIndicator")
    protected String impairedWaterIndicator;
    @XmlElement(name = "TMDLCompletedIndicator")
    protected String tmdlCompletedIndicator;
    @XmlElement(name = "PermittedFeatureUserDefinedDataElement1")
    protected String permittedFeatureUserDefinedDataElement1;
    @XmlElement(name = "PermittedFeatureUserDefinedDataElement2")
    protected String permittedFeatureUserDefinedDataElement2;
    @XmlElement(name = "FieldSize", type = String.class)
    @XmlJavaTypeAdapter(IntegerAdapter.class)
    protected Integer fieldSize;
    @XmlElement(name = "IsSiteOwnByFacility")
    protected String isSiteOwnByFacility;
    @XmlElement(name = "IsSystemLinedWithLeachate")
    protected String isSystemLinedWithLeachate;
    @XmlElement(name = "DoesUnitHaveDailyCover")
    protected String doesUnitHaveDailyCover;
    @XmlElement(name = "PropertyBoundaryDistance", type = String.class)
    @XmlJavaTypeAdapter(IntegerAdapter.class)
    protected Integer propertyBoundaryDistance;
    @XmlElement(name = "IsRequiredNitrateGroundWater")
    protected String isRequiredNitrateGroundWater;
    @XmlElement(name = "WellNumber", type = String.class)
    @XmlJavaTypeAdapter(IntegerAdapter.class)
    protected Integer wellNumber;
    @XmlElement(name = "GeographicCoordinates")
    protected GeographicCoordinates geographicCoordinates;
    @XmlElement(name = "SourcePermittedFeatureDetailText")
    protected String sourcePermittedFeatureDetailText;
    @XmlElement(name = "SiteOwnerContact")
    protected SiteOwnerContact siteOwnerContact;
    @XmlElement(name = "SiteOwnerAddress")
    protected SiteOwnerAddress siteOwnerAddress;

    /**
     * Gets the value of the permittedFeatureTypeCode property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "PRMT_FEATR_TYPE_CODE", length = 3)
    public String getPermittedFeatureTypeCode() {
        return permittedFeatureTypeCode;
    }

    /**
     * Sets the value of the permittedFeatureTypeCode property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setPermittedFeatureTypeCode(String value) {
        this.permittedFeatureTypeCode = value;
    }

    @Transient
    public boolean isSetPermittedFeatureTypeCode() {
        return (this.permittedFeatureTypeCode!= null);
    }

    /**
     * Gets the value of the permittedFeatureCharacteristics property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the permittedFeatureCharacteristics property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getPermittedFeatureCharacteristics().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link String }
     * 
     * 
     */
    @ElementCollection
    @Column(name = "PRMT_FEATR_CHAR", length = 3)
    @CollectionTable(name = "ICS_PRMT_FEATR_CHAR", joinColumns = {
        @JoinColumn(name = "ICS_PRMT_FEATR_ID")
    })
    public List<String> getPermittedFeatureCharacteristics() {
        if (permittedFeatureCharacteristics == null) {
            permittedFeatureCharacteristics = new ArrayList<String>();
        }
        return this.permittedFeatureCharacteristics;
    }

    /**
     * 
     * 
     */
    public void setPermittedFeatureCharacteristics(List<String> permittedFeatureCharacteristics) {
        this.permittedFeatureCharacteristics = permittedFeatureCharacteristics;
    }

    @Transient
    public boolean isSetPermittedFeatureCharacteristics() {
        return ((this.permittedFeatureCharacteristics!= null)&&(!this.permittedFeatureCharacteristics.isEmpty()));
    }

    public void unsetPermittedFeatureCharacteristics() {
        this.permittedFeatureCharacteristics = null;
    }

    /**
     * Gets the value of the permittedFeatureDescription property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "PRMT_FEATR_DESC", length = 100)
    public String getPermittedFeatureDescription() {
        return permittedFeatureDescription;
    }

    /**
     * Sets the value of the permittedFeatureDescription property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setPermittedFeatureDescription(String value) {
        this.permittedFeatureDescription = value;
    }

    @Transient
    public boolean isSetPermittedFeatureDescription() {
        return (this.permittedFeatureDescription!= null);
    }

    /**
     * Gets the value of the permittedFeatureTreatmentTypeCode property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the permittedFeatureTreatmentTypeCode property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getPermittedFeatureTreatmentTypeCode().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link String }
     * 
     * 
     */
    @ElementCollection
    @Column(name = "PRMT_FEATR_TRTMNT_TYPE_CODE", length = 3)
    @CollectionTable(name = "ICS_PRMT_FEATR_TRTMNT_TYPE", joinColumns = {
        @JoinColumn(name = "ICS_PRMT_FEATR_ID")
    })
    public List<String> getPermittedFeatureTreatmentTypeCode() {
        if (permittedFeatureTreatmentTypeCode == null) {
            permittedFeatureTreatmentTypeCode = new ArrayList<String>();
        }
        return this.permittedFeatureTreatmentTypeCode;
    }

    /**
     * 
     * 
     */
    public void setPermittedFeatureTreatmentTypeCode(List<String> permittedFeatureTreatmentTypeCode) {
        this.permittedFeatureTreatmentTypeCode = permittedFeatureTreatmentTypeCode;
    }

    @Transient
    public boolean isSetPermittedFeatureTreatmentTypeCode() {
        return ((this.permittedFeatureTreatmentTypeCode!= null)&&(!this.permittedFeatureTreatmentTypeCode.isEmpty()));
    }

    public void unsetPermittedFeatureTreatmentTypeCode() {
        this.permittedFeatureTreatmentTypeCode = null;
    }

    /**
     * Gets the value of the permittedFeatureDesignFlowNumber property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "PRMT_FEATR_DSGN_FLOW_NUM", scale = 7)
    public BigDecimal getPermittedFeatureDesignFlowNumber() {
        return permittedFeatureDesignFlowNumber;
    }

    /**
     * Sets the value of the permittedFeatureDesignFlowNumber property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setPermittedFeatureDesignFlowNumber(BigDecimal value) {
        this.permittedFeatureDesignFlowNumber = value;
    }

    @Transient
    public boolean isSetPermittedFeatureDesignFlowNumber() {
        return (this.permittedFeatureDesignFlowNumber!= null);
    }

    /**
     * Gets the value of the permittedFeatureActualAverageFlowNumber property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "PRMT_FEATR_ACTUL_AVER_FLOW_NUM", scale = 7)
    public BigDecimal getPermittedFeatureActualAverageFlowNumber() {
        return permittedFeatureActualAverageFlowNumber;
    }

    /**
     * Sets the value of the permittedFeatureActualAverageFlowNumber property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setPermittedFeatureActualAverageFlowNumber(BigDecimal value) {
        this.permittedFeatureActualAverageFlowNumber = value;
    }

    @Transient
    public boolean isSetPermittedFeatureActualAverageFlowNumber() {
        return (this.permittedFeatureActualAverageFlowNumber!= null);
    }

    /**
     * Gets the value of the permittedFeatureStateWaterBodyCode property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "PRMT_FEATR_ST_WTR_BODY_CODE", length = 12)
    public String getPermittedFeatureStateWaterBodyCode() {
        return permittedFeatureStateWaterBodyCode;
    }

    /**
     * Sets the value of the permittedFeatureStateWaterBodyCode property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setPermittedFeatureStateWaterBodyCode(String value) {
        this.permittedFeatureStateWaterBodyCode = value;
    }

    @Transient
    public boolean isSetPermittedFeatureStateWaterBodyCode() {
        return (this.permittedFeatureStateWaterBodyCode!= null);
    }

    /**
     * Gets the value of the permittedFeatureStateWaterBodyName property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "PRMT_FEATR_ST_WTR_BODY_NAME", length = 50)
    public String getPermittedFeatureStateWaterBodyName() {
        return permittedFeatureStateWaterBodyName;
    }

    /**
     * Sets the value of the permittedFeatureStateWaterBodyName property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setPermittedFeatureStateWaterBodyName(String value) {
        this.permittedFeatureStateWaterBodyName = value;
    }

    @Transient
    public boolean isSetPermittedFeatureStateWaterBodyName() {
        return (this.permittedFeatureStateWaterBodyName!= null);
    }

    /**
     * Gets the value of the impairedWaterIndicator property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "IMPAIRED_WTR_IND", columnDefinition = "char(1)", length = 1)
    public String getImpairedWaterIndicator() {
        return impairedWaterIndicator;
    }

    /**
     * Sets the value of the impairedWaterIndicator property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setImpairedWaterIndicator(String value) {
        this.impairedWaterIndicator = value;
    }

    @Transient
    public boolean isSetImpairedWaterIndicator() {
        return (this.impairedWaterIndicator!= null);
    }

    /**
     * Gets the value of the tmdlCompletedIndicator property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "TMDL_COMPLETED_IND", columnDefinition = "char(1)", length = 1)
    public String getTMDLCompletedIndicator() {
        return tmdlCompletedIndicator;
    }

    /**
     * Sets the value of the tmdlCompletedIndicator property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setTMDLCompletedIndicator(String value) {
        this.tmdlCompletedIndicator = value;
    }

    @Transient
    public boolean isSetTMDLCompletedIndicator() {
        return (this.tmdlCompletedIndicator!= null);
    }

    /**
     * Gets the value of the permittedFeatureUserDefinedDataElement1 property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "PRMT_FEATR_USR_DFND_DAT_ELM_1", length = 30)
    public String getPermittedFeatureUserDefinedDataElement1() {
        return permittedFeatureUserDefinedDataElement1;
    }

    /**
     * Sets the value of the permittedFeatureUserDefinedDataElement1 property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setPermittedFeatureUserDefinedDataElement1(String value) {
        this.permittedFeatureUserDefinedDataElement1 = value;
    }

    @Transient
    public boolean isSetPermittedFeatureUserDefinedDataElement1() {
        return (this.permittedFeatureUserDefinedDataElement1 != null);
    }

    /**
     * Gets the value of the permittedFeatureUserDefinedDataElement2 property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "PRMT_FEATR_USR_DFND_DAT_ELM_2", length = 30)
    public String getPermittedFeatureUserDefinedDataElement2() {
        return permittedFeatureUserDefinedDataElement2;
    }

    /**
     * Sets the value of the permittedFeatureUserDefinedDataElement2 property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setPermittedFeatureUserDefinedDataElement2(String value) {
        this.permittedFeatureUserDefinedDataElement2 = value;
    }

    @Transient
    public boolean isSetPermittedFeatureUserDefinedDataElement2() {
        return (this.permittedFeatureUserDefinedDataElement2 != null);
    }

    /**
     * Gets the value of the fieldSize property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "FLD_SIZE", scale = 0)
    public Integer getFieldSize() {
        return fieldSize;
    }

    /**
     * Sets the value of the fieldSize property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setFieldSize(Integer value) {
        this.fieldSize = value;
    }

    @Transient
    public boolean isSetFieldSize() {
        return (this.fieldSize!= null);
    }

    /**
     * Gets the value of the isSiteOwnByFacility property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "IS_SITE_OWN_BY_FAC", columnDefinition = "char(1)", length = 1)
    public String getIsSiteOwnByFacility() {
        return isSiteOwnByFacility;
    }

    /**
     * Sets the value of the isSiteOwnByFacility property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setIsSiteOwnByFacility(String value) {
        this.isSiteOwnByFacility = value;
    }

    @Transient
    public boolean isSetIsSiteOwnByFacility() {
        return (this.isSiteOwnByFacility!= null);
    }

    /**
     * Gets the value of the isSystemLinedWithLeachate property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "IS_SYSTM_LINED_WITH_LEACHATE", columnDefinition = "char(1)", length = 1)
    public String getIsSystemLinedWithLeachate() {
        return isSystemLinedWithLeachate;
    }

    /**
     * Sets the value of the isSystemLinedWithLeachate property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setIsSystemLinedWithLeachate(String value) {
        this.isSystemLinedWithLeachate = value;
    }

    @Transient
    public boolean isSetIsSystemLinedWithLeachate() {
        return (this.isSystemLinedWithLeachate!= null);
    }

    /**
     * Gets the value of the doesUnitHaveDailyCover property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "DOES_UNIT_HAV_DAILY_COVER", columnDefinition = "char(1)", length = 1)
    public String getDoesUnitHaveDailyCover() {
        return doesUnitHaveDailyCover;
    }

    /**
     * Sets the value of the doesUnitHaveDailyCover property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setDoesUnitHaveDailyCover(String value) {
        this.doesUnitHaveDailyCover = value;
    }

    @Transient
    public boolean isSetDoesUnitHaveDailyCover() {
        return (this.doesUnitHaveDailyCover!= null);
    }

    /**
     * Gets the value of the propertyBoundaryDistance property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "PROP_BOUNDARY_DISTANCE", scale = 0)
    public Integer getPropertyBoundaryDistance() {
        return propertyBoundaryDistance;
    }

    /**
     * Sets the value of the propertyBoundaryDistance property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setPropertyBoundaryDistance(Integer value) {
        this.propertyBoundaryDistance = value;
    }

    @Transient
    public boolean isSetPropertyBoundaryDistance() {
        return (this.propertyBoundaryDistance!= null);
    }

    /**
     * Gets the value of the isRequiredNitrateGroundWater property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "IS_REQD_NITRATE_GROUND_WTR", columnDefinition = "char(1)", length = 1)
    public String getIsRequiredNitrateGroundWater() {
        return isRequiredNitrateGroundWater;
    }

    /**
     * Sets the value of the isRequiredNitrateGroundWater property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setIsRequiredNitrateGroundWater(String value) {
        this.isRequiredNitrateGroundWater = value;
    }

    @Transient
    public boolean isSetIsRequiredNitrateGroundWater() {
        return (this.isRequiredNitrateGroundWater!= null);
    }

    /**
     * Gets the value of the wellNumber property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "WELL_NUM", scale = 0)
    public Integer getWellNumber() {
        return wellNumber;
    }

    /**
     * Sets the value of the wellNumber property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setWellNumber(Integer value) {
        this.wellNumber = value;
    }

    @Transient
    public boolean isSetWellNumber() {
        return (this.wellNumber!= null);
    }

    /**
     * Gets the value of the geographicCoordinates property.
     * 
     * @return
     *     possible object is
     *     {@link GeographicCoordinates }
     *     
     */
    @NotFound(action = NotFoundAction.IGNORE)
    @ManyToOne(targetEntity = GeographicCoordinates.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "ICS_PRMT_FEATR_ID", referencedColumnName = "ICS_PRMT_FEATR_ID", insertable = false, updatable = false)
    public GeographicCoordinates getGeographicCoordinates() {
        return geographicCoordinates;
    }

    /**
     * Sets the value of the geographicCoordinates property.
     * 
     * @param value
     *     allowed object is
     *     {@link GeographicCoordinates }
     *     
     */
    public void setGeographicCoordinates(GeographicCoordinates value) {
        this.geographicCoordinates = value;
    }

    @Transient
    public boolean isSetGeographicCoordinates() {
        return (this.geographicCoordinates!= null);
    }

    /**
     * Gets the value of the sourcePermittedFeatureDetailText property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "SRC_PRMT_FEATR_DETAIL_TXT", length = 200)
    public String getSourcePermittedFeatureDetailText() {
        return sourcePermittedFeatureDetailText;
    }

    /**
     * Sets the value of the sourcePermittedFeatureDetailText property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setSourcePermittedFeatureDetailText(String value) {
        this.sourcePermittedFeatureDetailText = value;
    }

    @Transient
    public boolean isSetSourcePermittedFeatureDetailText() {
        return (this.sourcePermittedFeatureDetailText!= null);
    }

    /**
     * Gets the value of the siteOwnerContact property.
     * 
     * @return
     *     possible object is
     *     {@link SiteOwnerContact }
     *     
     */
    @Embedded
    @AssociationOverride(name = "contact", joinColumns = {
        @JoinColumn(name = "ICS_PRMT_FEATR_ID")
    })
    public SiteOwnerContact getSiteOwnerContact() {
        return siteOwnerContact;
    }

    /**
     * Sets the value of the siteOwnerContact property.
     * 
     * @param value
     *     allowed object is
     *     {@link SiteOwnerContact }
     *     
     */
    public void setSiteOwnerContact(SiteOwnerContact value) {
        this.siteOwnerContact = value;
    }

    @Transient
    public boolean isSetSiteOwnerContact() {
        return (this.siteOwnerContact!= null);
    }

    /**
     * Gets the value of the siteOwnerAddress property.
     * 
     * @return
     *     possible object is
     *     {@link SiteOwnerAddress }
     *     
     */
    @Embedded
    @AssociationOverride(name = "address", joinColumns = {
        @JoinColumn(name = "ICS_PRMT_FEATR_ID")
    })
    public SiteOwnerAddress getSiteOwnerAddress() {
        return siteOwnerAddress;
    }

    /**
     * Sets the value of the siteOwnerAddress property.
     * 
     * @param value
     *     allowed object is
     *     {@link SiteOwnerAddress }
     *     
     */
    public void setSiteOwnerAddress(SiteOwnerAddress value) {
        this.siteOwnerAddress = value;
    }

    @Transient
    public boolean isSetSiteOwnerAddress() {
        return (this.siteOwnerAddress!= null);
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof PermittedFeature)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final PermittedFeature that = ((PermittedFeature) object);
        {
            String lhsPermittedFeatureTypeCode;
            lhsPermittedFeatureTypeCode = this.getPermittedFeatureTypeCode();
            String rhsPermittedFeatureTypeCode;
            rhsPermittedFeatureTypeCode = that.getPermittedFeatureTypeCode();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "permittedFeatureTypeCode", lhsPermittedFeatureTypeCode), LocatorUtils.property(thatLocator, "permittedFeatureTypeCode", rhsPermittedFeatureTypeCode), lhsPermittedFeatureTypeCode, rhsPermittedFeatureTypeCode)) {
                return false;
            }
        }
        {
            List<String> lhsPermittedFeatureCharacteristics;
            lhsPermittedFeatureCharacteristics = (this.isSetPermittedFeatureCharacteristics()?this.getPermittedFeatureCharacteristics():null);
            List<String> rhsPermittedFeatureCharacteristics;
            rhsPermittedFeatureCharacteristics = (that.isSetPermittedFeatureCharacteristics()?that.getPermittedFeatureCharacteristics():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "permittedFeatureCharacteristics", lhsPermittedFeatureCharacteristics), LocatorUtils.property(thatLocator, "permittedFeatureCharacteristics", rhsPermittedFeatureCharacteristics), lhsPermittedFeatureCharacteristics, rhsPermittedFeatureCharacteristics)) {
                return false;
            }
        }
        {
            String lhsPermittedFeatureDescription;
            lhsPermittedFeatureDescription = this.getPermittedFeatureDescription();
            String rhsPermittedFeatureDescription;
            rhsPermittedFeatureDescription = that.getPermittedFeatureDescription();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "permittedFeatureDescription", lhsPermittedFeatureDescription), LocatorUtils.property(thatLocator, "permittedFeatureDescription", rhsPermittedFeatureDescription), lhsPermittedFeatureDescription, rhsPermittedFeatureDescription)) {
                return false;
            }
        }
        {
            List<String> lhsPermittedFeatureTreatmentTypeCode;
            lhsPermittedFeatureTreatmentTypeCode = (this.isSetPermittedFeatureTreatmentTypeCode()?this.getPermittedFeatureTreatmentTypeCode():null);
            List<String> rhsPermittedFeatureTreatmentTypeCode;
            rhsPermittedFeatureTreatmentTypeCode = (that.isSetPermittedFeatureTreatmentTypeCode()?that.getPermittedFeatureTreatmentTypeCode():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "permittedFeatureTreatmentTypeCode", lhsPermittedFeatureTreatmentTypeCode), LocatorUtils.property(thatLocator, "permittedFeatureTreatmentTypeCode", rhsPermittedFeatureTreatmentTypeCode), lhsPermittedFeatureTreatmentTypeCode, rhsPermittedFeatureTreatmentTypeCode)) {
                return false;
            }
        }
        {
            BigDecimal lhsPermittedFeatureDesignFlowNumber;
            lhsPermittedFeatureDesignFlowNumber = this.getPermittedFeatureDesignFlowNumber();
            BigDecimal rhsPermittedFeatureDesignFlowNumber;
            rhsPermittedFeatureDesignFlowNumber = that.getPermittedFeatureDesignFlowNumber();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "permittedFeatureDesignFlowNumber", lhsPermittedFeatureDesignFlowNumber), LocatorUtils.property(thatLocator, "permittedFeatureDesignFlowNumber", rhsPermittedFeatureDesignFlowNumber), lhsPermittedFeatureDesignFlowNumber, rhsPermittedFeatureDesignFlowNumber)) {
                return false;
            }
        }
        {
            BigDecimal lhsPermittedFeatureActualAverageFlowNumber;
            lhsPermittedFeatureActualAverageFlowNumber = this.getPermittedFeatureActualAverageFlowNumber();
            BigDecimal rhsPermittedFeatureActualAverageFlowNumber;
            rhsPermittedFeatureActualAverageFlowNumber = that.getPermittedFeatureActualAverageFlowNumber();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "permittedFeatureActualAverageFlowNumber", lhsPermittedFeatureActualAverageFlowNumber), LocatorUtils.property(thatLocator, "permittedFeatureActualAverageFlowNumber", rhsPermittedFeatureActualAverageFlowNumber), lhsPermittedFeatureActualAverageFlowNumber, rhsPermittedFeatureActualAverageFlowNumber)) {
                return false;
            }
        }
        {
            String lhsPermittedFeatureStateWaterBodyCode;
            lhsPermittedFeatureStateWaterBodyCode = this.getPermittedFeatureStateWaterBodyCode();
            String rhsPermittedFeatureStateWaterBodyCode;
            rhsPermittedFeatureStateWaterBodyCode = that.getPermittedFeatureStateWaterBodyCode();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "permittedFeatureStateWaterBodyCode", lhsPermittedFeatureStateWaterBodyCode), LocatorUtils.property(thatLocator, "permittedFeatureStateWaterBodyCode", rhsPermittedFeatureStateWaterBodyCode), lhsPermittedFeatureStateWaterBodyCode, rhsPermittedFeatureStateWaterBodyCode)) {
                return false;
            }
        }
        {
            String lhsPermittedFeatureStateWaterBodyName;
            lhsPermittedFeatureStateWaterBodyName = this.getPermittedFeatureStateWaterBodyName();
            String rhsPermittedFeatureStateWaterBodyName;
            rhsPermittedFeatureStateWaterBodyName = that.getPermittedFeatureStateWaterBodyName();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "permittedFeatureStateWaterBodyName", lhsPermittedFeatureStateWaterBodyName), LocatorUtils.property(thatLocator, "permittedFeatureStateWaterBodyName", rhsPermittedFeatureStateWaterBodyName), lhsPermittedFeatureStateWaterBodyName, rhsPermittedFeatureStateWaterBodyName)) {
                return false;
            }
        }
        {
            String lhsImpairedWaterIndicator;
            lhsImpairedWaterIndicator = this.getImpairedWaterIndicator();
            String rhsImpairedWaterIndicator;
            rhsImpairedWaterIndicator = that.getImpairedWaterIndicator();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "impairedWaterIndicator", lhsImpairedWaterIndicator), LocatorUtils.property(thatLocator, "impairedWaterIndicator", rhsImpairedWaterIndicator), lhsImpairedWaterIndicator, rhsImpairedWaterIndicator)) {
                return false;
            }
        }
        {
            String lhsTMDLCompletedIndicator;
            lhsTMDLCompletedIndicator = this.getTMDLCompletedIndicator();
            String rhsTMDLCompletedIndicator;
            rhsTMDLCompletedIndicator = that.getTMDLCompletedIndicator();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "tmdlCompletedIndicator", lhsTMDLCompletedIndicator), LocatorUtils.property(thatLocator, "tmdlCompletedIndicator", rhsTMDLCompletedIndicator), lhsTMDLCompletedIndicator, rhsTMDLCompletedIndicator)) {
                return false;
            }
        }
        {
            String lhsPermittedFeatureUserDefinedDataElement1;
            lhsPermittedFeatureUserDefinedDataElement1 = this.getPermittedFeatureUserDefinedDataElement1();
            String rhsPermittedFeatureUserDefinedDataElement1;
            rhsPermittedFeatureUserDefinedDataElement1 = that.getPermittedFeatureUserDefinedDataElement1();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "permittedFeatureUserDefinedDataElement1", lhsPermittedFeatureUserDefinedDataElement1), LocatorUtils.property(thatLocator, "permittedFeatureUserDefinedDataElement1", rhsPermittedFeatureUserDefinedDataElement1), lhsPermittedFeatureUserDefinedDataElement1, rhsPermittedFeatureUserDefinedDataElement1)) {
                return false;
            }
        }
        {
            String lhsPermittedFeatureUserDefinedDataElement2;
            lhsPermittedFeatureUserDefinedDataElement2 = this.getPermittedFeatureUserDefinedDataElement2();
            String rhsPermittedFeatureUserDefinedDataElement2;
            rhsPermittedFeatureUserDefinedDataElement2 = that.getPermittedFeatureUserDefinedDataElement2();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "permittedFeatureUserDefinedDataElement2", lhsPermittedFeatureUserDefinedDataElement2), LocatorUtils.property(thatLocator, "permittedFeatureUserDefinedDataElement2", rhsPermittedFeatureUserDefinedDataElement2), lhsPermittedFeatureUserDefinedDataElement2, rhsPermittedFeatureUserDefinedDataElement2)) {
                return false;
            }
        }
        {
            Integer lhsFieldSize;
            lhsFieldSize = this.getFieldSize();
            Integer rhsFieldSize;
            rhsFieldSize = that.getFieldSize();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "fieldSize", lhsFieldSize), LocatorUtils.property(thatLocator, "fieldSize", rhsFieldSize), lhsFieldSize, rhsFieldSize)) {
                return false;
            }
        }
        {
            String lhsIsSiteOwnByFacility;
            lhsIsSiteOwnByFacility = this.getIsSiteOwnByFacility();
            String rhsIsSiteOwnByFacility;
            rhsIsSiteOwnByFacility = that.getIsSiteOwnByFacility();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "isSiteOwnByFacility", lhsIsSiteOwnByFacility), LocatorUtils.property(thatLocator, "isSiteOwnByFacility", rhsIsSiteOwnByFacility), lhsIsSiteOwnByFacility, rhsIsSiteOwnByFacility)) {
                return false;
            }
        }
        {
            String lhsIsSystemLinedWithLeachate;
            lhsIsSystemLinedWithLeachate = this.getIsSystemLinedWithLeachate();
            String rhsIsSystemLinedWithLeachate;
            rhsIsSystemLinedWithLeachate = that.getIsSystemLinedWithLeachate();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "isSystemLinedWithLeachate", lhsIsSystemLinedWithLeachate), LocatorUtils.property(thatLocator, "isSystemLinedWithLeachate", rhsIsSystemLinedWithLeachate), lhsIsSystemLinedWithLeachate, rhsIsSystemLinedWithLeachate)) {
                return false;
            }
        }
        {
            String lhsDoesUnitHaveDailyCover;
            lhsDoesUnitHaveDailyCover = this.getDoesUnitHaveDailyCover();
            String rhsDoesUnitHaveDailyCover;
            rhsDoesUnitHaveDailyCover = that.getDoesUnitHaveDailyCover();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "doesUnitHaveDailyCover", lhsDoesUnitHaveDailyCover), LocatorUtils.property(thatLocator, "doesUnitHaveDailyCover", rhsDoesUnitHaveDailyCover), lhsDoesUnitHaveDailyCover, rhsDoesUnitHaveDailyCover)) {
                return false;
            }
        }
        {
            Integer lhsPropertyBoundaryDistance;
            lhsPropertyBoundaryDistance = this.getPropertyBoundaryDistance();
            Integer rhsPropertyBoundaryDistance;
            rhsPropertyBoundaryDistance = that.getPropertyBoundaryDistance();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "propertyBoundaryDistance", lhsPropertyBoundaryDistance), LocatorUtils.property(thatLocator, "propertyBoundaryDistance", rhsPropertyBoundaryDistance), lhsPropertyBoundaryDistance, rhsPropertyBoundaryDistance)) {
                return false;
            }
        }
        {
            String lhsIsRequiredNitrateGroundWater;
            lhsIsRequiredNitrateGroundWater = this.getIsRequiredNitrateGroundWater();
            String rhsIsRequiredNitrateGroundWater;
            rhsIsRequiredNitrateGroundWater = that.getIsRequiredNitrateGroundWater();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "isRequiredNitrateGroundWater", lhsIsRequiredNitrateGroundWater), LocatorUtils.property(thatLocator, "isRequiredNitrateGroundWater", rhsIsRequiredNitrateGroundWater), lhsIsRequiredNitrateGroundWater, rhsIsRequiredNitrateGroundWater)) {
                return false;
            }
        }
        {
            Integer lhsWellNumber;
            lhsWellNumber = this.getWellNumber();
            Integer rhsWellNumber;
            rhsWellNumber = that.getWellNumber();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "wellNumber", lhsWellNumber), LocatorUtils.property(thatLocator, "wellNumber", rhsWellNumber), lhsWellNumber, rhsWellNumber)) {
                return false;
            }
        }
        {
            GeographicCoordinates lhsGeographicCoordinates;
            lhsGeographicCoordinates = this.getGeographicCoordinates();
            GeographicCoordinates rhsGeographicCoordinates;
            rhsGeographicCoordinates = that.getGeographicCoordinates();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "geographicCoordinates", lhsGeographicCoordinates), LocatorUtils.property(thatLocator, "geographicCoordinates", rhsGeographicCoordinates), lhsGeographicCoordinates, rhsGeographicCoordinates)) {
                return false;
            }
        }
        {
            String lhsSourcePermittedFeatureDetailText;
            lhsSourcePermittedFeatureDetailText = this.getSourcePermittedFeatureDetailText();
            String rhsSourcePermittedFeatureDetailText;
            rhsSourcePermittedFeatureDetailText = that.getSourcePermittedFeatureDetailText();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "sourcePermittedFeatureDetailText", lhsSourcePermittedFeatureDetailText), LocatorUtils.property(thatLocator, "sourcePermittedFeatureDetailText", rhsSourcePermittedFeatureDetailText), lhsSourcePermittedFeatureDetailText, rhsSourcePermittedFeatureDetailText)) {
                return false;
            }
        }
        {
            SiteOwnerContact lhsSiteOwnerContact;
            lhsSiteOwnerContact = this.getSiteOwnerContact();
            SiteOwnerContact rhsSiteOwnerContact;
            rhsSiteOwnerContact = that.getSiteOwnerContact();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "siteOwnerContact", lhsSiteOwnerContact), LocatorUtils.property(thatLocator, "siteOwnerContact", rhsSiteOwnerContact), lhsSiteOwnerContact, rhsSiteOwnerContact)) {
                return false;
            }
        }
        {
            SiteOwnerAddress lhsSiteOwnerAddress;
            lhsSiteOwnerAddress = this.getSiteOwnerAddress();
            SiteOwnerAddress rhsSiteOwnerAddress;
            rhsSiteOwnerAddress = that.getSiteOwnerAddress();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "siteOwnerAddress", lhsSiteOwnerAddress), LocatorUtils.property(thatLocator, "siteOwnerAddress", rhsSiteOwnerAddress), lhsSiteOwnerAddress, rhsSiteOwnerAddress)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            String thePermittedFeatureTypeCode;
            thePermittedFeatureTypeCode = this.getPermittedFeatureTypeCode();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "permittedFeatureTypeCode", thePermittedFeatureTypeCode), currentHashCode, thePermittedFeatureTypeCode);
        }
        {
            List<String> thePermittedFeatureCharacteristics;
            thePermittedFeatureCharacteristics = (this.isSetPermittedFeatureCharacteristics()?this.getPermittedFeatureCharacteristics():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "permittedFeatureCharacteristics", thePermittedFeatureCharacteristics), currentHashCode, thePermittedFeatureCharacteristics);
        }
        {
            String thePermittedFeatureDescription;
            thePermittedFeatureDescription = this.getPermittedFeatureDescription();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "permittedFeatureDescription", thePermittedFeatureDescription), currentHashCode, thePermittedFeatureDescription);
        }
        {
            List<String> thePermittedFeatureTreatmentTypeCode;
            thePermittedFeatureTreatmentTypeCode = (this.isSetPermittedFeatureTreatmentTypeCode()?this.getPermittedFeatureTreatmentTypeCode():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "permittedFeatureTreatmentTypeCode", thePermittedFeatureTreatmentTypeCode), currentHashCode, thePermittedFeatureTreatmentTypeCode);
        }
        {
            BigDecimal thePermittedFeatureDesignFlowNumber;
            thePermittedFeatureDesignFlowNumber = this.getPermittedFeatureDesignFlowNumber();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "permittedFeatureDesignFlowNumber", thePermittedFeatureDesignFlowNumber), currentHashCode, thePermittedFeatureDesignFlowNumber);
        }
        {
            BigDecimal thePermittedFeatureActualAverageFlowNumber;
            thePermittedFeatureActualAverageFlowNumber = this.getPermittedFeatureActualAverageFlowNumber();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "permittedFeatureActualAverageFlowNumber", thePermittedFeatureActualAverageFlowNumber), currentHashCode, thePermittedFeatureActualAverageFlowNumber);
        }
        {
            String thePermittedFeatureStateWaterBodyCode;
            thePermittedFeatureStateWaterBodyCode = this.getPermittedFeatureStateWaterBodyCode();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "permittedFeatureStateWaterBodyCode", thePermittedFeatureStateWaterBodyCode), currentHashCode, thePermittedFeatureStateWaterBodyCode);
        }
        {
            String thePermittedFeatureStateWaterBodyName;
            thePermittedFeatureStateWaterBodyName = this.getPermittedFeatureStateWaterBodyName();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "permittedFeatureStateWaterBodyName", thePermittedFeatureStateWaterBodyName), currentHashCode, thePermittedFeatureStateWaterBodyName);
        }
        {
            String theImpairedWaterIndicator;
            theImpairedWaterIndicator = this.getImpairedWaterIndicator();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "impairedWaterIndicator", theImpairedWaterIndicator), currentHashCode, theImpairedWaterIndicator);
        }
        {
            String theTMDLCompletedIndicator;
            theTMDLCompletedIndicator = this.getTMDLCompletedIndicator();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "tmdlCompletedIndicator", theTMDLCompletedIndicator), currentHashCode, theTMDLCompletedIndicator);
        }
        {
            String thePermittedFeatureUserDefinedDataElement1;
            thePermittedFeatureUserDefinedDataElement1 = this.getPermittedFeatureUserDefinedDataElement1();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "permittedFeatureUserDefinedDataElement1", thePermittedFeatureUserDefinedDataElement1), currentHashCode, thePermittedFeatureUserDefinedDataElement1);
        }
        {
            String thePermittedFeatureUserDefinedDataElement2;
            thePermittedFeatureUserDefinedDataElement2 = this.getPermittedFeatureUserDefinedDataElement2();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "permittedFeatureUserDefinedDataElement2", thePermittedFeatureUserDefinedDataElement2), currentHashCode, thePermittedFeatureUserDefinedDataElement2);
        }
        {
            Integer theFieldSize;
            theFieldSize = this.getFieldSize();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "fieldSize", theFieldSize), currentHashCode, theFieldSize);
        }
        {
            String theIsSiteOwnByFacility;
            theIsSiteOwnByFacility = this.getIsSiteOwnByFacility();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "isSiteOwnByFacility", theIsSiteOwnByFacility), currentHashCode, theIsSiteOwnByFacility);
        }
        {
            String theIsSystemLinedWithLeachate;
            theIsSystemLinedWithLeachate = this.getIsSystemLinedWithLeachate();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "isSystemLinedWithLeachate", theIsSystemLinedWithLeachate), currentHashCode, theIsSystemLinedWithLeachate);
        }
        {
            String theDoesUnitHaveDailyCover;
            theDoesUnitHaveDailyCover = this.getDoesUnitHaveDailyCover();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "doesUnitHaveDailyCover", theDoesUnitHaveDailyCover), currentHashCode, theDoesUnitHaveDailyCover);
        }
        {
            Integer thePropertyBoundaryDistance;
            thePropertyBoundaryDistance = this.getPropertyBoundaryDistance();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "propertyBoundaryDistance", thePropertyBoundaryDistance), currentHashCode, thePropertyBoundaryDistance);
        }
        {
            String theIsRequiredNitrateGroundWater;
            theIsRequiredNitrateGroundWater = this.getIsRequiredNitrateGroundWater();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "isRequiredNitrateGroundWater", theIsRequiredNitrateGroundWater), currentHashCode, theIsRequiredNitrateGroundWater);
        }
        {
            Integer theWellNumber;
            theWellNumber = this.getWellNumber();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "wellNumber", theWellNumber), currentHashCode, theWellNumber);
        }
        {
            GeographicCoordinates theGeographicCoordinates;
            theGeographicCoordinates = this.getGeographicCoordinates();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "geographicCoordinates", theGeographicCoordinates), currentHashCode, theGeographicCoordinates);
        }
        {
            String theSourcePermittedFeatureDetailText;
            theSourcePermittedFeatureDetailText = this.getSourcePermittedFeatureDetailText();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "sourcePermittedFeatureDetailText", theSourcePermittedFeatureDetailText), currentHashCode, theSourcePermittedFeatureDetailText);
        }
        {
            SiteOwnerContact theSiteOwnerContact;
            theSiteOwnerContact = this.getSiteOwnerContact();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "siteOwnerContact", theSiteOwnerContact), currentHashCode, theSiteOwnerContact);
        }
        {
            SiteOwnerAddress theSiteOwnerAddress;
            theSiteOwnerAddress = this.getSiteOwnerAddress();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "siteOwnerAddress", theSiteOwnerAddress), currentHashCode, theSiteOwnerAddress);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
