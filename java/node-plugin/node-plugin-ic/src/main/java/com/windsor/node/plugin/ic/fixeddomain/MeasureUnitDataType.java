//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2013.08.26 at 02:36:56 PM PDT 
//


package com.windsor.node.plugin.ic.fixeddomain;

import java.io.Serializable;
import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Basic;
import javax.persistence.Column;
import javax.persistence.Embeddable;
import javax.persistence.Embedded;
import javax.persistence.Transient;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for MeasureUnitDataType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="MeasureUnitDataType">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element ref="{http://www.exchangenetwork.net/schema/IC/1}MeasureUnitCode" minOccurs="0"/>
 *         &lt;element ref="{http://www.exchangenetwork.net/schema/IC/1}MeasureUnitCodeListIdentifier" minOccurs="0"/>
 *         &lt;element ref="{http://www.exchangenetwork.net/schema/IC/1}MeasureUnitName" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "MeasureUnitDataType", propOrder = {
    "measureUnitCode",
    "measureUnitCodeListIdentifier",
    "measureUnitName"
})
@Embeddable
public class MeasureUnitDataType
    implements Serializable, Equals, HashCode
{

    private final static long serialVersionUID = 1L;
    @XmlElement(name = "MeasureUnitCode")
    protected String measureUnitCode;
    @XmlElement(name = "MeasureUnitCodeListIdentifier")
    protected MeasureUnitCodeListIdentifierDataType measureUnitCodeListIdentifier;
    @XmlElement(name = "MeasureUnitName")
    protected String measureUnitName;

    /**
     * Gets the value of the measureUnitCode property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "MEAS_UNIT_CODE", length = 255)
    public String getMeasureUnitCode() {
        return measureUnitCode;
    }

    /**
     * Sets the value of the measureUnitCode property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setMeasureUnitCode(String value) {
        this.measureUnitCode = value;
    }

    @Transient
    public boolean isSetMeasureUnitCode() {
        return (this.measureUnitCode!= null);
    }

    /**
     * Gets the value of the measureUnitCodeListIdentifier property.
     * 
     * @return
     *     possible object is
     *     {@link MeasureUnitCodeListIdentifierDataType }
     *     
     */
    @Embedded
    @AttributeOverrides({
        @AttributeOverride(name = "value", column = @Column(name = "VALUE", length = 255)),
        @AttributeOverride(name = "codeListVersionIdentifier", column = @Column(name = "CODE_LST_IDEN", length = 255)),
        @AttributeOverride(name = "codeListVersionAgencyIdentifier", column = @Column(name = "CODE_LST_AGENCY_IDEN", length = 255))
    })
    public MeasureUnitCodeListIdentifierDataType getMeasureUnitCodeListIdentifier() {
        return measureUnitCodeListIdentifier;
    }

    /**
     * Sets the value of the measureUnitCodeListIdentifier property.
     * 
     * @param value
     *     allowed object is
     *     {@link MeasureUnitCodeListIdentifierDataType }
     *     
     */
    public void setMeasureUnitCodeListIdentifier(MeasureUnitCodeListIdentifierDataType value) {
        this.measureUnitCodeListIdentifier = value;
    }

    @Transient
    public boolean isSetMeasureUnitCodeListIdentifier() {
        return (this.measureUnitCodeListIdentifier!= null);
    }

    /**
     * Gets the value of the measureUnitName property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "MEAS_UNIT_NAME", length = 255)
    public String getMeasureUnitName() {
        return measureUnitName;
    }

    /**
     * Sets the value of the measureUnitName property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setMeasureUnitName(String value) {
        this.measureUnitName = value;
    }

    @Transient
    public boolean isSetMeasureUnitName() {
        return (this.measureUnitName!= null);
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof MeasureUnitDataType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final MeasureUnitDataType that = ((MeasureUnitDataType) object);
        {
            String lhsMeasureUnitCode;
            lhsMeasureUnitCode = this.getMeasureUnitCode();
            String rhsMeasureUnitCode;
            rhsMeasureUnitCode = that.getMeasureUnitCode();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "measureUnitCode", lhsMeasureUnitCode), LocatorUtils.property(thatLocator, "measureUnitCode", rhsMeasureUnitCode), lhsMeasureUnitCode, rhsMeasureUnitCode)) {
                return false;
            }
        }
        {
            MeasureUnitCodeListIdentifierDataType lhsMeasureUnitCodeListIdentifier;
            lhsMeasureUnitCodeListIdentifier = this.getMeasureUnitCodeListIdentifier();
            MeasureUnitCodeListIdentifierDataType rhsMeasureUnitCodeListIdentifier;
            rhsMeasureUnitCodeListIdentifier = that.getMeasureUnitCodeListIdentifier();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "measureUnitCodeListIdentifier", lhsMeasureUnitCodeListIdentifier), LocatorUtils.property(thatLocator, "measureUnitCodeListIdentifier", rhsMeasureUnitCodeListIdentifier), lhsMeasureUnitCodeListIdentifier, rhsMeasureUnitCodeListIdentifier)) {
                return false;
            }
        }
        {
            String lhsMeasureUnitName;
            lhsMeasureUnitName = this.getMeasureUnitName();
            String rhsMeasureUnitName;
            rhsMeasureUnitName = that.getMeasureUnitName();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "measureUnitName", lhsMeasureUnitName), LocatorUtils.property(thatLocator, "measureUnitName", rhsMeasureUnitName), lhsMeasureUnitName, rhsMeasureUnitName)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            String theMeasureUnitCode;
            theMeasureUnitCode = this.getMeasureUnitCode();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "measureUnitCode", theMeasureUnitCode), currentHashCode, theMeasureUnitCode);
        }
        {
            MeasureUnitCodeListIdentifierDataType theMeasureUnitCodeListIdentifier;
            theMeasureUnitCodeListIdentifier = this.getMeasureUnitCodeListIdentifier();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "measureUnitCodeListIdentifier", theMeasureUnitCodeListIdentifier), currentHashCode, theMeasureUnitCodeListIdentifier);
        }
        {
            String theMeasureUnitName;
            theMeasureUnitName = this.getMeasureUnitName();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "measureUnitName", theMeasureUnitName), currentHashCode, theMeasureUnitName);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
