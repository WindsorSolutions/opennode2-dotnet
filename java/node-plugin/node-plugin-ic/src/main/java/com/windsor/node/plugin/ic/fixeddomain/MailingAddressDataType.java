//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2013.08.26 at 02:36:56 PM PDT 
//


package com.windsor.node.plugin.ic.fixeddomain;

import java.io.Serializable;
import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Basic;
import javax.persistence.Column;
import javax.persistence.Embeddable;
import javax.persistence.Embedded;
import javax.persistence.Transient;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for MailingAddressDataType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="MailingAddressDataType">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element ref="{http://www.exchangenetwork.net/schema/IC/1}MailingAddressText" minOccurs="0"/>
 *         &lt;element ref="{http://www.exchangenetwork.net/schema/IC/1}SupplementalAddressText" minOccurs="0"/>
 *         &lt;element ref="{http://www.exchangenetwork.net/schema/IC/1}MailingAddressCityName" minOccurs="0"/>
 *         &lt;element ref="{http://www.exchangenetwork.net/schema/IC/1}StateIdentity" minOccurs="0"/>
 *         &lt;element ref="{http://www.exchangenetwork.net/schema/IC/1}AddressPostalCode" minOccurs="0"/>
 *         &lt;element ref="{http://www.exchangenetwork.net/schema/IC/1}CountryIdentity" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "MailingAddressDataType", propOrder = {
    "mailingAddressText",
    "supplementalAddressText",
    "mailingAddressCityName",
    "stateIdentity",
    "addressPostalCode",
    "countryIdentity"
})
@Embeddable
public class MailingAddressDataType
    implements Serializable, Equals, HashCode
{

    private final static long serialVersionUID = 1L;
    @XmlElement(name = "MailingAddressText")
    protected String mailingAddressText;
    @XmlElement(name = "SupplementalAddressText")
    protected String supplementalAddressText;
    @XmlElement(name = "MailingAddressCityName")
    protected String mailingAddressCityName;
    @XmlElement(name = "StateIdentity")
    protected StateIdentityDataType stateIdentity;
    @XmlElement(name = "AddressPostalCode")
    protected AddressPostalCodeDataType addressPostalCode;
    @XmlElement(name = "CountryIdentity")
    protected CountryIdentityDataType countryIdentity;

    /**
     * Gets the value of the mailingAddressText property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "MAILING_ADDR_TXT", length = 255)
    public String getMailingAddressText() {
        return mailingAddressText;
    }

    /**
     * Sets the value of the mailingAddressText property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setMailingAddressText(String value) {
        this.mailingAddressText = value;
    }

    @Transient
    public boolean isSetMailingAddressText() {
        return (this.mailingAddressText!= null);
    }

    /**
     * Gets the value of the supplementalAddressText property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "SUPPL_ADDR_TXT", length = 255)
    public String getSupplementalAddressText() {
        return supplementalAddressText;
    }

    /**
     * Sets the value of the supplementalAddressText property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setSupplementalAddressText(String value) {
        this.supplementalAddressText = value;
    }

    @Transient
    public boolean isSetSupplementalAddressText() {
        return (this.supplementalAddressText!= null);
    }

    /**
     * Gets the value of the mailingAddressCityName property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "MAILING_ADDR_CITY_NAME", length = 255)
    public String getMailingAddressCityName() {
        return mailingAddressCityName;
    }

    /**
     * Sets the value of the mailingAddressCityName property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setMailingAddressCityName(String value) {
        this.mailingAddressCityName = value;
    }

    @Transient
    public boolean isSetMailingAddressCityName() {
        return (this.mailingAddressCityName!= null);
    }

    /**
     * Gets the value of the stateIdentity property.
     * 
     * @return
     *     possible object is
     *     {@link StateIdentityDataType }
     *     
     */
    @Embedded
    @AttributeOverrides({
        @AttributeOverride(name = "stateCode", column = @Column(name = "ST_CODE", length = 255)),
        @AttributeOverride(name = "stateName", column = @Column(name = "ST_NAME", length = 255)),
        @AttributeOverride(name = "stateCodeListIdentifier.value", column = @Column(name = "VALUE", length = 255)),
        @AttributeOverride(name = "stateCodeListIdentifier.codeListVersionIdentifier", column = @Column(name = "CODE_LST_IDEN", length = 255)),
        @AttributeOverride(name = "stateCodeListIdentifier.codeListVersionAgencyIdentifier", column = @Column(name = "CODE_LST_AGENCY_IDEN", length = 255))
    })
    public StateIdentityDataType getStateIdentity() {
        return stateIdentity;
    }

    /**
     * Sets the value of the stateIdentity property.
     * 
     * @param value
     *     allowed object is
     *     {@link StateIdentityDataType }
     *     
     */
    public void setStateIdentity(StateIdentityDataType value) {
        this.stateIdentity = value;
    }

    @Transient
    public boolean isSetStateIdentity() {
        return (this.stateIdentity!= null);
    }

    /**
     * Gets the value of the addressPostalCode property.
     * 
     * @return
     *     possible object is
     *     {@link AddressPostalCodeDataType }
     *     
     */
    @Embedded
    @AttributeOverrides({
        @AttributeOverride(name = "value", column = @Column(name = "VALUE", length = 255)),
        @AttributeOverride(name = "addressPostalCodeContext", column = @Column(name = "ADDR_POSTAL_CODE_CNTXT", length = 255))
    })
    public AddressPostalCodeDataType getAddressPostalCode() {
        return addressPostalCode;
    }

    /**
     * Sets the value of the addressPostalCode property.
     * 
     * @param value
     *     allowed object is
     *     {@link AddressPostalCodeDataType }
     *     
     */
    public void setAddressPostalCode(AddressPostalCodeDataType value) {
        this.addressPostalCode = value;
    }

    @Transient
    public boolean isSetAddressPostalCode() {
        return (this.addressPostalCode!= null);
    }

    /**
     * Gets the value of the countryIdentity property.
     * 
     * @return
     *     possible object is
     *     {@link CountryIdentityDataType }
     *     
     */
    @Embedded
    @AttributeOverrides({
        @AttributeOverride(name = "countryCode", column = @Column(name = "CNTRY_CODE", length = 255)),
        @AttributeOverride(name = "countryName", column = @Column(name = "CNTRY_NAME", length = 255)),
        @AttributeOverride(name = "countryCodeListIdentifier.value", column = @Column(name = "VALUE", length = 255)),
        @AttributeOverride(name = "countryCodeListIdentifier.codeListVersionIdentifier", column = @Column(name = "CODE_LST_IDEN", length = 255)),
        @AttributeOverride(name = "countryCodeListIdentifier.codeListVersionAgencyIdentifier", column = @Column(name = "CODE_LST_AGENCY_IDEN", length = 255))
    })
    public CountryIdentityDataType getCountryIdentity() {
        return countryIdentity;
    }

    /**
     * Sets the value of the countryIdentity property.
     * 
     * @param value
     *     allowed object is
     *     {@link CountryIdentityDataType }
     *     
     */
    public void setCountryIdentity(CountryIdentityDataType value) {
        this.countryIdentity = value;
    }

    @Transient
    public boolean isSetCountryIdentity() {
        return (this.countryIdentity!= null);
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof MailingAddressDataType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final MailingAddressDataType that = ((MailingAddressDataType) object);
        {
            String lhsMailingAddressText;
            lhsMailingAddressText = this.getMailingAddressText();
            String rhsMailingAddressText;
            rhsMailingAddressText = that.getMailingAddressText();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "mailingAddressText", lhsMailingAddressText), LocatorUtils.property(thatLocator, "mailingAddressText", rhsMailingAddressText), lhsMailingAddressText, rhsMailingAddressText)) {
                return false;
            }
        }
        {
            String lhsSupplementalAddressText;
            lhsSupplementalAddressText = this.getSupplementalAddressText();
            String rhsSupplementalAddressText;
            rhsSupplementalAddressText = that.getSupplementalAddressText();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "supplementalAddressText", lhsSupplementalAddressText), LocatorUtils.property(thatLocator, "supplementalAddressText", rhsSupplementalAddressText), lhsSupplementalAddressText, rhsSupplementalAddressText)) {
                return false;
            }
        }
        {
            String lhsMailingAddressCityName;
            lhsMailingAddressCityName = this.getMailingAddressCityName();
            String rhsMailingAddressCityName;
            rhsMailingAddressCityName = that.getMailingAddressCityName();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "mailingAddressCityName", lhsMailingAddressCityName), LocatorUtils.property(thatLocator, "mailingAddressCityName", rhsMailingAddressCityName), lhsMailingAddressCityName, rhsMailingAddressCityName)) {
                return false;
            }
        }
        {
            StateIdentityDataType lhsStateIdentity;
            lhsStateIdentity = this.getStateIdentity();
            StateIdentityDataType rhsStateIdentity;
            rhsStateIdentity = that.getStateIdentity();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "stateIdentity", lhsStateIdentity), LocatorUtils.property(thatLocator, "stateIdentity", rhsStateIdentity), lhsStateIdentity, rhsStateIdentity)) {
                return false;
            }
        }
        {
            AddressPostalCodeDataType lhsAddressPostalCode;
            lhsAddressPostalCode = this.getAddressPostalCode();
            AddressPostalCodeDataType rhsAddressPostalCode;
            rhsAddressPostalCode = that.getAddressPostalCode();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "addressPostalCode", lhsAddressPostalCode), LocatorUtils.property(thatLocator, "addressPostalCode", rhsAddressPostalCode), lhsAddressPostalCode, rhsAddressPostalCode)) {
                return false;
            }
        }
        {
            CountryIdentityDataType lhsCountryIdentity;
            lhsCountryIdentity = this.getCountryIdentity();
            CountryIdentityDataType rhsCountryIdentity;
            rhsCountryIdentity = that.getCountryIdentity();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "countryIdentity", lhsCountryIdentity), LocatorUtils.property(thatLocator, "countryIdentity", rhsCountryIdentity), lhsCountryIdentity, rhsCountryIdentity)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            String theMailingAddressText;
            theMailingAddressText = this.getMailingAddressText();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "mailingAddressText", theMailingAddressText), currentHashCode, theMailingAddressText);
        }
        {
            String theSupplementalAddressText;
            theSupplementalAddressText = this.getSupplementalAddressText();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "supplementalAddressText", theSupplementalAddressText), currentHashCode, theSupplementalAddressText);
        }
        {
            String theMailingAddressCityName;
            theMailingAddressCityName = this.getMailingAddressCityName();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "mailingAddressCityName", theMailingAddressCityName), currentHashCode, theMailingAddressCityName);
        }
        {
            StateIdentityDataType theStateIdentity;
            theStateIdentity = this.getStateIdentity();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "stateIdentity", theStateIdentity), currentHashCode, theStateIdentity);
        }
        {
            AddressPostalCodeDataType theAddressPostalCode;
            theAddressPostalCode = this.getAddressPostalCode();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "addressPostalCode", theAddressPostalCode), currentHashCode, theAddressPostalCode);
        }
        {
            CountryIdentityDataType theCountryIdentity;
            theCountryIdentity = this.getCountryIdentity();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "countryIdentity", theCountryIdentity), currentHashCode, theCountryIdentity);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
