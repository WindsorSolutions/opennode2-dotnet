//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2013.08.26 at 02:36:56 PM PDT 
//


package com.windsor.node.plugin.ic.fixeddomain;

import java.io.Serializable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Inheritance;
import javax.persistence.InheritanceType;
import javax.persistence.JoinColumn;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlTransient;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
import javax.xml.datatype.XMLGregorianCalendar;
import org.jvnet.hyperjaxb3.xml.bind.annotation.adapters.XMLGregorianCalendarAsDate;
import org.jvnet.hyperjaxb3.xml.bind.annotation.adapters.XmlAdapterUtils;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;
import com.windsor.node.plugin.common.xml.bind.annotation.adapters.StringAdapter;


/**
 * <p>Java class for RecurringEventDataType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="RecurringEventDataType">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element ref="{http://www.exchangenetwork.net/schema/IC/1}RecurringEventIdentifier"/>
 *         &lt;element ref="{http://www.exchangenetwork.net/schema/IC/1}EventName"/>
 *         &lt;element ref="{http://www.exchangenetwork.net/schema/IC/1}EventTypeCode" minOccurs="0"/>
 *         &lt;element ref="{http://www.exchangenetwork.net/schema/IC/1}OtherEventTypeText" minOccurs="0"/>
 *         &lt;element ref="{http://www.exchangenetwork.net/schema/IC/1}EventDescriptionText" minOccurs="0"/>
 *         &lt;element ref="{http://www.exchangenetwork.net/schema/IC/1}EventFrequencyMeasure" minOccurs="0"/>
 *         &lt;element ref="{http://www.exchangenetwork.net/schema/IC/1}EventFrequencyUnitCode" minOccurs="0"/>
 *         &lt;element ref="{http://www.exchangenetwork.net/schema/IC/1}EventFrequencyStartDate" minOccurs="0"/>
 *         &lt;element ref="{http://www.exchangenetwork.net/schema/IC/1}EventFrequencyEndDate" minOccurs="0"/>
 *         &lt;element ref="{http://www.exchangenetwork.net/schema/IC/1}EventTriggerText" minOccurs="0"/>
 *         &lt;element ref="{http://www.exchangenetwork.net/schema/IC/1}RecurringEventLocation" maxOccurs="unbounded" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "RecurringEventDataType", propOrder = {
    "recurringEventIdentifier",
    "eventName",
    "eventTypeCode",
    "otherEventTypeText",
    "eventDescriptionText",
    "eventFrequencyMeasure",
    "eventFrequencyUnitCode",
    "eventFrequencyStartDate",
    "eventFrequencyEndDate",
    "eventTriggerText",
    "recurringEventLocation"
})
@Entity(name = "RecurringEventDataType")
@Table(name = "IC_RECR_EVT")
@Inheritance(strategy = InheritanceType.JOINED)
public class RecurringEventDataType
    implements Serializable, Equals, HashCode
{

    private final static long serialVersionUID = 1L;
    @XmlElement(name = "RecurringEventIdentifier", required = true)
    protected String recurringEventIdentifier;
    @XmlElement(name = "EventName", required = true)
    protected String eventName;
    @XmlElement(name = "EventTypeCode")
    @XmlJavaTypeAdapter(StringAdapter.class)
    protected String eventTypeCode;
    @XmlElement(name = "OtherEventTypeText")
    protected String otherEventTypeText;
    @XmlElement(name = "EventDescriptionText")
    protected String eventDescriptionText;
    @XmlElement(name = "EventFrequencyMeasure")
    protected BigInteger eventFrequencyMeasure;
    @XmlElement(name = "EventFrequencyUnitCode")
    @XmlJavaTypeAdapter(StringAdapter.class)
    protected String eventFrequencyUnitCode;
    @XmlElement(name = "EventFrequencyStartDate")
    protected XMLGregorianCalendar eventFrequencyStartDate;
    @XmlElement(name = "EventFrequencyEndDate")
    protected XMLGregorianCalendar eventFrequencyEndDate;
    @XmlElement(name = "EventTriggerText")
    protected String eventTriggerText;
    @XmlElement(name = "RecurringEventLocation")
    protected List<RecurringEventLocationDataType> recurringEventLocation;
    @XmlTransient
    protected String dbid;

    /**
     * Gets the value of the recurringEventIdentifier property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "RECR_EVT_IDEN", length = 255)
    public String getRecurringEventIdentifier() {
        return recurringEventIdentifier;
    }

    /**
     * Sets the value of the recurringEventIdentifier property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setRecurringEventIdentifier(String value) {
        this.recurringEventIdentifier = value;
    }

    @Transient
    public boolean isSetRecurringEventIdentifier() {
        return (this.recurringEventIdentifier!= null);
    }

    /**
     * Gets the value of the eventName property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "EVT_NAME", length = 255)
    public String getEventName() {
        return eventName;
    }

    /**
     * Sets the value of the eventName property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setEventName(String value) {
        this.eventName = value;
    }

    @Transient
    public boolean isSetEventName() {
        return (this.eventName!= null);
    }

    /**
     * Gets the value of the eventTypeCode property.
     * 
     * @return
     *     possible object is
     *     {@link EventTypeCodeDataType }
     *     
     */
    @Basic
    @Column(name = "EVT_CODE", columnDefinition = "31", length = 31)
    public String getEventTypeCode() {
        return eventTypeCode;
    }

    /**
     * Sets the value of the eventTypeCode property.
     * 
     * @param value
     *     allowed object is
     *     {@link EventTypeCodeDataType }
     *     
     */
    public void setEventTypeCode(String value) {
        this.eventTypeCode = value;
    }

    @Transient
    public boolean isSetEventTypeCode() {
        return (this.eventTypeCode!= null);
    }

    /**
     * Gets the value of the otherEventTypeText property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "OTHR_EVT_TYPE_TXT", length = 255)
    public String getOtherEventTypeText() {
        return otherEventTypeText;
    }

    /**
     * Sets the value of the otherEventTypeText property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setOtherEventTypeText(String value) {
        this.otherEventTypeText = value;
    }

    @Transient
    public boolean isSetOtherEventTypeText() {
        return (this.otherEventTypeText!= null);
    }

    /**
     * Gets the value of the eventDescriptionText property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "EVT_DESC_TXT", length = 255)
    public String getEventDescriptionText() {
        return eventDescriptionText;
    }

    /**
     * Sets the value of the eventDescriptionText property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setEventDescriptionText(String value) {
        this.eventDescriptionText = value;
    }

    @Transient
    public boolean isSetEventDescriptionText() {
        return (this.eventDescriptionText!= null);
    }

    /**
     * Gets the value of the eventFrequencyMeasure property.
     * 
     * @return
     *     possible object is
     *     {@link BigInteger }
     *     
     */
    @Basic
    @Column(name = "EVT_FREQ_MEAS", precision = 20, scale = 0)
    public BigInteger getEventFrequencyMeasure() {
        return eventFrequencyMeasure;
    }

    /**
     * Sets the value of the eventFrequencyMeasure property.
     * 
     * @param value
     *     allowed object is
     *     {@link BigInteger }
     *     
     */
    public void setEventFrequencyMeasure(BigInteger value) {
        this.eventFrequencyMeasure = value;
    }

    @Transient
    public boolean isSetEventFrequencyMeasure() {
        return (this.eventFrequencyMeasure!= null);
    }

    /**
     * Gets the value of the eventFrequencyUnitCode property.
     * 
     * @return
     *     possible object is
     *     {@link EventFrequencyUnitCodeDataType }
     *     
     */
    @Basic
    @Column(name = "EVT_FREQ_UNIT_CODE", columnDefinition = "6", length = 6)
    public String getEventFrequencyUnitCode() {
        return eventFrequencyUnitCode;
    }

    /**
     * Sets the value of the eventFrequencyUnitCode property.
     * 
     * @param value
     *     allowed object is
     *     {@link EventFrequencyUnitCodeDataType }
     *     
     */
    public void setEventFrequencyUnitCode(String value) {
        this.eventFrequencyUnitCode = value;
    }

    @Transient
    public boolean isSetEventFrequencyUnitCode() {
        return (this.eventFrequencyUnitCode!= null);
    }

    /**
     * Gets the value of the eventFrequencyStartDate property.
     * 
     * @return
     *     possible object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    @Transient
    public XMLGregorianCalendar getEventFrequencyStartDate() {
        return eventFrequencyStartDate;
    }

    /**
     * Sets the value of the eventFrequencyStartDate property.
     * 
     * @param value
     *     allowed object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    public void setEventFrequencyStartDate(XMLGregorianCalendar value) {
        this.eventFrequencyStartDate = value;
    }

    @Transient
    public boolean isSetEventFrequencyStartDate() {
        return (this.eventFrequencyStartDate!= null);
    }

    /**
     * Gets the value of the eventFrequencyEndDate property.
     * 
     * @return
     *     possible object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    @Transient
    public XMLGregorianCalendar getEventFrequencyEndDate() {
        return eventFrequencyEndDate;
    }

    /**
     * Sets the value of the eventFrequencyEndDate property.
     * 
     * @param value
     *     allowed object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    public void setEventFrequencyEndDate(XMLGregorianCalendar value) {
        this.eventFrequencyEndDate = value;
    }

    @Transient
    public boolean isSetEventFrequencyEndDate() {
        return (this.eventFrequencyEndDate!= null);
    }

    /**
     * Gets the value of the eventTriggerText property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "EVT_TRIGGER_TXT", length = 255)
    public String getEventTriggerText() {
        return eventTriggerText;
    }

    /**
     * Sets the value of the eventTriggerText property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setEventTriggerText(String value) {
        this.eventTriggerText = value;
    }

    @Transient
    public boolean isSetEventTriggerText() {
        return (this.eventTriggerText!= null);
    }

    /**
     * Gets the value of the recurringEventLocation property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the recurringEventLocation property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getRecurringEventLocation().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link RecurringEventLocationDataType }
     * 
     * 
     */
    /*@OneToMany(targetEntity = RecurringEventLocationDataType.class, cascade = {
        CascadeType.ALL
    })
    @JoinTable(name = "IC_RECR_EVT_LOC", joinColumns = {
        @JoinColumn(name = "IC_RECR_EVT_ID", referencedColumnName = "IC_RECR_EVT_ID")
    }, inverseJoinColumns = {
        @JoinColumn(name = "IC_RECR_EVT_ID")
    })*/
    @OneToMany(targetEntity = RecurringEventLocationDataType.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "IC_RECR_EVT_ID")
    public List<RecurringEventLocationDataType> getRecurringEventLocation() {
        if (recurringEventLocation == null) {
            recurringEventLocation = new ArrayList<RecurringEventLocationDataType>();
        }
        return this.recurringEventLocation;
    }

    /**
     * 
     * 
     */
    public void setRecurringEventLocation(List<RecurringEventLocationDataType> recurringEventLocation) {
        this.recurringEventLocation = recurringEventLocation;
    }

    @Transient
    public boolean isSetRecurringEventLocation() {
        return ((this.recurringEventLocation!= null)&&(!this.recurringEventLocation.isEmpty()));
    }

    public void unsetRecurringEventLocation() {
        this.recurringEventLocation = null;
    }

    /**
     * 
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Id
    @Column(name = "IC_RECR_EVT_ID")
    public String getDbid() {
        return dbid;
    }

    /**
     * 
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setDbid(String value) {
        this.dbid = value;
    }

    @Basic
    @Column(name = "EVT_FREQ_START_DATE")
    @Temporal(TemporalType.DATE)
    public Date getEventFrequencyStartDateItem() {
        return XmlAdapterUtils.unmarshall(XMLGregorianCalendarAsDate.class, this.getEventFrequencyStartDate());
    }

    public void setEventFrequencyStartDateItem(Date target) {
        setEventFrequencyStartDate(XmlAdapterUtils.marshall(XMLGregorianCalendarAsDate.class, target));
    }

    @Basic
    @Column(name = "EVT_FREQ_END_DATE")
    @Temporal(TemporalType.DATE)
    public Date getEventFrequencyEndDateItem() {
        return XmlAdapterUtils.unmarshall(XMLGregorianCalendarAsDate.class, this.getEventFrequencyEndDate());
    }

    public void setEventFrequencyEndDateItem(Date target) {
        setEventFrequencyEndDate(XmlAdapterUtils.marshall(XMLGregorianCalendarAsDate.class, target));
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof RecurringEventDataType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final RecurringEventDataType that = ((RecurringEventDataType) object);
        {
            String lhsRecurringEventIdentifier;
            lhsRecurringEventIdentifier = this.getRecurringEventIdentifier();
            String rhsRecurringEventIdentifier;
            rhsRecurringEventIdentifier = that.getRecurringEventIdentifier();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "recurringEventIdentifier", lhsRecurringEventIdentifier), LocatorUtils.property(thatLocator, "recurringEventIdentifier", rhsRecurringEventIdentifier), lhsRecurringEventIdentifier, rhsRecurringEventIdentifier)) {
                return false;
            }
        }
        {
            String lhsEventName;
            lhsEventName = this.getEventName();
            String rhsEventName;
            rhsEventName = that.getEventName();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "eventName", lhsEventName), LocatorUtils.property(thatLocator, "eventName", rhsEventName), lhsEventName, rhsEventName)) {
                return false;
            }
        }
        {
            String lhsEventTypeCode;
            lhsEventTypeCode = this.getEventTypeCode();
            String rhsEventTypeCode;
            rhsEventTypeCode = that.getEventTypeCode();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "eventTypeCode", lhsEventTypeCode), LocatorUtils.property(thatLocator, "eventTypeCode", rhsEventTypeCode), lhsEventTypeCode, rhsEventTypeCode)) {
                return false;
            }
        }
        {
            String lhsOtherEventTypeText;
            lhsOtherEventTypeText = this.getOtherEventTypeText();
            String rhsOtherEventTypeText;
            rhsOtherEventTypeText = that.getOtherEventTypeText();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "otherEventTypeText", lhsOtherEventTypeText), LocatorUtils.property(thatLocator, "otherEventTypeText", rhsOtherEventTypeText), lhsOtherEventTypeText, rhsOtherEventTypeText)) {
                return false;
            }
        }
        {
            String lhsEventDescriptionText;
            lhsEventDescriptionText = this.getEventDescriptionText();
            String rhsEventDescriptionText;
            rhsEventDescriptionText = that.getEventDescriptionText();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "eventDescriptionText", lhsEventDescriptionText), LocatorUtils.property(thatLocator, "eventDescriptionText", rhsEventDescriptionText), lhsEventDescriptionText, rhsEventDescriptionText)) {
                return false;
            }
        }
        {
            BigInteger lhsEventFrequencyMeasure;
            lhsEventFrequencyMeasure = this.getEventFrequencyMeasure();
            BigInteger rhsEventFrequencyMeasure;
            rhsEventFrequencyMeasure = that.getEventFrequencyMeasure();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "eventFrequencyMeasure", lhsEventFrequencyMeasure), LocatorUtils.property(thatLocator, "eventFrequencyMeasure", rhsEventFrequencyMeasure), lhsEventFrequencyMeasure, rhsEventFrequencyMeasure)) {
                return false;
            }
        }
        {
            String lhsEventFrequencyUnitCode;
            lhsEventFrequencyUnitCode = this.getEventFrequencyUnitCode();
            String rhsEventFrequencyUnitCode;
            rhsEventFrequencyUnitCode = that.getEventFrequencyUnitCode();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "eventFrequencyUnitCode", lhsEventFrequencyUnitCode), LocatorUtils.property(thatLocator, "eventFrequencyUnitCode", rhsEventFrequencyUnitCode), lhsEventFrequencyUnitCode, rhsEventFrequencyUnitCode)) {
                return false;
            }
        }
        {
            XMLGregorianCalendar lhsEventFrequencyStartDate;
            lhsEventFrequencyStartDate = this.getEventFrequencyStartDate();
            XMLGregorianCalendar rhsEventFrequencyStartDate;
            rhsEventFrequencyStartDate = that.getEventFrequencyStartDate();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "eventFrequencyStartDate", lhsEventFrequencyStartDate), LocatorUtils.property(thatLocator, "eventFrequencyStartDate", rhsEventFrequencyStartDate), lhsEventFrequencyStartDate, rhsEventFrequencyStartDate)) {
                return false;
            }
        }
        {
            XMLGregorianCalendar lhsEventFrequencyEndDate;
            lhsEventFrequencyEndDate = this.getEventFrequencyEndDate();
            XMLGregorianCalendar rhsEventFrequencyEndDate;
            rhsEventFrequencyEndDate = that.getEventFrequencyEndDate();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "eventFrequencyEndDate", lhsEventFrequencyEndDate), LocatorUtils.property(thatLocator, "eventFrequencyEndDate", rhsEventFrequencyEndDate), lhsEventFrequencyEndDate, rhsEventFrequencyEndDate)) {
                return false;
            }
        }
        {
            String lhsEventTriggerText;
            lhsEventTriggerText = this.getEventTriggerText();
            String rhsEventTriggerText;
            rhsEventTriggerText = that.getEventTriggerText();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "eventTriggerText", lhsEventTriggerText), LocatorUtils.property(thatLocator, "eventTriggerText", rhsEventTriggerText), lhsEventTriggerText, rhsEventTriggerText)) {
                return false;
            }
        }
        {
            List<RecurringEventLocationDataType> lhsRecurringEventLocation;
            lhsRecurringEventLocation = (this.isSetRecurringEventLocation()?this.getRecurringEventLocation():null);
            List<RecurringEventLocationDataType> rhsRecurringEventLocation;
            rhsRecurringEventLocation = (that.isSetRecurringEventLocation()?that.getRecurringEventLocation():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "recurringEventLocation", lhsRecurringEventLocation), LocatorUtils.property(thatLocator, "recurringEventLocation", rhsRecurringEventLocation), lhsRecurringEventLocation, rhsRecurringEventLocation)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            String theRecurringEventIdentifier;
            theRecurringEventIdentifier = this.getRecurringEventIdentifier();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "recurringEventIdentifier", theRecurringEventIdentifier), currentHashCode, theRecurringEventIdentifier);
        }
        {
            String theEventName;
            theEventName = this.getEventName();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "eventName", theEventName), currentHashCode, theEventName);
        }
        {
            String theEventTypeCode;
            theEventTypeCode = this.getEventTypeCode();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "eventTypeCode", theEventTypeCode), currentHashCode, theEventTypeCode);
        }
        {
            String theOtherEventTypeText;
            theOtherEventTypeText = this.getOtherEventTypeText();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "otherEventTypeText", theOtherEventTypeText), currentHashCode, theOtherEventTypeText);
        }
        {
            String theEventDescriptionText;
            theEventDescriptionText = this.getEventDescriptionText();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "eventDescriptionText", theEventDescriptionText), currentHashCode, theEventDescriptionText);
        }
        {
            BigInteger theEventFrequencyMeasure;
            theEventFrequencyMeasure = this.getEventFrequencyMeasure();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "eventFrequencyMeasure", theEventFrequencyMeasure), currentHashCode, theEventFrequencyMeasure);
        }
        {
            String theEventFrequencyUnitCode;
            theEventFrequencyUnitCode = this.getEventFrequencyUnitCode();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "eventFrequencyUnitCode", theEventFrequencyUnitCode), currentHashCode, theEventFrequencyUnitCode);
        }
        {
            XMLGregorianCalendar theEventFrequencyStartDate;
            theEventFrequencyStartDate = this.getEventFrequencyStartDate();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "eventFrequencyStartDate", theEventFrequencyStartDate), currentHashCode, theEventFrequencyStartDate);
        }
        {
            XMLGregorianCalendar theEventFrequencyEndDate;
            theEventFrequencyEndDate = this.getEventFrequencyEndDate();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "eventFrequencyEndDate", theEventFrequencyEndDate), currentHashCode, theEventFrequencyEndDate);
        }
        {
            String theEventTriggerText;
            theEventTriggerText = this.getEventTriggerText();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "eventTriggerText", theEventTriggerText), currentHashCode, theEventTriggerText);
        }
        {
            List<RecurringEventLocationDataType> theRecurringEventLocation;
            theRecurringEventLocation = (this.isSetRecurringEventLocation()?this.getRecurringEventLocation():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "recurringEventLocation", theRecurringEventLocation), currentHashCode, theRecurringEventLocation);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
