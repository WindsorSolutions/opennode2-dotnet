//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2013.08.26 at 02:36:56 PM PDT 
//


package com.windsor.node.plugin.ic.fixeddomain;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.CollectionTable;
import javax.persistence.Column;
import javax.persistence.ElementCollection;
import javax.persistence.Embedded;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Inheritance;
import javax.persistence.InheritanceType;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Transient;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlTransient;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;
import com.windsor.node.plugin.common.xml.bind.annotation.adapters.StringAdapter;


/**
 * <p>Java class for InstrumentDataType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="InstrumentDataType">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element ref="{http://www.exchangenetwork.net/schema/IC/1}DataSource"/>
 *         &lt;element ref="{http://www.exchangenetwork.net/schema/IC/1}InstrumentIdentifier"/>
 *         &lt;element ref="{http://www.exchangenetwork.net/schema/IC/1}InstrumentName"/>
 *         &lt;element ref="{http://www.exchangenetwork.net/schema/IC/1}InstrumentCategoryCode" minOccurs="0"/>
 *         &lt;element ref="{http://www.exchangenetwork.net/schema/IC/1}OtherInstrumentCategoryText" minOccurs="0"/>
 *         &lt;element ref="{http://www.exchangenetwork.net/schema/IC/1}InstrumentTypeCode" minOccurs="0"/>
 *         &lt;element ref="{http://www.exchangenetwork.net/schema/IC/1}OtherInstrumentTypeText" minOccurs="0"/>
 *         &lt;element ref="{http://www.exchangenetwork.net/schema/IC/1}InstrumentLegalDescriptionText" minOccurs="0"/>
 *         &lt;element ref="{http://www.exchangenetwork.net/schema/IC/1}InstrumentLocation" maxOccurs="unbounded"/>
 *         &lt;element ref="{http://www.exchangenetwork.net/schema/IC/1}ObjectiveText" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element ref="{http://www.exchangenetwork.net/schema/IC/1}MediaTypeCode" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element ref="{http://www.exchangenetwork.net/schema/IC/1}OtherMediaTypeText" minOccurs="0"/>
 *         &lt;element ref="{http://www.exchangenetwork.net/schema/IC/1}UseRestriction" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element ref="{http://www.exchangenetwork.net/schema/IC/1}Contaminant" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element ref="{http://www.exchangenetwork.net/schema/IC/1}EngineeringControl" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element ref="{http://www.exchangenetwork.net/schema/IC/1}InstrumentAffiliate" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element ref="{http://www.exchangenetwork.net/schema/IC/1}Resource" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element ref="{http://www.exchangenetwork.net/schema/IC/1}RecurringEvent" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element ref="{http://www.exchangenetwork.net/schema/IC/1}Event" maxOccurs="unbounded" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "InstrumentDataType", propOrder = {
    "dataSource",
    "instrumentIdentifier",
    "instrumentName",
    "instrumentCategoryCode",
    "otherInstrumentCategoryText",
    "instrumentTypeCode",
    "otherInstrumentTypeText",
    "instrumentLegalDescriptionText",
    "instrumentLocation",
    "objectiveText",
    "mediaTypeCode",
    "otherMediaTypeText",
    "useRestriction",
    "contaminant",
    "engineeringControl",
    "instrumentAffiliate",
    "resource",
    "recurringEvent",
    "event"
})
@Entity(name = "InstrumentDataType")
@Table(name = "IC_INSTR")
@Inheritance(strategy = InheritanceType.JOINED)
public class InstrumentDataType
    implements Serializable, Equals, HashCode
{

    private final static long serialVersionUID = 1L;
    @XmlElement(name = "DataSource", required = true)
    protected DataSourceDataType dataSource;
    @XmlElement(name = "InstrumentIdentifier", required = true)
    protected String instrumentIdentifier;
    @XmlElement(name = "InstrumentName", required = true)
    protected String instrumentName;
    @XmlElement(name = "InstrumentCategoryCode")
    @XmlJavaTypeAdapter(StringAdapter.class)
    protected String instrumentCategoryCode;
    @XmlElement(name = "OtherInstrumentCategoryText")
    protected String otherInstrumentCategoryText;
    @XmlElement(name = "InstrumentTypeCode")
    @XmlJavaTypeAdapter(StringAdapter.class)
    protected String instrumentTypeCode;
    @XmlElement(name = "OtherInstrumentTypeText")
    protected String otherInstrumentTypeText;
    @XmlElement(name = "InstrumentLegalDescriptionText")
    protected String instrumentLegalDescriptionText;
    @XmlElement(name = "InstrumentLocation", required = true)
    protected List<InstrumentLocationDataType> instrumentLocation;
    @XmlElement(name = "ObjectiveText")
    protected List<String> objectiveText;
    @XmlElement(name = "MediaTypeCode")
    @XmlJavaTypeAdapter(StringAdapter.class)
    protected List<String> mediaTypeCode;
    @XmlElement(name = "OtherMediaTypeText")
    protected String otherMediaTypeText;
    @XmlElement(name = "UseRestriction")
    protected List<UseRestrictionDataType> useRestriction;
    @XmlElement(name = "Contaminant")
    protected List<ContaminantDataType> contaminant;
    @XmlElement(name = "EngineeringControl")
    protected List<EngineeringControlDataType> engineeringControl;
    @XmlElement(name = "InstrumentAffiliate")
    protected List<InstrumentAffiliateDataType> instrumentAffiliate;
    @XmlElement(name = "Resource")
    protected List<ResourceDataType> resource;
    @XmlElement(name = "RecurringEvent")
    protected List<RecurringEventDataType> recurringEvent;
    @XmlElement(name = "Event")
    protected List<EventDataType> event;
    @XmlTransient
    protected String dbid;

    /**
     * Gets the value of the dataSource property.
     * 
     * @return
     *     possible object is
     *     {@link DataSourceDataType }
     *     
     */
    @Embedded
    @AttributeOverrides({
        @AttributeOverride(name = "originatingPartnerName", column = @Column(name = "ORIG_PARTNER_NAME", length = 255)),
        @AttributeOverride(name = "informationSystemAcronymName", column = @Column(name = "INFO_SYSTM_ACNYM_NAME", length = 255)),
        @AttributeOverride(name = "lastUpdatedDateItem", column = @Column(name = "LAST_UPDATED_DATE"))
    })
    public DataSourceDataType getDataSource() {
        return dataSource;
    }

    /**
     * Sets the value of the dataSource property.
     * 
     * @param value
     *     allowed object is
     *     {@link DataSourceDataType }
     *     
     */
    public void setDataSource(DataSourceDataType value) {
        this.dataSource = value;
    }

    @Transient
    public boolean isSetDataSource() {
        return (this.dataSource!= null);
    }

    /**
     * Gets the value of the instrumentIdentifier property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "INSTR_IDEN", length = 255)
    public String getInstrumentIdentifier() {
        return instrumentIdentifier;
    }

    /**
     * Sets the value of the instrumentIdentifier property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setInstrumentIdentifier(String value) {
        this.instrumentIdentifier = value;
    }

    @Transient
    public boolean isSetInstrumentIdentifier() {
        return (this.instrumentIdentifier!= null);
    }

    /**
     * Gets the value of the instrumentName property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "INSTR_NAME", length = 255)
    public String getInstrumentName() {
        return instrumentName;
    }

    /**
     * Sets the value of the instrumentName property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setInstrumentName(String value) {
        this.instrumentName = value;
    }

    @Transient
    public boolean isSetInstrumentName() {
        return (this.instrumentName!= null);
    }

    /**
     * Gets the value of the instrumentCategoryCode property.
     * 
     * @return
     *     possible object is
     *     {@link InstrumentCategoryCodeDataType }
     *     
     */
    @Basic
    @Column(name = "INSTR_CATG_CODE", columnDefinition = "19", length = 19)
    public String getInstrumentCategoryCode() {
        return instrumentCategoryCode;
    }

    /**
     * Sets the value of the instrumentCategoryCode property.
     * 
     * @param value
     *     allowed object is
     *     {@link InstrumentCategoryCodeDataType }
     *     
     */
    public void setInstrumentCategoryCode(String value) {
        this.instrumentCategoryCode = value;
    }

    @Transient
    public boolean isSetInstrumentCategoryCode() {
        return (this.instrumentCategoryCode!= null);
    }

    /**
     * Gets the value of the otherInstrumentCategoryText property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "OTHR_INSTR_CATG_TXT", length = 255)
    public String getOtherInstrumentCategoryText() {
        return otherInstrumentCategoryText;
    }

    /**
     * Sets the value of the otherInstrumentCategoryText property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setOtherInstrumentCategoryText(String value) {
        this.otherInstrumentCategoryText = value;
    }

    @Transient
    public boolean isSetOtherInstrumentCategoryText() {
        return (this.otherInstrumentCategoryText!= null);
    }

    /**
     * Gets the value of the instrumentTypeCode property.
     * 
     * @return
     *     possible object is
     *     {@link InstrumentTypeCodeDataType }
     *     
     */
    @Basic
    @Column(name = "INSTR_CODE", columnDefinition = "36", length = 36)
    public String getInstrumentTypeCode() {
        return instrumentTypeCode;
    }

    /**
     * Sets the value of the instrumentTypeCode property.
     * 
     * @param value
     *     allowed object is
     *     {@link InstrumentTypeCodeDataType }
     *     
     */
    public void setInstrumentTypeCode(String value) {
        this.instrumentTypeCode = value;
    }

    @Transient
    public boolean isSetInstrumentTypeCode() {
        return (this.instrumentTypeCode!= null);
    }

    /**
     * Gets the value of the otherInstrumentTypeText property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "OTHR_INSTR_TYPE_TXT", length = 255)
    public String getOtherInstrumentTypeText() {
        return otherInstrumentTypeText;
    }

    /**
     * Sets the value of the otherInstrumentTypeText property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setOtherInstrumentTypeText(String value) {
        this.otherInstrumentTypeText = value;
    }

    @Transient
    public boolean isSetOtherInstrumentTypeText() {
        return (this.otherInstrumentTypeText!= null);
    }

    /**
     * Gets the value of the instrumentLegalDescriptionText property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "INSTR_LEGAL_DESC_TXT", length = 255)
    public String getInstrumentLegalDescriptionText() {
        return instrumentLegalDescriptionText;
    }

    /**
     * Sets the value of the instrumentLegalDescriptionText property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setInstrumentLegalDescriptionText(String value) {
        this.instrumentLegalDescriptionText = value;
    }

    @Transient
    public boolean isSetInstrumentLegalDescriptionText() {
        return (this.instrumentLegalDescriptionText!= null);
    }

    /**
     * Gets the value of the instrumentLocation property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the instrumentLocation property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getInstrumentLocation().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link InstrumentLocationDataType }
     * 
     * 
     */
    /*@OneToMany(targetEntity = InstrumentLocationDataType.class, cascade = {
        CascadeType.ALL
    })
    @JoinTable(name = "IC_INSTR_LOC", joinColumns = {
        @JoinColumn(name = "IC_INSTR_ID", referencedColumnName = "IC_INSTR_ID")
    }, inverseJoinColumns = {
        @JoinColumn(name = "IC_INSTR_ID")
    })*/
    @OneToMany(targetEntity = InstrumentLocationDataType.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "IC_INSTR_ID")
    public List<InstrumentLocationDataType> getInstrumentLocation() {
        if (instrumentLocation == null) {
            instrumentLocation = new ArrayList<InstrumentLocationDataType>();
        }
        return this.instrumentLocation;
    }

    /**
     * 
     * 
     */
    public void setInstrumentLocation(List<InstrumentLocationDataType> instrumentLocation) {
        this.instrumentLocation = instrumentLocation;
    }

    @Transient
    public boolean isSetInstrumentLocation() {
        return ((this.instrumentLocation!= null)&&(!this.instrumentLocation.isEmpty()));
    }

    public void unsetInstrumentLocation() {
        this.instrumentLocation = null;
    }

    /**
     * Gets the value of the objectiveText property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the objectiveText property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getObjectiveText().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link String }
     * 
     * 
     */
    @ElementCollection
    @Column(name = "OBJTV_TXT", length = 255)
    @CollectionTable(name = "IC_OBJTV_TXT", joinColumns = {
        @JoinColumn(name = "IC_INSTR_ID")
    })
    public List<String> getObjectiveText() {
        if (objectiveText == null) {
            objectiveText = new ArrayList<String>();
        }
        return this.objectiveText;
    }

    /**
     * 
     * 
     */
    public void setObjectiveText(List<String> objectiveText) {
        this.objectiveText = objectiveText;
    }

    @Transient
    public boolean isSetObjectiveText() {
        return ((this.objectiveText!= null)&&(!this.objectiveText.isEmpty()));
    }

    public void unsetObjectiveText() {
        this.objectiveText = null;
    }

    /**
     * Gets the value of the mediaTypeCode property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the mediaTypeCode property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getMediaTypeCode().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link MediaTypeCodeDataType }
     * 
     * 
     */
    @ElementCollection
    @Column(name = "MEDIA_CODE", columnDefinition = "15", length = 15)
    @CollectionTable(name = "IC_MEDIA_TYPE", joinColumns = {
        @JoinColumn(name = "IC_INSTR_ID")
    })
    public List<String> getMediaTypeCode() {
        if (mediaTypeCode == null) {
            mediaTypeCode = new ArrayList<String>();
        }
        return this.mediaTypeCode;
    }

    /**
     * 
     * 
     */
    public void setMediaTypeCode(List<String> mediaTypeCode) {
        this.mediaTypeCode = mediaTypeCode;
    }

    @Transient
    public boolean isSetMediaTypeCode() {
        return ((this.mediaTypeCode!= null)&&(!this.mediaTypeCode.isEmpty()));
    }

    public void unsetMediaTypeCode() {
        this.mediaTypeCode = null;
    }

    /**
     * Gets the value of the otherMediaTypeText property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "OTHR_MEDIA_TYPE_TXT", length = 255)
    public String getOtherMediaTypeText() {
        return otherMediaTypeText;
    }

    /**
     * Sets the value of the otherMediaTypeText property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setOtherMediaTypeText(String value) {
        this.otherMediaTypeText = value;
    }

    @Transient
    public boolean isSetOtherMediaTypeText() {
        return (this.otherMediaTypeText!= null);
    }

    /**
     * Gets the value of the useRestriction property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the useRestriction property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getUseRestriction().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link UseRestrictionDataType }
     * 
     * 
     */
   /* @OneToMany(targetEntity = UseRestrictionDataType.class, cascade = {
        CascadeType.ALL
    })
    @JoinTable(name = "IC_USE_RSTCT", joinColumns = {
        @JoinColumn(name = "IC_INSTR_ID", referencedColumnName = "IC_INSTR_ID")
    }, inverseJoinColumns = {
        @JoinColumn(name = "IC_INSTR_ID")
    })*/
    @OneToMany(targetEntity = UseRestrictionDataType.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "IC_INSTR_ID")
    public List<UseRestrictionDataType> getUseRestriction() {
        if (useRestriction == null) {
            useRestriction = new ArrayList<UseRestrictionDataType>();
        }
        return this.useRestriction;
    }

    /**
     * 
     * 
     */
    public void setUseRestriction(List<UseRestrictionDataType> useRestriction) {
        this.useRestriction = useRestriction;
    }

    @Transient
    public boolean isSetUseRestriction() {
        return ((this.useRestriction!= null)&&(!this.useRestriction.isEmpty()));
    }

    public void unsetUseRestriction() {
        this.useRestriction = null;
    }

    /**
     * Gets the value of the contaminant property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the contaminant property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getContaminant().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ContaminantDataType }
     * 
     * 
     */
    /*@OneToMany(targetEntity = ContaminantDataType.class, cascade = {
        CascadeType.ALL
    })
    @JoinTable(name = "IC_CNTMT", joinColumns = {
        @JoinColumn(name = "IC_INSTR_ID", referencedColumnName = "IC_INSTR_ID")
    }, inverseJoinColumns = {
        @JoinColumn(name = "IC_INSTR_ID")
    })*/
    @OneToMany(targetEntity = ContaminantDataType.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "IC_INSTR_ID")
    public List<ContaminantDataType> getContaminant() {
        if (contaminant == null) {
            contaminant = new ArrayList<ContaminantDataType>();
        }
        return this.contaminant;
    }

    /**
     * 
     * 
     */
    public void setContaminant(List<ContaminantDataType> contaminant) {
        this.contaminant = contaminant;
    }

    @Transient
    public boolean isSetContaminant() {
        return ((this.contaminant!= null)&&(!this.contaminant.isEmpty()));
    }

    public void unsetContaminant() {
        this.contaminant = null;
    }

    /**
     * Gets the value of the engineeringControl property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the engineeringControl property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getEngineeringControl().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link EngineeringControlDataType }
     * 
     * 
     */
    /*@OneToMany(targetEntity = EngineeringControlDataType.class, cascade = {
        CascadeType.ALL
    })
    @JoinTable(name = "IC_ENGR_CTRL", joinColumns = {
        @JoinColumn(name = "IC_INSTR_ID", referencedColumnName = "IC_INSTR_ID")
    }, inverseJoinColumns = {
        @JoinColumn(name = "IC_INSTR_ID")
    })*/
    @OneToMany(targetEntity = EngineeringControlDataType.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "IC_INSTR_ID")
    public List<EngineeringControlDataType> getEngineeringControl() {
        if (engineeringControl == null) {
            engineeringControl = new ArrayList<EngineeringControlDataType>();
        }
        return this.engineeringControl;
    }

    /**
     * 
     * 
     */
    public void setEngineeringControl(List<EngineeringControlDataType> engineeringControl) {
        this.engineeringControl = engineeringControl;
    }

    @Transient
    public boolean isSetEngineeringControl() {
        return ((this.engineeringControl!= null)&&(!this.engineeringControl.isEmpty()));
    }

    public void unsetEngineeringControl() {
        this.engineeringControl = null;
    }

    /**
     * Gets the value of the instrumentAffiliate property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the instrumentAffiliate property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getInstrumentAffiliate().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link InstrumentAffiliateDataType }
     * 
     * 
     */
    /*@OneToMany(targetEntity = InstrumentAffiliateDataType.class, cascade = {
        CascadeType.ALL
    })
    @JoinTable(name = "IC_INSTR_AFFIL", joinColumns = {
        @JoinColumn(name = "IC_INSTR_ID", referencedColumnName = "IC_INSTR_ID")
    }, inverseJoinColumns = {
        @JoinColumn(name = "IC_INSTR_ID")
    })*/
    @OneToMany(targetEntity = InstrumentAffiliateDataType.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "IC_INSTR_ID")
    public List<InstrumentAffiliateDataType> getInstrumentAffiliate() {
        if (instrumentAffiliate == null) {
            instrumentAffiliate = new ArrayList<InstrumentAffiliateDataType>();
        }
        return this.instrumentAffiliate;
    }

    /**
     * 
     * 
     */
    public void setInstrumentAffiliate(List<InstrumentAffiliateDataType> instrumentAffiliate) {
        this.instrumentAffiliate = instrumentAffiliate;
    }

    @Transient
    public boolean isSetInstrumentAffiliate() {
        return ((this.instrumentAffiliate!= null)&&(!this.instrumentAffiliate.isEmpty()));
    }

    public void unsetInstrumentAffiliate() {
        this.instrumentAffiliate = null;
    }

    /**
     * Gets the value of the resource property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the resource property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getResource().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ResourceDataType }
     * 
     * 
     */
    /*@OneToMany(targetEntity = ResourceDataType.class, cascade = {
        CascadeType.ALL
    })
    @JoinTable(name = "IC_RSRC", joinColumns = {
        @JoinColumn(name = "IC_INSTR_ID", referencedColumnName = "IC_INSTR_ID")
    }, inverseJoinColumns = {
        @JoinColumn(name = "IC_INSTR_ID")
    })*/
    @OneToMany(targetEntity = ResourceDataType.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "IC_INSTR_ID")
    public List<ResourceDataType> getResource() {
        if (resource == null) {
            resource = new ArrayList<ResourceDataType>();
        }
        return this.resource;
    }

    /**
     * 
     * 
     */
    public void setResource(List<ResourceDataType> resource) {
        this.resource = resource;
    }

    @Transient
    public boolean isSetResource() {
        return ((this.resource!= null)&&(!this.resource.isEmpty()));
    }

    public void unsetResource() {
        this.resource = null;
    }

    /**
     * Gets the value of the recurringEvent property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the recurringEvent property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getRecurringEvent().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link RecurringEventDataType }
     * 
     * 
     */
    /*@OneToMany(targetEntity = RecurringEventDataType.class, cascade = {
        CascadeType.ALL
    })
    @JoinTable(name = "IC_RECR_EVT", joinColumns = {
        @JoinColumn(name = "IC_INSTR_ID", referencedColumnName = "IC_INSTR_ID")
    }, inverseJoinColumns = {
        @JoinColumn(name = "IC_INSTR_ID")
    })*/
    @OneToMany(targetEntity = RecurringEventDataType.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "IC_INSTR_ID")
    public List<RecurringEventDataType> getRecurringEvent() {
        if (recurringEvent == null) {
            recurringEvent = new ArrayList<RecurringEventDataType>();
        }
        return this.recurringEvent;
    }

    /**
     * 
     * 
     */
    public void setRecurringEvent(List<RecurringEventDataType> recurringEvent) {
        this.recurringEvent = recurringEvent;
    }

    @Transient
    public boolean isSetRecurringEvent() {
        return ((this.recurringEvent!= null)&&(!this.recurringEvent.isEmpty()));
    }

    public void unsetRecurringEvent() {
        this.recurringEvent = null;
    }

    /**
     * Gets the value of the event property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the event property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getEvent().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link EventDataType }
     * 
     * 
     */
    /*@OneToMany(targetEntity = EventDataType.class, cascade = {
        CascadeType.ALL
    })
    @JoinTable(name = "IC_EVT", joinColumns = {
        @JoinColumn(name = "IC_INSTR_ID", referencedColumnName = "IC_INSTR_ID")
    }, inverseJoinColumns = {
        @JoinColumn(name = "IC_INSTR_ID")
    })*/
    @OneToMany(targetEntity = EventDataType.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "IC_INSTR_ID")
    public List<EventDataType> getEvent() {
        if (event == null) {
            event = new ArrayList<EventDataType>();
        }
        return this.event;
    }

    /**
     * 
     * 
     */
    public void setEvent(List<EventDataType> event) {
        this.event = event;
    }

    @Transient
    public boolean isSetEvent() {
        return ((this.event!= null)&&(!this.event.isEmpty()));
    }

    public void unsetEvent() {
        this.event = null;
    }

    /**
     * 
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Id
    @Column(name = "IC_INSTR_ID")
    public String getDbid() {
        return dbid;
    }

    /**
     * 
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setDbid(String value) {
        this.dbid = value;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof InstrumentDataType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final InstrumentDataType that = ((InstrumentDataType) object);
        {
            DataSourceDataType lhsDataSource;
            lhsDataSource = this.getDataSource();
            DataSourceDataType rhsDataSource;
            rhsDataSource = that.getDataSource();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "dataSource", lhsDataSource), LocatorUtils.property(thatLocator, "dataSource", rhsDataSource), lhsDataSource, rhsDataSource)) {
                return false;
            }
        }
        {
            String lhsInstrumentIdentifier;
            lhsInstrumentIdentifier = this.getInstrumentIdentifier();
            String rhsInstrumentIdentifier;
            rhsInstrumentIdentifier = that.getInstrumentIdentifier();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "instrumentIdentifier", lhsInstrumentIdentifier), LocatorUtils.property(thatLocator, "instrumentIdentifier", rhsInstrumentIdentifier), lhsInstrumentIdentifier, rhsInstrumentIdentifier)) {
                return false;
            }
        }
        {
            String lhsInstrumentName;
            lhsInstrumentName = this.getInstrumentName();
            String rhsInstrumentName;
            rhsInstrumentName = that.getInstrumentName();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "instrumentName", lhsInstrumentName), LocatorUtils.property(thatLocator, "instrumentName", rhsInstrumentName), lhsInstrumentName, rhsInstrumentName)) {
                return false;
            }
        }
        {
            String lhsInstrumentCategoryCode;
            lhsInstrumentCategoryCode = this.getInstrumentCategoryCode();
            String rhsInstrumentCategoryCode;
            rhsInstrumentCategoryCode = that.getInstrumentCategoryCode();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "instrumentCategoryCode", lhsInstrumentCategoryCode), LocatorUtils.property(thatLocator, "instrumentCategoryCode", rhsInstrumentCategoryCode), lhsInstrumentCategoryCode, rhsInstrumentCategoryCode)) {
                return false;
            }
        }
        {
            String lhsOtherInstrumentCategoryText;
            lhsOtherInstrumentCategoryText = this.getOtherInstrumentCategoryText();
            String rhsOtherInstrumentCategoryText;
            rhsOtherInstrumentCategoryText = that.getOtherInstrumentCategoryText();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "otherInstrumentCategoryText", lhsOtherInstrumentCategoryText), LocatorUtils.property(thatLocator, "otherInstrumentCategoryText", rhsOtherInstrumentCategoryText), lhsOtherInstrumentCategoryText, rhsOtherInstrumentCategoryText)) {
                return false;
            }
        }
        {
            String lhsInstrumentTypeCode;
            lhsInstrumentTypeCode = this.getInstrumentTypeCode();
            String rhsInstrumentTypeCode;
            rhsInstrumentTypeCode = that.getInstrumentTypeCode();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "instrumentTypeCode", lhsInstrumentTypeCode), LocatorUtils.property(thatLocator, "instrumentTypeCode", rhsInstrumentTypeCode), lhsInstrumentTypeCode, rhsInstrumentTypeCode)) {
                return false;
            }
        }
        {
            String lhsOtherInstrumentTypeText;
            lhsOtherInstrumentTypeText = this.getOtherInstrumentTypeText();
            String rhsOtherInstrumentTypeText;
            rhsOtherInstrumentTypeText = that.getOtherInstrumentTypeText();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "otherInstrumentTypeText", lhsOtherInstrumentTypeText), LocatorUtils.property(thatLocator, "otherInstrumentTypeText", rhsOtherInstrumentTypeText), lhsOtherInstrumentTypeText, rhsOtherInstrumentTypeText)) {
                return false;
            }
        }
        {
            String lhsInstrumentLegalDescriptionText;
            lhsInstrumentLegalDescriptionText = this.getInstrumentLegalDescriptionText();
            String rhsInstrumentLegalDescriptionText;
            rhsInstrumentLegalDescriptionText = that.getInstrumentLegalDescriptionText();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "instrumentLegalDescriptionText", lhsInstrumentLegalDescriptionText), LocatorUtils.property(thatLocator, "instrumentLegalDescriptionText", rhsInstrumentLegalDescriptionText), lhsInstrumentLegalDescriptionText, rhsInstrumentLegalDescriptionText)) {
                return false;
            }
        }
        {
            List<InstrumentLocationDataType> lhsInstrumentLocation;
            lhsInstrumentLocation = (this.isSetInstrumentLocation()?this.getInstrumentLocation():null);
            List<InstrumentLocationDataType> rhsInstrumentLocation;
            rhsInstrumentLocation = (that.isSetInstrumentLocation()?that.getInstrumentLocation():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "instrumentLocation", lhsInstrumentLocation), LocatorUtils.property(thatLocator, "instrumentLocation", rhsInstrumentLocation), lhsInstrumentLocation, rhsInstrumentLocation)) {
                return false;
            }
        }
        {
            List<String> lhsObjectiveText;
            lhsObjectiveText = (this.isSetObjectiveText()?this.getObjectiveText():null);
            List<String> rhsObjectiveText;
            rhsObjectiveText = (that.isSetObjectiveText()?that.getObjectiveText():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "objectiveText", lhsObjectiveText), LocatorUtils.property(thatLocator, "objectiveText", rhsObjectiveText), lhsObjectiveText, rhsObjectiveText)) {
                return false;
            }
        }
        {
            List<String> lhsMediaTypeCode;
            lhsMediaTypeCode = (this.isSetMediaTypeCode()?this.getMediaTypeCode():null);
            List<String> rhsMediaTypeCode;
            rhsMediaTypeCode = (that.isSetMediaTypeCode()?that.getMediaTypeCode():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "mediaTypeCode", lhsMediaTypeCode), LocatorUtils.property(thatLocator, "mediaTypeCode", rhsMediaTypeCode), lhsMediaTypeCode, rhsMediaTypeCode)) {
                return false;
            }
        }
        {
            String lhsOtherMediaTypeText;
            lhsOtherMediaTypeText = this.getOtherMediaTypeText();
            String rhsOtherMediaTypeText;
            rhsOtherMediaTypeText = that.getOtherMediaTypeText();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "otherMediaTypeText", lhsOtherMediaTypeText), LocatorUtils.property(thatLocator, "otherMediaTypeText", rhsOtherMediaTypeText), lhsOtherMediaTypeText, rhsOtherMediaTypeText)) {
                return false;
            }
        }
        {
            List<UseRestrictionDataType> lhsUseRestriction;
            lhsUseRestriction = (this.isSetUseRestriction()?this.getUseRestriction():null);
            List<UseRestrictionDataType> rhsUseRestriction;
            rhsUseRestriction = (that.isSetUseRestriction()?that.getUseRestriction():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "useRestriction", lhsUseRestriction), LocatorUtils.property(thatLocator, "useRestriction", rhsUseRestriction), lhsUseRestriction, rhsUseRestriction)) {
                return false;
            }
        }
        {
            List<ContaminantDataType> lhsContaminant;
            lhsContaminant = (this.isSetContaminant()?this.getContaminant():null);
            List<ContaminantDataType> rhsContaminant;
            rhsContaminant = (that.isSetContaminant()?that.getContaminant():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "contaminant", lhsContaminant), LocatorUtils.property(thatLocator, "contaminant", rhsContaminant), lhsContaminant, rhsContaminant)) {
                return false;
            }
        }
        {
            List<EngineeringControlDataType> lhsEngineeringControl;
            lhsEngineeringControl = (this.isSetEngineeringControl()?this.getEngineeringControl():null);
            List<EngineeringControlDataType> rhsEngineeringControl;
            rhsEngineeringControl = (that.isSetEngineeringControl()?that.getEngineeringControl():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "engineeringControl", lhsEngineeringControl), LocatorUtils.property(thatLocator, "engineeringControl", rhsEngineeringControl), lhsEngineeringControl, rhsEngineeringControl)) {
                return false;
            }
        }
        {
            List<InstrumentAffiliateDataType> lhsInstrumentAffiliate;
            lhsInstrumentAffiliate = (this.isSetInstrumentAffiliate()?this.getInstrumentAffiliate():null);
            List<InstrumentAffiliateDataType> rhsInstrumentAffiliate;
            rhsInstrumentAffiliate = (that.isSetInstrumentAffiliate()?that.getInstrumentAffiliate():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "instrumentAffiliate", lhsInstrumentAffiliate), LocatorUtils.property(thatLocator, "instrumentAffiliate", rhsInstrumentAffiliate), lhsInstrumentAffiliate, rhsInstrumentAffiliate)) {
                return false;
            }
        }
        {
            List<ResourceDataType> lhsResource;
            lhsResource = (this.isSetResource()?this.getResource():null);
            List<ResourceDataType> rhsResource;
            rhsResource = (that.isSetResource()?that.getResource():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "resource", lhsResource), LocatorUtils.property(thatLocator, "resource", rhsResource), lhsResource, rhsResource)) {
                return false;
            }
        }
        {
            List<RecurringEventDataType> lhsRecurringEvent;
            lhsRecurringEvent = (this.isSetRecurringEvent()?this.getRecurringEvent():null);
            List<RecurringEventDataType> rhsRecurringEvent;
            rhsRecurringEvent = (that.isSetRecurringEvent()?that.getRecurringEvent():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "recurringEvent", lhsRecurringEvent), LocatorUtils.property(thatLocator, "recurringEvent", rhsRecurringEvent), lhsRecurringEvent, rhsRecurringEvent)) {
                return false;
            }
        }
        {
            List<EventDataType> lhsEvent;
            lhsEvent = (this.isSetEvent()?this.getEvent():null);
            List<EventDataType> rhsEvent;
            rhsEvent = (that.isSetEvent()?that.getEvent():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "event", lhsEvent), LocatorUtils.property(thatLocator, "event", rhsEvent), lhsEvent, rhsEvent)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            DataSourceDataType theDataSource;
            theDataSource = this.getDataSource();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dataSource", theDataSource), currentHashCode, theDataSource);
        }
        {
            String theInstrumentIdentifier;
            theInstrumentIdentifier = this.getInstrumentIdentifier();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "instrumentIdentifier", theInstrumentIdentifier), currentHashCode, theInstrumentIdentifier);
        }
        {
            String theInstrumentName;
            theInstrumentName = this.getInstrumentName();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "instrumentName", theInstrumentName), currentHashCode, theInstrumentName);
        }
        {
            String theInstrumentCategoryCode;
            theInstrumentCategoryCode = this.getInstrumentCategoryCode();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "instrumentCategoryCode", theInstrumentCategoryCode), currentHashCode, theInstrumentCategoryCode);
        }
        {
            String theOtherInstrumentCategoryText;
            theOtherInstrumentCategoryText = this.getOtherInstrumentCategoryText();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "otherInstrumentCategoryText", theOtherInstrumentCategoryText), currentHashCode, theOtherInstrumentCategoryText);
        }
        {
            String theInstrumentTypeCode;
            theInstrumentTypeCode = this.getInstrumentTypeCode();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "instrumentTypeCode", theInstrumentTypeCode), currentHashCode, theInstrumentTypeCode);
        }
        {
            String theOtherInstrumentTypeText;
            theOtherInstrumentTypeText = this.getOtherInstrumentTypeText();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "otherInstrumentTypeText", theOtherInstrumentTypeText), currentHashCode, theOtherInstrumentTypeText);
        }
        {
            String theInstrumentLegalDescriptionText;
            theInstrumentLegalDescriptionText = this.getInstrumentLegalDescriptionText();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "instrumentLegalDescriptionText", theInstrumentLegalDescriptionText), currentHashCode, theInstrumentLegalDescriptionText);
        }
        {
            List<InstrumentLocationDataType> theInstrumentLocation;
            theInstrumentLocation = (this.isSetInstrumentLocation()?this.getInstrumentLocation():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "instrumentLocation", theInstrumentLocation), currentHashCode, theInstrumentLocation);
        }
        {
            List<String> theObjectiveText;
            theObjectiveText = (this.isSetObjectiveText()?this.getObjectiveText():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "objectiveText", theObjectiveText), currentHashCode, theObjectiveText);
        }
        {
            List<String> theMediaTypeCode;
            theMediaTypeCode = (this.isSetMediaTypeCode()?this.getMediaTypeCode():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "mediaTypeCode", theMediaTypeCode), currentHashCode, theMediaTypeCode);
        }
        {
            String theOtherMediaTypeText;
            theOtherMediaTypeText = this.getOtherMediaTypeText();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "otherMediaTypeText", theOtherMediaTypeText), currentHashCode, theOtherMediaTypeText);
        }
        {
            List<UseRestrictionDataType> theUseRestriction;
            theUseRestriction = (this.isSetUseRestriction()?this.getUseRestriction():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "useRestriction", theUseRestriction), currentHashCode, theUseRestriction);
        }
        {
            List<ContaminantDataType> theContaminant;
            theContaminant = (this.isSetContaminant()?this.getContaminant():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "contaminant", theContaminant), currentHashCode, theContaminant);
        }
        {
            List<EngineeringControlDataType> theEngineeringControl;
            theEngineeringControl = (this.isSetEngineeringControl()?this.getEngineeringControl():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "engineeringControl", theEngineeringControl), currentHashCode, theEngineeringControl);
        }
        {
            List<InstrumentAffiliateDataType> theInstrumentAffiliate;
            theInstrumentAffiliate = (this.isSetInstrumentAffiliate()?this.getInstrumentAffiliate():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "instrumentAffiliate", theInstrumentAffiliate), currentHashCode, theInstrumentAffiliate);
        }
        {
            List<ResourceDataType> theResource;
            theResource = (this.isSetResource()?this.getResource():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "resource", theResource), currentHashCode, theResource);
        }
        {
            List<RecurringEventDataType> theRecurringEvent;
            theRecurringEvent = (this.isSetRecurringEvent()?this.getRecurringEvent():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "recurringEvent", theRecurringEvent), currentHashCode, theRecurringEvent);
        }
        {
            List<EventDataType> theEvent;
            theEvent = (this.isSetEvent()?this.getEvent():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "event", theEvent), currentHashCode, theEvent);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
