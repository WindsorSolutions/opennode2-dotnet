//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2013.08.26 at 02:36:56 PM PDT 
//


package com.windsor.node.plugin.ic.fixeddomain;

import java.io.Serializable;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Embedded;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Inheritance;
import javax.persistence.InheritanceType;
import javax.persistence.JoinColumn;
import javax.persistence.OneToMany;
import javax.persistence.PostLoad;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlTransient;
import javax.xml.bind.annotation.XmlType;
import javax.xml.datatype.XMLGregorianCalendar;
import org.hibernate.annotations.LazyCollection;
import org.hibernate.annotations.LazyCollectionOption;
import org.jvnet.hyperjaxb3.xml.bind.annotation.adapters.XMLGregorianCalendarAsDate;
import org.jvnet.hyperjaxb3.xml.bind.annotation.adapters.XmlAdapterUtils;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;
import com.windsor.node.plugin.ic.fixeddomain.gml.AbstractRingPropertyType;
import com.windsor.node.plugin.ic.fixeddomain.gml.DirectPositionListType;
import com.windsor.node.plugin.ic.fixeddomain.gml.DirectPositionType;
import com.windsor.node.plugin.ic.fixeddomain.gml.EnvelopeType;
import com.windsor.node.plugin.ic.fixeddomain.gml.LineStringType;
import com.windsor.node.plugin.ic.fixeddomain.gml.LinearRingType;
import com.windsor.node.plugin.ic.fixeddomain.gml.PointType;
import com.windsor.node.plugin.ic.fixeddomain.gml.PolygonType;


/**
 * <p>Java class for ICGeographicLocationDescriptionDataType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="ICGeographicLocationDescriptionDataType">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;choice>
 *           &lt;element ref="{http://www.opengis.net/gml}Point" minOccurs="0"/>
 *           &lt;element ref="{http://www.opengis.net/gml}LineString" minOccurs="0"/>
 *           &lt;element ref="{http://www.opengis.net/gml}Polygon" minOccurs="0"/>
 *           &lt;element ref="{http://www.opengis.net/gml}Envelope" minOccurs="0"/>
 *         &lt;/choice>
 *         &lt;element ref="{http://www.exchangenetwork.net/schema/IC/1}SourceMapScaleNumber" minOccurs="0"/>
 *         &lt;element ref="{http://www.exchangenetwork.net/schema/IC/1}HorizontalAccuracyMeasure" minOccurs="0"/>
 *         &lt;element ref="{http://www.exchangenetwork.net/schema/IC/1}HorizontalCollectionMethod" minOccurs="0"/>
 *         &lt;element ref="{http://www.exchangenetwork.net/schema/IC/1}GeographicReferencePoint" minOccurs="0"/>
 *         &lt;element ref="{http://www.exchangenetwork.net/schema/IC/1}DataCollectionDate" minOccurs="0"/>
 *         &lt;element ref="{http://www.exchangenetwork.net/schema/IC/1}LocationCommentsText" minOccurs="0"/>
 *         &lt;element ref="{http://www.exchangenetwork.net/schema/IC/1}VerticalCollectionMethod" minOccurs="0"/>
 *         &lt;element ref="{http://www.exchangenetwork.net/schema/IC/1}VerificationMethod" minOccurs="0"/>
 *         &lt;element ref="{http://www.exchangenetwork.net/schema/IC/1}CoordinateDataSource" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "ICGeographicLocationDescriptionDataType", propOrder = {
    "point",
    "lineString",
    "polygon",
    "envelope",
    "sourceMapScaleNumber",
    "horizontalAccuracyMeasure",
    "horizontalCollectionMethod",
    "geographicReferencePoint",
    "dataCollectionDate",
    "locationCommentsText",
    "verticalCollectionMethod",
    "verificationMethod",
    "coordinateDataSource"
})
@Entity(name = "ICGeographicLocationDescriptionDataType")
@Table(name = "IC_GEO_LOC_DESC")
@Inheritance(strategy = InheritanceType.JOINED)
public class ICGeographicLocationDescriptionDataType
    implements Serializable, Equals, HashCode
{

    private final static long serialVersionUID = 1L;
    @XmlElement(name = "Point", namespace = "http://www.opengis.net/gml")
    protected PointType point;
    @XmlElement(name = "LineString", namespace = "http://www.opengis.net/gml")
    protected LineStringType lineString;
    @XmlElement(name = "Polygon", namespace = "http://www.opengis.net/gml")
    protected PolygonType polygon;
    @XmlElement(name = "Envelope", namespace = "http://www.opengis.net/gml")
    protected EnvelopeType envelope;
    @XmlElement(name = "SourceMapScaleNumber")
    protected BigInteger sourceMapScaleNumber;
    @XmlElement(name = "HorizontalAccuracyMeasure")
    protected MeasureDataType horizontalAccuracyMeasure;
    @XmlElement(name = "HorizontalCollectionMethod")
    protected ReferenceMethodDataType horizontalCollectionMethod;
    @XmlElement(name = "GeographicReferencePoint")
    protected GeographicReferencePointDataType geographicReferencePoint;
    @XmlElement(name = "DataCollectionDate")
    protected XMLGregorianCalendar dataCollectionDate;
    @XmlElement(name = "LocationCommentsText")
    protected String locationCommentsText;
    @XmlElement(name = "VerticalCollectionMethod")
    protected ReferenceMethodDataType verticalCollectionMethod;
    @XmlElement(name = "VerificationMethod")
    protected ReferenceMethodDataType verificationMethod;
    @XmlElement(name = "CoordinateDataSource")
    protected CoordinateDataSourceDataType coordinateDataSource;
    @XmlTransient
    protected String dbid;
    @XmlTransient
    protected List<LatLong> latLongPolygons;

    @OneToMany(targetEntity = LatLong.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "IC_GEO_LOC_DESC_ID")
    @LazyCollection(LazyCollectionOption.FALSE)
    public List<LatLong> getLatLongPolygons()
    {
        if(latLongPolygons == null)
        {
            latLongPolygons = new ArrayList<LatLong>();
        }
        return latLongPolygons;
    }

    public void setLatLongPolygons(List<LatLong> latLongPolygons)
    {
        this.latLongPolygons = latLongPolygons;
    }

    @PostLoad
    public void postLoad()
    {
        com.windsor.node.plugin.ic.fixeddomain.gml.ObjectFactory fact = new com.windsor.node.plugin.ic.fixeddomain.gml.ObjectFactory();

        if(ptLat != null && ptLon != null)//Then it is a PointType
        {
            PointType p = fact.createPointType();
            DirectPositionType pos = fact.createDirectPositionType();
            p.setPos(pos);
    
            p.setSrsDimension(getSrsDimension());
            p.setSrsName(getSrsName());
            //p.setId("id?");
    
            //pos.setSrsDimension(getSrsDimension());
            //pos.setSrsName(getSrsName());
            List<Double> values = new ArrayList<Double>();
            values.add(getPtLon().doubleValue());
            values.add(getPtLat().doubleValue());
            pos.setValue(values);

            setPoint(p);
        }

        if(envelopeLowerLat != null && envelopeLowerLon != null && envelopeUpperLat != null && envelopeUpperLon != null)//Then EnvelopeType
        {
            EnvelopeType e = fact.createEnvelopeType();
            DirectPositionType upperCornerPos = fact.createDirectPositionType();
            DirectPositionType lowerCornerPos = fact.createDirectPositionType();
            e.setSrsDimension(getSrsDimension());
            e.setSrsName(getSrsName());

            upperCornerPos.setSrsDimension(getSrsDimension());
            upperCornerPos.setSrsName(getSrsName());
            List<Double> values = new ArrayList<Double>();
            values.add(getEnvelopeUpperLon().doubleValue());
            values.add(getEnvelopeUpperLat().doubleValue());
            upperCornerPos.setValue(values);
            e.setUpperCorner(upperCornerPos);

            lowerCornerPos.setSrsDimension(getSrsDimension());
            lowerCornerPos.setSrsName(getSrsName());
            values = new ArrayList<Double>();
            values.add(getEnvelopeUpperLon().doubleValue());
            values.add(getEnvelopeUpperLat().doubleValue());
            lowerCornerPos.setValue(values);
            e.setLowerCorner(lowerCornerPos);

            setEnvelope(e);
        }

        if(lineStartLat != null && lineStartLon != null && lineEndLat != null && lineEndLon != null)//Then LineStringType
        {
            LineStringType l = fact.createLineStringType();
            DirectPositionListType pl = fact.createDirectPositionListType();
            l.setSrsDimension(getSrsDimension());
            l.setSrsName(getSrsName());
            //l.setId("id?");
            l.setPosList(pl);

            //pl.setDbid("id?");
            pl.setCount(new BigInteger("2"));//Is this what this refers to?
            //pl.setSrsDimension(getSrsDimension());
            //pl.setSrsName(getSrsName());

            List<Double> values = new ArrayList<Double>();
            values.add(getLineStartLat().doubleValue());
            values.add(getLineStartLon().doubleValue());
            values.add(getLineEndLat().doubleValue());
            values.add(getLineEndLon().doubleValue());
            pl.setValue(values);

            setLineString(l);
        }

        if(getLatLongPolygons() != null && getLatLongPolygons().size() > 0)
        {
            PolygonType p = fact.createPolygonType();
            AbstractRingPropertyType r = fact.createAbstractRingPropertyType();
            LinearRingType l = fact.createLinearRingType();
            DirectPositionListType d = fact.createDirectPositionListType();
            p.setSrsDimension(getSrsDimension());
            p.setSrsName(getSrsName());
            //p.setId("id?");

            p.setExterior(r);
            //r.setRingName("ring name?");
            r.setRing(fact.createLinearRing(l));

            List<Double> values = new ArrayList<Double>();
            for(int i = 0; i < getLatLongPolygons().size(); i++)
            {
                if(getLatLongPolygons().get(i) != null && getLatLongPolygons().get(i).getLattitude() != null
                                && getLatLongPolygons().get(i).getLongitude() != null)
                {
                    values.add(getLatLongPolygons().get(i).getLattitude().doubleValue());
                    values.add(getLatLongPolygons().get(i).getLongitude().doubleValue());
                }
            }
            d.setValue(values);
            l.setPosList(d);

            setPolygon(p);
        }
    }

    //Data for some of the polygon types that were collapsed into the IC_GEO_LOC_DESC table

    @XmlTransient
    protected String srsName;
    @XmlTransient
    protected BigInteger srsDimension;
    @XmlTransient
    protected BigDecimal ptLat;
    @XmlTransient
    protected BigDecimal ptLon;
    @XmlTransient
    protected BigDecimal envelopeUpperLat;
    @XmlTransient
    protected BigDecimal envelopeUpperLon;
    @XmlTransient
    protected BigDecimal envelopeLowerLat;
    @XmlTransient
    protected BigDecimal envelopeLowerLon;
    @XmlTransient
    protected BigDecimal lineStartLat;
    @XmlTransient
    protected BigDecimal lineStartLon;
    @XmlTransient
    protected BigDecimal lineEndLat;
    @XmlTransient
    protected BigDecimal lineEndLon;

    @Basic
    @Column(name="SRS_NAME")
    public String getSrsName()
    {
        return srsName;
    }
    public void setSrsName(String srsName)
    {
        this.srsName = srsName;
    }
    @Basic
    @Column(name="SRS_DIMENSION")
    public BigInteger getSrsDimension()
    {
        return srsDimension;
    }
    public void setSrsDimension(BigInteger srsDimension)
    {
        this.srsDimension = srsDimension;
    }
    @Basic
    @Column(name="PT_LAT")
    public BigDecimal getPtLat()
    {
        return ptLat;
    }
    public void setPtLat(BigDecimal ptLat)
    {
        this.ptLat = ptLat;
    }
    @Basic
    @Column(name="PT_LON")
    public BigDecimal getPtLon()
    {
        return ptLon;
    }
    public void setPtLon(BigDecimal ptLon)
    {
        this.ptLon = ptLon;
    }
    @Basic
    @Column(name="ENVELOPE_UPPER_LAT")
    public BigDecimal getEnvelopeUpperLat()
    {
        return envelopeUpperLat;
    }
    public void setEnvelopeUpperLat(BigDecimal envelopeUpperLat)
    {
        this.envelopeUpperLat = envelopeUpperLat;
    }
    @Basic
    @Column(name="ENVELOPE_UPPER_LON")
    public BigDecimal getEnvelopeUpperLon()
    {
        return envelopeUpperLon;
    }
    public void setEnvelopeUpperLon(BigDecimal envelopeUpperLon)
    {
        this.envelopeUpperLon = envelopeUpperLon;
    }
    @Basic
    @Column(name="ENVELOPE_LOWER_LAT")
    public BigDecimal getEnvelopeLowerLat()
    {
        return envelopeLowerLat;
    }
    public void setEnvelopeLowerLat(BigDecimal envelopeLowerLat)
    {
        this.envelopeLowerLat = envelopeLowerLat;
    }
    @Basic
    @Column(name="ENVELOPE_LOWER_LON")
    public BigDecimal getEnvelopeLowerLon()
    {
        return envelopeLowerLon;
    }
    public void setEnvelopeLowerLon(BigDecimal envelopeLowerLon)
    {
        this.envelopeLowerLon = envelopeLowerLon;
    }
    @Basic
    @Column(name="LINE_START_LAT")
    public BigDecimal getLineStartLat()
    {
        return lineStartLat;
    }
    public void setLineStartLat(BigDecimal lineStartLat)
    {
        this.lineStartLat = lineStartLat;
    }
    @Basic
    @Column(name="LINE_START_LON")
    public BigDecimal getLineStartLon()
    {
        return lineStartLon;
    }
    public void setLineStartLon(BigDecimal lineStartLon)
    {
        this.lineStartLon = lineStartLon;
    }
    @Basic
    @Column(name="LINE_END_LAT")
    public BigDecimal getLineEndLat()
    {
        return lineEndLat;
    }
    public void setLineEndLat(BigDecimal lineEndLat)
    {
        this.lineEndLat = lineEndLat;
    }
    @Basic
    @Column(name="LINE_END_LON")
    public BigDecimal getLineEndLon()
    {
        return lineEndLon;
    }
    public void setLineEndLon(BigDecimal lineEndLon)
    {
        this.lineEndLon = lineEndLon;
    }

    /**
     * Gets the value of the point property.
     * 
     * @return
     *     possible object is
     *     {@link PointType }
     *     
     */
    @Transient
    public PointType getPoint() {
        return point;
    }

    /**
     * Sets the value of the point property.
     * 
     * @param value
     *     allowed object is
     *     {@link PointType }
     *     
     */
    public void setPoint(PointType value) {
        this.point = value;
    }

    @Transient
    public boolean isSetPoint() {
        return (this.point!= null);
    }

    /**
     * Gets the value of the lineString property.
     * 
     * @return
     *     possible object is
     *     {@link LineStringType }
     *     
     */
    @Transient
    public LineStringType getLineString() {
        return lineString;
    }

    /**
     * Sets the value of the lineString property.
     * 
     * @param value
     *     allowed object is
     *     {@link LineStringType }
     *     
     */
    public void setLineString(LineStringType value) {
        this.lineString = value;
    }

    @Transient
    public boolean isSetLineString() {
        return (this.lineString!= null);
    }

    /**
     * Gets the value of the polygon property.
     * 
     * @return
     *     possible object is
     *     {@link PolygonType }
     *     
     */
    @Transient
    public PolygonType getPolygon() {
        return polygon;
    }

    /**
     * Sets the value of the polygon property.
     * 
     * @param value
     *     allowed object is
     *     {@link PolygonType }
     *     
     */
    public void setPolygon(PolygonType value) {
        this.polygon = value;
    }

    @Transient
    public boolean isSetPolygon() {
        return (this.polygon!= null);
    }

    /**
     * Gets the value of the envelope property.
     * 
     * @return
     *     possible object is
     *     {@link EnvelopeType }
     *     
     */
    @Transient
    public EnvelopeType getEnvelope() {
        return envelope;
    }

    /**
     * Sets the value of the envelope property.
     * 
     * @param value
     *     allowed object is
     *     {@link EnvelopeType }
     *     
     */
    public void setEnvelope(EnvelopeType value) {
        this.envelope = value;
    }

    @Transient
    public boolean isSetEnvelope() {
        return (this.envelope!= null);
    }

    /**
     * Gets the value of the sourceMapScaleNumber property.
     * 
     * @return
     *     possible object is
     *     {@link BigInteger }
     *     
     */
    @Basic
    @Column(name = "SRC_MAP_SCALE_NUM", precision = 20, scale = 0)
    public BigInteger getSourceMapScaleNumber() {
        return sourceMapScaleNumber;
    }

    /**
     * Sets the value of the sourceMapScaleNumber property.
     * 
     * @param value
     *     allowed object is
     *     {@link BigInteger }
     *     
     */
    public void setSourceMapScaleNumber(BigInteger value) {
        this.sourceMapScaleNumber = value;
    }

    @Transient
    public boolean isSetSourceMapScaleNumber() {
        return (this.sourceMapScaleNumber!= null);
    }

    /**
     * Gets the value of the horizontalAccuracyMeasure property.
     * 
     * @return
     *     possible object is
     *     {@link MeasureDataType }
     *     
     */
    @Embedded
    @AttributeOverrides({
        @AttributeOverride(name = "measureValue", column = @Column(name = "HORZ_MEAS_VALUE", length = 255)),
        @AttributeOverride(name = "measurePrecisionText", column = @Column(name = "HORZ_MEAS_PRECISION_TXT", length = 255)),
        @AttributeOverride(name = "measureUnit.measureUnitCode", column = @Column(name = "HORZ_MEAS_UNIT_CODE", length = 255)),
        @AttributeOverride(name = "measureUnit.measureUnitName", column = @Column(name = "HORZ_MEAS_UNIT_NAME", length = 255)),
        @AttributeOverride(name = "measureUnit.measureUnitCodeListIdentifier.value", column = @Column(name = "HORZ_MEAS_UNIT_VALUE", length = 255)),
        @AttributeOverride(name = "measureUnit.measureUnitCodeListIdentifier.codeListVersionIdentifier", column = @Column(name = "HORZ_MEAS_UNIT_LST_IDEN", length = 255)),
        @AttributeOverride(name = "measureUnit.measureUnitCodeListIdentifier.codeListVersionAgencyIdentifier", column = @Column(name = "HORZ_MEAS_UNIT_LST_AGCY_IDEN", length = 255)),
        @AttributeOverride(name = "resultQualifier.resultQualifierCode", column = @Column(name = "HORZ_RSLT_QUAL_CODE", length = 255)),
        @AttributeOverride(name = "resultQualifier.resultQualifierName", column = @Column(name = "HORZ_RSLT_QUAL_NAME", length = 255)),
        @AttributeOverride(name = "resultQualifier.resultQualifierCodeListIdentifier.value", column = @Column(name = "HORZ_RSLT_QUAL_VALUE", length = 255)),
        @AttributeOverride(name = "resultQualifier.resultQualifierCodeListIdentifier.codeListVersionIdentifier", column = @Column(name = "HORZ_LST_VERS_IDEN", length = 255)),
        @AttributeOverride(name = "resultQualifier.resultQualifierCodeListIdentifier.codeListVersionAgencyIdentifier", column = @Column(name = "HORZ_LST_VERS_AGCY_IDEN", length = 255))
    })
    public MeasureDataType getHorizontalAccuracyMeasure() {
        return horizontalAccuracyMeasure;
    }

    /**
     * Sets the value of the horizontalAccuracyMeasure property.
     * 
     * @param value
     *     allowed object is
     *     {@link MeasureDataType }
     *     
     */
    public void setHorizontalAccuracyMeasure(MeasureDataType value) {
        this.horizontalAccuracyMeasure = value;
    }

    @Transient
    public boolean isSetHorizontalAccuracyMeasure() {
        return (this.horizontalAccuracyMeasure!= null);
    }

    /**
     * Gets the value of the horizontalCollectionMethod property.
     * 
     * @return
     *     possible object is
     *     {@link ReferenceMethodDataType }
     *     
     */
    @Embedded
    @AttributeOverrides({
        @AttributeOverride(name = "methodIdentifierCode", column = @Column(name = "HORZ_COLL_METH_IDEN_CODE", length = 255)),
        @AttributeOverride(name = "methodName", column = @Column(name = "HORZ_COLL_METH_NAME", length = 255)),
        @AttributeOverride(name = "methodDescriptionText", column = @Column(name = "HORZ_COLL_METH_DESC_TXT", length = 255)),
        @AttributeOverride(name = "methodDeviationsText", column = @Column(name = "HORZ_COLL_METH_DEVIATIONS_TXT", length = 255)),
        @AttributeOverride(name = "methodIdentifierCodeListIdentifier.value", column = @Column(name = "HORZ_COLL_METH_VALUE", length = 255)),
        @AttributeOverride(name = "methodIdentifierCodeListIdentifier.codeListVersionIdentifier", column = @Column(name = "HORZ_COLL_METH_LST_IDEN", length = 255)),
        @AttributeOverride(name = "methodIdentifierCodeListIdentifier.codeListVersionAgencyIdentifier", column = @Column(name = "HORZ_COLL_METH_LST_AGCY_IDEN", length = 255))
    })
    public ReferenceMethodDataType getHorizontalCollectionMethod() {
        return horizontalCollectionMethod;
    }

    /**
     * Sets the value of the horizontalCollectionMethod property.
     * 
     * @param value
     *     allowed object is
     *     {@link ReferenceMethodDataType }
     *     
     */
    public void setHorizontalCollectionMethod(ReferenceMethodDataType value) {
        this.horizontalCollectionMethod = value;
    }

    @Transient
    public boolean isSetHorizontalCollectionMethod() {
        return (this.horizontalCollectionMethod!= null);
    }

    /**
     * Gets the value of the geographicReferencePoint property.
     * 
     * @return
     *     possible object is
     *     {@link GeographicReferencePointDataType }
     *     
     */
    @Embedded
    @AttributeOverrides({
        @AttributeOverride(name = "geographicReferencePointCode", column = @Column(name = "GEO_REF_PT_CODE", length = 255)),
        @AttributeOverride(name = "geographicReferencePointName", column = @Column(name = "GEO_REF_PT_NAME", length = 255)),
        @AttributeOverride(name = "referencePointCodeListIdentifier.value", column = @Column(name = "GEO_REF_PT_VALUE", length = 255)),
        @AttributeOverride(name = "referencePointCodeListIdentifier.codeListVersionIdentifier", column = @Column(name = "GEO_REF_PT_LST_IDEN", length = 255)),
        @AttributeOverride(name = "referencePointCodeListIdentifier.codeListVersionAgencyIdentifier", column = @Column(name = "GEO_REF_PT_LST_AGCY_IDEN", length = 255))
    })
    public GeographicReferencePointDataType getGeographicReferencePoint() {
        return geographicReferencePoint;
    }

    /**
     * Sets the value of the geographicReferencePoint property.
     * 
     * @param value
     *     allowed object is
     *     {@link GeographicReferencePointDataType }
     *     
     */
    public void setGeographicReferencePoint(GeographicReferencePointDataType value) {
        this.geographicReferencePoint = value;
    }

    @Transient
    public boolean isSetGeographicReferencePoint() {
        return (this.geographicReferencePoint!= null);
    }

    /**
     * Gets the value of the dataCollectionDate property.
     * 
     * @return
     *     possible object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    @Transient
    public XMLGregorianCalendar getDataCollectionDate() {
        return dataCollectionDate;
    }

    /**
     * Sets the value of the dataCollectionDate property.
     * 
     * @param value
     *     allowed object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    public void setDataCollectionDate(XMLGregorianCalendar value) {
        this.dataCollectionDate = value;
    }

    @Transient
    public boolean isSetDataCollectionDate() {
        return (this.dataCollectionDate!= null);
    }

    /**
     * Gets the value of the locationCommentsText property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "LOC_CMNTS_TXT", length = 255)
    public String getLocationCommentsText() {
        return locationCommentsText;
    }

    /**
     * Sets the value of the locationCommentsText property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setLocationCommentsText(String value) {
        this.locationCommentsText = value;
    }

    @Transient
    public boolean isSetLocationCommentsText() {
        return (this.locationCommentsText!= null);
    }

    /**
     * Gets the value of the verticalCollectionMethod property.
     * 
     * @return
     *     possible object is
     *     {@link ReferenceMethodDataType }
     *     
     */
    @Embedded
    @AttributeOverrides({
        @AttributeOverride(name = "methodIdentifierCode", column = @Column(name = "VERT_COLL_METH_IDEN_CODE", length = 255)),
        @AttributeOverride(name = "methodName", column = @Column(name = "VERT_COLL_METH_NAME", length = 255)),
        @AttributeOverride(name = "methodDescriptionText", column = @Column(name = "VERT_COLL_METH_DESC_TXT", length = 255)),
        @AttributeOverride(name = "methodDeviationsText", column = @Column(name = "VERT_COLL_METH_DEVIATIONS_TXT", length = 255)),
        @AttributeOverride(name = "methodIdentifierCodeListIdentifier.value", column = @Column(name = "VERT_COLL_METH_VALUE", length = 255)),
        @AttributeOverride(name = "methodIdentifierCodeListIdentifier.codeListVersionIdentifier", column = @Column(name = "VERT_COLL_METH_LST_IDEN", length = 255)),
        @AttributeOverride(name = "methodIdentifierCodeListIdentifier.codeListVersionAgencyIdentifier", column = @Column(name = "VERT_COLL_METH_LST_AGCY_IDEN", length = 255))
    })
    public ReferenceMethodDataType getVerticalCollectionMethod() {
        return verticalCollectionMethod;
    }

    /**
     * Sets the value of the verticalCollectionMethod property.
     * 
     * @param value
     *     allowed object is
     *     {@link ReferenceMethodDataType }
     *     
     */
    public void setVerticalCollectionMethod(ReferenceMethodDataType value) {
        this.verticalCollectionMethod = value;
    }

    @Transient
    public boolean isSetVerticalCollectionMethod() {
        return (this.verticalCollectionMethod!= null);
    }

    /**
     * Gets the value of the verificationMethod property.
     * 
     * @return
     *     possible object is
     *     {@link ReferenceMethodDataType }
     *     
     */
    @Embedded
    @AttributeOverrides({
        @AttributeOverride(name = "methodIdentifierCode", column = @Column(name = "VERIF_METH_IDEN_CODE", length = 255)),
        @AttributeOverride(name = "methodName", column = @Column(name = "VERIF_METH_NAME", length = 255)),
        @AttributeOverride(name = "methodDescriptionText", column = @Column(name = "VERIF_METH_DESC_TXT", length = 255)),
        @AttributeOverride(name = "methodDeviationsText", column = @Column(name = "VERIF_METH_DEVIATIONS_TXT", length = 255)),
        @AttributeOverride(name = "methodIdentifierCodeListIdentifier.value", column = @Column(name = "VERIF_METH_VALUE", length = 255)),
        @AttributeOverride(name = "methodIdentifierCodeListIdentifier.codeListVersionIdentifier", column = @Column(name = "VERIF_METH_LST_IDEN", length = 255)),
        @AttributeOverride(name = "methodIdentifierCodeListIdentifier.codeListVersionAgencyIdentifier", column = @Column(name = "VERIF_METH_LST_AGCY_IDEN", length = 255))
    })
    public ReferenceMethodDataType getVerificationMethod() {
        return verificationMethod;
    }

    /**
     * Sets the value of the verificationMethod property.
     * 
     * @param value
     *     allowed object is
     *     {@link ReferenceMethodDataType }
     *     
     */
    public void setVerificationMethod(ReferenceMethodDataType value) {
        this.verificationMethod = value;
    }

    @Transient
    public boolean isSetVerificationMethod() {
        return (this.verificationMethod!= null);
    }

    /**
     * Gets the value of the coordinateDataSource property.
     * 
     * @return
     *     possible object is
     *     {@link CoordinateDataSourceDataType }
     *     
     */
    @Embedded
    @AttributeOverrides({
        @AttributeOverride(name = "coordinateDataSourceCode", column = @Column(name = "COORD_DATA_SRC_CODE", length = 255)),
        @AttributeOverride(name = "coordinateDataSourceName", column = @Column(name = "COORD_DATA_SRC_NAME", length = 255)),
        @AttributeOverride(name = "coordinateDataSourceCodeListIdentifier.value", column = @Column(name = "COORD_DATA_SRC_VALUE", length = 255)),
        @AttributeOverride(name = "coordinateDataSourceCodeListIdentifier.codeListVersionIdentifier", column = @Column(name = "COORD_DATA_SRC_LST_IDEN", length = 255)),
        @AttributeOverride(name = "coordinateDataSourceCodeListIdentifier.codeListVersionAgencyIdentifier", column = @Column(name = "COORD_DATA_SRC_LST_AGCY_IDEN", length = 255))
    })
    public CoordinateDataSourceDataType getCoordinateDataSource() {
        return coordinateDataSource;
    }

    /**
     * Sets the value of the coordinateDataSource property.
     * 
     * @param value
     *     allowed object is
     *     {@link CoordinateDataSourceDataType }
     *     
     */
    public void setCoordinateDataSource(CoordinateDataSourceDataType value) {
        this.coordinateDataSource = value;
    }

    @Transient
    public boolean isSetCoordinateDataSource() {
        return (this.coordinateDataSource!= null);
    }

    /**
     * 
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Id
    @Column(name = "IC_GEO_LOC_DESC_ID")
    public String getDbid() {
        return dbid;
    }

    /**
     * 
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setDbid(String value) {
        this.dbid = value;
    }

    @Basic
    @Column(name = "DATA_COLL_DATE")
    @Temporal(TemporalType.DATE)
    public Date getDataCollectionDateItem() {
        return XmlAdapterUtils.unmarshall(XMLGregorianCalendarAsDate.class, this.getDataCollectionDate());
    }

    public void setDataCollectionDateItem(Date target) {
        setDataCollectionDate(XmlAdapterUtils.marshall(XMLGregorianCalendarAsDate.class, target));
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof ICGeographicLocationDescriptionDataType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final ICGeographicLocationDescriptionDataType that = ((ICGeographicLocationDescriptionDataType) object);
        {
            PointType lhsPoint;
            lhsPoint = this.getPoint();
            PointType rhsPoint;
            rhsPoint = that.getPoint();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "point", lhsPoint), LocatorUtils.property(thatLocator, "point", rhsPoint), lhsPoint, rhsPoint)) {
                return false;
            }
        }
        {
            LineStringType lhsLineString;
            lhsLineString = this.getLineString();
            LineStringType rhsLineString;
            rhsLineString = that.getLineString();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "lineString", lhsLineString), LocatorUtils.property(thatLocator, "lineString", rhsLineString), lhsLineString, rhsLineString)) {
                return false;
            }
        }
        {
            PolygonType lhsPolygon;
            lhsPolygon = this.getPolygon();
            PolygonType rhsPolygon;
            rhsPolygon = that.getPolygon();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "polygon", lhsPolygon), LocatorUtils.property(thatLocator, "polygon", rhsPolygon), lhsPolygon, rhsPolygon)) {
                return false;
            }
        }
        {
            EnvelopeType lhsEnvelope;
            lhsEnvelope = this.getEnvelope();
            EnvelopeType rhsEnvelope;
            rhsEnvelope = that.getEnvelope();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "envelope", lhsEnvelope), LocatorUtils.property(thatLocator, "envelope", rhsEnvelope), lhsEnvelope, rhsEnvelope)) {
                return false;
            }
        }
        {
            BigInteger lhsSourceMapScaleNumber;
            lhsSourceMapScaleNumber = this.getSourceMapScaleNumber();
            BigInteger rhsSourceMapScaleNumber;
            rhsSourceMapScaleNumber = that.getSourceMapScaleNumber();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "sourceMapScaleNumber", lhsSourceMapScaleNumber), LocatorUtils.property(thatLocator, "sourceMapScaleNumber", rhsSourceMapScaleNumber), lhsSourceMapScaleNumber, rhsSourceMapScaleNumber)) {
                return false;
            }
        }
        {
            MeasureDataType lhsHorizontalAccuracyMeasure;
            lhsHorizontalAccuracyMeasure = this.getHorizontalAccuracyMeasure();
            MeasureDataType rhsHorizontalAccuracyMeasure;
            rhsHorizontalAccuracyMeasure = that.getHorizontalAccuracyMeasure();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "horizontalAccuracyMeasure", lhsHorizontalAccuracyMeasure), LocatorUtils.property(thatLocator, "horizontalAccuracyMeasure", rhsHorizontalAccuracyMeasure), lhsHorizontalAccuracyMeasure, rhsHorizontalAccuracyMeasure)) {
                return false;
            }
        }
        {
            ReferenceMethodDataType lhsHorizontalCollectionMethod;
            lhsHorizontalCollectionMethod = this.getHorizontalCollectionMethod();
            ReferenceMethodDataType rhsHorizontalCollectionMethod;
            rhsHorizontalCollectionMethod = that.getHorizontalCollectionMethod();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "horizontalCollectionMethod", lhsHorizontalCollectionMethod), LocatorUtils.property(thatLocator, "horizontalCollectionMethod", rhsHorizontalCollectionMethod), lhsHorizontalCollectionMethod, rhsHorizontalCollectionMethod)) {
                return false;
            }
        }
        {
            GeographicReferencePointDataType lhsGeographicReferencePoint;
            lhsGeographicReferencePoint = this.getGeographicReferencePoint();
            GeographicReferencePointDataType rhsGeographicReferencePoint;
            rhsGeographicReferencePoint = that.getGeographicReferencePoint();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "geographicReferencePoint", lhsGeographicReferencePoint), LocatorUtils.property(thatLocator, "geographicReferencePoint", rhsGeographicReferencePoint), lhsGeographicReferencePoint, rhsGeographicReferencePoint)) {
                return false;
            }
        }
        {
            XMLGregorianCalendar lhsDataCollectionDate;
            lhsDataCollectionDate = this.getDataCollectionDate();
            XMLGregorianCalendar rhsDataCollectionDate;
            rhsDataCollectionDate = that.getDataCollectionDate();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "dataCollectionDate", lhsDataCollectionDate), LocatorUtils.property(thatLocator, "dataCollectionDate", rhsDataCollectionDate), lhsDataCollectionDate, rhsDataCollectionDate)) {
                return false;
            }
        }
        {
            String lhsLocationCommentsText;
            lhsLocationCommentsText = this.getLocationCommentsText();
            String rhsLocationCommentsText;
            rhsLocationCommentsText = that.getLocationCommentsText();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "locationCommentsText", lhsLocationCommentsText), LocatorUtils.property(thatLocator, "locationCommentsText", rhsLocationCommentsText), lhsLocationCommentsText, rhsLocationCommentsText)) {
                return false;
            }
        }
        {
            ReferenceMethodDataType lhsVerticalCollectionMethod;
            lhsVerticalCollectionMethod = this.getVerticalCollectionMethod();
            ReferenceMethodDataType rhsVerticalCollectionMethod;
            rhsVerticalCollectionMethod = that.getVerticalCollectionMethod();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "verticalCollectionMethod", lhsVerticalCollectionMethod), LocatorUtils.property(thatLocator, "verticalCollectionMethod", rhsVerticalCollectionMethod), lhsVerticalCollectionMethod, rhsVerticalCollectionMethod)) {
                return false;
            }
        }
        {
            ReferenceMethodDataType lhsVerificationMethod;
            lhsVerificationMethod = this.getVerificationMethod();
            ReferenceMethodDataType rhsVerificationMethod;
            rhsVerificationMethod = that.getVerificationMethod();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "verificationMethod", lhsVerificationMethod), LocatorUtils.property(thatLocator, "verificationMethod", rhsVerificationMethod), lhsVerificationMethod, rhsVerificationMethod)) {
                return false;
            }
        }
        {
            CoordinateDataSourceDataType lhsCoordinateDataSource;
            lhsCoordinateDataSource = this.getCoordinateDataSource();
            CoordinateDataSourceDataType rhsCoordinateDataSource;
            rhsCoordinateDataSource = that.getCoordinateDataSource();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "coordinateDataSource", lhsCoordinateDataSource), LocatorUtils.property(thatLocator, "coordinateDataSource", rhsCoordinateDataSource), lhsCoordinateDataSource, rhsCoordinateDataSource)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            PointType thePoint;
            thePoint = this.getPoint();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "point", thePoint), currentHashCode, thePoint);
        }
        {
            LineStringType theLineString;
            theLineString = this.getLineString();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "lineString", theLineString), currentHashCode, theLineString);
        }
        {
            PolygonType thePolygon;
            thePolygon = this.getPolygon();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "polygon", thePolygon), currentHashCode, thePolygon);
        }
        {
            EnvelopeType theEnvelope;
            theEnvelope = this.getEnvelope();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "envelope", theEnvelope), currentHashCode, theEnvelope);
        }
        {
            BigInteger theSourceMapScaleNumber;
            theSourceMapScaleNumber = this.getSourceMapScaleNumber();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "sourceMapScaleNumber", theSourceMapScaleNumber), currentHashCode, theSourceMapScaleNumber);
        }
        {
            MeasureDataType theHorizontalAccuracyMeasure;
            theHorizontalAccuracyMeasure = this.getHorizontalAccuracyMeasure();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "horizontalAccuracyMeasure", theHorizontalAccuracyMeasure), currentHashCode, theHorizontalAccuracyMeasure);
        }
        {
            ReferenceMethodDataType theHorizontalCollectionMethod;
            theHorizontalCollectionMethod = this.getHorizontalCollectionMethod();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "horizontalCollectionMethod", theHorizontalCollectionMethod), currentHashCode, theHorizontalCollectionMethod);
        }
        {
            GeographicReferencePointDataType theGeographicReferencePoint;
            theGeographicReferencePoint = this.getGeographicReferencePoint();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "geographicReferencePoint", theGeographicReferencePoint), currentHashCode, theGeographicReferencePoint);
        }
        {
            XMLGregorianCalendar theDataCollectionDate;
            theDataCollectionDate = this.getDataCollectionDate();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dataCollectionDate", theDataCollectionDate), currentHashCode, theDataCollectionDate);
        }
        {
            String theLocationCommentsText;
            theLocationCommentsText = this.getLocationCommentsText();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "locationCommentsText", theLocationCommentsText), currentHashCode, theLocationCommentsText);
        }
        {
            ReferenceMethodDataType theVerticalCollectionMethod;
            theVerticalCollectionMethod = this.getVerticalCollectionMethod();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "verticalCollectionMethod", theVerticalCollectionMethod), currentHashCode, theVerticalCollectionMethod);
        }
        {
            ReferenceMethodDataType theVerificationMethod;
            theVerificationMethod = this.getVerificationMethod();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "verificationMethod", theVerificationMethod), currentHashCode, theVerificationMethod);
        }
        {
            CoordinateDataSourceDataType theCoordinateDataSource;
            theCoordinateDataSource = this.getCoordinateDataSource();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "coordinateDataSource", theCoordinateDataSource), currentHashCode, theCoordinateDataSource);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
