//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2013.08.26 at 02:36:56 PM PDT 
//


package com.windsor.node.plugin.ic.fixeddomain;

import java.io.Serializable;
import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Column;
import javax.persistence.Embedded;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Inheritance;
import javax.persistence.InheritanceType;
import javax.persistence.Table;
import javax.persistence.Transient;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlTransient;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for FacilityDataType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="FacilityDataType">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element ref="{http://www.exchangenetwork.net/schema/IC/1}FacilitySiteIdentity"/>
 *         &lt;element ref="{http://www.exchangenetwork.net/schema/IC/1}LocationAddress" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "FacilityDataType", propOrder = {
    "facilitySiteIdentity",
    "locationAddress"
})
@Entity(name = "FacilityDataType")
@Table(name = "IC_FAC")
@Inheritance(strategy = InheritanceType.JOINED)
public class FacilityDataType
    implements Serializable, Equals, HashCode
{

    private final static long serialVersionUID = 1L;
    @XmlElement(name = "FacilitySiteIdentity", required = true)
    protected FacilitySiteIdentityDataType facilitySiteIdentity;
    @XmlElement(name = "LocationAddress")
    protected LocationAddressDataType locationAddress;
    @XmlTransient
    protected String dbid;

    /**
     * Gets the value of the facilitySiteIdentity property.
     * 
     * @return
     *     possible object is
     *     {@link FacilitySiteIdentityDataType }
     *     
     */
    @Embedded
    @AttributeOverrides({
        @AttributeOverride(name = "facilitySiteName", column = @Column(name = "FAC_SITE_NAME", length = 255)),
        @AttributeOverride(name = "federalFacilityIndicator", column = @Column(name = "FEDR_FAC_IND", length = 255)),
        @AttributeOverride(name = "facilitySiteIdentifier.value", column = @Column(name = "FAC_SITE_IDEN_VALUE", length = 255)),
        @AttributeOverride(name = "facilitySiteIdentifier.facilitySiteIdentifierContext", column = @Column(name = "FAC_SITE_IDEN_CNTXT", length = 255)),
        @AttributeOverride(name = "facilitySiteType.facilitySiteTypeCode", column = @Column(name = "FAC_SITE_CODE", length = 255)),
        @AttributeOverride(name = "facilitySiteType.facilitySiteTypeName", column = @Column(name = "FAC_SITE_TYPE_NAME", length = 255)),
        @AttributeOverride(name = "facilitySiteType.facilitySiteTypeCodeListIdentifier.value", column = @Column(name = "FAC_SITE_LST_IDEN_VALUE", length = 255)),
        @AttributeOverride(name = "facilitySiteType.facilitySiteTypeCodeListIdentifier.codeListVersionIdentifier", column = @Column(name = "FAC_SITE_LST_IDEN", length = 255)),
        @AttributeOverride(name = "facilitySiteType.facilitySiteTypeCodeListIdentifier.codeListVersionAgencyIdentifier", column = @Column(name = "FAC_SITE_LST_AGCY_IDEN", length = 255))
    })
    public FacilitySiteIdentityDataType getFacilitySiteIdentity() {
        return facilitySiteIdentity;
    }

    /**
     * Sets the value of the facilitySiteIdentity property.
     * 
     * @param value
     *     allowed object is
     *     {@link FacilitySiteIdentityDataType }
     *     
     */
    public void setFacilitySiteIdentity(FacilitySiteIdentityDataType value) {
        this.facilitySiteIdentity = value;
    }

    @Transient
    public boolean isSetFacilitySiteIdentity() {
        return (this.facilitySiteIdentity!= null);
    }

    /**
     * Gets the value of the locationAddress property.
     * 
     * @return
     *     possible object is
     *     {@link LocationAddressDataType }
     *     
     */
    @Embedded
    @AttributeOverrides({
        @AttributeOverride(name = "locationAddressText", column = @Column(name = "LOC_ADDR_TXT", length = 255)),
        @AttributeOverride(name = "supplementalLocationText", column = @Column(name = "SUPPL_LOC_TXT", length = 255)),
        @AttributeOverride(name = "localityName", column = @Column(name = "LOCALITY_NAME", length = 255)),
        @AttributeOverride(name = "tribalLandName", column = @Column(name = "TRIBAL_LAND_NAME", length = 255)),
        @AttributeOverride(name = "tribalLandIndicator", column = @Column(name = "TRIBAL_LAND_IND", length = 255)),
        @AttributeOverride(name = "locationDescriptionText", column = @Column(name = "LOC_DESC_TXT", length = 255)),
        @AttributeOverride(name = "stateIdentity.stateCode", column = @Column(name = "ST_CODE", length = 255)),
        @AttributeOverride(name = "stateIdentity.stateName", column = @Column(name = "ST_NAME", length = 255)),
        @AttributeOverride(name = "stateIdentity.stateCodeListIdentifier.value", column = @Column(name = "ST_LST_IDEN_VALUE", length = 255)),
        @AttributeOverride(name = "stateIdentity.stateCodeListIdentifier.codeListVersionIdentifier", column = @Column(name = "ST_LST_IDEN", length = 255)),
        @AttributeOverride(name = "stateIdentity.stateCodeListIdentifier.codeListVersionAgencyIdentifier", column = @Column(name = "ST_LST_AGCY_IDEN", length = 255)),
        @AttributeOverride(name = "addressPostalCode.value", column = @Column(name = "ADDR_POSTAL_CODE_VALUE", length = 255)),
        @AttributeOverride(name = "addressPostalCode.addressPostalCodeContext", column = @Column(name = "ADDR_POSTAL_CODE_CNTXT", length = 255)),
        @AttributeOverride(name = "countryIdentity.countryCode", column = @Column(name = "CNTRY_CODE", length = 255)),
        @AttributeOverride(name = "countryIdentity.countryName", column = @Column(name = "CNTRY_NAME", length = 255)),
        @AttributeOverride(name = "countryIdentity.countryCodeListIdentifier.value", column = @Column(name = "CNTRY_LST_IDEN_VALUE", length = 255)),
        @AttributeOverride(name = "countryIdentity.countryCodeListIdentifier.codeListVersionIdentifier", column = @Column(name = "CNTRY_LST_IDEN", length = 255)),
        @AttributeOverride(name = "countryIdentity.countryCodeListIdentifier.codeListVersionAgencyIdentifier", column = @Column(name = "CNTRY_LST_AGCY_IDEN", length = 255)),
        @AttributeOverride(name = "countyIdentity.countyCode", column = @Column(name = "CNTY_CODE", length = 255)),
        @AttributeOverride(name = "countyIdentity.countyName", column = @Column(name = "CNTY_NAME", length = 255)),
        @AttributeOverride(name = "countyIdentity.countyCodeListIdentifier.value", column = @Column(name = "CNTY_LST_IDEN_VALUE", length = 255)),
        @AttributeOverride(name = "countyIdentity.countyCodeListIdentifier.codeListVersionIdentifier", column = @Column(name = "CNTY_LST_IDEN", length = 255)),
        @AttributeOverride(name = "countyIdentity.countyCodeListIdentifier.codeListVersionAgencyIdentifier", column = @Column(name = "CNTY_LST_AGCY_IDEN", length = 255))
    })
    public LocationAddressDataType getLocationAddress() {
        return locationAddress;
    }

    /**
     * Sets the value of the locationAddress property.
     * 
     * @param value
     *     allowed object is
     *     {@link LocationAddressDataType }
     *     
     */
    public void setLocationAddress(LocationAddressDataType value) {
        this.locationAddress = value;
    }

    @Transient
    public boolean isSetLocationAddress() {
        return (this.locationAddress!= null);
    }

    /**
     * 
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Id
    @Column(name = "IC_FAC_ID")
    public String getDbid() {
        return dbid;
    }

    /**
     * 
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setDbid(String value) {
        this.dbid = value;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof FacilityDataType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final FacilityDataType that = ((FacilityDataType) object);
        {
            FacilitySiteIdentityDataType lhsFacilitySiteIdentity;
            lhsFacilitySiteIdentity = this.getFacilitySiteIdentity();
            FacilitySiteIdentityDataType rhsFacilitySiteIdentity;
            rhsFacilitySiteIdentity = that.getFacilitySiteIdentity();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "facilitySiteIdentity", lhsFacilitySiteIdentity), LocatorUtils.property(thatLocator, "facilitySiteIdentity", rhsFacilitySiteIdentity), lhsFacilitySiteIdentity, rhsFacilitySiteIdentity)) {
                return false;
            }
        }
        {
            LocationAddressDataType lhsLocationAddress;
            lhsLocationAddress = this.getLocationAddress();
            LocationAddressDataType rhsLocationAddress;
            rhsLocationAddress = that.getLocationAddress();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "locationAddress", lhsLocationAddress), LocatorUtils.property(thatLocator, "locationAddress", rhsLocationAddress), lhsLocationAddress, rhsLocationAddress)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            FacilitySiteIdentityDataType theFacilitySiteIdentity;
            theFacilitySiteIdentity = this.getFacilitySiteIdentity();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "facilitySiteIdentity", theFacilitySiteIdentity), currentHashCode, theFacilitySiteIdentity);
        }
        {
            LocationAddressDataType theLocationAddress;
            theLocationAddress = this.getLocationAddress();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "locationAddress", theLocationAddress), currentHashCode, theLocationAddress);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
