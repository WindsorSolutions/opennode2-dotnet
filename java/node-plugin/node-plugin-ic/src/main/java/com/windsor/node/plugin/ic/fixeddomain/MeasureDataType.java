//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2013.08.26 at 02:36:56 PM PDT 
//


package com.windsor.node.plugin.ic.fixeddomain;

import java.io.Serializable;
import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Basic;
import javax.persistence.Column;
import javax.persistence.Embeddable;
import javax.persistence.Embedded;
import javax.persistence.Transient;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for MeasureDataType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="MeasureDataType">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element ref="{http://www.exchangenetwork.net/schema/IC/1}MeasureValue" minOccurs="0"/>
 *         &lt;element ref="{http://www.exchangenetwork.net/schema/IC/1}MeasureUnit" minOccurs="0"/>
 *         &lt;element ref="{http://www.exchangenetwork.net/schema/IC/1}MeasurePrecisionText" minOccurs="0"/>
 *         &lt;element ref="{http://www.exchangenetwork.net/schema/IC/1}ResultQualifier" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "MeasureDataType", propOrder = {
    "measureValue",
    "measureUnit",
    "measurePrecisionText",
    "resultQualifier"
})
@Embeddable
public class MeasureDataType
    implements Serializable, Equals, HashCode
{

    private final static long serialVersionUID = 1L;
    @XmlElement(name = "MeasureValue")
    protected String measureValue;
    @XmlElement(name = "MeasureUnit")
    protected MeasureUnitDataType measureUnit;
    @XmlElement(name = "MeasurePrecisionText")
    protected String measurePrecisionText;
    @XmlElement(name = "ResultQualifier")
    protected ResultQualifierDataType resultQualifier;

    /**
     * Gets the value of the measureValue property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "MEAS_VALUE", length = 255)
    public String getMeasureValue() {
        return measureValue;
    }

    /**
     * Sets the value of the measureValue property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setMeasureValue(String value) {
        this.measureValue = value;
    }

    @Transient
    public boolean isSetMeasureValue() {
        return (this.measureValue!= null);
    }

    /**
     * Gets the value of the measureUnit property.
     * 
     * @return
     *     possible object is
     *     {@link MeasureUnitDataType }
     *     
     */
    @Embedded
    @AttributeOverrides({
        @AttributeOverride(name = "measureUnitCode", column = @Column(name = "MEAS_UNIT_CODE", length = 255)),
        @AttributeOverride(name = "measureUnitName", column = @Column(name = "MEAS_UNIT_NAME", length = 255)),
        @AttributeOverride(name = "measureUnitCodeListIdentifier.value", column = @Column(name = "VALUE", length = 255)),
        @AttributeOverride(name = "measureUnitCodeListIdentifier.codeListVersionIdentifier", column = @Column(name = "CODE_LST_IDEN", length = 255)),
        @AttributeOverride(name = "measureUnitCodeListIdentifier.codeListVersionAgencyIdentifier", column = @Column(name = "CODE_LST_AGENCY_IDEN", length = 255))
    })
    public MeasureUnitDataType getMeasureUnit() {
        return measureUnit;
    }

    /**
     * Sets the value of the measureUnit property.
     * 
     * @param value
     *     allowed object is
     *     {@link MeasureUnitDataType }
     *     
     */
    public void setMeasureUnit(MeasureUnitDataType value) {
        this.measureUnit = value;
    }

    @Transient
    public boolean isSetMeasureUnit() {
        return (this.measureUnit!= null);
    }

    /**
     * Gets the value of the measurePrecisionText property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Basic
    @Column(name = "MEAS_PRECISION_TXT", length = 255)
    public String getMeasurePrecisionText() {
        return measurePrecisionText;
    }

    /**
     * Sets the value of the measurePrecisionText property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setMeasurePrecisionText(String value) {
        this.measurePrecisionText = value;
    }

    @Transient
    public boolean isSetMeasurePrecisionText() {
        return (this.measurePrecisionText!= null);
    }

    /**
     * Gets the value of the resultQualifier property.
     * 
     * @return
     *     possible object is
     *     {@link ResultQualifierDataType }
     *     
     */
    @Embedded
    @AttributeOverrides({
        @AttributeOverride(name = "resultQualifierCode", column = @Column(name = "RESULT_QUAL_CODE", length = 255)),
        @AttributeOverride(name = "resultQualifierName", column = @Column(name = "RESULT_QUAL_NAME", length = 255)),
        @AttributeOverride(name = "resultQualifierCodeListIdentifier.value", column = @Column(name = "VALUE", length = 255)),
        @AttributeOverride(name = "resultQualifierCodeListIdentifier.codeListVersionIdentifier", column = @Column(name = "CODE_LST_IDEN", length = 255)),
        @AttributeOverride(name = "resultQualifierCodeListIdentifier.codeListVersionAgencyIdentifier", column = @Column(name = "CODE_LST_AGENCY_IDEN", length = 255))
    })
    public ResultQualifierDataType getResultQualifier() {
        return resultQualifier;
    }

    /**
     * Sets the value of the resultQualifier property.
     * 
     * @param value
     *     allowed object is
     *     {@link ResultQualifierDataType }
     *     
     */
    public void setResultQualifier(ResultQualifierDataType value) {
        this.resultQualifier = value;
    }

    @Transient
    public boolean isSetResultQualifier() {
        return (this.resultQualifier!= null);
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof MeasureDataType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final MeasureDataType that = ((MeasureDataType) object);
        {
            String lhsMeasureValue;
            lhsMeasureValue = this.getMeasureValue();
            String rhsMeasureValue;
            rhsMeasureValue = that.getMeasureValue();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "measureValue", lhsMeasureValue), LocatorUtils.property(thatLocator, "measureValue", rhsMeasureValue), lhsMeasureValue, rhsMeasureValue)) {
                return false;
            }
        }
        {
            MeasureUnitDataType lhsMeasureUnit;
            lhsMeasureUnit = this.getMeasureUnit();
            MeasureUnitDataType rhsMeasureUnit;
            rhsMeasureUnit = that.getMeasureUnit();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "measureUnit", lhsMeasureUnit), LocatorUtils.property(thatLocator, "measureUnit", rhsMeasureUnit), lhsMeasureUnit, rhsMeasureUnit)) {
                return false;
            }
        }
        {
            String lhsMeasurePrecisionText;
            lhsMeasurePrecisionText = this.getMeasurePrecisionText();
            String rhsMeasurePrecisionText;
            rhsMeasurePrecisionText = that.getMeasurePrecisionText();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "measurePrecisionText", lhsMeasurePrecisionText), LocatorUtils.property(thatLocator, "measurePrecisionText", rhsMeasurePrecisionText), lhsMeasurePrecisionText, rhsMeasurePrecisionText)) {
                return false;
            }
        }
        {
            ResultQualifierDataType lhsResultQualifier;
            lhsResultQualifier = this.getResultQualifier();
            ResultQualifierDataType rhsResultQualifier;
            rhsResultQualifier = that.getResultQualifier();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "resultQualifier", lhsResultQualifier), LocatorUtils.property(thatLocator, "resultQualifier", rhsResultQualifier), lhsResultQualifier, rhsResultQualifier)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            String theMeasureValue;
            theMeasureValue = this.getMeasureValue();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "measureValue", theMeasureValue), currentHashCode, theMeasureValue);
        }
        {
            MeasureUnitDataType theMeasureUnit;
            theMeasureUnit = this.getMeasureUnit();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "measureUnit", theMeasureUnit), currentHashCode, theMeasureUnit);
        }
        {
            String theMeasurePrecisionText;
            theMeasurePrecisionText = this.getMeasurePrecisionText();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "measurePrecisionText", theMeasurePrecisionText), currentHashCode, theMeasurePrecisionText);
        }
        {
            ResultQualifierDataType theResultQualifier;
            theResultQualifier = this.getResultQualifier();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "resultQualifier", theResultQualifier), currentHashCode, theResultQualifier);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
