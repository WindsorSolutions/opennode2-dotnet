<?xml version="1.0" encoding="UTF-8"?>
<project name="PluginBuildLogic" basedir="." default="build.zip">

	<!-- this file is called by individual plugin build.xml files -->
	<!-- filesystem paths are relative to the script that imports this one -->
	<property name="resource.base.dir" value="${basedir}/../../resources" />

	<property file="../../ant/shared.plugin.properties" />

	<property name="plugin.resource.dir" value="${resource.base.dir}/${plugin.name}" />
	<property name="dist" value="${basedir}/../../dist" />
	<property name="tmp" value="${basedir}/../../build/tmp" />
	<property name="plugin.dir" value="${plugin.name}-source-plugin" />
	<property name="log4j.properties" value="log4j.properties" />
	<property name="src" value="${basedir}/../../src" />
	<property name="test" value="${basedir}/../../test" />
	<property name="build" value="${basedir}/../../build/${plugin.name}" />
	<property name="lib" value="${resource.base.dir}/lib-build" />
	<property name="compile.includes" value="*.xml, *.properties" />
	<property name="manifest.src" value="${basedir}/../MANIFEST.MF" />
	<property name="plugin.pkg.root" value="com/windsor/node/plugin" />
	<property name="plugin.common" value="${plugin.pkg.root}/common" />
	<property name="plugin.pkg" value="${plugin.pkg.root}/${plugin.name}" />

	<property name="common.jar.name" value="nodeCommon.jar" />
	<property name="logic.jar.name" value="nodeLogic.jar" />
	<property name="common.jar.file" value="${lib}/${common.jar.name}" />
	<property name="logic.jar.file" value="${lib}/${logic.jar.name}" />

	<property name="buildtime.jar.location" value="${lib}" />

	<fileset id="lib.jars" includes="*.jar" dir="${lib}" />
	<fileset id="junit.jar" file="${lib}/junit.jar" />
	<fileset id="common.jar" dir="${lib}" includes="${common.jar.name}" />
	<fileset id="logic.jar" dir="${lib}" includes="${logic.jar.name}" />

	<path id="build.class.path">
		<fileset refid="common.jar" />
		<fileset refid="logic.jar" />
		<fileset refid="lib.jars" />
		<fileset refid="junit.jar" />
	</path>

	<!-- targets for all plugins -->

	<target name="get.env">
		<echo message="Build environment: ${plugin.name}" />
	</target>

	<target name="project.jar.test">
		<condition property="jars.not.available">
			<or>
				<not>
					<available file="${common.jar.file}" />
				</not>
				<not>
					<available file="${logic.jar.file}" />
				</not>
			</or>
		</condition>
		<echo message="project jars NOT .available = ${jars.not.available}" />
	</target>

	<target name="pass.fail" if="jars.not.available">
		<fail message="Both nodeCommon.jar and nodeLogic.jar must exist in ${lib}." />
	</target>

	<target name="clean">
		<echo message="Cleaning ${build} and ${dist}/${plugin.dir}" />
		<mkdir dir="${build}" />
		<mkdir dir="${dist}/${plugin.dir}" />
		<mkdir dir="${tmp}" />
		<delete includeemptydirs="true">
			<fileset dir="${build}" includes="**/*" />
			<fileset dir="${dist}/${plugin.dir}" includes="**/*" />
			<fileset dir="${tmp}" includes="**/*" />
		</delete>
	</target>

	<target name="init" depends="project.jar.test">
		<antcall target="pass.fail" />
		<antcall target="clean" />
		<echo message="Using environment settings from ${plugin.name}" />
		<echo message="Output file for plugin ${plugin.name} is ${plugin.name}.jar" />

		<mkdir dir="${build}" />
		<mkdir dir="${dist}" />

		<property name="classes" value="${build}" />

		<echo message="java.class.path = ${java.class.path}" />
		<echo message="resource.base.dir = ${resource.base.dir}" />
		<echo message="build directory = ${build}" />
		<echo message="classes = ${classes}" />
		<echo message="dist = ${dist}" />


		<available file="${test}" type="dir" property="hasTests" />

		<copy file="${manifest.src}" todir="${tmp}" overwrite="yes" verbose="${verbosity}" preservelastmodified="false" />
		<property name="manifest.file" value="${tmp}/MANIFEST.MF" />
		<tstamp>
			<format property="build.time" pattern="dd MMMM, yyyy hh:mm z" timezone="America/Los_Angeles" />
		</tstamp>
		<replace file="${manifest.file}" token="@project.title@" value="${project.title}" summary="true" />
		<replace file="${manifest.file}" token="@build.time@" value="${build.time}" summary="true" />
		<replace file="${manifest.file}" token="@target.env@" value="${plugin.dir}" summary="true" />

		<!-- perform plugin-specific setup -->
		<echo message="Making ${plugin.name}.zip in ${dist}/${plugin.dir}" />
		<echo message="Doing plugin-specifics for ${plugin.name} plugin" />
		<ant dir="${basedir}" target="do.plugin.specifics" inheritAll="true" inheritRefs="true" />

	</target>

	<target name="compile.src" depends="init" description="compiles with debug symbols, warnings on">
		<javac debug="on" memoryMaximumSize="256m" memoryInitialSize="256m" fork="true" destdir="${classes}" srcdir="${src}" source="1.4" target="1.4" nowarn="false" failonerror="true">
			<classpath refid="build.class.path" />
			<include name="${plugin.pkg}/**" />
			<include name="${plugin.common}/**" />
		</javac>
		<copy todir="${classes}" verbose="${verbosity}" preservelastmodified="false">
			<fileset dir="${src}" includes="${compile.includes}" />
		</copy>
	</target>

	<target name="compile.test" depends="init" description="compiles with debug symbols, warnings off">
		<javac debug="on" memoryMaximumSize="256m" memoryInitialSize="256m" fork="true" destdir="${classes}" srcdir="${src}" source="1.4" target="1.4" nowarn="true" failonerror="false">
			<classpath refid="build.class.path" />
			<include name="${plugin.pkg.root}/*" />
			<include name="${plugin.pkg}/**" />
		</javac>
		<javac debug="on" memoryMaximumSize="256m" memoryInitialSize="256m" fork="true" destdir="${classes}" srcdir="${test}" source="1.4" target="1.4" nowarn="true" failonerror="false">
			<classpath refid="build.class.path" />
			<include name="${plugin.pkg.root}/*" />
			<include name="${plugin.pkg}/**" />
		</javac>
		<copy todir="${classes}" verbose="${verbosity}" preservelastmodified="false">
			<fileset dir="${test}" includes="plugin.properties,pluginSupport.xml,${plugin.name}.xml" />
			<fileset dir="${test}" includes="${plugin.pkg.root}/*" />
			<fileset dir="${test}" includes="${plugin.pkg}/**" />
			<fileset dir="${src}" includes="${plugin.pkg.root}/*" />
			<fileset dir="${src}" includes="${plugin.pkg}/**" />
		</copy>
		<property name="isTestBuild" value="true" />
	</target>

	<target depends="compile.src" name="build.jar" description="Makes a production-worthy jar file">
		<echo message="Making ${plugin.name}.jar in ${dist}/${plugin.dir}" />
		<mkdir dir="${dist}/${plugin.dir}" />
		<property name="outfile" value="${dist}/${plugin.dir}/${plugin.name}.jar" />
		<jar destfile="${outfile}" manifest="${manifest.file}">
			<fileset excludes="**/Test*.class" dir="${build}" />
		</jar>
		<checksum file="${outfile}" forceOverwrite="yes" />
		<checksum file="${outfile}" algorithm="SHA" fileext=".asc" forceOverwrite="yes" />
	</target>

	<target depends="build.jar" name="build.zip" description="Makes a production-worthy zip file ready for uploading">
		<echo message="Making ${plugin.name}.zip in ${dist}/${plugin.dir}" />
		<mkdir dir="${dist}/${plugin.dir}" />
		<property name="zipfile" value="${dist}/${plugin.dir}/${plugin.name}.zip" />
		<zip destfile="${zipfile}" basedir="${dist}/${plugin.dir}" includes="${plugin.name}.jar, *.zip, *.vm, *.xsd" excludes="${plugin.name}.zip" />
		<checksum file="${zipfile}" forceOverwrite="yes" />
		<checksum file="${zipfile}" algorithm="SHA" fileext=".asc" forceOverwrite="yes" />
	</target>

	<target name="build.jar.run.tests" description="Runs unit tests, then makes a clean production-worthy archive file.">
		<antcall target="run.tests" inheritAll="true" inheritRefs="true" />
		<antcall target="clean" inheritAll="true" inheritRefs="true" />
		<antcall target="build.jar" inheritAll="true" inheritRefs="true" />
	</target>

	<target depends="compile.test" name="build.test.jar" description="Makes a jar file that includes unit tests">
		<echo message="Making ${plugin.name}.jar in ${dist}/${plugin.dir}" />
		<mkdir dir="${dist}/${plugin.dir}" />
		<property name="outfile" value="${dist}/${plugin.dir}/${plugin.name}.jar" />
		<jar destfile="${outfile}" manifest="${manifest.file}">
			<fileset dir="${build}" />
		</jar>
		<checksum file="${outfile}" forceOverwrite="yes" />
		<checksum file="${outfile}" algorithm="SHA" fileext=".asc" forceOverwrite="yes" />
	</target>

	<target depends="compile.test" name="build.test.zip" description="Makes a zip file that includes unit tests">
		<echo message="Making ${plugin.name}.jar in ${dist}/${plugin.dir}" />
		<mkdir dir="${dist}/${plugin.dir}" />
		<property name="zipfile" value="${dist}/${plugin.dir}/${plugin.name}.zip" />
		<zip destfile="${zipfile}" basedir="${dist}/${plugin.dir}" includes="${plugin.name}.jar, *.zip, *.vm, *.xsd" />
		<checksum file="${zipfile}" forceOverwrite="yes" />
		<checksum file="${zipfile}" algorithm="SHA" fileext=".asc" forceOverwrite="yes" />
	</target>

	<target depends="compile.test" name="run.tests" if="hasTests" description="Run standard JUnit tests">
		<echo message="Running tests within ${classes}..." />

		<!--
		<property name="nos.root" value="${basedir}/../Wnos_Service" />
		<property name="nos.props" value="${nos.root}/env/${plugin.dir}" />
		<property name="nos.classes" value="${nos.root}/resources/WEB-INF/classes" />
		<property name="nos.conf" value="${nos.classes}/conf" />
		<property name="nos.template" value="${nos.classes}/template" />
        -->

		<junit printsummary="on" fork="no" haltonerror="yes" haltonfailure="yes" showoutput="yes" filtertrace="on">
			<classpath>
				<pathelement location="${nos.props}" />
				<pathelement location="${nos.classes}" />
				<pathelement location="${nos.conf}" />
				<pathelement location="${nos.template}" />
				<pathelement location="${classes}" />
				<path refid="build.class.path" />
			</classpath>
			<formatter type="plain" usefile="no" />
			<batchtest fork="no">
				<fileset dir="${classes}">
					<include name="**/*Test*.class" />
					<exclude name="**/All*Tests.class" />
					<exclude name="**/Base*Test*.class" />
				</fileset>
			</batchtest>
		</junit>
	</target>

	<!-- END targets for all plugins -->
</project>