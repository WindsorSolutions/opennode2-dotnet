<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
                http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd">
	<!--
		This file includes (by copying) contents of much of the NOS
		configuration data, so plugins can instantiate NodeClients for
		handling web services calls on their own when appropriate
	-->

	<description>
		Put here only the services that you want to be available
		to the plugins
	</description>

	<!-- Properties -->
	<bean id="pluginPropertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>file:${node.home}/conf/nos.properties</value>
                <value>file:${node.home}/conf/naas.properties</value>
                <value>file:${node.home}/conf/jdbc.properties</value>
			</list>
		</property>
	</bean>

	<!--  Standard helpers -->
	<bean name="uuidGenerator" class="com.windsor.node.service.helper.id.UUIDGenerator" />

	<bean name="zipCompressionService"
		class="com.windsor.node.service.helper.zip.ZipCompressionService">
		<property name="tempDir" value="${path.temp.dir}" />
	</bean>

	<bean name="settingService"
		class="com.windsor.node.service.helper.settings.SettingServiceProvider">
		<property name="tempDir" value="${path.temp.dir}" />
		<property name="logDir" value="${path.log.dir}" />
	</bean>

	<bean name="headerServiceProvider"
		class="com.windsor.node.service.helper.header.SimpleHeaderDocumentHelper">
		<property name="settingProvider" ref="settingService" />
	</bean>

	<bean name="remoteFileResourceHelper"
		class="com.windsor.node.service.helper.web.SimpleRemoteFileResourceHelper">
		<property name="settingProvider" ref="settingService" />
	</bean>

	<!-- END Standard helpers -->

	<!-- DAOs -->
	<bean id="accountDao" class="com.windsor.node.data.dao.jdbc.JdbcAccountDao">
		<property name="dataSource" ref="jdbcDataSource" />
		<property name="idGenerator" ref="uuidGenerator" />
		<property name="userAccessPolicyDao" ref="policyDao" />
	</bean>

	<bean id="policyDao" class="com.windsor.node.data.dao.jdbc.JdbcUserAccessPolicyDao">
		<property name="dataSource" ref="jdbcDataSource" />
		<property name="idGenerator" ref="uuidGenerator" />
	</bean>

	<bean id="activityDao" class="com.windsor.node.data.dao.jdbc.JdbcActivityDao">
		<property name="dataSource" ref="jdbcDataSource" />
		<property name="idGenerator" ref="uuidGenerator" />
	</bean>

	<bean id="flowDao" class="com.windsor.node.data.dao.jdbc.JdbcFlowDao">
		<property name="dataSource" ref="jdbcDataSource" />
		<property name="scheduleDao" ref="scheduleDao" />
		<property name="serviceDao" ref="serviceDao" />
		<property name="idGenerator" ref="uuidGenerator" />
		<property name="userAccessPolicyDao" ref="policyDao" />
	</bean>

	<bean id="notificationDao" class="com.windsor.node.data.dao.jdbc.JdbcNotificationDao">
		<property name="dataSource" ref="jdbcDataSource" />
		<property name="flowDao" ref="flowDao" />
		<property name="accountDao" ref="accountDao" />
		<property name="idGenerator" ref="uuidGenerator" />
	</bean>

	<bean id="scheduleDao" class="com.windsor.node.data.dao.jdbc.JdbcScheduleDao">
		<property name="dataSource" ref="jdbcDataSource" />
		<property name="idGenerator" ref="uuidGenerator" />
	</bean>

	<bean id="configDao" class="com.windsor.node.data.dao.jdbc.JdbcConfigDao">
		<property name="dataSource" ref="jdbcDataSource" />
		<property name="idGenerator" ref="uuidGenerator" />
	</bean>

	<bean id="partnerDao" class="com.windsor.node.data.dao.jdbc.JdbcPartnerDao">
		<property name="dataSource" ref="jdbcDataSource" />
		<property name="idGenerator" ref="uuidGenerator" />
	</bean>

	<bean id="transactionDao" class="com.windsor.node.data.dao.jdbc.JdbcTransactionDao">
		<property name="dataSource" ref="jdbcDataSource" />
		<property name="idGenerator" ref="uuidGenerator" />
		<property name="flowDao" ref="flowDao" />
		<property name="accountDao" ref="accountDao" />
        <property name="partnerDao" ref="partnerDao" />
	</bean>

	<bean id="requestDao" class="com.windsor.node.data.dao.jdbc.JdbcRequestDao">
		<property name="dataSource" ref="jdbcDataSource" />
		<property name="serviceDao" ref="serviceDao" />
		<property name="idGenerator" ref="uuidGenerator" />
	</bean>

	<bean id="serviceDao" class="com.windsor.node.data.dao.jdbc.JdbcServiceDao">
		<property name="dataSource" ref="jdbcDataSource" />
		<property name="connectionDao" ref="connectionDao" />
		<property name="idGenerator" ref="uuidGenerator" />
	</bean>

	<bean id="connectionDao" class="com.windsor.node.data.dao.jdbc.JdbcConnectionDao">
		<property name="dataSource" ref="jdbcDataSource" />
		<property name="idGenerator" ref="uuidGenerator" />
	</bean>

	<bean id="pluginDao" class="com.windsor.node.data.dao.jdbc.JdbcPluginDao">
		<property name="dataSource" ref="jdbcDataSource" />
		<property name="idGenerator" ref="uuidGenerator" />
	</bean>

    <bean id="flowSecurityDao"
        class="com.windsor.node.data.dao.jdbc.JdbcFlowSecurityDao">
        <property name="dataSource" ref="jdbcDataSource" />
        <property name="idGenerator" ref="uuidGenerator" />
    </bean>

	<!-- <bean id="jdbcDataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="poolPreparedStatements" value="true" />
		<property name="initialSize" value="${jdbc.initialSize}" />
		<property name="maxActive" value="${jdbc.maxActive}" />
		<property name="maxIdle" value="${jdbc.maxIdle}" />
        <property name="testOnBorrow" value="true"/>
        <property name="testOnReturn" value="false"/>
        <property name="testWhileIdle" value="true"/>
        <property name="timeBetweenEvictionRunsMillis" value="10000"/>
        <property name="numTestsPerEvictionRun" value="5"/>
        <property name="minEvictableIdleTimeMillis" value="300000" />
        <property name="validationQuery" value="select count(1) from NAccount"/>
	</bean> -->

    <bean id="jdbcDataSource" class="com.zaxxer.hikari.HikariDataSource" destroy-method="shutdown">
        <constructor-arg>
            <bean class="com.zaxxer.hikari.HikariConfig">
                <constructor-arg>
                    <props>
                        <prop key="dataSource.URL">${jdbc.url}</prop>
                        <prop key="dataSource.user">${jdbc.username}</prop>
                        <prop key="dataSource.password">${jdbc.password}</prop>
                    </props>
                </constructor-arg>
                <property name="dataSourceClassName" value="${jdbc.dataSourceClassName}" />
                <property name="connectionTestQuery" value="select count(1) from NAccount" />
                <!-- <property name="autoCommit" value="false" /> -->
                <property name="poolName" value="springHikariCP" />
            </bean>
        </constructor-arg>
    </bean>
	<!-- END DAOs -->

	<!--  Node Client & supporting beans -->

	<bean id="httpClient" class="org.apache.commons.httpclient.HttpClient"
		lazy-init="true" />

	<bean id="httpInvoker1"
		class="org.springframework.remoting.httpinvoker.CommonsHttpInvokerRequestExecutor"
		lazy-init="true">
		<property name="readTimeout" value="0" />
	</bean>

	<bean id="httpInvoker2"
		class="org.springframework.remoting.httpinvoker.CommonsHttpInvokerRequestExecutor"
		lazy-init="true">
		<property name="readTimeout" value="0" />
	</bean>


	<!-- Node Client v.1.1 -->
	<bean id="nodeClient11"
		class="org.springframework.remoting.httpinvoker.HttpInvokerProxyFactoryBean"
		lazy-init="true">
		<property name="serviceUrl" value="${url.node.endpoint1Client}" />
		<property name="serviceInterface"
			value="com.windsor.node.common.util.NodeClientService" />
		<property name="httpInvokerRequestExecutor" ref="httpInvoker1" />
	</bean>

	<!-- Node Client v.2.0 -->
	<bean id="nodeClient21"
		class="org.springframework.remoting.httpinvoker.HttpInvokerProxyFactoryBean"
		lazy-init="true">
		<property name="serviceUrl" value="${url.node.endpoint2Client}" />
		<property name="serviceInterface"
			value="com.windsor.node.common.util.NodeClientService" />
		<property name="httpInvokerRequestExecutor" ref="httpInvoker2" />
	</bean>

	<!-- NAAS -->
	<bean id="naasConfig" class="com.windsor.node.conf.NAASConfig">
		<property name="authEndpoint" value="${url.naas.auth}" />
		<property name="mgrEndpoint" value="${url.naas.mgr}" />
		<property name="runtimeAccount" ref="runtimeAccountInfo" />
		<property name="adminAccount" ref="adminAccountInfo" />
		<property name="nodeId" value="${id.node}" />
	</bean>

	<!-- Admin -->
	<bean id="adminAccountInfo" class="com.windsor.node.common.domain.NAASAccount">
		<property name="username" value="${naas.admin.username}" />
		<property name="password" value="${naas.admin.password}" />
		<property name="authMethod" value="${naas.admin.authMeth}" />
		<property name="domain" value="default" />
	</bean>

	<!-- Runtime -->
	<bean id="runtimeAccountInfo" class="com.windsor.node.common.domain.NAASAccount">
		<property name="username" value="${naas.runtime.username}" />
		<property name="password" value="${naas.runtime.password}" />
		<property name="authMethod" value="${naas.runtime.authMeth}" />
		<property name="domain" value="default" />
	</bean>

	<!-- NOS CONF -->
	<bean id="nosConfig" class="com.windsor.node.conf.NOSConfig">
		<property name="webServiceEndpoint1" value="${url.node.endpoint1}" />
		<property name="webServiceEndpoint2" value="${url.node.endpoint2}" />
		<property name="adminUrl" value="${url.node.admin}" />
		<property name="nodeAdminEmail" value="${smtp.from.email}" />
		<property name="adminWhiteList">
			<list>
				<value>127.0.0.1</value>
				<value>70.102.94.202</value>
				<value>${ip.whitelist.subnet}</value>
			</list>
		</property>
		<property name="pluginDir" value="${path.plugin.dir}" />
		<property name="tempDir" value="${path.temp.dir}" />
		<property name="skipNaas" value="false" />
        <property name="nodeName" value="${node.name}" />
        <property name="orgIdentifier" value="${organization.identifier}" />
        <property name="deploymentType" value="${node.deployment.type}" />
        <property name="publicV2endpointUrl" value="${public.v2.endpoint.url}" />
        <property name="boundingCoordinateEast" value="${bounding.coordinate.east}" />
        <property name="boundingCoordinateNorth" value="${bounding.coordinate.north}" />
        <property name="boundingCoordinateSouth" value="${bounding.coordinate.south}" />
        <property name="boundingCoordinateWest" value="${bounding.coordinate.west}" />
	</bean>

	<!-- NODE CLIENT FACTORY -->
	<bean id="nodeClientFactory"
		class="com.windsor.node.service.helper.client.NodeClientFactory"
		lazy-init="true">
		<property name="naasConfig" ref="naasConfig" />
		<property name="nosConfig" ref="nosConfig" />
		<property name="client11" ref="nodeClient11" />
		<property name="client21" ref="nodeClient21" />
	</bean>

	<!-- END Node Client & supporting beans -->

    <!--  Support for ENDS2 plugin to load other plugin implementors -->
    <bean id="pluginHelper" class="com.windsor.node.plugin.WnosPluginHelper">
        <property name="nosConfig" ref="nosConfig" />
        <property name="classLoader" ref="classLoader" />
        <property name="compressionHelper" ref="zipCompressionService" />
        <property name="configDao" ref="configDao" />
        <property name="pluginDao" ref="pluginDao" />
        <property name="serviceFactory" ref="serviceFactory" />
        <property name="nodeClientFactory" ref="nodeClientFactory" />
        <property name="partnerProvider" ref="partnerDao" />
        <!-- FIXME add notificationHelper mailHelper -->
    </bean>

    <bean id="classLoader" class="com.windsor.node.plugin.CachingPluginClassLoader" />
    <bean id="serviceFactory" class="com.windsor.node.service.helper.NoOpServiceFactory" />
    <!--  END Support for ENDS2 plugin to load other plugin implementors -->

</beans>
